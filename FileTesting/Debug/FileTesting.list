
FileTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f6c  08003f6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f6c  08003f6c  00013f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f74  08003f74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f74  08003f74  00013f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f78  08003f78  00013f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08003f88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003f88  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf15  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b12  00000000  00000000  0002cf51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002f458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029643  00000000  00000000  0002fdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4c8  00000000  00000000  000593f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff00f  00000000  00000000  000658bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001648ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000288c  00000000  00000000  0016491c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003e4c 	.word	0x08003e4c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003e4c 	.word	0x08003e4c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0


  /* USER CODE BEGIN 1 */
	//lpuart1 for communication between laptop and board
	//huart2 for communication between board and camera
	const char *h2 = "huart2\n";
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <main+0x40>)
 8000508:	61fb      	str	r3, [r7, #28]
	const char *h3 = "m\n";
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <main+0x44>)
 800050c:	61bb      	str	r3, [r7, #24]
	const char *lp = "000F";
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <main+0x48>)
 8000510:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fd0e 	bl	8000f32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f819 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f8f5 	bl	8000708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051e:	f000 f8a7 	bl	8000670 <MX_USART2_UART_Init>
  //MX_USART3_UART_Init();
  MX_LPUART1_UART_Init();
 8000522:	f000 f859 	bl	80005d8 <MX_LPUART1_UART_Init>
	   * char hex_string[] = "0x1F";
		 char *endptr;
		 int hex_int = (int) strtol(hex_string, &endptr, 16);
	   *
	   */
	  	  	  memset(bruh, '\0', 4);
 8000526:	f107 030c 	add.w	r3, r7, #12
 800052a:	2204      	movs	r2, #4
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 fc68 	bl	8003e04 <memset>
//	  	  	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)h3, 2, HAL_MAX_DELAY);
//	  	  	  HAL_Delay(500);
//	  	  	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)h2, 7, HAL_MAX_DELAY);
//	  	  	  HAL_Delay(500);
//	  	  	  HAL_UART_Transmit(&hlpuart1, bruh, 6, HAL_MAX_DELAY);
	  		  Capture_Image(false, 'd');
 8000534:	2164      	movs	r1, #100	; 0x64
 8000536:	2000      	movs	r0, #0
 8000538:	f000 fac0 	bl	8000abc <Capture_Image>
	  	  	  memset(bruh, '\0', 4);
 800053c:	e7f3      	b.n	8000526 <main+0x26>
 800053e:	bf00      	nop
 8000540:	08003e64 	.word	0x08003e64
 8000544:	08003e6c 	.word	0x08003e6c
 8000548:	08003e70 	.word	0x08003e70

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b096      	sub	sp, #88	; 0x58
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2244      	movs	r2, #68	; 0x44
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f003 fc52 	bl	8003e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000572:	f001 f80f 	bl	8001594 <HAL_PWREx_ControlVoltageScaling>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800057c:	f000 fb60 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000580:	2310      	movs	r3, #16
 8000582:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800058c:	2360      	movs	r3, #96	; 0x60
 800058e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4618      	mov	r0, r3
 800059a:	f001 f8af 	bl	80016fc <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005a4:	f000 fb4c 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fcb5 	bl	8001f30 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005cc:	f000 fb38 	bl	8000c40 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3758      	adds	r7, #88	; 0x58
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 80005de:	4a23      	ldr	r2, [pc, #140]	; (800066c <MX_LPUART1_UART_Init+0x94>)
 80005e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 800061c:	2200      	movs	r2, #0
 800061e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000620:	4811      	ldr	r0, [pc, #68]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 8000622:	f002 fc5b 	bl	8002edc <HAL_UART_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800062c:	f000 fb08 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000630:	2100      	movs	r1, #0
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 8000634:	f003 faf8 	bl	8003c28 <HAL_UARTEx_SetTxFifoThreshold>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800063e:	f000 faff 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000642:	2100      	movs	r1, #0
 8000644:	4808      	ldr	r0, [pc, #32]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 8000646:	f003 fb2d 	bl	8003ca4 <HAL_UARTEx_SetRxFifoThreshold>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000650:	f000 faf6 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_LPUART1_UART_Init+0x90>)
 8000656:	f003 faae 	bl	8003bb6 <HAL_UARTEx_DisableFifoMode>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000660:	f000 faee 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000028 	.word	0x20000028
 800066c:	40008000 	.word	0x40008000

08000670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <MX_USART2_UART_Init+0x90>)
 8000676:	4a23      	ldr	r2, [pc, #140]	; (8000704 <MX_USART2_UART_Init+0x94>)
 8000678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_USART2_UART_Init+0x90>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_USART2_UART_Init+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_USART2_UART_Init+0x90>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_USART2_UART_Init+0x90>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_USART2_UART_Init+0x90>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_USART2_UART_Init+0x90>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_USART2_UART_Init+0x90>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_USART2_UART_Init+0x90>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_USART2_UART_Init+0x90>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_USART2_UART_Init+0x90>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b8:	4811      	ldr	r0, [pc, #68]	; (8000700 <MX_USART2_UART_Init+0x90>)
 80006ba:	f002 fc0f 	bl	8002edc <HAL_UART_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006c4:	f000 fabc 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006c8:	2100      	movs	r1, #0
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <MX_USART2_UART_Init+0x90>)
 80006cc:	f003 faac 	bl	8003c28 <HAL_UARTEx_SetTxFifoThreshold>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006d6:	f000 fab3 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006da:	2100      	movs	r1, #0
 80006dc:	4808      	ldr	r0, [pc, #32]	; (8000700 <MX_USART2_UART_Init+0x90>)
 80006de:	f003 fae1 	bl	8003ca4 <HAL_UARTEx_SetRxFifoThreshold>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006e8:	f000 faaa 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_USART2_UART_Init+0x90>)
 80006ee:	f003 fa62 	bl	8003bb6 <HAL_UARTEx_DisableFifoMode>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006f8:	f000 faa2 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000b8 	.word	0x200000b8
 8000704:	40004400 	.word	0x40004400

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_GPIO_Init+0x5c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <MX_GPIO_Init+0x5c>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_GPIO_Init+0x5c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_GPIO_Init+0x5c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <MX_GPIO_Init+0x5c>)
 800072c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_GPIO_Init+0x5c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800073e:	f000 ffcd 	bl	80016dc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_GPIO_Init+0x5c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a07      	ldr	r2, [pc, #28]	; (8000764 <MX_GPIO_Init+0x5c>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <MX_GPIO_Init+0x5c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000

08000768 <hex2int>:

/**
 * hex2int
 * take a hex string and convert it to a 32bit number (max 8 hex digits)
 */
uint32_t hex2int(char *hex) {
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    uint32_t val = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
    while (*hex) {
 8000774:	e028      	b.n	80007c8 <hex2int+0x60>
        // get current character then increment
        uint8_t byte = *hex++;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	72fb      	strb	r3, [r7, #11]
        // transform hex character to the 4bit equivalent number, using the ascii table indexes
        if (byte >= '0' && byte <= '9') byte = byte - '0';
 8000780:	7afb      	ldrb	r3, [r7, #11]
 8000782:	2b2f      	cmp	r3, #47	; 0x2f
 8000784:	d906      	bls.n	8000794 <hex2int+0x2c>
 8000786:	7afb      	ldrb	r3, [r7, #11]
 8000788:	2b39      	cmp	r3, #57	; 0x39
 800078a:	d803      	bhi.n	8000794 <hex2int+0x2c>
 800078c:	7afb      	ldrb	r3, [r7, #11]
 800078e:	3b30      	subs	r3, #48	; 0x30
 8000790:	72fb      	strb	r3, [r7, #11]
 8000792:	e012      	b.n	80007ba <hex2int+0x52>
        else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
 8000794:	7afb      	ldrb	r3, [r7, #11]
 8000796:	2b60      	cmp	r3, #96	; 0x60
 8000798:	d906      	bls.n	80007a8 <hex2int+0x40>
 800079a:	7afb      	ldrb	r3, [r7, #11]
 800079c:	2b66      	cmp	r3, #102	; 0x66
 800079e:	d803      	bhi.n	80007a8 <hex2int+0x40>
 80007a0:	7afb      	ldrb	r3, [r7, #11]
 80007a2:	3b57      	subs	r3, #87	; 0x57
 80007a4:	72fb      	strb	r3, [r7, #11]
 80007a6:	e008      	b.n	80007ba <hex2int+0x52>
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
 80007a8:	7afb      	ldrb	r3, [r7, #11]
 80007aa:	2b40      	cmp	r3, #64	; 0x40
 80007ac:	d905      	bls.n	80007ba <hex2int+0x52>
 80007ae:	7afb      	ldrb	r3, [r7, #11]
 80007b0:	2b46      	cmp	r3, #70	; 0x46
 80007b2:	d802      	bhi.n	80007ba <hex2int+0x52>
 80007b4:	7afb      	ldrb	r3, [r7, #11]
 80007b6:	3b37      	subs	r3, #55	; 0x37
 80007b8:	72fb      	strb	r3, [r7, #11]
        // shift 4 to make space for new digit, and add the 4 bits of the new digit
        val = (val << 4) | (byte & 0xF);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	011a      	lsls	r2, r3, #4
 80007be:	7afb      	ldrb	r3, [r7, #11]
 80007c0:	f003 030f 	and.w	r3, r3, #15
 80007c4:	4313      	orrs	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
    while (*hex) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1d2      	bne.n	8000776 <hex2int+0xe>
    }
    return val;
 80007d0:	68fb      	ldr	r3, [r7, #12]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
	...

080007e0 <receiveImage>:
    return res;
}

const char *hm = "d";

	  void receiveImage(){
 80007e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80007e4:	f5ad 5d56 	sub.w	sp, sp, #13696	; 0x3580
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0

	  		  // create group of 100 sentences
	  		  char group[100][68];
	  		  // create counter for number of sentences
	  		  int SentencesNum = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f507 5256 	add.w	r2, r7, #13696	; 0x3580
 80007f2:	f102 0204 	add.w	r2, r2, #4
 80007f6:	6013      	str	r3, [r2, #0]
	  		  bool loop = true;
 80007f8:	2301      	movs	r3, #1
 80007fa:	f507 5256 	add.w	r2, r7, #13696	; 0x3580
 80007fe:	f102 0203 	add.w	r2, r2, #3
 8000802:	7013      	strb	r3, [r2, #0]
	  		  // initialize chars and ints for hex values
	  		  char hexTotal[5];

	  		  char *mockSentence = "000003DEFFD8FFDB0084000D09090B0A080D0B0A0B0E0E0D0F13201513121213";
 8000804:	4ba8      	ldr	r3, [pc, #672]	; (8000aa8 <receiveImage+0x2c8>)
 8000806:	f507 5255 	add.w	r2, r7, #13632	; 0x3540
 800080a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800080e:	6013      	str	r3, [r2, #0]
	  		  uint64_t totalSentences = 0;
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	f507 5155 	add.w	r1, r7, #13632	; 0x3540
 800081c:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8000820:	e9c1 2300 	strd	r2, r3, [r1]

	  		  while(loop){
 8000824:	e0a9      	b.n	800097a <receiveImage+0x19a>
	  			// receive first sentence, get total number of sentences and send
			  char sentence[100];
			  memset(sentence, '\0', sizeof(sentence));
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	3b04      	subs	r3, #4
 800082c:	2264      	movs	r2, #100	; 0x64
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fae7 	bl	8003e04 <memset>
//	  			memset(sentence, 0, sizeof(sentence));
	  			HAL_UART_Transmit(&hlpuart1, (uint8_t*)"TTT3", 4, HAL_MAX_DELAY);
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	2204      	movs	r2, #4
 800083c:	499b      	ldr	r1, [pc, #620]	; (8000aac <receiveImage+0x2cc>)
 800083e:	489c      	ldr	r0, [pc, #624]	; (8000ab0 <receiveImage+0x2d0>)
 8000840:	f002 fb9c 	bl	8002f7c <HAL_UART_Transmit>
	  			  // get sentence
//	  			  HAL_UART_Receive(&huart2, (uint8_t*)sentence, 67, HAL_MAX_DELAY);
	  			  HAL_UART_Receive(&hlpuart1, (uint8_t*)sentence, 68, 10000);
 8000844:	f107 0108 	add.w	r1, r7, #8
 8000848:	3904      	subs	r1, #4
 800084a:	f242 7310 	movw	r3, #10000	; 0x2710
 800084e:	2244      	movs	r2, #68	; 0x44
 8000850:	4897      	ldr	r0, [pc, #604]	; (8000ab0 <receiveImage+0x2d0>)
 8000852:	f002 fc2a 	bl	80030aa <HAL_UART_Receive>
//	  			HAL_UART_Receive_DMA (&hlpuart1, sentence, 67);
	  			HAL_UART_Transmit(&hlpuart1, (uint8_t*)"test", 4, HAL_MAX_DELAY);
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	2204      	movs	r2, #4
 800085c:	4995      	ldr	r1, [pc, #596]	; (8000ab4 <receiveImage+0x2d4>)
 800085e:	4894      	ldr	r0, [pc, #592]	; (8000ab0 <receiveImage+0x2d0>)
 8000860:	f002 fb8c 	bl	8002f7c <HAL_UART_Transmit>

	  				  strncpy(&hexTotal, &sentence[6], 4);
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	3b04      	subs	r3, #4
 800086a:	1d99      	adds	r1, r3, #6
 800086c:	f507 53d7 	add.w	r3, r7, #6880	; 0x1ae0
 8000870:	f103 0308 	add.w	r3, r3, #8
 8000874:	3b10      	subs	r3, #16
 8000876:	2204      	movs	r2, #4
 8000878:	4618      	mov	r0, r3
 800087a:	f003 fad3 	bl	8003e24 <strncpy>
	  				  hexTotal[4] = '\0';
 800087e:	f507 5316 	add.w	r3, r7, #9600	; 0x2580
 8000882:	f103 0308 	add.w	r3, r3, #8
 8000886:	f5a3 632b 	sub.w	r3, r3, #2736	; 0xab0
 800088a:	2200      	movs	r2, #0
 800088c:	711a      	strb	r2, [r3, #4]
	//  		  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)hexTotal, 5, HAL_MAX_DELAY);

//	  		    		  char *ptr;

	  				  totalSentences = hex2int(hexTotal);
 800088e:	f507 53d7 	add.w	r3, r7, #6880	; 0x1ae0
 8000892:	f103 0308 	add.w	r3, r3, #8
 8000896:	3b10      	subs	r3, #16
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff65 	bl	8000768 <hex2int>
 800089e:	4603      	mov	r3, r0
 80008a0:	2200      	movs	r2, #0
 80008a2:	469a      	mov	sl, r3
 80008a4:	4693      	mov	fp, r2
 80008a6:	f507 5355 	add.w	r3, r7, #13632	; 0x3540
 80008aa:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80008ae:	e9c3 ab00 	strd	sl, fp, [r3]
//	  				  	  totalSentences = hex2int(hexTotal);

//	  		  		  HAL_UART_Transmit(&hlpuart1, &hexTotal, 4, HAL_MAX_DELAY);

	  			  // add sentence to group at index SentenceNum(starts at 0 and increases by 1 every iteration)
	  			  strcpy(group[SentencesNum],sentence);
 80008b2:	f507 52d7 	add.w	r2, r7, #6880	; 0x1ae0
 80008b6:	f102 0208 	add.w	r2, r2, #8
 80008ba:	3a08      	subs	r2, #8
 80008bc:	f507 5356 	add.w	r3, r7, #13696	; 0x3580
 80008c0:	f103 0304 	add.w	r3, r3, #4
 80008c4:	6819      	ldr	r1, [r3, #0]
 80008c6:	460b      	mov	r3, r1
 80008c8:	011b      	lsls	r3, r3, #4
 80008ca:	440b      	add	r3, r1
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	441a      	add	r2, r3
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	3b04      	subs	r3, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4610      	mov	r0, r2
 80008da:	f003 fa9b 	bl	8003e14 <strcpy>
	  			  SentencesNum += 1;
 80008de:	f507 5356 	add.w	r3, r7, #13696	; 0x3580
 80008e2:	f103 0304 	add.w	r3, r3, #4
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	f507 5256 	add.w	r2, r7, #13696	; 0x3580
 80008ee:	f102 0204 	add.w	r2, r2, #4
 80008f2:	6013      	str	r3, [r2, #0]
	  			  //if SentencesNum becomes = to 100, write group to mem, and subtract 100 from totalSentences and make SentencesNum =0
	  			  if(SentencesNum == 100){
 80008f4:	f507 5356 	add.w	r3, r7, #13696	; 0x3580
 80008f8:	f103 0304 	add.w	r3, r3, #4
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b64      	cmp	r3, #100	; 0x64
 8000900:	d12b      	bne.n	800095a <receiveImage+0x17a>
	  				  HAL_UART_Transmit(&hlpuart1, (uint8_t*)group, ((SentencesNum)*67), HAL_MAX_DELAY);
 8000902:	f507 5356 	add.w	r3, r7, #13696	; 0x3580
 8000906:	f103 0304 	add.w	r3, r3, #4
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	b29b      	uxth	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	0152      	lsls	r2, r2, #5
 8000912:	441a      	add	r2, r3
 8000914:	0052      	lsls	r2, r2, #1
 8000916:	4413      	add	r3, r2
 8000918:	b29a      	uxth	r2, r3
 800091a:	f507 51d7 	add.w	r1, r7, #6880	; 0x1ae0
 800091e:	f101 0108 	add.w	r1, r1, #8
 8000922:	3908      	subs	r1, #8
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	4861      	ldr	r0, [pc, #388]	; (8000ab0 <receiveImage+0x2d0>)
 800092a:	f002 fb27 	bl	8002f7c <HAL_UART_Transmit>
	  				  //memWrite(CAMERA_DATA, group, ((sentencesNum)*67));

	  				  totalSentences -= 100;
 800092e:	f507 5355 	add.w	r3, r7, #13632	; 0x3540
 8000932:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800093a:	f1b2 0864 	subs.w	r8, r2, #100	; 0x64
 800093e:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000942:	f507 5355 	add.w	r3, r7, #13632	; 0x3540
 8000946:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800094a:	e9c3 8900 	strd	r8, r9, [r3]
	  				  SentencesNum = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	f507 5256 	add.w	r2, r7, #13696	; 0x3580
 8000954:	f102 0204 	add.w	r2, r2, #4
 8000958:	6013      	str	r3, [r2, #0]
	  				  // re initialize group to empty it
	  				  char group[100][68];
	  			  }

//	  			   if totalSentences becomes less than 100 then break out of loop and use for loop to get the remaining sentences
	  			  if(totalSentences < 100){
 800095a:	f507 5355 	add.w	r3, r7, #13632	; 0x3540
 800095e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000966:	2a64      	cmp	r2, #100	; 0x64
 8000968:	f173 0300 	sbcs.w	r3, r3, #0
 800096c:	d205      	bcs.n	800097a <receiveImage+0x19a>
	  				  loop = false;
 800096e:	2300      	movs	r3, #0
 8000970:	f507 5256 	add.w	r2, r7, #13696	; 0x3580
 8000974:	f102 0203 	add.w	r2, r2, #3
 8000978:	7013      	strb	r3, [r2, #0]
	  		  while(loop){
 800097a:	f507 5356 	add.w	r3, r7, #13696	; 0x3580
 800097e:	f103 0303 	add.w	r3, r3, #3
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	f47f af4e 	bne.w	8000826 <receiveImage+0x46>
	  			  }
	  		  }
	  		// receive first sentence, get total number of sentences and send
	  			  		  char sentence[67];
	  		  // if totalSetences is less than 100, add the rest to group and write to mem
	  		  	  if(totalSentences < 100){
 800098a:	f507 5355 	add.w	r3, r7, #13632	; 0x3540
 800098e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000996:	2a64      	cmp	r2, #100	; 0x64
 8000998:	f173 0300 	sbcs.w	r3, r3, #0
 800099c:	d267      	bcs.n	8000a6e <receiveImage+0x28e>
	  		  		  for(int i=0; i<totalSentences; i++){
 800099e:	2300      	movs	r3, #0
 80009a0:	f507 5255 	add.w	r2, r7, #13632	; 0x3540
 80009a4:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80009a8:	6013      	str	r3, [r2, #0]
 80009aa:	e038      	b.n	8000a1e <receiveImage+0x23e>
	  		  			// get sentence
	  		  			HAL_UART_Receive(&huart2, (uint8_t*)sentence, 67, HAL_MAX_DELAY);
 80009ac:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 80009b0:	f101 0108 	add.w	r1, r1, #8
 80009b4:	3914      	subs	r1, #20
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	2243      	movs	r2, #67	; 0x43
 80009bc:	483e      	ldr	r0, [pc, #248]	; (8000ab8 <receiveImage+0x2d8>)
 80009be:	f002 fb74 	bl	80030aa <HAL_UART_Receive>
	  		  			// add to group
	  		  			strcpy(group[i],sentence);
 80009c2:	f507 52d7 	add.w	r2, r7, #6880	; 0x1ae0
 80009c6:	f102 0208 	add.w	r2, r2, #8
 80009ca:	3a08      	subs	r2, #8
 80009cc:	f507 5355 	add.w	r3, r7, #13632	; 0x3540
 80009d0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80009d4:	6819      	ldr	r1, [r3, #0]
 80009d6:	460b      	mov	r3, r1
 80009d8:	011b      	lsls	r3, r3, #4
 80009da:	440b      	add	r3, r1
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	441a      	add	r2, r3
 80009e0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80009e4:	f103 0308 	add.w	r3, r3, #8
 80009e8:	3b14      	subs	r3, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4610      	mov	r0, r2
 80009ee:	f003 fa11 	bl	8003e14 <strcpy>
	  		  			SentencesNum += 1;
 80009f2:	f507 5356 	add.w	r3, r7, #13696	; 0x3580
 80009f6:	f103 0304 	add.w	r3, r3, #4
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	f507 5256 	add.w	r2, r7, #13696	; 0x3580
 8000a02:	f102 0204 	add.w	r2, r2, #4
 8000a06:	6013      	str	r3, [r2, #0]
	  		  		  for(int i=0; i<totalSentences; i++){
 8000a08:	f507 5355 	add.w	r3, r7, #13632	; 0x3540
 8000a0c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	f507 5255 	add.w	r2, r7, #13632	; 0x3540
 8000a18:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	f507 5355 	add.w	r3, r7, #13632	; 0x3540
 8000a22:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	17da      	asrs	r2, r3, #31
 8000a2a:	461c      	mov	r4, r3
 8000a2c:	4615      	mov	r5, r2
 8000a2e:	f507 5355 	add.w	r3, r7, #13632	; 0x3540
 8000a32:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a3a:	4294      	cmp	r4, r2
 8000a3c:	eb75 0303 	sbcs.w	r3, r5, r3
 8000a40:	d3b4      	bcc.n	80009ac <receiveImage+0x1cc>
	  		  		  }
	  		  		  // once all are added then write group to mem
	  		  		//memWrite(CAMERA_DATA, group, ((sentencesNum)*67));
	  		  		HAL_UART_Transmit(&hlpuart1, (uint8_t*)group, ((SentencesNum)*67), HAL_MAX_DELAY);
 8000a42:	f507 5356 	add.w	r3, r7, #13696	; 0x3580
 8000a46:	f103 0304 	add.w	r3, r3, #4
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	461a      	mov	r2, r3
 8000a50:	0152      	lsls	r2, r2, #5
 8000a52:	441a      	add	r2, r3
 8000a54:	0052      	lsls	r2, r2, #1
 8000a56:	4413      	add	r3, r2
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	f507 51d7 	add.w	r1, r7, #6880	; 0x1ae0
 8000a5e:	f101 0108 	add.w	r1, r1, #8
 8000a62:	3908      	subs	r1, #8
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295
 8000a68:	4811      	ldr	r0, [pc, #68]	; (8000ab0 <receiveImage+0x2d0>)
 8000a6a:	f002 fa87 	bl	8002f7c <HAL_UART_Transmit>
	  		  	  }

	  		  // receive final telemetry sentence
	  		  	HAL_UART_Receive(&huart2, (uint8_t*)sentence, 67, HAL_MAX_DELAY);
 8000a6e:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 8000a72:	f101 0108 	add.w	r1, r1, #8
 8000a76:	3914      	subs	r1, #20
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	2243      	movs	r2, #67	; 0x43
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <receiveImage+0x2d8>)
 8000a80:	f002 fb13 	bl	80030aa <HAL_UART_Receive>
	  		  	HAL_UART_Transmit(&hlpuart1, (uint8_t*)sentence, 67, HAL_MAX_DELAY);
 8000a84:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 8000a88:	f101 0108 	add.w	r1, r1, #8
 8000a8c:	3914      	subs	r1, #20
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	2243      	movs	r2, #67	; 0x43
 8000a94:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <receiveImage+0x2d0>)
 8000a96:	f002 fa71 	bl	8002f7c <HAL_UART_Transmit>
	  		  	//memWrite(CAMERA_DATA, group, 67);


	  }
 8000a9a:	bf00      	nop
 8000a9c:	f507 5756 	add.w	r7, r7, #13696	; 0x3580
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000aa8:	08003e7c 	.word	0x08003e7c
 8000aac:	08003ec0 	.word	0x08003ec0
 8000ab0:	20000028 	.word	0x20000028
 8000ab4:	08003ec8 	.word	0x08003ec8
 8000ab8:	200000b8 	.word	0x200000b8

08000abc <Capture_Image>:
	     * 			d - daylight ambient light
	     * 			m - medium ambient light
	     * 			n - night ambient light
	     * 			s - solar sail contrast and light
	     */
	    enum Capture_Status Capture_Image(bool flash, char lighting){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	460a      	mov	r2, r1
 8000ac6:	71fb      	strb	r3, [r7, #7]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	71bb      	strb	r3, [r7, #6]
  			HAL_UART_Transmit(&hlpuart1, (uint8_t*)"TTT1", 4, HAL_MAX_DELAY);
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	4950      	ldr	r1, [pc, #320]	; (8000c14 <Capture_Image+0x158>)
 8000ad4:	4850      	ldr	r0, [pc, #320]	; (8000c18 <Capture_Image+0x15c>)
 8000ad6:	f002 fa51 	bl	8002f7c <HAL_UART_Transmit>

	  	  switch(lighting){
 8000ada:	79bb      	ldrb	r3, [r7, #6]
 8000adc:	3b64      	subs	r3, #100	; 0x64
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	f200 8088 	bhi.w	8000bf4 <Capture_Image+0x138>
 8000ae4:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <Capture_Image+0x30>)
 8000ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aea:	bf00      	nop
 8000aec:	08000b2d 	.word	0x08000b2d
 8000af0:	08000bf5 	.word	0x08000bf5
 8000af4:	08000bf5 	.word	0x08000bf5
 8000af8:	08000bf5 	.word	0x08000bf5
 8000afc:	08000bf5 	.word	0x08000bf5
 8000b00:	08000bf5 	.word	0x08000bf5
 8000b04:	08000bf5 	.word	0x08000bf5
 8000b08:	08000bf5 	.word	0x08000bf5
 8000b0c:	08000bf5 	.word	0x08000bf5
 8000b10:	08000b5f 	.word	0x08000b5f
 8000b14:	08000b91 	.word	0x08000b91
 8000b18:	08000bf5 	.word	0x08000bf5
 8000b1c:	08000bf5 	.word	0x08000bf5
 8000b20:	08000bf5 	.word	0x08000bf5
 8000b24:	08000bf5 	.word	0x08000bf5
 8000b28:	08000bc3 	.word	0x08000bc3
	  	  case 'd':
	  		  if(flash){
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00a      	beq.n	8000b48 <Capture_Image+0x8c>
	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"D", 1, HAL_MAX_DELAY);
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	2201      	movs	r2, #1
 8000b38:	4938      	ldr	r1, [pc, #224]	; (8000c1c <Capture_Image+0x160>)
 8000b3a:	4837      	ldr	r0, [pc, #220]	; (8000c18 <Capture_Image+0x15c>)
 8000b3c:	f002 fa1e 	bl	8002f7c <HAL_UART_Transmit>
	  			  HAL_Delay(25);
 8000b40:	2019      	movs	r0, #25
 8000b42:	f000 fa6b 	bl	800101c <HAL_Delay>
	  		  }
	  		  else{
	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"d", 1, HAL_MAX_DELAY);
	  			  HAL_Delay(25);
	  		  }
	  		break;
 8000b46:	e057      	b.n	8000bf8 <Capture_Image+0x13c>
	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"d", 1, HAL_MAX_DELAY);
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4934      	ldr	r1, [pc, #208]	; (8000c20 <Capture_Image+0x164>)
 8000b50:	4831      	ldr	r0, [pc, #196]	; (8000c18 <Capture_Image+0x15c>)
 8000b52:	f002 fa13 	bl	8002f7c <HAL_UART_Transmit>
	  			  HAL_Delay(25);
 8000b56:	2019      	movs	r0, #25
 8000b58:	f000 fa60 	bl	800101c <HAL_Delay>
	  		break;
 8000b5c:	e04c      	b.n	8000bf8 <Capture_Image+0x13c>
	  	  case 'm':
	  	  		  if(flash){
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d00a      	beq.n	8000b7a <Capture_Image+0xbe>
	  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"M", 1, HAL_MAX_DELAY);
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	2201      	movs	r2, #1
 8000b6a:	492e      	ldr	r1, [pc, #184]	; (8000c24 <Capture_Image+0x168>)
 8000b6c:	482a      	ldr	r0, [pc, #168]	; (8000c18 <Capture_Image+0x15c>)
 8000b6e:	f002 fa05 	bl	8002f7c <HAL_UART_Transmit>
	  	  			  HAL_Delay(25);
 8000b72:	2019      	movs	r0, #25
 8000b74:	f000 fa52 	bl	800101c <HAL_Delay>
	  	  		  }
	  	  		  else{
	  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"m", 1, HAL_MAX_DELAY);
	  	  			  HAL_Delay(25);
	  	  		  }
	  	  		break;
 8000b78:	e03e      	b.n	8000bf8 <Capture_Image+0x13c>
	  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"m", 1, HAL_MAX_DELAY);
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4929      	ldr	r1, [pc, #164]	; (8000c28 <Capture_Image+0x16c>)
 8000b82:	4825      	ldr	r0, [pc, #148]	; (8000c18 <Capture_Image+0x15c>)
 8000b84:	f002 f9fa 	bl	8002f7c <HAL_UART_Transmit>
	  	  			  HAL_Delay(25);
 8000b88:	2019      	movs	r0, #25
 8000b8a:	f000 fa47 	bl	800101c <HAL_Delay>
	  	  		break;
 8000b8e:	e033      	b.n	8000bf8 <Capture_Image+0x13c>
	  	  case 'n':
	  	  		  if(flash){
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00a      	beq.n	8000bac <Capture_Image+0xf0>
	  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"N", 1, HAL_MAX_DELAY);
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4923      	ldr	r1, [pc, #140]	; (8000c2c <Capture_Image+0x170>)
 8000b9e:	481e      	ldr	r0, [pc, #120]	; (8000c18 <Capture_Image+0x15c>)
 8000ba0:	f002 f9ec 	bl	8002f7c <HAL_UART_Transmit>
	  	  			  HAL_Delay(25);
 8000ba4:	2019      	movs	r0, #25
 8000ba6:	f000 fa39 	bl	800101c <HAL_Delay>
	  	  		  }
	  	  		  else{
	  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"n", 1, HAL_MAX_DELAY);
	  	  			  HAL_Delay(25);
	  	  		  }
	  	  		break;
 8000baa:	e025      	b.n	8000bf8 <Capture_Image+0x13c>
	  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"n", 1, HAL_MAX_DELAY);
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	491f      	ldr	r1, [pc, #124]	; (8000c30 <Capture_Image+0x174>)
 8000bb4:	4818      	ldr	r0, [pc, #96]	; (8000c18 <Capture_Image+0x15c>)
 8000bb6:	f002 f9e1 	bl	8002f7c <HAL_UART_Transmit>
	  	  			  HAL_Delay(25);
 8000bba:	2019      	movs	r0, #25
 8000bbc:	f000 fa2e 	bl	800101c <HAL_Delay>
	  	  		break;
 8000bc0:	e01a      	b.n	8000bf8 <Capture_Image+0x13c>
	  	  case 's':
	  	  		  if(flash){
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00a      	beq.n	8000bde <Capture_Image+0x122>
	  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"S", 1, HAL_MAX_DELAY);
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4919      	ldr	r1, [pc, #100]	; (8000c34 <Capture_Image+0x178>)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <Capture_Image+0x15c>)
 8000bd2:	f002 f9d3 	bl	8002f7c <HAL_UART_Transmit>
	  	  			  HAL_Delay(25);
 8000bd6:	2019      	movs	r0, #25
 8000bd8:	f000 fa20 	bl	800101c <HAL_Delay>
	  	  		  }
	  	  		  else{
	  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"s", 1, HAL_MAX_DELAY);
	  	  			  HAL_Delay(25);
	  	  		  }
	  	  		  break;
 8000bdc:	e00c      	b.n	8000bf8 <Capture_Image+0x13c>
	  	  			  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"s", 1, HAL_MAX_DELAY);
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	2201      	movs	r2, #1
 8000be4:	4914      	ldr	r1, [pc, #80]	; (8000c38 <Capture_Image+0x17c>)
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <Capture_Image+0x15c>)
 8000be8:	f002 f9c8 	bl	8002f7c <HAL_UART_Transmit>
	  	  			  HAL_Delay(25);
 8000bec:	2019      	movs	r0, #25
 8000bee:	f000 fa15 	bl	800101c <HAL_Delay>
	  	  		  break;
 8000bf2:	e001      	b.n	8000bf8 <Capture_Image+0x13c>
	  	  default:
	  		  return Wrong_input;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e009      	b.n	8000c0c <Capture_Image+0x150>
	  	  }
			HAL_UART_Transmit(&hlpuart1, (uint8_t*)"TTT2", 4, HAL_MAX_DELAY);
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	490f      	ldr	r1, [pc, #60]	; (8000c3c <Capture_Image+0x180>)
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <Capture_Image+0x15c>)
 8000c02:	f002 f9bb 	bl	8002f7c <HAL_UART_Transmit>
	  	receiveImage();
 8000c06:	f7ff fdeb 	bl	80007e0 <receiveImage>
	  	return Transmit_Success;
 8000c0a:	2300      	movs	r3, #0

	    }
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	08003ed0 	.word	0x08003ed0
 8000c18:	20000028 	.word	0x20000028
 8000c1c:	08003ed8 	.word	0x08003ed8
 8000c20:	08003e78 	.word	0x08003e78
 8000c24:	08003edc 	.word	0x08003edc
 8000c28:	08003ee0 	.word	0x08003ee0
 8000c2c:	08003ee4 	.word	0x08003ee4
 8000c30:	08003ee8 	.word	0x08003ee8
 8000c34:	08003eec 	.word	0x08003eec
 8000c38:	08003ef0 	.word	0x08003ef0
 8000c3c:	08003ef4 	.word	0x08003ef4

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>
	...

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_MspInit+0x44>)
 8000c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <HAL_MspInit+0x44>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <HAL_MspInit+0x44>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_MspInit+0x44>)
 8000c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_MspInit+0x44>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	6593      	str	r3, [r2, #88]	; 0x58
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_MspInit+0x44>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0b2      	sub	sp, #200	; 0xc8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	f107 0320 	add.w	r3, r7, #32
 8000cb0:	2294      	movs	r2, #148	; 0x94
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f003 f8a5 	bl	8003e04 <memset>
  if(huart->Instance==LPUART1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a63      	ldr	r2, [pc, #396]	; (8000e4c <HAL_UART_MspInit+0x1b8>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d13e      	bne.n	8000d42 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cc4:	2320      	movs	r3, #32
 8000cc6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fbeb 	bl	80024ac <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cdc:	f7ff ffb0 	bl	8000c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ce0:	4b5b      	ldr	r3, [pc, #364]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ce4:	4a5a      	ldr	r2, [pc, #360]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cec:	4b58      	ldr	r3, [pc, #352]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	61fb      	str	r3, [r7, #28]
 8000cf6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf8:	4b55      	ldr	r3, [pc, #340]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfc:	4a54      	ldr	r2, [pc, #336]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d04:	4b52      	ldr	r3, [pc, #328]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8000d10:	f000 fce4 	bl	80016dc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d14:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d2e:	2308      	movs	r3, #8
 8000d30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d34:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4846      	ldr	r0, [pc, #280]	; (8000e54 <HAL_UART_MspInit+0x1c0>)
 8000d3c:	f000 fa78 	bl	8001230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d40:	e080      	b.n	8000e44 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART2)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a44      	ldr	r2, [pc, #272]	; (8000e58 <HAL_UART_MspInit+0x1c4>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d13b      	bne.n	8000dc4 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d54:	f107 0320 	add.w	r3, r7, #32
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 fba7 	bl	80024ac <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000d64:	f7ff ff6c 	bl	8000c40 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d68:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6c:	4a38      	ldr	r2, [pc, #224]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d72:	6593      	str	r3, [r2, #88]	; 0x58
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d80:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	4a32      	ldr	r2, [pc, #200]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d98:	2360      	movs	r3, #96	; 0x60
 8000d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db0:	2307      	movs	r3, #7
 8000db2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4827      	ldr	r0, [pc, #156]	; (8000e5c <HAL_UART_MspInit+0x1c8>)
 8000dbe:	f000 fa37 	bl	8001230 <HAL_GPIO_Init>
}
 8000dc2:	e03f      	b.n	8000e44 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a25      	ldr	r2, [pc, #148]	; (8000e60 <HAL_UART_MspInit+0x1cc>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d13a      	bne.n	8000e44 <HAL_UART_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 fb66 	bl	80024ac <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_UART_MspInit+0x156>
      Error_Handler();
 8000de6:	f7ff ff2b 	bl	8000c40 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df4:	6593      	str	r3, [r2, #88]	; 0x58
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_UART_MspInit+0x1bc>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e1a:	2330      	movs	r3, #48	; 0x30
 8000e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e32:	2307      	movs	r3, #7
 8000e34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4809      	ldr	r0, [pc, #36]	; (8000e64 <HAL_UART_MspInit+0x1d0>)
 8000e40:	f000 f9f6 	bl	8001230 <HAL_GPIO_Init>
}
 8000e44:	bf00      	nop
 8000e46:	37c8      	adds	r7, #200	; 0xc8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40008000 	.word	0x40008000
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48001800 	.word	0x48001800
 8000e58:	40004400 	.word	0x40004400
 8000e5c:	48000c00 	.word	0x48000c00
 8000e60:	40004800 	.word	0x40004800
 8000e64:	48000800 	.word	0x48000800

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb4:	f000 f892 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <SystemInit+0x20>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <SystemInit+0x20>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee4:	f7ff ffea 	bl	8000ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	; (8000f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <LoopForever+0xe>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	; (8000f2c <LoopForever+0x16>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f002 ff55 	bl	8003dbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f12:	f7ff faf5 	bl	8000500 <main>

08000f16 <LoopForever>:

LoopForever:
    b LoopForever
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f18:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f24:	08003f7c 	.word	0x08003f7c
  ldr r2, =_sbss
 8000f28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f2c:	2000014c 	.word	0x2000014c

08000f30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_IRQHandler>

08000f32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f943 	bl	80011c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f80e 	bl	8000f64 <HAL_InitTick>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	e001      	b.n	8000f58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f54:	f7ff fe7a 	bl	8000c4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_InitTick+0x6c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d023      	beq.n	8000fc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_InitTick+0x70>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_InitTick+0x6c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f941 	bl	8001216 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10f      	bne.n	8000fba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d809      	bhi.n	8000fb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 f919 	bl	80011de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_InitTick+0x74>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e007      	b.n	8000fc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e004      	b.n	8000fc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	73fb      	strb	r3, [r7, #15]
 8000fbe:	e001      	b.n	8000fc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000004 	.word	0x20000004

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000148 	.word	0x20000148

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000148 	.word	0x20000148

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_Delay+0x44>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008

08001064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800108c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001194:	d301      	bcc.n	800119a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001196:	2301      	movs	r3, #1
 8001198:	e00f      	b.n	80011ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <SysTick_Config+0x40>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a2:	210f      	movs	r1, #15
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ff8e 	bl	80010c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SysTick_Config+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <SysTick_Config+0x40>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000e010 	.word	0xe000e010

080011c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ff47 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f0:	f7ff ff5c 	bl	80010ac <__NVIC_GetPriorityGrouping>
 80011f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff ff8e 	bl	800111c <NVIC_EncodePriority>
 8001200:	4602      	mov	r2, r0
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff5d 	bl	80010c8 <__NVIC_SetPriority>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffb0 	bl	8001184 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	e166      	b.n	800150e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2101      	movs	r1, #1
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8158 	beq.w	8001508 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b01      	cmp	r3, #1
 8001262:	d005      	beq.n	8001270 <HAL_GPIO_Init+0x40>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d130      	bne.n	80012d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012a6:	2201      	movs	r2, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	f003 0201 	and.w	r2, r3, #1
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d017      	beq.n	800130e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d123      	bne.n	8001362 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	6939      	ldr	r1, [r7, #16]
 800135e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 0203 	and.w	r2, r3, #3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 80b2 	beq.w	8001508 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a4:	4b61      	ldr	r3, [pc, #388]	; (800152c <HAL_GPIO_Init+0x2fc>)
 80013a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a8:	4a60      	ldr	r2, [pc, #384]	; (800152c <HAL_GPIO_Init+0x2fc>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6613      	str	r3, [r2, #96]	; 0x60
 80013b0:	4b5e      	ldr	r3, [pc, #376]	; (800152c <HAL_GPIO_Init+0x2fc>)
 80013b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013bc:	4a5c      	ldr	r2, [pc, #368]	; (8001530 <HAL_GPIO_Init+0x300>)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013e6:	d02b      	beq.n	8001440 <HAL_GPIO_Init+0x210>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a52      	ldr	r2, [pc, #328]	; (8001534 <HAL_GPIO_Init+0x304>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d025      	beq.n	800143c <HAL_GPIO_Init+0x20c>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a51      	ldr	r2, [pc, #324]	; (8001538 <HAL_GPIO_Init+0x308>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d01f      	beq.n	8001438 <HAL_GPIO_Init+0x208>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a50      	ldr	r2, [pc, #320]	; (800153c <HAL_GPIO_Init+0x30c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d019      	beq.n	8001434 <HAL_GPIO_Init+0x204>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a4f      	ldr	r2, [pc, #316]	; (8001540 <HAL_GPIO_Init+0x310>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d013      	beq.n	8001430 <HAL_GPIO_Init+0x200>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a4e      	ldr	r2, [pc, #312]	; (8001544 <HAL_GPIO_Init+0x314>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d00d      	beq.n	800142c <HAL_GPIO_Init+0x1fc>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a4d      	ldr	r2, [pc, #308]	; (8001548 <HAL_GPIO_Init+0x318>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d007      	beq.n	8001428 <HAL_GPIO_Init+0x1f8>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a4c      	ldr	r2, [pc, #304]	; (800154c <HAL_GPIO_Init+0x31c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d101      	bne.n	8001424 <HAL_GPIO_Init+0x1f4>
 8001420:	2307      	movs	r3, #7
 8001422:	e00e      	b.n	8001442 <HAL_GPIO_Init+0x212>
 8001424:	2308      	movs	r3, #8
 8001426:	e00c      	b.n	8001442 <HAL_GPIO_Init+0x212>
 8001428:	2306      	movs	r3, #6
 800142a:	e00a      	b.n	8001442 <HAL_GPIO_Init+0x212>
 800142c:	2305      	movs	r3, #5
 800142e:	e008      	b.n	8001442 <HAL_GPIO_Init+0x212>
 8001430:	2304      	movs	r3, #4
 8001432:	e006      	b.n	8001442 <HAL_GPIO_Init+0x212>
 8001434:	2303      	movs	r3, #3
 8001436:	e004      	b.n	8001442 <HAL_GPIO_Init+0x212>
 8001438:	2302      	movs	r3, #2
 800143a:	e002      	b.n	8001442 <HAL_GPIO_Init+0x212>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <HAL_GPIO_Init+0x212>
 8001440:	2300      	movs	r3, #0
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	f002 0203 	and.w	r2, r2, #3
 8001448:	0092      	lsls	r2, r2, #2
 800144a:	4093      	lsls	r3, r2
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001452:	4937      	ldr	r1, [pc, #220]	; (8001530 <HAL_GPIO_Init+0x300>)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001460:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <HAL_GPIO_Init+0x320>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001484:	4a32      	ldr	r2, [pc, #200]	; (8001550 <HAL_GPIO_Init+0x320>)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800148a:	4b31      	ldr	r3, [pc, #196]	; (8001550 <HAL_GPIO_Init+0x320>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014ae:	4a28      	ldr	r2, [pc, #160]	; (8001550 <HAL_GPIO_Init+0x320>)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014b4:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_GPIO_Init+0x320>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014d8:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_GPIO_Init+0x320>)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_GPIO_Init+0x320>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_GPIO_Init+0x320>)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3301      	adds	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	f47f ae91 	bne.w	8001240 <HAL_GPIO_Init+0x10>
  }
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	371c      	adds	r7, #28
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000
 8001534:	48000400 	.word	0x48000400
 8001538:	48000800 	.word	0x48000800
 800153c:	48000c00 	.word	0x48000c00
 8001540:	48001000 	.word	0x48001000
 8001544:	48001400 	.word	0x48001400
 8001548:	48001800 	.word	0x48001800
 800154c:	48001c00 	.word	0x48001c00
 8001550:	40010400 	.word	0x40010400

08001554 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_PWREx_GetVoltageRange+0x3c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001564:	d102      	bne.n	800156c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156a:	e00b      	b.n	8001584 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_PWREx_GetVoltageRange+0x3c>)
 800156e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800157a:	d102      	bne.n	8001582 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800157c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001580:	e000      	b.n	8001584 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001582:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40007000 	.word	0x40007000

08001594 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d141      	bne.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015a2:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ae:	d131      	bne.n	8001614 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b0:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015b6:	4a46      	ldr	r2, [pc, #280]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c0:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015c8:	4a41      	ldr	r2, [pc, #260]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80015d0:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2232      	movs	r2, #50	; 0x32
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	4a3f      	ldr	r2, [pc, #252]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	0c9b      	lsrs	r3, r3, #18
 80015e2:	3301      	adds	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015e6:	e002      	b.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015fa:	d102      	bne.n	8001602 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f2      	bne.n	80015e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001602:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160e:	d158      	bne.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e057      	b.n	80016c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800161a:	4a2d      	ldr	r2, [pc, #180]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001620:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001624:	e04d      	b.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800162c:	d141      	bne.n	80016b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163a:	d131      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001642:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2232      	movs	r2, #50	; 0x32
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	0c9b      	lsrs	r3, r3, #18
 800166e:	3301      	adds	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001672:	e002      	b.n	800167a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3b01      	subs	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001686:	d102      	bne.n	800168e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f2      	bne.n	8001674 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169a:	d112      	bne.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e011      	b.n	80016c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016b0:	e007      	b.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40007000 	.word	0x40007000
 80016d4:	20000000 	.word	0x20000000
 80016d8:	431bde83 	.word	0x431bde83

080016dc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ea:	6053      	str	r3, [r2, #4]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40007000 	.word	0x40007000

080016fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	f000 bc08 	b.w	8001f20 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001710:	4b96      	ldr	r3, [pc, #600]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800171a:	4b94      	ldr	r3, [pc, #592]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 80e4 	beq.w	80018fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <HAL_RCC_OscConfig+0x4c>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	f040 808b 	bne.w	8001856 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b01      	cmp	r3, #1
 8001744:	f040 8087 	bne.w	8001856 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001748:	4b88      	ldr	r3, [pc, #544]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_OscConfig+0x64>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e3df      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1a      	ldr	r2, [r3, #32]
 8001764:	4b81      	ldr	r3, [pc, #516]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_RCC_OscConfig+0x7e>
 8001770:	4b7e      	ldr	r3, [pc, #504]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001778:	e005      	b.n	8001786 <HAL_RCC_OscConfig+0x8a>
 800177a:	4b7c      	ldr	r3, [pc, #496]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800177c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001786:	4293      	cmp	r3, r2
 8001788:	d223      	bcs.n	80017d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fdcc 	bl	800232c <RCC_SetFlashLatencyFromMSIRange>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e3c0      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800179e:	4b73      	ldr	r3, [pc, #460]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a72      	ldr	r2, [pc, #456]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b70      	ldr	r3, [pc, #448]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	496d      	ldr	r1, [pc, #436]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017bc:	4b6b      	ldr	r3, [pc, #428]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	4968      	ldr	r1, [pc, #416]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
 80017d0:	e025      	b.n	800181e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d2:	4b66      	ldr	r3, [pc, #408]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a65      	ldr	r2, [pc, #404]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	4960      	ldr	r1, [pc, #384]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f0:	4b5e      	ldr	r3, [pc, #376]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	495b      	ldr	r1, [pc, #364]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4618      	mov	r0, r3
 8001810:	f000 fd8c 	bl	800232c <RCC_SetFlashLatencyFromMSIRange>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e380      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800181e:	f000 fcc1 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8001822:	4602      	mov	r2, r0
 8001824:	4b51      	ldr	r3, [pc, #324]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	4950      	ldr	r1, [pc, #320]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 8001830:	5ccb      	ldrb	r3, [r1, r3]
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	4a4e      	ldr	r2, [pc, #312]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 800183c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800183e:	4b4e      	ldr	r3, [pc, #312]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fb8e 	bl	8000f64 <HAL_InitTick>
 8001848:	4603      	mov	r3, r0
 800184a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d052      	beq.n	80018f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	e364      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d032      	beq.n	80018c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800185e:	4b43      	ldr	r3, [pc, #268]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a42      	ldr	r2, [pc, #264]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800186a:	f7ff fbcb 	bl	8001004 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001872:	f7ff fbc7 	bl	8001004 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e34d      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001884:	4b39      	ldr	r3, [pc, #228]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a35      	ldr	r2, [pc, #212]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001896:	f043 0308 	orr.w	r3, r3, #8
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b33      	ldr	r3, [pc, #204]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4930      	ldr	r1, [pc, #192]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	492b      	ldr	r1, [pc, #172]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
 80018c2:	e01a      	b.n	80018fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018c4:	4b29      	ldr	r3, [pc, #164]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a28      	ldr	r2, [pc, #160]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fb98 	bl	8001004 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d8:	f7ff fb94 	bl	8001004 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e31a      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x1dc>
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d073      	beq.n	80019ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d005      	beq.n	8001918 <HAL_RCC_OscConfig+0x21c>
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d10e      	bne.n	8001930 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d10b      	bne.n	8001930 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d063      	beq.n	80019ec <HAL_RCC_OscConfig+0x2f0>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d15f      	bne.n	80019ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e2f7      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d106      	bne.n	8001948 <HAL_RCC_OscConfig+0x24c>
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_RCC_OscConfig+0x270>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a0b      	ldr	r2, [pc, #44]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e025      	b.n	8001994 <HAL_RCC_OscConfig+0x298>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001950:	d114      	bne.n	800197c <HAL_RCC_OscConfig+0x280>
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a02      	ldr	r2, [pc, #8]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e013      	b.n	8001994 <HAL_RCC_OscConfig+0x298>
 800196c:	40021000 	.word	0x40021000
 8001970:	08003efc 	.word	0x08003efc
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004
 800197c:	4ba0      	ldr	r3, [pc, #640]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a9f      	ldr	r2, [pc, #636]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b9d      	ldr	r3, [pc, #628]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a9c      	ldr	r2, [pc, #624]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fb32 	bl	8001004 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fb2e 	bl	8001004 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e2b4      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b6:	4b92      	ldr	r3, [pc, #584]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x2a8>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fb1e 	bl	8001004 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff fb1a 	bl	8001004 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e2a0      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019de:	4b88      	ldr	r3, [pc, #544]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x2d0>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d060      	beq.n	8001abc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_OscConfig+0x310>
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d119      	bne.n	8001a3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d116      	bne.n	8001a3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a0c:	4b7c      	ldr	r3, [pc, #496]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_OscConfig+0x328>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e27d      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b76      	ldr	r3, [pc, #472]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	061b      	lsls	r3, r3, #24
 8001a32:	4973      	ldr	r1, [pc, #460]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a38:	e040      	b.n	8001abc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d023      	beq.n	8001a8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a42:	4b6f      	ldr	r3, [pc, #444]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a6e      	ldr	r2, [pc, #440]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fad9 	bl	8001004 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fad5 	bl	8001004 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e25b      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a68:	4b65      	ldr	r3, [pc, #404]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b62      	ldr	r3, [pc, #392]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	061b      	lsls	r3, r3, #24
 8001a82:	495f      	ldr	r1, [pc, #380]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
 8001a88:	e018      	b.n	8001abc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a5c      	ldr	r2, [pc, #368]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff fab5 	bl	8001004 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fab1 	bl	8001004 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e237      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab0:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d03c      	beq.n	8001b42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad0:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad6:	4a4a      	ldr	r2, [pc, #296]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae0:	f7ff fa90 	bl	8001004 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fa8c 	bl	8001004 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e212      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ef      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x3ec>
 8001b08:	e01b      	b.n	8001b42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b10:	4a3b      	ldr	r2, [pc, #236]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1a:	f7ff fa73 	bl	8001004 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b22:	f7ff fa6f 	bl	8001004 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1f5      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b34:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1ef      	bne.n	8001b22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80a6 	beq.w	8001c9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10d      	bne.n	8001b7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	4a26      	ldr	r2, [pc, #152]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_RCC_OscConfig+0x508>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d118      	bne.n	8001bba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <HAL_RCC_OscConfig+0x508>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_RCC_OscConfig+0x508>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b94:	f7ff fa36 	bl	8001004 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9c:	f7ff fa32 	bl	8001004 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1b8      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_RCC_OscConfig+0x508>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d108      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4d8>
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd2:	e029      	b.n	8001c28 <HAL_RCC_OscConfig+0x52c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d115      	bne.n	8001c08 <HAL_RCC_OscConfig+0x50c>
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf2:	4a03      	ldr	r2, [pc, #12]	; (8001c00 <HAL_RCC_OscConfig+0x504>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bfc:	e014      	b.n	8001c28 <HAL_RCC_OscConfig+0x52c>
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40007000 	.word	0x40007000
 8001c08:	4b9d      	ldr	r3, [pc, #628]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0e:	4a9c      	ldr	r2, [pc, #624]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c18:	4b99      	ldr	r3, [pc, #612]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1e:	4a98      	ldr	r2, [pc, #608]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001c20:	f023 0304 	bic.w	r3, r3, #4
 8001c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d016      	beq.n	8001c5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7ff f9e8 	bl	8001004 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c38:	f7ff f9e4 	bl	8001004 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e168      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c4e:	4b8c      	ldr	r3, [pc, #560]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0ed      	beq.n	8001c38 <HAL_RCC_OscConfig+0x53c>
 8001c5c:	e015      	b.n	8001c8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5e:	f7ff f9d1 	bl	8001004 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c66:	f7ff f9cd 	bl	8001004 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e151      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c7c:	4b80      	ldr	r3, [pc, #512]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1ed      	bne.n	8001c66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c8a:	7ffb      	ldrb	r3, [r7, #31]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d105      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c90:	4b7b      	ldr	r3, [pc, #492]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	4a7a      	ldr	r2, [pc, #488]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d03c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01c      	beq.n	8001cea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cb0:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb6:	4a72      	ldr	r2, [pc, #456]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f9a0 	bl	8001004 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc8:	f7ff f99c 	bl	8001004 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e122      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cda:	4b69      	ldr	r3, [pc, #420]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001cdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0ef      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x5cc>
 8001ce8:	e01b      	b.n	8001d22 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cea:	4b65      	ldr	r3, [pc, #404]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cf0:	4a63      	ldr	r2, [pc, #396]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f983 	bl	8001004 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d02:	f7ff f97f 	bl	8001004 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e105      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d14:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1ef      	bne.n	8001d02 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80f9 	beq.w	8001f1e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	f040 80cf 	bne.w	8001ed4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d36:	4b52      	ldr	r3, [pc, #328]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f003 0203 	and.w	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d12c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	3b01      	subs	r3, #1
 8001d56:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d123      	bne.n	8001da4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d66:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d11b      	bne.n	8001da4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d76:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d113      	bne.n	8001da4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d109      	bne.n	8001da4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	085b      	lsrs	r3, r3, #1
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d071      	beq.n	8001e88 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d068      	beq.n	8001e7c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001daa:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001db6:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0ac      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dc6:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a2d      	ldr	r2, [pc, #180]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001dcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd2:	f7ff f917 	bl	8001004 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dda:	f7ff f913 	bl	8001004 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e099      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_RCC_OscConfig+0x788>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e08:	3a01      	subs	r2, #1
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	4311      	orrs	r1, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e12:	0212      	lsls	r2, r2, #8
 8001e14:	4311      	orrs	r1, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e1a:	0852      	lsrs	r2, r2, #1
 8001e1c:	3a01      	subs	r2, #1
 8001e1e:	0552      	lsls	r2, r2, #21
 8001e20:	4311      	orrs	r1, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e26:	0852      	lsrs	r2, r2, #1
 8001e28:	3a01      	subs	r2, #1
 8001e2a:	0652      	lsls	r2, r2, #25
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e32:	06d2      	lsls	r2, r2, #27
 8001e34:	430a      	orrs	r2, r1
 8001e36:	4912      	ldr	r1, [pc, #72]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e54:	f7ff f8d6 	bl	8001004 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff f8d2 	bl	8001004 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e058      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <HAL_RCC_OscConfig+0x784>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e7a:	e050      	b.n	8001f1e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e04f      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
 8001e80:	40021000 	.word	0x40021000
 8001e84:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <HAL_RCC_OscConfig+0x82c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d144      	bne.n	8001f1e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_RCC_OscConfig+0x82c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_RCC_OscConfig+0x82c>)
 8001e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_RCC_OscConfig+0x82c>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a20      	ldr	r2, [pc, #128]	; (8001f28 <HAL_RCC_OscConfig+0x82c>)
 8001ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eac:	f7ff f8aa 	bl	8001004 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7ff f8a6 	bl	8001004 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e02c      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_RCC_OscConfig+0x82c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x7b8>
 8001ed2:	e024      	b.n	8001f1e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d01f      	beq.n	8001f1a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_RCC_OscConfig+0x82c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <HAL_RCC_OscConfig+0x82c>)
 8001ee0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7ff f88d 	bl	8001004 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eee:	f7ff f889 	bl	8001004 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e00f      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_RCC_OscConfig+0x82c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f0      	bne.n	8001eee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_OscConfig+0x82c>)
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	4905      	ldr	r1, [pc, #20]	; (8001f28 <HAL_RCC_OscConfig+0x82c>)
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_OscConfig+0x830>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	60cb      	str	r3, [r1, #12]
 8001f18:	e001      	b.n	8001f1e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	feeefffc 	.word	0xfeeefffc

08001f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e11d      	b.n	8002184 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4b90      	ldr	r3, [pc, #576]	; (800218c <HAL_RCC_ClockConfig+0x25c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d910      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b8d      	ldr	r3, [pc, #564]	; (800218c <HAL_RCC_ClockConfig+0x25c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 020f 	bic.w	r2, r3, #15
 8001f5e:	498b      	ldr	r1, [pc, #556]	; (800218c <HAL_RCC_ClockConfig+0x25c>)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b89      	ldr	r3, [pc, #548]	; (800218c <HAL_RCC_ClockConfig+0x25c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e105      	b.n	8002184 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d010      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	4b81      	ldr	r3, [pc, #516]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d908      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f94:	4b7e      	ldr	r3, [pc, #504]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	497b      	ldr	r1, [pc, #492]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d079      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d11e      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fba:	4b75      	ldr	r3, [pc, #468]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e0dc      	b.n	8002184 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001fca:	f000 fa09 	bl	80023e0 <RCC_GetSysClockFreqFromPLLSource>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4a70      	ldr	r2, [pc, #448]	; (8002194 <HAL_RCC_ClockConfig+0x264>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d946      	bls.n	8002064 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001fd6:	4b6e      	ldr	r3, [pc, #440]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d140      	bne.n	8002064 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fe2:	4b6b      	ldr	r3, [pc, #428]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fea:	4a69      	ldr	r2, [pc, #420]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8001fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e035      	b.n	8002064 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002000:	4b63      	ldr	r3, [pc, #396]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d115      	bne.n	8002038 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b9      	b.n	8002184 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002018:	4b5d      	ldr	r3, [pc, #372]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0ad      	b.n	8002184 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0a5      	b.n	8002184 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002038:	f000 f8b4 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 800203c:	4603      	mov	r3, r0
 800203e:	4a55      	ldr	r2, [pc, #340]	; (8002194 <HAL_RCC_ClockConfig+0x264>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d90f      	bls.n	8002064 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002044:	4b52      	ldr	r3, [pc, #328]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d109      	bne.n	8002064 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002050:	4b4f      	ldr	r3, [pc, #316]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002058:	4a4d      	ldr	r2, [pc, #308]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 800205a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002064:	4b4a      	ldr	r3, [pc, #296]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 0203 	bic.w	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4947      	ldr	r1, [pc, #284]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8002072:	4313      	orrs	r3, r2
 8002074:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002076:	f7fe ffc5 	bl	8001004 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207c:	e00a      	b.n	8002094 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207e:	f7fe ffc1 	bl	8001004 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	f241 3288 	movw	r2, #5000	; 0x1388
 800208c:	4293      	cmp	r3, r2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e077      	b.n	8002184 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002094:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 020c 	and.w	r2, r3, #12
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d1eb      	bne.n	800207e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b80      	cmp	r3, #128	; 0x80
 80020aa:	d105      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020ac:	4b38      	ldr	r3, [pc, #224]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a37      	ldr	r2, [pc, #220]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 80020b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020b6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d010      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	4b31      	ldr	r3, [pc, #196]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d208      	bcs.n	80020e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d4:	4b2e      	ldr	r3, [pc, #184]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	492b      	ldr	r1, [pc, #172]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_RCC_ClockConfig+0x25c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d210      	bcs.n	8002116 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_RCC_ClockConfig+0x25c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 020f 	bic.w	r2, r3, #15
 80020fc:	4923      	ldr	r1, [pc, #140]	; (800218c <HAL_RCC_ClockConfig+0x25c>)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_RCC_ClockConfig+0x25c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d001      	beq.n	8002116 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e036      	b.n	8002184 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002122:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	4918      	ldr	r1, [pc, #96]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d009      	beq.n	8002154 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4910      	ldr	r1, [pc, #64]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 8002150:	4313      	orrs	r3, r2
 8002152:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002154:	f000 f826 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <HAL_RCC_ClockConfig+0x260>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	490c      	ldr	r1, [pc, #48]	; (8002198 <HAL_RCC_ClockConfig+0x268>)
 8002166:	5ccb      	ldrb	r3, [r1, r3]
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_RCC_ClockConfig+0x26c>)
 8002172:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_RCC_ClockConfig+0x270>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe fef3 	bl	8000f64 <HAL_InitTick>
 800217e:	4603      	mov	r3, r0
 8002180:	73fb      	strb	r3, [r7, #15]

  return status;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40022000 	.word	0x40022000
 8002190:	40021000 	.word	0x40021000
 8002194:	04c4b400 	.word	0x04c4b400
 8002198:	08003efc 	.word	0x08003efc
 800219c:	20000000 	.word	0x20000000
 80021a0:	20000004 	.word	0x20000004

080021a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b2:	4b3e      	ldr	r3, [pc, #248]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021bc:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x34>
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d121      	bne.n	8002216 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d11e      	bne.n	8002216 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021d8:	4b34      	ldr	r3, [pc, #208]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021e4:	4b31      	ldr	r3, [pc, #196]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e005      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002200:	4a2b      	ldr	r2, [pc, #172]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002208:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10d      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002214:	e00a      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b04      	cmp	r3, #4
 800221a:	d102      	bne.n	8002222 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800221c:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	e004      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b08      	cmp	r3, #8
 8002226:	d101      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002228:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800222a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d134      	bne.n	800229c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d003      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0xa6>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d003      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0xac>
 8002248:	e005      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800224c:	617b      	str	r3, [r7, #20]
      break;
 800224e:	e005      	b.n	800225c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002252:	617b      	str	r3, [r7, #20]
      break;
 8002254:	e002      	b.n	800225c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	617b      	str	r3, [r7, #20]
      break;
 800225a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	3301      	adds	r3, #1
 8002268:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	fb03 f202 	mul.w	r2, r3, r2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	0e5b      	lsrs	r3, r3, #25
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	3301      	adds	r3, #1
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800229c:	69bb      	ldr	r3, [r7, #24]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	; 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08003f14 	.word	0x08003f14
 80022b4:	00f42400 	.word	0x00f42400
 80022b8:	007a1200 	.word	0x007a1200

080022bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000000 	.word	0x20000000

080022d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d8:	f7ff fff0 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4904      	ldr	r1, [pc, #16]	; (80022fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	08003f0c 	.word	0x08003f0c

08002300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002304:	f7ff ffda 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x24>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	0adb      	lsrs	r3, r3, #11
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	4904      	ldr	r1, [pc, #16]	; (8002328 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002316:	5ccb      	ldrb	r3, [r1, r3]
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	08003f0c 	.word	0x08003f0c

0800232c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002344:	f7ff f906 	bl	8001554 <HAL_PWREx_GetVoltageRange>
 8002348:	6178      	str	r0, [r7, #20]
 800234a:	e014      	b.n	8002376 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	4a21      	ldr	r2, [pc, #132]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002356:	6593      	str	r3, [r2, #88]	; 0x58
 8002358:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002364:	f7ff f8f6 	bl	8001554 <HAL_PWREx_GetVoltageRange>
 8002368:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	4a1a      	ldr	r2, [pc, #104]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237c:	d10b      	bne.n	8002396 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b80      	cmp	r3, #128	; 0x80
 8002382:	d913      	bls.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2ba0      	cmp	r3, #160	; 0xa0
 8002388:	d902      	bls.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800238a:	2302      	movs	r3, #2
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	e00d      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002390:	2301      	movs	r3, #1
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	e00a      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b7f      	cmp	r3, #127	; 0x7f
 800239a:	d902      	bls.n	80023a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800239c:	2302      	movs	r3, #2
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	e004      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b70      	cmp	r3, #112	; 0x70
 80023a6:	d101      	bne.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023a8:	2301      	movs	r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 020f 	bic.w	r2, r3, #15
 80023b4:	4909      	ldr	r1, [pc, #36]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d001      	beq.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40022000 	.word	0x40022000

080023e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023e6:	4b2d      	ldr	r3, [pc, #180]	; (800249c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d00b      	beq.n	800240e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d825      	bhi.n	8002448 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d008      	beq.n	8002414 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d11f      	bne.n	8002448 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800240a:	613b      	str	r3, [r7, #16]
    break;
 800240c:	e01f      	b.n	800244e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800240e:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002410:	613b      	str	r3, [r7, #16]
    break;
 8002412:	e01c      	b.n	800244e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002414:	4b21      	ldr	r3, [pc, #132]	; (800249c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b00      	cmp	r3, #0
 800241e:	d107      	bne.n	8002430 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	e005      	b.n	800243c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800243c:	4a1a      	ldr	r2, [pc, #104]	; (80024a8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002444:	613b      	str	r3, [r7, #16]
    break;
 8002446:	e002      	b.n	800244e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
    break;
 800244c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	3301      	adds	r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	fb03 f202 	mul.w	r2, r3, r2
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0e5b      	lsrs	r3, r3, #25
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	3301      	adds	r3, #1
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800248e:	683b      	ldr	r3, [r7, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40021000 	.word	0x40021000
 80024a0:	00f42400 	.word	0x00f42400
 80024a4:	007a1200 	.word	0x007a1200
 80024a8:	08003f14 	.word	0x08003f14

080024ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024b4:	2300      	movs	r3, #0
 80024b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024b8:	2300      	movs	r3, #0
 80024ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d040      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024cc:	2b80      	cmp	r3, #128	; 0x80
 80024ce:	d02a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80024d0:	2b80      	cmp	r3, #128	; 0x80
 80024d2:	d825      	bhi.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80024d4:	2b60      	cmp	r3, #96	; 0x60
 80024d6:	d026      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80024d8:	2b60      	cmp	r3, #96	; 0x60
 80024da:	d821      	bhi.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80024dc:	2b40      	cmp	r3, #64	; 0x40
 80024de:	d006      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 80024e0:	2b40      	cmp	r3, #64	; 0x40
 80024e2:	d81d      	bhi.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d010      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80024ec:	e018      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024ee:	4b89      	ldr	r3, [pc, #548]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	4a88      	ldr	r2, [pc, #544]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024fa:	e015      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3304      	adds	r3, #4
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fb02 	bl	8002b0c <RCCEx_PLLSAI1_Config>
 8002508:	4603      	mov	r3, r0
 800250a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800250c:	e00c      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3320      	adds	r3, #32
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fbed 	bl	8002cf4 <RCCEx_PLLSAI2_Config>
 800251a:	4603      	mov	r3, r0
 800251c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800251e:	e003      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	74fb      	strb	r3, [r7, #19]
      break;
 8002524:	e000      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10b      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800252e:	4b79      	ldr	r3, [pc, #484]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002530:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002534:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253c:	4975      	ldr	r1, [pc, #468]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800253e:	4313      	orrs	r3, r2
 8002540:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002544:	e001      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002546:	7cfb      	ldrb	r3, [r7, #19]
 8002548:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d047      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255e:	d030      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002564:	d82a      	bhi.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800256a:	d02a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800256c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002570:	d824      	bhi.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002576:	d008      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800257c:	d81e      	bhi.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002586:	d010      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002588:	e018      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800258a:	4b62      	ldr	r3, [pc, #392]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4a61      	ldr	r2, [pc, #388]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002596:	e015      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3304      	adds	r3, #4
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fab4 	bl	8002b0c <RCCEx_PLLSAI1_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025a8:	e00c      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3320      	adds	r3, #32
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fb9f 	bl	8002cf4 <RCCEx_PLLSAI2_Config>
 80025b6:	4603      	mov	r3, r0
 80025b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025ba:	e003      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	74fb      	strb	r3, [r7, #19]
      break;
 80025c0:	e000      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80025c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10b      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ca:	4b52      	ldr	r3, [pc, #328]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	494e      	ldr	r1, [pc, #312]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80025e0:	e001      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 809f 	beq.w	8002732 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f4:	2300      	movs	r3, #0
 80025f6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025f8:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002608:	2300      	movs	r3, #0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00d      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	4a40      	ldr	r2, [pc, #256]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002618:	6593      	str	r3, [r2, #88]	; 0x58
 800261a:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002626:	2301      	movs	r3, #1
 8002628:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800262a:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a3a      	ldr	r2, [pc, #232]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002634:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002636:	f7fe fce5 	bl	8001004 <HAL_GetTick>
 800263a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800263c:	e009      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263e:	f7fe fce1 	bl	8001004 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d902      	bls.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	74fb      	strb	r3, [r7, #19]
        break;
 8002650:	e005      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002652:	4b31      	ldr	r3, [pc, #196]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0ef      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d15b      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002664:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01f      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	429a      	cmp	r2, r3
 8002680:	d019      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002682:	4b24      	ldr	r3, [pc, #144]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800268e:	4b21      	ldr	r3, [pc, #132]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a4:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026ae:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d016      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fca0 	bl	8001004 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c6:	e00b      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7fe fc9c 	bl	8001004 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d902      	bls.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	74fb      	strb	r3, [r7, #19]
            break;
 80026de:	e006      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0ec      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10c      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002704:	4903      	ldr	r1, [pc, #12]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800270c:	e008      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	74bb      	strb	r3, [r7, #18]
 8002712:	e005      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002714:	40021000 	.word	0x40021000
 8002718:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002720:	7c7b      	ldrb	r3, [r7, #17]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d105      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002726:	4ba0      	ldr	r3, [pc, #640]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	4a9f      	ldr	r2, [pc, #636]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800272c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002730:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800273e:	4b9a      	ldr	r3, [pc, #616]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f023 0203 	bic.w	r2, r3, #3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	4996      	ldr	r1, [pc, #600]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002760:	4b91      	ldr	r3, [pc, #580]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	f023 020c 	bic.w	r2, r3, #12
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	498e      	ldr	r1, [pc, #568]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002782:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002788:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	4985      	ldr	r1, [pc, #532]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a4:	4b80      	ldr	r3, [pc, #512]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b2:	497d      	ldr	r1, [pc, #500]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027c6:	4b78      	ldr	r3, [pc, #480]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d4:	4974      	ldr	r1, [pc, #464]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00a      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027e8:	4b6f      	ldr	r3, [pc, #444]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f6:	496c      	ldr	r1, [pc, #432]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800280a:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002810:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002818:	4963      	ldr	r1, [pc, #396]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800282c:	4b5e      	ldr	r3, [pc, #376]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800283a:	495b      	ldr	r1, [pc, #364]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800284e:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	4952      	ldr	r1, [pc, #328]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002870:	4b4d      	ldr	r3, [pc, #308]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	494a      	ldr	r1, [pc, #296]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002892:	4b45      	ldr	r3, [pc, #276]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	4941      	ldr	r1, [pc, #260]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028b4:	4b3c      	ldr	r3, [pc, #240]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c2:	4939      	ldr	r1, [pc, #228]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d028      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028d6:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e4:	4930      	ldr	r1, [pc, #192]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028f4:	d106      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f6:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4a2b      	ldr	r2, [pc, #172]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002900:	60d3      	str	r3, [r2, #12]
 8002902:	e011      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800290c:	d10c      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	2101      	movs	r1, #1
 8002914:	4618      	mov	r0, r3
 8002916:	f000 f8f9 	bl	8002b0c <RCCEx_PLLSAI1_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d04d      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800293c:	d108      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002940:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800294a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800294e:	e012      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002950:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002956:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002958:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800295c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800296e:	490e      	ldr	r1, [pc, #56]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800297a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800297e:	d106      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a08      	ldr	r2, [pc, #32]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800298a:	60d3      	str	r3, [r2, #12]
 800298c:	e020      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002996:	d109      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002998:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4a02      	ldr	r2, [pc, #8]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800299e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a2:	60d3      	str	r3, [r2, #12]
 80029a4:	e014      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2101      	movs	r1, #1
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f8a5 	bl	8002b0c <RCCEx_PLLSAI1_Config>
 80029c2:	4603      	mov	r3, r0
 80029c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029c6:	7cfb      	ldrb	r3, [r7, #19]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d028      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029dc:	4b4a      	ldr	r3, [pc, #296]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ea:	4947      	ldr	r1, [pc, #284]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029fa:	d106      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fc:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a41      	ldr	r2, [pc, #260]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a06:	60d3      	str	r3, [r2, #12]
 8002a08:	e011      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a12:	d10c      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f876 	bl	8002b0c <RCCEx_PLLSAI1_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002a2a:	7cfb      	ldrb	r3, [r7, #19]
 8002a2c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01e      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a3a:	4b33      	ldr	r3, [pc, #204]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a4a:	492f      	ldr	r1, [pc, #188]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2102      	movs	r1, #2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 f851 	bl	8002b0c <RCCEx_PLLSAI1_Config>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a6e:	7cfb      	ldrb	r3, [r7, #19]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a84:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a8a:	f023 0204 	bic.w	r2, r3, #4
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a94:	491c      	ldr	r1, [pc, #112]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00b      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002aa8:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aae:	f023 0218 	bic.w	r2, r3, #24
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	4913      	ldr	r1, [pc, #76]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d017      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ad2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002adc:	490a      	ldr	r1, [pc, #40]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002afc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000

08002b0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b1a:	4b72      	ldr	r3, [pc, #456]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00e      	beq.n	8002b44 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b26:	4b6f      	ldr	r3, [pc, #444]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0203 	and.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d103      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
       ||
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d142      	bne.n	8002bc4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	e03f      	b.n	8002bc4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d018      	beq.n	8002b7e <RCCEx_PLLSAI1_Config+0x72>
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d825      	bhi.n	8002b9c <RCCEx_PLLSAI1_Config+0x90>
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d002      	beq.n	8002b5a <RCCEx_PLLSAI1_Config+0x4e>
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d009      	beq.n	8002b6c <RCCEx_PLLSAI1_Config+0x60>
 8002b58:	e020      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b5a:	4b62      	ldr	r3, [pc, #392]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d11d      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6a:	e01a      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b6c:	4b5d      	ldr	r3, [pc, #372]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d116      	bne.n	8002ba6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7c:	e013      	b.n	8002ba6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b7e:	4b59      	ldr	r3, [pc, #356]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10f      	bne.n	8002baa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b8a:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b9a:	e006      	b.n	8002baa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba0:	e004      	b.n	8002bac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e002      	b.n	8002bac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e000      	b.n	8002bac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002baa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d108      	bne.n	8002bc4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002bb2:	4b4c      	ldr	r3, [pc, #304]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f023 0203 	bic.w	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4949      	ldr	r1, [pc, #292]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 8086 	bne.w	8002cd8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bcc:	4b45      	ldr	r3, [pc, #276]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a44      	ldr	r2, [pc, #272]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fa14 	bl	8001004 <HAL_GetTick>
 8002bdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bde:	e009      	b.n	8002bf4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002be0:	f7fe fa10 	bl	8001004 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d902      	bls.n	8002bf4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8002bf2:	e005      	b.n	8002c00 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bf4:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ef      	bne.n	8002be0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d168      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d113      	bne.n	8002c34 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c0c:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	4b35      	ldr	r3, [pc, #212]	; (8002ce8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6892      	ldr	r2, [r2, #8]
 8002c18:	0211      	lsls	r1, r2, #8
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68d2      	ldr	r2, [r2, #12]
 8002c1e:	06d2      	lsls	r2, r2, #27
 8002c20:	4311      	orrs	r1, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6852      	ldr	r2, [r2, #4]
 8002c26:	3a01      	subs	r2, #1
 8002c28:	0112      	lsls	r2, r2, #4
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	492d      	ldr	r1, [pc, #180]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	610b      	str	r3, [r1, #16]
 8002c32:	e02d      	b.n	8002c90 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d115      	bne.n	8002c66 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6892      	ldr	r2, [r2, #8]
 8002c46:	0211      	lsls	r1, r2, #8
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6912      	ldr	r2, [r2, #16]
 8002c4c:	0852      	lsrs	r2, r2, #1
 8002c4e:	3a01      	subs	r2, #1
 8002c50:	0552      	lsls	r2, r2, #21
 8002c52:	4311      	orrs	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6852      	ldr	r2, [r2, #4]
 8002c58:	3a01      	subs	r2, #1
 8002c5a:	0112      	lsls	r2, r2, #4
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	4921      	ldr	r1, [pc, #132]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	610b      	str	r3, [r1, #16]
 8002c64:	e014      	b.n	8002c90 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c66:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6892      	ldr	r2, [r2, #8]
 8002c72:	0211      	lsls	r1, r2, #8
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6952      	ldr	r2, [r2, #20]
 8002c78:	0852      	lsrs	r2, r2, #1
 8002c7a:	3a01      	subs	r2, #1
 8002c7c:	0652      	lsls	r2, r2, #25
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6852      	ldr	r2, [r2, #4]
 8002c84:	3a01      	subs	r2, #1
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	4916      	ldr	r1, [pc, #88]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c90:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a13      	ldr	r2, [pc, #76]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7fe f9b2 	bl	8001004 <HAL_GetTick>
 8002ca0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ca2:	e009      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ca4:	f7fe f9ae 	bl	8001004 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d902      	bls.n	8002cb8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	73fb      	strb	r3, [r7, #15]
          break;
 8002cb6:	e005      	b.n	8002cc4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ef      	beq.n	8002ca4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	4904      	ldr	r1, [pc, #16]	; (8002ce4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	07ff800f 	.word	0x07ff800f
 8002cec:	ff9f800f 	.word	0xff9f800f
 8002cf0:	f9ff800f 	.word	0xf9ff800f

08002cf4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d02:	4b72      	ldr	r3, [pc, #456]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00e      	beq.n	8002d2c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d0e:	4b6f      	ldr	r3, [pc, #444]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0203 	and.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d103      	bne.n	8002d26 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
       ||
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d142      	bne.n	8002dac <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
 8002d2a:	e03f      	b.n	8002dac <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d018      	beq.n	8002d66 <RCCEx_PLLSAI2_Config+0x72>
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d825      	bhi.n	8002d84 <RCCEx_PLLSAI2_Config+0x90>
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d002      	beq.n	8002d42 <RCCEx_PLLSAI2_Config+0x4e>
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d009      	beq.n	8002d54 <RCCEx_PLLSAI2_Config+0x60>
 8002d40:	e020      	b.n	8002d84 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d42:	4b62      	ldr	r3, [pc, #392]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d11d      	bne.n	8002d8a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d52:	e01a      	b.n	8002d8a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d54:	4b5d      	ldr	r3, [pc, #372]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d116      	bne.n	8002d8e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d64:	e013      	b.n	8002d8e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d66:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10f      	bne.n	8002d92 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d72:	4b56      	ldr	r3, [pc, #344]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d82:	e006      	b.n	8002d92 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      break;
 8002d88:	e004      	b.n	8002d94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e002      	b.n	8002d94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e000      	b.n	8002d94 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002d92:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d108      	bne.n	8002dac <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002d9a:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f023 0203 	bic.w	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4949      	ldr	r1, [pc, #292]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 8086 	bne.w	8002ec0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002db4:	4b45      	ldr	r3, [pc, #276]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a44      	ldr	r2, [pc, #272]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc0:	f7fe f920 	bl	8001004 <HAL_GetTick>
 8002dc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dc6:	e009      	b.n	8002ddc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dc8:	f7fe f91c 	bl	8001004 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d902      	bls.n	8002ddc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dda:	e005      	b.n	8002de8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ddc:	4b3b      	ldr	r3, [pc, #236]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ef      	bne.n	8002dc8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d168      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d113      	bne.n	8002e1c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	4b35      	ldr	r3, [pc, #212]	; (8002ed0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6892      	ldr	r2, [r2, #8]
 8002e00:	0211      	lsls	r1, r2, #8
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68d2      	ldr	r2, [r2, #12]
 8002e06:	06d2      	lsls	r2, r2, #27
 8002e08:	4311      	orrs	r1, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6852      	ldr	r2, [r2, #4]
 8002e0e:	3a01      	subs	r2, #1
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	430a      	orrs	r2, r1
 8002e14:	492d      	ldr	r1, [pc, #180]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	614b      	str	r3, [r1, #20]
 8002e1a:	e02d      	b.n	8002e78 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d115      	bne.n	8002e4e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	4b2b      	ldr	r3, [pc, #172]	; (8002ed4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6892      	ldr	r2, [r2, #8]
 8002e2e:	0211      	lsls	r1, r2, #8
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6912      	ldr	r2, [r2, #16]
 8002e34:	0852      	lsrs	r2, r2, #1
 8002e36:	3a01      	subs	r2, #1
 8002e38:	0552      	lsls	r2, r2, #21
 8002e3a:	4311      	orrs	r1, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6852      	ldr	r2, [r2, #4]
 8002e40:	3a01      	subs	r2, #1
 8002e42:	0112      	lsls	r2, r2, #4
 8002e44:	430a      	orrs	r2, r1
 8002e46:	4921      	ldr	r1, [pc, #132]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	614b      	str	r3, [r1, #20]
 8002e4c:	e014      	b.n	8002e78 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e4e:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	4b21      	ldr	r3, [pc, #132]	; (8002ed8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6892      	ldr	r2, [r2, #8]
 8002e5a:	0211      	lsls	r1, r2, #8
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6952      	ldr	r2, [r2, #20]
 8002e60:	0852      	lsrs	r2, r2, #1
 8002e62:	3a01      	subs	r2, #1
 8002e64:	0652      	lsls	r2, r2, #25
 8002e66:	4311      	orrs	r1, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6852      	ldr	r2, [r2, #4]
 8002e6c:	3a01      	subs	r2, #1
 8002e6e:	0112      	lsls	r2, r2, #4
 8002e70:	430a      	orrs	r2, r1
 8002e72:	4916      	ldr	r1, [pc, #88]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a13      	ldr	r2, [pc, #76]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe f8be 	bl	8001004 <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e8a:	e009      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e8c:	f7fe f8ba 	bl	8001004 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d902      	bls.n	8002ea0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e9e:	e005      	b.n	8002eac <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ef      	beq.n	8002e8c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	4904      	ldr	r1, [pc, #16]	; (8002ecc <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	07ff800f 	.word	0x07ff800f
 8002ed4:	ff9f800f 	.word	0xff9f800f
 8002ed8:	f9ff800f 	.word	0xf9ff800f

08002edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e042      	b.n	8002f74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d106      	bne.n	8002f06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7fd fec7 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2224      	movs	r2, #36	; 0x24
 8002f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f998 	bl	8003254 <UART_SetConfig>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e022      	b.n	8002f74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fc88 	bl	800384c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fd0f 	bl	8003990 <UART_CheckIdleState>
 8002f72:	4603      	mov	r3, r0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f92:	2b20      	cmp	r3, #32
 8002f94:	f040 8084 	bne.w	80030a0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_UART_Transmit+0x28>
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e07c      	b.n	80030a2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Transmit+0x3a>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e075      	b.n	80030a2 <HAL_UART_Transmit+0x126>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2221      	movs	r2, #33	; 0x21
 8002fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fce:	f7fe f819 	bl	8001004 <HAL_GetTick>
 8002fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	88fa      	ldrh	r2, [r7, #6]
 8002fd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	88fa      	ldrh	r2, [r7, #6]
 8002fe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fec:	d108      	bne.n	8003000 <HAL_UART_Transmit+0x84>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d104      	bne.n	8003000 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e003      	b.n	8003008 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003004:	2300      	movs	r3, #0
 8003006:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003010:	e02d      	b.n	800306e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fd02 	bl	8003a26 <UART_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e03a      	b.n	80030a2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	881a      	ldrh	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800303e:	b292      	uxth	r2, r2
 8003040:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	3302      	adds	r3, #2
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e008      	b.n	800305c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	b292      	uxth	r2, r2
 8003054:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3301      	adds	r3, #1
 800305a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1cb      	bne.n	8003012 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2200      	movs	r2, #0
 8003082:	2140      	movs	r1, #64	; 0x40
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fcce 	bl	8003a26 <UART_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e006      	b.n	80030a2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b08a      	sub	sp, #40	; 0x28
 80030ae:	af02      	add	r7, sp, #8
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	603b      	str	r3, [r7, #0]
 80030b6:	4613      	mov	r3, r2
 80030b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	f040 80c1 	bne.w	8003248 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_UART_Receive+0x28>
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0b9      	b.n	800324a <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Receive+0x3a>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e0b2      	b.n	800324a <HAL_UART_Receive+0x1a0>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2222      	movs	r2, #34	; 0x22
 80030f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003102:	f7fd ff7f 	bl	8001004 <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	88fa      	ldrh	r2, [r7, #6]
 8003114:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003120:	d10e      	bne.n	8003140 <HAL_UART_Receive+0x96>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <HAL_UART_Receive+0x8c>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003130:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003134:	e02d      	b.n	8003192 <HAL_UART_Receive+0xe8>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	22ff      	movs	r2, #255	; 0xff
 800313a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800313e:	e028      	b.n	8003192 <HAL_UART_Receive+0xe8>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10d      	bne.n	8003164 <HAL_UART_Receive+0xba>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d104      	bne.n	800315a <HAL_UART_Receive+0xb0>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	22ff      	movs	r2, #255	; 0xff
 8003154:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003158:	e01b      	b.n	8003192 <HAL_UART_Receive+0xe8>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	227f      	movs	r2, #127	; 0x7f
 800315e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003162:	e016      	b.n	8003192 <HAL_UART_Receive+0xe8>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800316c:	d10d      	bne.n	800318a <HAL_UART_Receive+0xe0>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d104      	bne.n	8003180 <HAL_UART_Receive+0xd6>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	227f      	movs	r2, #127	; 0x7f
 800317a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800317e:	e008      	b.n	8003192 <HAL_UART_Receive+0xe8>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	223f      	movs	r2, #63	; 0x3f
 8003184:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003188:	e003      	b.n	8003192 <HAL_UART_Receive+0xe8>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003198:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a2:	d108      	bne.n	80031b6 <HAL_UART_Receive+0x10c>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	e003      	b.n	80031be <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80031c6:	e033      	b.n	8003230 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2200      	movs	r2, #0
 80031d0:	2120      	movs	r1, #32
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fc27 	bl	8003a26 <UART_WaitOnFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e033      	b.n	800324a <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10c      	bne.n	8003202 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	8a7b      	ldrh	r3, [r7, #18]
 80031f2:	4013      	ands	r3, r2
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	3302      	adds	r3, #2
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	e00d      	b.n	800321e <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003208:	b29b      	uxth	r3, r3
 800320a:	b2da      	uxtb	r2, r3
 800320c:	8a7b      	ldrh	r3, [r7, #18]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	4013      	ands	r3, r2
 8003212:	b2da      	uxtb	r2, r3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3301      	adds	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1c5      	bne.n	80031c8 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	e000      	b.n	800324a <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
  }
}
 800324a:	4618      	mov	r0, r3
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003258:	b08c      	sub	sp, #48	; 0x30
 800325a:	af00      	add	r7, sp, #0
 800325c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	431a      	orrs	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	431a      	orrs	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	4313      	orrs	r3, r2
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4baa      	ldr	r3, [pc, #680]	; (800352c <UART_SetConfig+0x2d8>)
 8003284:	4013      	ands	r3, r2
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800328c:	430b      	orrs	r3, r1
 800328e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a9f      	ldr	r2, [pc, #636]	; (8003530 <UART_SetConfig+0x2dc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032bc:	4313      	orrs	r3, r2
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80032ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032d4:	430b      	orrs	r3, r1
 80032d6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	f023 010f 	bic.w	r1, r3, #15
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a90      	ldr	r2, [pc, #576]	; (8003534 <UART_SetConfig+0x2e0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d125      	bne.n	8003344 <UART_SetConfig+0xf0>
 80032f8:	4b8f      	ldr	r3, [pc, #572]	; (8003538 <UART_SetConfig+0x2e4>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b03      	cmp	r3, #3
 8003304:	d81a      	bhi.n	800333c <UART_SetConfig+0xe8>
 8003306:	a201      	add	r2, pc, #4	; (adr r2, 800330c <UART_SetConfig+0xb8>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	0800331d 	.word	0x0800331d
 8003310:	0800332d 	.word	0x0800332d
 8003314:	08003325 	.word	0x08003325
 8003318:	08003335 	.word	0x08003335
 800331c:	2301      	movs	r3, #1
 800331e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003322:	e116      	b.n	8003552 <UART_SetConfig+0x2fe>
 8003324:	2302      	movs	r3, #2
 8003326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800332a:	e112      	b.n	8003552 <UART_SetConfig+0x2fe>
 800332c:	2304      	movs	r3, #4
 800332e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003332:	e10e      	b.n	8003552 <UART_SetConfig+0x2fe>
 8003334:	2308      	movs	r3, #8
 8003336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800333a:	e10a      	b.n	8003552 <UART_SetConfig+0x2fe>
 800333c:	2310      	movs	r3, #16
 800333e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003342:	e106      	b.n	8003552 <UART_SetConfig+0x2fe>
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a7c      	ldr	r2, [pc, #496]	; (800353c <UART_SetConfig+0x2e8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d138      	bne.n	80033c0 <UART_SetConfig+0x16c>
 800334e:	4b7a      	ldr	r3, [pc, #488]	; (8003538 <UART_SetConfig+0x2e4>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b0c      	cmp	r3, #12
 800335a:	d82d      	bhi.n	80033b8 <UART_SetConfig+0x164>
 800335c:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <UART_SetConfig+0x110>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003399 	.word	0x08003399
 8003368:	080033b9 	.word	0x080033b9
 800336c:	080033b9 	.word	0x080033b9
 8003370:	080033b9 	.word	0x080033b9
 8003374:	080033a9 	.word	0x080033a9
 8003378:	080033b9 	.word	0x080033b9
 800337c:	080033b9 	.word	0x080033b9
 8003380:	080033b9 	.word	0x080033b9
 8003384:	080033a1 	.word	0x080033a1
 8003388:	080033b9 	.word	0x080033b9
 800338c:	080033b9 	.word	0x080033b9
 8003390:	080033b9 	.word	0x080033b9
 8003394:	080033b1 	.word	0x080033b1
 8003398:	2300      	movs	r3, #0
 800339a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800339e:	e0d8      	b.n	8003552 <UART_SetConfig+0x2fe>
 80033a0:	2302      	movs	r3, #2
 80033a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033a6:	e0d4      	b.n	8003552 <UART_SetConfig+0x2fe>
 80033a8:	2304      	movs	r3, #4
 80033aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ae:	e0d0      	b.n	8003552 <UART_SetConfig+0x2fe>
 80033b0:	2308      	movs	r3, #8
 80033b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033b6:	e0cc      	b.n	8003552 <UART_SetConfig+0x2fe>
 80033b8:	2310      	movs	r3, #16
 80033ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033be:	e0c8      	b.n	8003552 <UART_SetConfig+0x2fe>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a5e      	ldr	r2, [pc, #376]	; (8003540 <UART_SetConfig+0x2ec>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d125      	bne.n	8003416 <UART_SetConfig+0x1c2>
 80033ca:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <UART_SetConfig+0x2e4>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033d4:	2b30      	cmp	r3, #48	; 0x30
 80033d6:	d016      	beq.n	8003406 <UART_SetConfig+0x1b2>
 80033d8:	2b30      	cmp	r3, #48	; 0x30
 80033da:	d818      	bhi.n	800340e <UART_SetConfig+0x1ba>
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d00a      	beq.n	80033f6 <UART_SetConfig+0x1a2>
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d814      	bhi.n	800340e <UART_SetConfig+0x1ba>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <UART_SetConfig+0x19a>
 80033e8:	2b10      	cmp	r3, #16
 80033ea:	d008      	beq.n	80033fe <UART_SetConfig+0x1aa>
 80033ec:	e00f      	b.n	800340e <UART_SetConfig+0x1ba>
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033f4:	e0ad      	b.n	8003552 <UART_SetConfig+0x2fe>
 80033f6:	2302      	movs	r3, #2
 80033f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033fc:	e0a9      	b.n	8003552 <UART_SetConfig+0x2fe>
 80033fe:	2304      	movs	r3, #4
 8003400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003404:	e0a5      	b.n	8003552 <UART_SetConfig+0x2fe>
 8003406:	2308      	movs	r3, #8
 8003408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800340c:	e0a1      	b.n	8003552 <UART_SetConfig+0x2fe>
 800340e:	2310      	movs	r3, #16
 8003410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003414:	e09d      	b.n	8003552 <UART_SetConfig+0x2fe>
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a4a      	ldr	r2, [pc, #296]	; (8003544 <UART_SetConfig+0x2f0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d125      	bne.n	800346c <UART_SetConfig+0x218>
 8003420:	4b45      	ldr	r3, [pc, #276]	; (8003538 <UART_SetConfig+0x2e4>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800342a:	2bc0      	cmp	r3, #192	; 0xc0
 800342c:	d016      	beq.n	800345c <UART_SetConfig+0x208>
 800342e:	2bc0      	cmp	r3, #192	; 0xc0
 8003430:	d818      	bhi.n	8003464 <UART_SetConfig+0x210>
 8003432:	2b80      	cmp	r3, #128	; 0x80
 8003434:	d00a      	beq.n	800344c <UART_SetConfig+0x1f8>
 8003436:	2b80      	cmp	r3, #128	; 0x80
 8003438:	d814      	bhi.n	8003464 <UART_SetConfig+0x210>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <UART_SetConfig+0x1f0>
 800343e:	2b40      	cmp	r3, #64	; 0x40
 8003440:	d008      	beq.n	8003454 <UART_SetConfig+0x200>
 8003442:	e00f      	b.n	8003464 <UART_SetConfig+0x210>
 8003444:	2300      	movs	r3, #0
 8003446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800344a:	e082      	b.n	8003552 <UART_SetConfig+0x2fe>
 800344c:	2302      	movs	r3, #2
 800344e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003452:	e07e      	b.n	8003552 <UART_SetConfig+0x2fe>
 8003454:	2304      	movs	r3, #4
 8003456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800345a:	e07a      	b.n	8003552 <UART_SetConfig+0x2fe>
 800345c:	2308      	movs	r3, #8
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003462:	e076      	b.n	8003552 <UART_SetConfig+0x2fe>
 8003464:	2310      	movs	r3, #16
 8003466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800346a:	e072      	b.n	8003552 <UART_SetConfig+0x2fe>
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a35      	ldr	r2, [pc, #212]	; (8003548 <UART_SetConfig+0x2f4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d12a      	bne.n	80034cc <UART_SetConfig+0x278>
 8003476:	4b30      	ldr	r3, [pc, #192]	; (8003538 <UART_SetConfig+0x2e4>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003484:	d01a      	beq.n	80034bc <UART_SetConfig+0x268>
 8003486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800348a:	d81b      	bhi.n	80034c4 <UART_SetConfig+0x270>
 800348c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003490:	d00c      	beq.n	80034ac <UART_SetConfig+0x258>
 8003492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003496:	d815      	bhi.n	80034c4 <UART_SetConfig+0x270>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <UART_SetConfig+0x250>
 800349c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a0:	d008      	beq.n	80034b4 <UART_SetConfig+0x260>
 80034a2:	e00f      	b.n	80034c4 <UART_SetConfig+0x270>
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034aa:	e052      	b.n	8003552 <UART_SetConfig+0x2fe>
 80034ac:	2302      	movs	r3, #2
 80034ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b2:	e04e      	b.n	8003552 <UART_SetConfig+0x2fe>
 80034b4:	2304      	movs	r3, #4
 80034b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ba:	e04a      	b.n	8003552 <UART_SetConfig+0x2fe>
 80034bc:	2308      	movs	r3, #8
 80034be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034c2:	e046      	b.n	8003552 <UART_SetConfig+0x2fe>
 80034c4:	2310      	movs	r3, #16
 80034c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ca:	e042      	b.n	8003552 <UART_SetConfig+0x2fe>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <UART_SetConfig+0x2dc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d13a      	bne.n	800354c <UART_SetConfig+0x2f8>
 80034d6:	4b18      	ldr	r3, [pc, #96]	; (8003538 <UART_SetConfig+0x2e4>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034e4:	d01a      	beq.n	800351c <UART_SetConfig+0x2c8>
 80034e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034ea:	d81b      	bhi.n	8003524 <UART_SetConfig+0x2d0>
 80034ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f0:	d00c      	beq.n	800350c <UART_SetConfig+0x2b8>
 80034f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f6:	d815      	bhi.n	8003524 <UART_SetConfig+0x2d0>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <UART_SetConfig+0x2b0>
 80034fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003500:	d008      	beq.n	8003514 <UART_SetConfig+0x2c0>
 8003502:	e00f      	b.n	8003524 <UART_SetConfig+0x2d0>
 8003504:	2300      	movs	r3, #0
 8003506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800350a:	e022      	b.n	8003552 <UART_SetConfig+0x2fe>
 800350c:	2302      	movs	r3, #2
 800350e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003512:	e01e      	b.n	8003552 <UART_SetConfig+0x2fe>
 8003514:	2304      	movs	r3, #4
 8003516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800351a:	e01a      	b.n	8003552 <UART_SetConfig+0x2fe>
 800351c:	2308      	movs	r3, #8
 800351e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003522:	e016      	b.n	8003552 <UART_SetConfig+0x2fe>
 8003524:	2310      	movs	r3, #16
 8003526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800352a:	e012      	b.n	8003552 <UART_SetConfig+0x2fe>
 800352c:	cfff69f3 	.word	0xcfff69f3
 8003530:	40008000 	.word	0x40008000
 8003534:	40013800 	.word	0x40013800
 8003538:	40021000 	.word	0x40021000
 800353c:	40004400 	.word	0x40004400
 8003540:	40004800 	.word	0x40004800
 8003544:	40004c00 	.word	0x40004c00
 8003548:	40005000 	.word	0x40005000
 800354c:	2310      	movs	r3, #16
 800354e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4aae      	ldr	r2, [pc, #696]	; (8003810 <UART_SetConfig+0x5bc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	f040 8097 	bne.w	800368c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800355e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003562:	2b08      	cmp	r3, #8
 8003564:	d823      	bhi.n	80035ae <UART_SetConfig+0x35a>
 8003566:	a201      	add	r2, pc, #4	; (adr r2, 800356c <UART_SetConfig+0x318>)
 8003568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356c:	08003591 	.word	0x08003591
 8003570:	080035af 	.word	0x080035af
 8003574:	08003599 	.word	0x08003599
 8003578:	080035af 	.word	0x080035af
 800357c:	0800359f 	.word	0x0800359f
 8003580:	080035af 	.word	0x080035af
 8003584:	080035af 	.word	0x080035af
 8003588:	080035af 	.word	0x080035af
 800358c:	080035a7 	.word	0x080035a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003590:	f7fe fea0 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8003594:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003596:	e010      	b.n	80035ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003598:	4b9e      	ldr	r3, [pc, #632]	; (8003814 <UART_SetConfig+0x5c0>)
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800359c:	e00d      	b.n	80035ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800359e:	f7fe fe01 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 80035a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035a4:	e009      	b.n	80035ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035ac:	e005      	b.n	80035ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80035b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8130 	beq.w	8003822 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	4a94      	ldr	r2, [pc, #592]	; (8003818 <UART_SetConfig+0x5c4>)
 80035c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035cc:	461a      	mov	r2, r3
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d305      	bcc.n	80035f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d903      	bls.n	80035fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035f8:	e113      	b.n	8003822 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	2200      	movs	r2, #0
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	60fa      	str	r2, [r7, #12]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	4a84      	ldr	r2, [pc, #528]	; (8003818 <UART_SetConfig+0x5c4>)
 8003608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800360c:	b29b      	uxth	r3, r3
 800360e:	2200      	movs	r2, #0
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003618:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800361c:	f7fc fdee 	bl	80001fc <__aeabi_uldivmod>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	020b      	lsls	r3, r1, #8
 8003632:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003636:	0202      	lsls	r2, r0, #8
 8003638:	6979      	ldr	r1, [r7, #20]
 800363a:	6849      	ldr	r1, [r1, #4]
 800363c:	0849      	lsrs	r1, r1, #1
 800363e:	2000      	movs	r0, #0
 8003640:	460c      	mov	r4, r1
 8003642:	4605      	mov	r5, r0
 8003644:	eb12 0804 	adds.w	r8, r2, r4
 8003648:	eb43 0905 	adc.w	r9, r3, r5
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	469a      	mov	sl, r3
 8003654:	4693      	mov	fp, r2
 8003656:	4652      	mov	r2, sl
 8003658:	465b      	mov	r3, fp
 800365a:	4640      	mov	r0, r8
 800365c:	4649      	mov	r1, r9
 800365e:	f7fc fdcd 	bl	80001fc <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4613      	mov	r3, r2
 8003668:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003670:	d308      	bcc.n	8003684 <UART_SetConfig+0x430>
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003678:	d204      	bcs.n	8003684 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a3a      	ldr	r2, [r7, #32]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	e0ce      	b.n	8003822 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800368a:	e0ca      	b.n	8003822 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003694:	d166      	bne.n	8003764 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003696:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800369a:	2b08      	cmp	r3, #8
 800369c:	d827      	bhi.n	80036ee <UART_SetConfig+0x49a>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x450>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036d1 	.word	0x080036d1
 80036ac:	080036d9 	.word	0x080036d9
 80036b0:	080036ef 	.word	0x080036ef
 80036b4:	080036df 	.word	0x080036df
 80036b8:	080036ef 	.word	0x080036ef
 80036bc:	080036ef 	.word	0x080036ef
 80036c0:	080036ef 	.word	0x080036ef
 80036c4:	080036e7 	.word	0x080036e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c8:	f7fe fe04 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 80036cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036ce:	e014      	b.n	80036fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036d0:	f7fe fe16 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 80036d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036d6:	e010      	b.n	80036fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d8:	4b4e      	ldr	r3, [pc, #312]	; (8003814 <UART_SetConfig+0x5c0>)
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036dc:	e00d      	b.n	80036fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036de:	f7fe fd61 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 80036e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036e4:	e009      	b.n	80036fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036ec:	e005      	b.n	80036fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8090 	beq.w	8003822 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	4a44      	ldr	r2, [pc, #272]	; (8003818 <UART_SetConfig+0x5c4>)
 8003708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800370c:	461a      	mov	r2, r3
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	fbb3 f3f2 	udiv	r3, r3, r2
 8003714:	005a      	lsls	r2, r3, #1
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	441a      	add	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	2b0f      	cmp	r3, #15
 800372c:	d916      	bls.n	800375c <UART_SetConfig+0x508>
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003734:	d212      	bcs.n	800375c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	b29b      	uxth	r3, r3
 800373a:	f023 030f 	bic.w	r3, r3, #15
 800373e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	085b      	lsrs	r3, r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	b29a      	uxth	r2, r3
 800374c:	8bfb      	ldrh	r3, [r7, #30]
 800374e:	4313      	orrs	r3, r2
 8003750:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	8bfa      	ldrh	r2, [r7, #30]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	e062      	b.n	8003822 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003762:	e05e      	b.n	8003822 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003764:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003768:	2b08      	cmp	r3, #8
 800376a:	d828      	bhi.n	80037be <UART_SetConfig+0x56a>
 800376c:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <UART_SetConfig+0x520>)
 800376e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003772:	bf00      	nop
 8003774:	08003799 	.word	0x08003799
 8003778:	080037a1 	.word	0x080037a1
 800377c:	080037a9 	.word	0x080037a9
 8003780:	080037bf 	.word	0x080037bf
 8003784:	080037af 	.word	0x080037af
 8003788:	080037bf 	.word	0x080037bf
 800378c:	080037bf 	.word	0x080037bf
 8003790:	080037bf 	.word	0x080037bf
 8003794:	080037b7 	.word	0x080037b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003798:	f7fe fd9c 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 800379c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800379e:	e014      	b.n	80037ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037a0:	f7fe fdae 	bl	8002300 <HAL_RCC_GetPCLK2Freq>
 80037a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037a6:	e010      	b.n	80037ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a8:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <UART_SetConfig+0x5c0>)
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037ac:	e00d      	b.n	80037ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ae:	f7fe fcf9 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 80037b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037b4:	e009      	b.n	80037ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037bc:	e005      	b.n	80037ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037c8:	bf00      	nop
    }

    if (pclk != 0U)
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d028      	beq.n	8003822 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	4a10      	ldr	r2, [pc, #64]	; (8003818 <UART_SetConfig+0x5c4>)
 80037d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037da:	461a      	mov	r2, r3
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	fbb3 f2f2 	udiv	r2, r3, r2
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	441a      	add	r2, r3
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	2b0f      	cmp	r3, #15
 80037f8:	d910      	bls.n	800381c <UART_SetConfig+0x5c8>
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003800:	d20c      	bcs.n	800381c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	b29a      	uxth	r2, r3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60da      	str	r2, [r3, #12]
 800380c:	e009      	b.n	8003822 <UART_SetConfig+0x5ce>
 800380e:	bf00      	nop
 8003810:	40008000 	.word	0x40008000
 8003814:	00f42400 	.word	0x00f42400
 8003818:	08003f44 	.word	0x08003f44
      }
      else
      {
        ret = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2201      	movs	r2, #1
 8003826:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2201      	movs	r2, #1
 800382e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2200      	movs	r2, #0
 8003836:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2200      	movs	r2, #0
 800383c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800383e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003842:	4618      	mov	r0, r3
 8003844:	3730      	adds	r7, #48	; 0x30
 8003846:	46bd      	mov	sp, r7
 8003848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800384c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01a      	beq.n	8003962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800394a:	d10a      	bne.n	8003962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	605a      	str	r2, [r3, #4]
  }
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af02      	add	r7, sp, #8
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039a0:	f7fd fb30 	bl	8001004 <HAL_GetTick>
 80039a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d10e      	bne.n	80039d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f82f 	bl	8003a26 <UART_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e025      	b.n	8003a1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d10e      	bne.n	80039fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f819 	bl	8003a26 <UART_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e00f      	b.n	8003a1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b09c      	sub	sp, #112	; 0x70
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	4613      	mov	r3, r2
 8003a34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a36:	e0a9      	b.n	8003b8c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	f000 80a5 	beq.w	8003b8c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	f7fd fadf 	bl	8001004 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d302      	bcc.n	8003a58 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d140      	bne.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a6c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a78:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e6      	bne.n	8003a58 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3308      	adds	r3, #8
 8003a90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aaa:	64ba      	str	r2, [r7, #72]	; 0x48
 8003aac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e5      	bne.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e069      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d051      	beq.n	8003b8c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af6:	d149      	bne.n	8003b8c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b20:	637b      	str	r3, [r7, #52]	; 0x34
 8003b22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e6      	bne.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3308      	adds	r3, #8
 8003b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	613b      	str	r3, [r7, #16]
   return(result);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3308      	adds	r3, #8
 8003b52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b54:	623a      	str	r2, [r7, #32]
 8003b56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	69f9      	ldr	r1, [r7, #28]
 8003b5a:	6a3a      	ldr	r2, [r7, #32]
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e5      	bne.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e010      	b.n	8003bae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4013      	ands	r3, r2
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	f43f af46 	beq.w	8003a38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3770      	adds	r7, #112	; 0x70
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_UARTEx_DisableFifoMode+0x16>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e027      	b.n	8003c1c <HAL_UARTEx_DisableFifoMode+0x66>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003bfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e02d      	b.n	8003c9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	; 0x24
 8003c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f84f 	bl	8003d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e02d      	b.n	8003d18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2224      	movs	r2, #36	; 0x24
 8003cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0201 	bic.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f811 	bl	8003d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d108      	bne.n	8003d42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d40:	e031      	b.n	8003da6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d42:	2308      	movs	r3, #8
 8003d44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d46:	2308      	movs	r3, #8
 8003d48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	0e5b      	lsrs	r3, r3, #25
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	0f5b      	lsrs	r3, r3, #29
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d6a:	7bbb      	ldrb	r3, [r7, #14]
 8003d6c:	7b3a      	ldrb	r2, [r7, #12]
 8003d6e:	4911      	ldr	r1, [pc, #68]	; (8003db4 <UARTEx_SetNbDataToProcess+0x94>)
 8003d70:	5c8a      	ldrb	r2, [r1, r2]
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d76:	7b3a      	ldrb	r2, [r7, #12]
 8003d78:	490f      	ldr	r1, [pc, #60]	; (8003db8 <UARTEx_SetNbDataToProcess+0x98>)
 8003d7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	7b7a      	ldrb	r2, [r7, #13]
 8003d8c:	4909      	ldr	r1, [pc, #36]	; (8003db4 <UARTEx_SetNbDataToProcess+0x94>)
 8003d8e:	5c8a      	ldrb	r2, [r1, r2]
 8003d90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d94:	7b7a      	ldrb	r2, [r7, #13]
 8003d96:	4908      	ldr	r1, [pc, #32]	; (8003db8 <UARTEx_SetNbDataToProcess+0x98>)
 8003d98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	08003f5c 	.word	0x08003f5c
 8003db8:	08003f64 	.word	0x08003f64

08003dbc <__libc_init_array>:
 8003dbc:	b570      	push	{r4, r5, r6, lr}
 8003dbe:	4d0d      	ldr	r5, [pc, #52]	; (8003df4 <__libc_init_array+0x38>)
 8003dc0:	4c0d      	ldr	r4, [pc, #52]	; (8003df8 <__libc_init_array+0x3c>)
 8003dc2:	1b64      	subs	r4, r4, r5
 8003dc4:	10a4      	asrs	r4, r4, #2
 8003dc6:	2600      	movs	r6, #0
 8003dc8:	42a6      	cmp	r6, r4
 8003dca:	d109      	bne.n	8003de0 <__libc_init_array+0x24>
 8003dcc:	4d0b      	ldr	r5, [pc, #44]	; (8003dfc <__libc_init_array+0x40>)
 8003dce:	4c0c      	ldr	r4, [pc, #48]	; (8003e00 <__libc_init_array+0x44>)
 8003dd0:	f000 f83c 	bl	8003e4c <_init>
 8003dd4:	1b64      	subs	r4, r4, r5
 8003dd6:	10a4      	asrs	r4, r4, #2
 8003dd8:	2600      	movs	r6, #0
 8003dda:	42a6      	cmp	r6, r4
 8003ddc:	d105      	bne.n	8003dea <__libc_init_array+0x2e>
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
 8003de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de4:	4798      	blx	r3
 8003de6:	3601      	adds	r6, #1
 8003de8:	e7ee      	b.n	8003dc8 <__libc_init_array+0xc>
 8003dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dee:	4798      	blx	r3
 8003df0:	3601      	adds	r6, #1
 8003df2:	e7f2      	b.n	8003dda <__libc_init_array+0x1e>
 8003df4:	08003f74 	.word	0x08003f74
 8003df8:	08003f74 	.word	0x08003f74
 8003dfc:	08003f74 	.word	0x08003f74
 8003e00:	08003f78 	.word	0x08003f78

08003e04 <memset>:
 8003e04:	4402      	add	r2, r0
 8003e06:	4603      	mov	r3, r0
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d100      	bne.n	8003e0e <memset+0xa>
 8003e0c:	4770      	bx	lr
 8003e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e12:	e7f9      	b.n	8003e08 <memset+0x4>

08003e14 <strcpy>:
 8003e14:	4603      	mov	r3, r0
 8003e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e1a:	f803 2b01 	strb.w	r2, [r3], #1
 8003e1e:	2a00      	cmp	r2, #0
 8003e20:	d1f9      	bne.n	8003e16 <strcpy+0x2>
 8003e22:	4770      	bx	lr

08003e24 <strncpy>:
 8003e24:	b510      	push	{r4, lr}
 8003e26:	3901      	subs	r1, #1
 8003e28:	4603      	mov	r3, r0
 8003e2a:	b132      	cbz	r2, 8003e3a <strncpy+0x16>
 8003e2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003e30:	f803 4b01 	strb.w	r4, [r3], #1
 8003e34:	3a01      	subs	r2, #1
 8003e36:	2c00      	cmp	r4, #0
 8003e38:	d1f7      	bne.n	8003e2a <strncpy+0x6>
 8003e3a:	441a      	add	r2, r3
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d100      	bne.n	8003e44 <strncpy+0x20>
 8003e42:	bd10      	pop	{r4, pc}
 8003e44:	f803 1b01 	strb.w	r1, [r3], #1
 8003e48:	e7f9      	b.n	8003e3e <strncpy+0x1a>
	...

08003e4c <_init>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr

08003e58 <_fini>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	bf00      	nop
 8003e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5e:	bc08      	pop	{r3}
 8003e60:	469e      	mov	lr, r3
 8003e62:	4770      	bx	lr
