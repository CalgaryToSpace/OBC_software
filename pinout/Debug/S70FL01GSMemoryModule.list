
S70FL01GSMemoryModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005670  08005670  00015670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f0  080056f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080056f0  080056f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056f8  080056f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f8  080056f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056fc  080056fc  000156fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  2000000c  0800570c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800570c  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178b3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000268c  00000000  00000000  000378ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00039f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a0  00000000  00000000  0003b408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae2f  00000000  00000000  0003c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185b8  00000000  00000000  000675d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c154  00000000  00000000  0007fb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018bce3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005888  00000000  00000000  0018bd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005658 	.word	0x08005658

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005658 	.word	0x08005658

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295
 800021c:	f04f 30ff 	movne.w	r0, #4294967295
 8000220:	f000 b974 	b.w	800050c <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9d08      	ldr	r5, [sp, #32]
 8000242:	4604      	mov	r4, r0
 8000244:	468e      	mov	lr, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d14d      	bne.n	80002e6 <__udivmoddi4+0xaa>
 800024a:	428a      	cmp	r2, r1
 800024c:	4694      	mov	ip, r2
 800024e:	d969      	bls.n	8000324 <__udivmoddi4+0xe8>
 8000250:	fab2 f282 	clz	r2, r2
 8000254:	b152      	cbz	r2, 800026c <__udivmoddi4+0x30>
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	f1c2 0120 	rsb	r1, r2, #32
 800025e:	fa20 f101 	lsr.w	r1, r0, r1
 8000262:	fa0c fc02 	lsl.w	ip, ip, r2
 8000266:	ea41 0e03 	orr.w	lr, r1, r3
 800026a:	4094      	lsls	r4, r2
 800026c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000270:	0c21      	lsrs	r1, r4, #16
 8000272:	fbbe f6f8 	udiv	r6, lr, r8
 8000276:	fa1f f78c 	uxth.w	r7, ip
 800027a:	fb08 e316 	mls	r3, r8, r6, lr
 800027e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000282:	fb06 f107 	mul.w	r1, r6, r7
 8000286:	4299      	cmp	r1, r3
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x64>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 811f 	bcs.w	80004d4 <__udivmoddi4+0x298>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 811c 	bls.w	80004d4 <__udivmoddi4+0x298>
 800029c:	3e02      	subs	r6, #2
 800029e:	4463      	add	r3, ip
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 f707 	mul.w	r7, r0, r7
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	d90a      	bls.n	80002ce <__udivmoddi4+0x92>
 80002b8:	eb1c 0404 	adds.w	r4, ip, r4
 80002bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c0:	f080 810a 	bcs.w	80004d8 <__udivmoddi4+0x29c>
 80002c4:	42a7      	cmp	r7, r4
 80002c6:	f240 8107 	bls.w	80004d8 <__udivmoddi4+0x29c>
 80002ca:	4464      	add	r4, ip
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d2:	1be4      	subs	r4, r4, r7
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa4>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xc2>
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	f000 80ef 	beq.w	80004ce <__udivmoddi4+0x292>
 80002f0:	2600      	movs	r6, #0
 80002f2:	e9c5 0100 	strd	r0, r1, [r5]
 80002f6:	4630      	mov	r0, r6
 80002f8:	4631      	mov	r1, r6
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f683 	clz	r6, r3
 8000302:	2e00      	cmp	r6, #0
 8000304:	d14a      	bne.n	800039c <__udivmoddi4+0x160>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd4>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80f9 	bhi.w	8000502 <__udivmoddi4+0x2c6>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	469e      	mov	lr, r3
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa4>
 800031e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa4>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xec>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 8092 	bne.w	8000456 <__udivmoddi4+0x21a>
 8000332:	eba1 010c 	sub.w	r1, r1, ip
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2601      	movs	r6, #1
 8000340:	0c20      	lsrs	r0, r4, #16
 8000342:	fbb1 f3f7 	udiv	r3, r1, r7
 8000346:	fb07 1113 	mls	r1, r7, r3, r1
 800034a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034e:	fb0e f003 	mul.w	r0, lr, r3
 8000352:	4288      	cmp	r0, r1
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x12c>
 8000356:	eb1c 0101 	adds.w	r1, ip, r1
 800035a:	f103 38ff 	add.w	r8, r3, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x12a>
 8000360:	4288      	cmp	r0, r1
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2c0>
 8000366:	4643      	mov	r3, r8
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000370:	fb07 1110 	mls	r1, r7, r0, r1
 8000374:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x156>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 31ff 	add.w	r1, r0, #4294967295
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x154>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2ca>
 8000390:	4608      	mov	r0, r1
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039a:	e79c      	b.n	80002d6 <__udivmoddi4+0x9a>
 800039c:	f1c6 0720 	rsb	r7, r6, #32
 80003a0:	40b3      	lsls	r3, r6
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa20 f407 	lsr.w	r4, r0, r7
 80003ae:	fa01 f306 	lsl.w	r3, r1, r6
 80003b2:	431c      	orrs	r4, r3
 80003b4:	40f9      	lsrs	r1, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fa00 f306 	lsl.w	r3, r0, r6
 80003be:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c2:	0c20      	lsrs	r0, r4, #16
 80003c4:	fa1f fe8c 	uxth.w	lr, ip
 80003c8:	fb09 1118 	mls	r1, r9, r8, r1
 80003cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	4288      	cmp	r0, r1
 80003d6:	fa02 f206 	lsl.w	r2, r2, r6
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b8>
 80003dc:	eb1c 0101 	adds.w	r1, ip, r1
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2bc>
 80003e8:	4288      	cmp	r0, r1
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2bc>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4461      	add	r1, ip
 80003f4:	1a09      	subs	r1, r1, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000400:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000404:	fb00 fe0e 	mul.w	lr, r0, lr
 8000408:	458e      	cmp	lr, r1
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1e2>
 800040c:	eb1c 0101 	adds.w	r1, ip, r1
 8000410:	f100 34ff 	add.w	r4, r0, #4294967295
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2b4>
 8000416:	458e      	cmp	lr, r1
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2b4>
 800041a:	3802      	subs	r0, #2
 800041c:	4461      	add	r1, ip
 800041e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000422:	fba0 9402 	umull	r9, r4, r0, r2
 8000426:	eba1 010e 	sub.w	r1, r1, lr
 800042a:	42a1      	cmp	r1, r4
 800042c:	46c8      	mov	r8, r9
 800042e:	46a6      	mov	lr, r4
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x2a4>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x2a0>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x212>
 8000436:	ebb3 0208 	subs.w	r2, r3, r8
 800043a:	eb61 010e 	sbc.w	r1, r1, lr
 800043e:	fa01 f707 	lsl.w	r7, r1, r7
 8000442:	fa22 f306 	lsr.w	r3, r2, r6
 8000446:	40f1      	lsrs	r1, r6
 8000448:	431f      	orrs	r7, r3
 800044a:	e9c5 7100 	strd	r7, r1, [r5]
 800044e:	2600      	movs	r6, #0
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	f1c2 0320 	rsb	r3, r2, #32
 800045a:	40d8      	lsrs	r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa21 f303 	lsr.w	r3, r1, r3
 8000464:	4091      	lsls	r1, r2
 8000466:	4301      	orrs	r1, r0
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb3 f0f7 	udiv	r0, r3, r7
 8000474:	fb07 3610 	mls	r6, r7, r0, r3
 8000478:	0c0b      	lsrs	r3, r1, #16
 800047a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047e:	fb00 f60e 	mul.w	r6, r0, lr
 8000482:	429e      	cmp	r6, r3
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x260>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b8>
 8000494:	429e      	cmp	r6, r3
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b8>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1b9b      	subs	r3, r3, r6
 800049e:	b289      	uxth	r1, r1
 80004a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a4:	fb07 3316 	mls	r3, r7, r6, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb06 f30e 	mul.w	r3, r6, lr
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x28a>
 80004b4:	eb1c 0101 	adds.w	r1, ip, r1
 80004b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2b0>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2b0>
 80004c2:	3e02      	subs	r6, #2
 80004c4:	4461      	add	r1, ip
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0x104>
 80004ce:	462e      	mov	r6, r5
 80004d0:	4628      	mov	r0, r5
 80004d2:	e705      	b.n	80002e0 <__udivmoddi4+0xa4>
 80004d4:	4606      	mov	r6, r0
 80004d6:	e6e3      	b.n	80002a0 <__udivmoddi4+0x64>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6f8      	b.n	80002ce <__udivmoddi4+0x92>
 80004dc:	454b      	cmp	r3, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f8>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e8:	3801      	subs	r0, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f8>
 80004ec:	4646      	mov	r6, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x28a>
 80004f0:	4620      	mov	r0, r4
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1e2>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x260>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b8>
 80004fc:	3b02      	subs	r3, #2
 80004fe:	4461      	add	r1, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x12c>
 8000502:	4630      	mov	r0, r6
 8000504:	e709      	b.n	800031a <__udivmoddi4+0xde>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x156>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b0b7      	sub	sp, #220	; 0xdc
 8000514:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 ff90 	bl	800143a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f843 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fb37 	bl	8000b90 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000522:	f000 f883 	bl	800062c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000526:	f000 f8c1 	bl	80006ac <MX_I2C2_Init>
  MX_I2C3_Init();
 800052a:	f000 f8ff 	bl	800072c <MX_I2C3_Init>
  MX_SPI1_Init();
 800052e:	f000 f93d 	bl	80007ac <MX_SPI1_Init>
  MX_TIM15_Init();
 8000532:	f000 f979 	bl	8000828 <MX_TIM15_Init>
  MX_UART4_Init();
 8000536:	f000 f9fb 	bl	8000930 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800053a:	f000 fa45 	bl	80009c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800053e:	f000 fa8f 	bl	8000a60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000542:	f000 fad9 	bl	8000af8 <MX_USART3_UART_Init>


  // Get blue led running, shows that board is running
  // Look at main.h to see GPLED1_Port and pin
  // this is the same as: GPIOE, GPIO_PIN_2, GPIO_PIN_SET
  HAL_GPIO_WritePin(GPLED1_GPIO_Port, GPLED1_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2104      	movs	r1, #4
 800054a:	4812      	ldr	r0, [pc, #72]	; (8000594 <main+0x84>)
 800054c:	f001 fa62 	bl	8001a14 <HAL_GPIO_WritePin>

  // Pull Chip Select High so we can use UART safely
  HAL_GPIO_WritePin(FLASH_CS_A0_GPIO_Port, FLASH_CS_A0_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2180      	movs	r1, #128	; 0x80
 8000554:	480f      	ldr	r0, [pc, #60]	; (8000594 <main+0x84>)
 8000556:	f001 fa5d 	bl	8001a14 <HAL_GPIO_WritePin>

  // Test UART
  char testBuffer[] = "Hello World!";
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <main+0x88>)
 800055c:	463c      	mov	r4, r7
 800055e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000560:	c407      	stmia	r4!, {r0, r1, r2}
 8000562:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart4,(uint8_t *) testBuffer, strlen((char*)testBuffer), 100);
 8000564:	463b      	mov	r3, r7
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fe48 	bl	80001fc <strlen>
 800056c:	4603      	mov	r3, r0
 800056e:	b29a      	uxth	r2, r3
 8000570:	4639      	mov	r1, r7
 8000572:	2364      	movs	r3, #100	; 0x64
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <main+0x8c>)
 8000576:	f004 f9f7 	bl	8004968 <HAL_UART_Transmit>
  // A0 is the LSB
  // By default, these Chip selects are pulled high,
  // to access module 0, we need 000, so A0, A1, and A2 is all pulled high

  // Pull Chip Select Low so we can access status register
  HAL_GPIO_WritePin(FLASH_CS_A0_GPIO_Port, FLASH_CS_A0_Pin, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2180      	movs	r1, #128	; 0x80
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <main+0x84>)
 8000580:	f001 fa48 	bl	8001a14 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, ReadStatusReg1, 1, 100);
 8000584:	2305      	movs	r3, #5
 8000586:	4619      	mov	r1, r3
 8000588:	2364      	movs	r3, #100	; 0x64
 800058a:	2201      	movs	r2, #1
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <main+0x90>)
 800058e:	f003 f8e6 	bl	800375e <HAL_SPI_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000592:	e7fe      	b.n	8000592 <main+0x82>
 8000594:	48001000 	.word	0x48001000
 8000598:	08005670 	.word	0x08005670
 800059c:	200001d4 	.word	0x200001d4
 80005a0:	20000124 	.word	0x20000124

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2244      	movs	r2, #68	; 0x44
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 f848 	bl	8005648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ca:	f001 fb81 	bl	8001cd0 <HAL_PWREx_ControlVoltageScaling>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d4:	f000 fbcc 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fc24 	bl	8001e38 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x56>
  {
    Error_Handler();
 80005f6:	f000 fbbb 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005fe:	2302      	movs	r3, #2
 8000600:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	2101      	movs	r1, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f002 f82a 	bl	800266c <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800061e:	f000 fba7 	bl	8000d70 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3758      	adds	r7, #88	; 0x58
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000632:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <MX_I2C1_Init+0x78>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00606092;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <MX_I2C1_Init+0x7c>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000644:	2201      	movs	r2, #1
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_I2C1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000666:	480e      	ldr	r0, [pc, #56]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000668:	f001 f9ec 	bl	8001a44 <HAL_I2C_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000672:	f000 fb7d 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000676:	2100      	movs	r1, #0
 8000678:	4809      	ldr	r0, [pc, #36]	; (80006a0 <MX_I2C1_Init+0x74>)
 800067a:	f001 fa72 	bl	8001b62 <HAL_I2CEx_ConfigAnalogFilter>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000684:	f000 fb74 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000688:	2100      	movs	r1, #0
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_I2C1_Init+0x74>)
 800068c:	f001 fab4 	bl	8001bf8 <HAL_I2CEx_ConfigDigitalFilter>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 fb6b 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000028 	.word	0x20000028
 80006a4:	40005400 	.word	0x40005400
 80006a8:	00606092 	.word	0x00606092

080006ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_I2C2_Init+0x74>)
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <MX_I2C2_Init+0x78>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00606092;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_I2C2_Init+0x74>)
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <MX_I2C2_Init+0x7c>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_I2C2_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_I2C2_Init+0x74>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_I2C2_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_I2C2_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C2_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_I2C2_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C2_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <MX_I2C2_Init+0x74>)
 80006e8:	f001 f9ac 	bl	8001a44 <HAL_I2C_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006f2:	f000 fb3d 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <MX_I2C2_Init+0x74>)
 80006fa:	f001 fa32 	bl	8001b62 <HAL_I2CEx_ConfigAnalogFilter>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000704:	f000 fb34 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_I2C2_Init+0x74>)
 800070c:	f001 fa74 	bl	8001bf8 <HAL_I2CEx_ConfigDigitalFilter>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000716:	f000 fb2b 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000007c 	.word	0x2000007c
 8000724:	40005800 	.word	0x40005800
 8000728:	00606092 	.word	0x00606092

0800072c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_I2C3_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <MX_I2C3_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00606092;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_I2C3_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <MX_I2C3_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_I2C3_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_I2C3_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_I2C3_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_I2C3_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_I2C3_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_I2C3_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_I2C3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <MX_I2C3_Init+0x74>)
 8000768:	f001 f96c 	bl	8001a44 <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 fafd 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <MX_I2C3_Init+0x74>)
 800077a:	f001 f9f2 	bl	8001b62 <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 faf4 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_I2C3_Init+0x74>)
 800078c:	f001 fa34 	bl	8001bf8 <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 faeb 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000d0 	.word	0x200000d0
 80007a4:	40005c00 	.word	0x40005c00
 80007a8:	00606092 	.word	0x00606092

080007ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_SPI1_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_SPI1_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_SPI1_Init+0x74>)
 80007b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_SPI1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_SPI1_Init+0x74>)
 80007c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_SPI1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_SPI1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_SPI1_Init+0x74>)
 80007da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_SPI1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_SPI1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_SPI1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_SPI1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_SPI1_Init+0x74>)
 80007fa:	2207      	movs	r2, #7
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_SPI1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_SPI1_Init+0x74>)
 8000806:	2208      	movs	r2, #8
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_SPI1_Init+0x74>)
 800080c:	f002 ff04 	bl	8003618 <HAL_SPI_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 faab 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000124 	.word	0x20000124
 8000824:	40013000 	.word	0x40013000

08000828 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b096      	sub	sp, #88	; 0x58
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	222c      	movs	r2, #44	; 0x2c
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f004 fef7 	bl	8005648 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800085a:	4b33      	ldr	r3, [pc, #204]	; (8000928 <MX_TIM15_Init+0x100>)
 800085c:	4a33      	ldr	r2, [pc, #204]	; (800092c <MX_TIM15_Init+0x104>)
 800085e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000860:	4b31      	ldr	r3, [pc, #196]	; (8000928 <MX_TIM15_Init+0x100>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b30      	ldr	r3, [pc, #192]	; (8000928 <MX_TIM15_Init+0x100>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800086c:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <MX_TIM15_Init+0x100>)
 800086e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000872:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <MX_TIM15_Init+0x100>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <MX_TIM15_Init+0x100>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <MX_TIM15_Init+0x100>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000886:	4828      	ldr	r0, [pc, #160]	; (8000928 <MX_TIM15_Init+0x100>)
 8000888:	f003 fa3c 	bl	8003d04 <HAL_TIM_PWM_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 fa6d 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800089e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008a2:	4619      	mov	r1, r3
 80008a4:	4820      	ldr	r0, [pc, #128]	; (8000928 <MX_TIM15_Init+0x100>)
 80008a6:	f003 ff09 	bl	80046bc <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80008b0:	f000 fa5e 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b4:	2360      	movs	r3, #96	; 0x60
 80008b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008bc:	2300      	movs	r3, #0
 80008be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008d4:	2200      	movs	r2, #0
 80008d6:	4619      	mov	r1, r3
 80008d8:	4813      	ldr	r0, [pc, #76]	; (8000928 <MX_TIM15_Init+0x100>)
 80008da:	f003 fa6b 	bl	8003db4 <HAL_TIM_PWM_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80008e4:	f000 fa44 	bl	8000d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000900:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4619      	mov	r1, r3
 800090a:	4807      	ldr	r0, [pc, #28]	; (8000928 <MX_TIM15_Init+0x100>)
 800090c:	f003 ff5e 	bl	80047cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8000916:	f000 fa2b 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800091a:	4803      	ldr	r0, [pc, #12]	; (8000928 <MX_TIM15_Init+0x100>)
 800091c:	f000 fba2 	bl	8001064 <HAL_TIM_MspPostInit>

}
 8000920:	bf00      	nop
 8000922:	3758      	adds	r7, #88	; 0x58
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000188 	.word	0x20000188
 800092c:	40014000 	.word	0x40014000

08000930 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_UART4_Init+0x90>)
 8000936:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <MX_UART4_Init+0x94>)
 8000938:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_UART4_Init+0x90>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_UART4_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_UART4_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_UART4_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_UART4_Init+0x90>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_UART4_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_UART4_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_UART4_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_UART4_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_UART4_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MX_UART4_Init+0x90>)
 800097a:	f003 ffa5 	bl	80048c8 <HAL_UART_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 f9f4 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <MX_UART4_Init+0x90>)
 800098c:	f004 fd6e 	bl	800546c <HAL_UARTEx_SetTxFifoThreshold>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000996:	f000 f9eb 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4808      	ldr	r0, [pc, #32]	; (80009c0 <MX_UART4_Init+0x90>)
 800099e:	f004 fda3 	bl	80054e8 <HAL_UARTEx_SetRxFifoThreshold>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f000 f9e2 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_UART4_Init+0x90>)
 80009ae:	f004 fd24 	bl	80053fa <HAL_UARTEx_DisableFifoMode>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80009b8:	f000 f9da 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200001d4 	.word	0x200001d4
 80009c4:	40004c00 	.word	0x40004c00

080009c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009ce:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <MX_USART1_UART_Init+0x94>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a10:	4811      	ldr	r0, [pc, #68]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a12:	f003 ff59 	bl	80048c8 <HAL_UART_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a1c:	f000 f9a8 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a24:	f004 fd22 	bl	800546c <HAL_UARTEx_SetTxFifoThreshold>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a2e:	f000 f99f 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a36:	f004 fd57 	bl	80054e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a40:	f000 f996 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_USART1_UART_Init+0x90>)
 8000a46:	f004 fcd8 	bl	80053fa <HAL_UARTEx_DisableFifoMode>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f98e 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000264 	.word	0x20000264
 8000a5c:	40013800 	.word	0x40013800

08000a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a66:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <MX_USART2_UART_Init+0x94>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa8:	4811      	ldr	r0, [pc, #68]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000aaa:	f003 ff0d 	bl	80048c8 <HAL_UART_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ab4:	f000 f95c 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000abc:	f004 fcd6 	bl	800546c <HAL_UARTEx_SetTxFifoThreshold>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac6:	f000 f953 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aca:	2100      	movs	r1, #0
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000ace:	f004 fd0b 	bl	80054e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad8:	f000 f94a 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_USART2_UART_Init+0x90>)
 8000ade:	f004 fc8c 	bl	80053fa <HAL_UARTEx_DisableFifoMode>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae8:	f000 f942 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200002f4 	.word	0x200002f4
 8000af4:	40004400 	.word	0x40004400

08000af8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000afc:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000afe:	4a23      	ldr	r2, [pc, #140]	; (8000b8c <MX_USART3_UART_Init+0x94>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b40:	4811      	ldr	r0, [pc, #68]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b42:	f003 fec1 	bl	80048c8 <HAL_UART_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b4c:	f000 f910 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b50:	2100      	movs	r1, #0
 8000b52:	480d      	ldr	r0, [pc, #52]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b54:	f004 fc8a 	bl	800546c <HAL_UARTEx_SetTxFifoThreshold>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b5e:	f000 f907 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b62:	2100      	movs	r1, #0
 8000b64:	4808      	ldr	r0, [pc, #32]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b66:	f004 fcbf 	bl	80054e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b70:	f000 f8fe 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_USART3_UART_Init+0x90>)
 8000b76:	f004 fc40 	bl	80053fa <HAL_UARTEx_DisableFifoMode>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b80:	f000 f8f6 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000384 	.word	0x20000384
 8000b8c:	40004800 	.word	0x40004800

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	; 0x38
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba6:	4b6d      	ldr	r3, [pc, #436]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a6c      	ldr	r2, [pc, #432]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b6a      	ldr	r3, [pc, #424]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0310 	and.w	r3, r3, #16
 8000bba:	623b      	str	r3, [r7, #32]
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bbe:	4b67      	ldr	r3, [pc, #412]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a66      	ldr	r2, [pc, #408]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000bc4:	f043 0320 	orr.w	r3, r3, #32
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b64      	ldr	r3, [pc, #400]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0320 	and.w	r3, r3, #32
 8000bd2:	61fb      	str	r3, [r7, #28]
 8000bd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd6:	4b61      	ldr	r3, [pc, #388]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a60      	ldr	r2, [pc, #384]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b5e      	ldr	r3, [pc, #376]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	61bb      	str	r3, [r7, #24]
 8000bec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b5b      	ldr	r3, [pc, #364]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a5a      	ldr	r2, [pc, #360]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b58      	ldr	r3, [pc, #352]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b55      	ldr	r3, [pc, #340]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a54      	ldr	r2, [pc, #336]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1e:	4b4f      	ldr	r3, [pc, #316]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a4e      	ldr	r2, [pc, #312]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b4c      	ldr	r3, [pc, #304]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b49      	ldr	r3, [pc, #292]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a48      	ldr	r2, [pc, #288]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b46      	ldr	r3, [pc, #280]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a42      	ldr	r2, [pc, #264]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <MX_GPIO_Init+0x1cc>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000c66:	f001 f8d7 	bl	8001e18 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPLED1_Pin|GPLED2_Pin|GPLED3_Pin|FLASH_CS_A0_Pin
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8000c70:	483b      	ldr	r0, [pc, #236]	; (8000d60 <MX_GPIO_Init+0x1d0>)
 8000c72:	f000 fecf 	bl	8001a14 <HAL_GPIO_WritePin>
                          |FRAM_NCS_1_Pin|FRAM_NCS_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_EN_GPIO_Port, CAMERA_EN_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2104      	movs	r1, #4
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f000 fec9 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, FLASH_NCS_A2_Pin|FLASH_NCS_A1_Pin|MPI_RX_NEN_Pin|MPI_TX_EN_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2133      	movs	r1, #51	; 0x33
 8000c86:	4837      	ldr	r0, [pc, #220]	; (8000d64 <MX_GPIO_Init+0x1d4>)
 8000c88:	f000 fec4 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_NFAULT_Pin|MOTOR_NEN_Pin|MOTOR_DIR_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8000c92:	4835      	ldr	r0, [pc, #212]	; (8000d68 <MX_GPIO_Init+0x1d8>)
 8000c94:	f000 febe 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_EN_Pin|ENCODER_I_Pin|ENCODER_B_Pin|ENCODER_A_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000c9e:	4833      	ldr	r0, [pc, #204]	; (8000d6c <MX_GPIO_Init+0x1dc>)
 8000ca0:	f000 feb8 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPLED1_Pin GPLED2_Pin GPLED3_Pin FLASH_CS_A0_Pin
                           FRAM_NCS_1_Pin FRAM_NCS_0_Pin */
  GPIO_InitStruct.Pin = GPLED1_Pin|GPLED2_Pin|GPLED3_Pin|FLASH_CS_A0_Pin
 8000ca4:	f44f 7367 	mov.w	r3, #924	; 0x39c
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
                          |FRAM_NCS_1_Pin|FRAM_NCS_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4828      	ldr	r0, [pc, #160]	; (8000d60 <MX_GPIO_Init+0x1d0>)
 8000cbe:	f000 fd17 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_EN_Pin */
  GPIO_InitStruct.Pin = CAMERA_EN_Pin;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CAMERA_EN_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f000 fd08 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_PPS_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8000ce0:	2340      	movs	r3, #64	; 0x40
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f000 fcfb 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_NCS_A2_Pin FLASH_NCS_A1_Pin MPI_RX_NEN_Pin MPI_TX_EN_Pin */
  GPIO_InitStruct.Pin = FLASH_NCS_A2_Pin|FLASH_NCS_A1_Pin|MPI_RX_NEN_Pin|MPI_TX_EN_Pin;
 8000cfa:	2333      	movs	r3, #51	; 0x33
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4814      	ldr	r0, [pc, #80]	; (8000d64 <MX_GPIO_Init+0x1d4>)
 8000d12:	f000 fced 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_NFAULT_Pin MOTOR_NEN_Pin MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_NFAULT_Pin|MOTOR_NEN_Pin|MOTOR_DIR_Pin;
 8000d16:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480e      	ldr	r0, [pc, #56]	; (8000d68 <MX_GPIO_Init+0x1d8>)
 8000d30:	f000 fcde 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_EN_Pin ENCODER_I_Pin ENCODER_B_Pin ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_EN_Pin|ENCODER_I_Pin|ENCODER_B_Pin|ENCODER_A_Pin;
 8000d34:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4807      	ldr	r0, [pc, #28]	; (8000d6c <MX_GPIO_Init+0x1dc>)
 8000d4e:	f000 fccf 	bl	80016f0 <HAL_GPIO_Init>

}
 8000d52:	bf00      	nop
 8000d54:	3738      	adds	r7, #56	; 0x38
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	48001000 	.word	0x48001000
 8000d64:	48001800 	.word	0x48001800
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	48000c00 	.word	0x48000c00

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <Error_Handler+0x8>
	...

08000d7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x44>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6593      	str	r3, [r2, #88]	; 0x58
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0b2      	sub	sp, #200	; 0xc8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	f107 0320 	add.w	r3, r7, #32
 8000de0:	2294      	movs	r2, #148	; 0x94
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 fc2f 	bl	8005648 <memset>
  if(hi2c->Instance==I2C1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a65      	ldr	r2, [pc, #404]	; (8000f84 <HAL_I2C_MspInit+0x1c0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d13e      	bne.n	8000e72 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000df4:	2340      	movs	r3, #64	; 0x40
 8000df6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfc:	f107 0320 	add.w	r3, r7, #32
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 fef1 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e0c:	f7ff ffb0 	bl	8000d70 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e10:	4b5d      	ldr	r3, [pc, #372]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e14:	4a5c      	ldr	r2, [pc, #368]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1c:	4b5a      	ldr	r3, [pc, #360]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e24:	61fb      	str	r3, [r7, #28]
 8000e26:	69fb      	ldr	r3, [r7, #28]
    HAL_PWREx_EnableVddIO2();
 8000e28:	f000 fff6 	bl	8001e18 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e2c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e34:	2312      	movs	r3, #18
 8000e36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e46:	2304      	movs	r3, #4
 8000e48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e50:	4619      	mov	r1, r3
 8000e52:	484e      	ldr	r0, [pc, #312]	; (8000f8c <HAL_I2C_MspInit+0x1c8>)
 8000e54:	f000 fc4c 	bl	80016f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e58:	4b4b      	ldr	r3, [pc, #300]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5c:	4a4a      	ldr	r2, [pc, #296]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e62:	6593      	str	r3, [r2, #88]	; 0x58
 8000e64:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e70:	e084      	b.n	8000f7c <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a46      	ldr	r2, [pc, #280]	; (8000f90 <HAL_I2C_MspInit+0x1cc>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d13b      	bne.n	8000ef4 <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e84:	f107 0320 	add.w	r3, r7, #32
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 fead 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8000e94:	f7ff ff6c 	bl	8000d70 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e98:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9c:	4a3a      	ldr	r2, [pc, #232]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000e9e:	f043 0320 	orr.w	r3, r3, #32
 8000ea2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea4:	4b38      	ldr	r3, [pc, #224]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea8:	f003 0320 	and.w	r3, r3, #32
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb6:	2312      	movs	r3, #18
 8000eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ece:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	482f      	ldr	r0, [pc, #188]	; (8000f94 <HAL_I2C_MspInit+0x1d0>)
 8000ed6:	f000 fc0b 	bl	80016f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	4a2a      	ldr	r2, [pc, #168]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000ee0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee6:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
}
 8000ef2:	e043      	b.n	8000f7c <HAL_I2C_MspInit+0x1b8>
  else if(hi2c->Instance==I2C3)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <HAL_I2C_MspInit+0x1d4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d13e      	bne.n	8000f7c <HAL_I2C_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f02:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f08:	f107 0320 	add.w	r3, r7, #32
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 fe6b 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_I2C_MspInit+0x158>
      Error_Handler();
 8000f18:	f7ff ff2a 	bl	8000d70 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f20:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000f34:	f000 ff70 	bl	8001e18 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000f38:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f40:	2312      	movs	r3, #18
 8000f42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f52:	2304      	movs	r3, #4
 8000f54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	; (8000f8c <HAL_I2C_MspInit+0x1c8>)
 8000f60:	f000 fbc6 	bl	80016f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000f6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_I2C_MspInit+0x1c4>)
 8000f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
}
 8000f7c:	bf00      	nop
 8000f7e:	37c8      	adds	r7, #200	; 0xc8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40005400 	.word	0x40005400
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	48001800 	.word	0x48001800
 8000f90:	40005800 	.word	0x40005800
 8000f94:	48001400 	.word	0x48001400
 8000f98:	40005c00 	.word	0x40005c00

08000f9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_SPI_MspInit+0x7c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d128      	bne.n	8001010 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_SPI_MspInit+0x80>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <HAL_SPI_MspInit+0x80>)
 8000fc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_SPI_MspInit+0x80>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_SPI_MspInit+0x80>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a10      	ldr	r2, [pc, #64]	; (800101c <HAL_SPI_MspInit+0x80>)
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_SPI_MspInit+0x80>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001000:	2305      	movs	r3, #5
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <HAL_SPI_MspInit+0x84>)
 800100c:	f000 fb70 	bl	80016f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40013000 	.word	0x40013000
 800101c:	40021000 	.word	0x40021000
 8001020:	48001000 	.word	0x48001000

08001024 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_TIM_PWM_MspInit+0x38>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10b      	bne.n	800104e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_TIM_PWM_MspInit+0x3c>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <HAL_TIM_PWM_MspInit+0x3c>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6613      	str	r3, [r2, #96]	; 0x60
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_TIM_PWM_MspInit+0x3c>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40014000 	.word	0x40014000
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <HAL_TIM_MspPostInit+0x64>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d11c      	bne.n	80010c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_TIM_MspPostInit+0x68>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_TIM_MspPostInit+0x68>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_TIM_MspPostInit+0x68>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 800109e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80010b0:	230e      	movs	r3, #14
 80010b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_TIM_MspPostInit+0x6c>)
 80010bc:	f000 fb18 	bl	80016f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80010c0:	bf00      	nop
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40014000 	.word	0x40014000
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000400 	.word	0x48000400

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0b6      	sub	sp, #216	; 0xd8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010f0:	2294      	movs	r2, #148	; 0x94
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 faa7 	bl	8005648 <memset>
  if(huart->Instance==UART4)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a95      	ldr	r2, [pc, #596]	; (8001354 <HAL_UART_MspInit+0x280>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d13c      	bne.n	800117e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001104:	2308      	movs	r3, #8
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001110:	4618      	mov	r0, r3
 8001112:	f001 fd69 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800111c:	f7ff fe28 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001120:	4b8d      	ldr	r3, [pc, #564]	; (8001358 <HAL_UART_MspInit+0x284>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001124:	4a8c      	ldr	r2, [pc, #560]	; (8001358 <HAL_UART_MspInit+0x284>)
 8001126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800112a:	6593      	str	r3, [r2, #88]	; 0x58
 800112c:	4b8a      	ldr	r3, [pc, #552]	; (8001358 <HAL_UART_MspInit+0x284>)
 800112e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b87      	ldr	r3, [pc, #540]	; (8001358 <HAL_UART_MspInit+0x284>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	4a86      	ldr	r2, [pc, #536]	; (8001358 <HAL_UART_MspInit+0x284>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001144:	4b84      	ldr	r3, [pc, #528]	; (8001358 <HAL_UART_MspInit+0x284>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
 800114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001150:	2303      	movs	r3, #3
 8001152:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001168:	2308      	movs	r3, #8
 800116a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f000 faba 	bl	80016f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800117c:	e0e5      	b.n	800134a <HAL_UART_MspInit+0x276>
  else if(huart->Instance==USART1)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a76      	ldr	r2, [pc, #472]	; (800135c <HAL_UART_MspInit+0x288>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d13d      	bne.n	8001204 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001188:	2301      	movs	r3, #1
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800118c:	2300      	movs	r3, #0
 800118e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fd27 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80011a0:	f7ff fde6 	bl	8000d70 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a4:	4b6c      	ldr	r3, [pc, #432]	; (8001358 <HAL_UART_MspInit+0x284>)
 80011a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a8:	4a6b      	ldr	r2, [pc, #428]	; (8001358 <HAL_UART_MspInit+0x284>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ae:	6613      	str	r3, [r2, #96]	; 0x60
 80011b0:	4b69      	ldr	r3, [pc, #420]	; (8001358 <HAL_UART_MspInit+0x284>)
 80011b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b66      	ldr	r3, [pc, #408]	; (8001358 <HAL_UART_MspInit+0x284>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	4a65      	ldr	r2, [pc, #404]	; (8001358 <HAL_UART_MspInit+0x284>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c8:	4b63      	ldr	r3, [pc, #396]	; (8001358 <HAL_UART_MspInit+0x284>)
 80011ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	623b      	str	r3, [r7, #32]
 80011d2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ee:	2307      	movs	r3, #7
 80011f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f000 fa77 	bl	80016f0 <HAL_GPIO_Init>
}
 8001202:	e0a2      	b.n	800134a <HAL_UART_MspInit+0x276>
  else if(huart->Instance==USART2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a55      	ldr	r2, [pc, #340]	; (8001360 <HAL_UART_MspInit+0x28c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d15d      	bne.n	80012ca <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800120e:	2302      	movs	r3, #2
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001212:	2300      	movs	r3, #0
 8001214:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001216:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fce4 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001226:	f7ff fda3 	bl	8000d70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800122a:	4b4b      	ldr	r3, [pc, #300]	; (8001358 <HAL_UART_MspInit+0x284>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	4a4a      	ldr	r2, [pc, #296]	; (8001358 <HAL_UART_MspInit+0x284>)
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	6593      	str	r3, [r2, #88]	; 0x58
 8001236:	4b48      	ldr	r3, [pc, #288]	; (8001358 <HAL_UART_MspInit+0x284>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	4b45      	ldr	r3, [pc, #276]	; (8001358 <HAL_UART_MspInit+0x284>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	4a44      	ldr	r2, [pc, #272]	; (8001358 <HAL_UART_MspInit+0x284>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124e:	4b42      	ldr	r3, [pc, #264]	; (8001358 <HAL_UART_MspInit+0x284>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125a:	4b3f      	ldr	r3, [pc, #252]	; (8001358 <HAL_UART_MspInit+0x284>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	4a3e      	ldr	r2, [pc, #248]	; (8001358 <HAL_UART_MspInit+0x284>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001266:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <HAL_UART_MspInit+0x284>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001272:	2308      	movs	r3, #8
 8001274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800128a:	2307      	movs	r3, #7
 800128c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129a:	f000 fa29 	bl	80016f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800129e:	2320      	movs	r3, #32
 80012a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b6:	2307      	movs	r3, #7
 80012b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4828      	ldr	r0, [pc, #160]	; (8001364 <HAL_UART_MspInit+0x290>)
 80012c4:	f000 fa14 	bl	80016f0 <HAL_GPIO_Init>
}
 80012c8:	e03f      	b.n	800134a <HAL_UART_MspInit+0x276>
  else if(huart->Instance==USART3)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a26      	ldr	r2, [pc, #152]	; (8001368 <HAL_UART_MspInit+0x294>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d13a      	bne.n	800134a <HAL_UART_MspInit+0x276>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012d4:	2304      	movs	r3, #4
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012d8:	2300      	movs	r3, #0
 80012da:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 fc81 	bl	8002be8 <HAL_RCCEx_PeriphCLKConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_UART_MspInit+0x21c>
      Error_Handler();
 80012ec:	f7ff fd40 	bl	8000d70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_UART_MspInit+0x284>)
 80012f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f4:	4a18      	ldr	r2, [pc, #96]	; (8001358 <HAL_UART_MspInit+0x284>)
 80012f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fa:	6593      	str	r3, [r2, #88]	; 0x58
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <HAL_UART_MspInit+0x284>)
 80012fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_UART_MspInit+0x284>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <HAL_UART_MspInit+0x284>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_UART_MspInit+0x284>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001320:	2330      	movs	r3, #48	; 0x30
 8001322:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001338:	2307      	movs	r3, #7
 800133a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001342:	4619      	mov	r1, r3
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <HAL_UART_MspInit+0x298>)
 8001346:	f000 f9d3 	bl	80016f0 <HAL_GPIO_Init>
}
 800134a:	bf00      	nop
 800134c:	37d8      	adds	r7, #216	; 0xd8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40004c00 	.word	0x40004c00
 8001358:	40021000 	.word	0x40021000
 800135c:	40013800 	.word	0x40013800
 8001360:	40004400 	.word	0x40004400
 8001364:	48000c00 	.word	0x48000c00
 8001368:	40004800 	.word	0x40004800
 800136c:	48000800 	.word	0x48000800

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <NMI_Handler+0x4>

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 f892 	bl	80014e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <SystemInit+0x20>)
 80013ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <SystemInit+0x20>)
 80013d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001420 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013ec:	f7ff ffea 	bl	80013c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <LoopForever+0x6>)
  ldr r1, =_edata
 80013f2:	490d      	ldr	r1, [pc, #52]	; (8001428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013f4:	4a0d      	ldr	r2, [pc, #52]	; (800142c <LoopForever+0xe>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f8:	e002      	b.n	8001400 <LoopCopyDataInit>

080013fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fe:	3304      	adds	r3, #4

08001400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001404:	d3f9      	bcc.n	80013fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001408:	4c0a      	ldr	r4, [pc, #40]	; (8001434 <LoopForever+0x16>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800140c:	e001      	b.n	8001412 <LoopFillZerobss>

0800140e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001410:	3204      	adds	r2, #4

08001412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001414:	d3fb      	bcc.n	800140e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001416:	f004 f8f3 	bl	8005600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800141a:	f7ff f879 	bl	8000510 <main>

0800141e <LoopForever>:

LoopForever:
    b LoopForever
 800141e:	e7fe      	b.n	800141e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001420:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001428:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800142c:	08005700 	.word	0x08005700
  ldr r2, =_sbss
 8001430:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001434:	20000418 	.word	0x20000418

08001438 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC1_IRQHandler>

0800143a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f000 f91f 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800144a:	2000      	movs	r0, #0
 800144c:	f000 f80e 	bl	800146c <HAL_InitTick>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	e001      	b.n	8001460 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800145c:	f7ff fc8e 	bl	8000d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001460:	79fb      	ldrb	r3, [r7, #7]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_InitTick+0x6c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d023      	beq.n	80014c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_InitTick+0x70>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_InitTick+0x6c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f91d 	bl	80016d6 <HAL_SYSTICK_Config>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10f      	bne.n	80014c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	d809      	bhi.n	80014bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a8:	2200      	movs	r2, #0
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f000 f8f5 	bl	800169e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014b4:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <HAL_InitTick+0x74>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e007      	b.n	80014cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	e004      	b.n	80014cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	e001      	b.n	80014cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000004 	.word	0x20000004

080014e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x20>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_IncTick+0x24>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_IncTick+0x24>)
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000008 	.word	0x20000008
 8001508:	20000414 	.word	0x20000414

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_GetTick+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000414 	.word	0x20000414

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	; (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	; 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff47 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff5c 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff8e 	bl	80015dc <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffb0 	bl	8001644 <SysTick_Config>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	e166      	b.n	80019ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8158 	beq.w	80019c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d005      	beq.n	8001730 <HAL_GPIO_Init+0x40>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d130      	bne.n	8001792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001766:	2201      	movs	r2, #1
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	f003 0201 	and.w	r2, r3, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b03      	cmp	r3, #3
 800179c:	d017      	beq.n	80017ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2203      	movs	r2, #3
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d123      	bne.n	8001822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	08da      	lsrs	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3208      	adds	r2, #8
 80017e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	220f      	movs	r2, #15
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	08da      	lsrs	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3208      	adds	r2, #8
 800181c:	6939      	ldr	r1, [r7, #16]
 800181e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2203      	movs	r2, #3
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0203 	and.w	r2, r3, #3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80b2 	beq.w	80019c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001864:	4b61      	ldr	r3, [pc, #388]	; (80019ec <HAL_GPIO_Init+0x2fc>)
 8001866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001868:	4a60      	ldr	r2, [pc, #384]	; (80019ec <HAL_GPIO_Init+0x2fc>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6613      	str	r3, [r2, #96]	; 0x60
 8001870:	4b5e      	ldr	r3, [pc, #376]	; (80019ec <HAL_GPIO_Init+0x2fc>)
 8001872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800187c:	4a5c      	ldr	r2, [pc, #368]	; (80019f0 <HAL_GPIO_Init+0x300>)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018a6:	d02b      	beq.n	8001900 <HAL_GPIO_Init+0x210>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a52      	ldr	r2, [pc, #328]	; (80019f4 <HAL_GPIO_Init+0x304>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d025      	beq.n	80018fc <HAL_GPIO_Init+0x20c>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a51      	ldr	r2, [pc, #324]	; (80019f8 <HAL_GPIO_Init+0x308>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d01f      	beq.n	80018f8 <HAL_GPIO_Init+0x208>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a50      	ldr	r2, [pc, #320]	; (80019fc <HAL_GPIO_Init+0x30c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d019      	beq.n	80018f4 <HAL_GPIO_Init+0x204>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a4f      	ldr	r2, [pc, #316]	; (8001a00 <HAL_GPIO_Init+0x310>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d013      	beq.n	80018f0 <HAL_GPIO_Init+0x200>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a4e      	ldr	r2, [pc, #312]	; (8001a04 <HAL_GPIO_Init+0x314>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d00d      	beq.n	80018ec <HAL_GPIO_Init+0x1fc>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a4d      	ldr	r2, [pc, #308]	; (8001a08 <HAL_GPIO_Init+0x318>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d007      	beq.n	80018e8 <HAL_GPIO_Init+0x1f8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a4c      	ldr	r2, [pc, #304]	; (8001a0c <HAL_GPIO_Init+0x31c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_GPIO_Init+0x1f4>
 80018e0:	2307      	movs	r3, #7
 80018e2:	e00e      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018e4:	2308      	movs	r3, #8
 80018e6:	e00c      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018e8:	2306      	movs	r3, #6
 80018ea:	e00a      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018ec:	2305      	movs	r3, #5
 80018ee:	e008      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018f0:	2304      	movs	r3, #4
 80018f2:	e006      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018f4:	2303      	movs	r3, #3
 80018f6:	e004      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e002      	b.n	8001902 <HAL_GPIO_Init+0x212>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_GPIO_Init+0x212>
 8001900:	2300      	movs	r3, #0
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	f002 0203 	and.w	r2, r2, #3
 8001908:	0092      	lsls	r2, r2, #2
 800190a:	4093      	lsls	r3, r2
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001912:	4937      	ldr	r1, [pc, #220]	; (80019f0 <HAL_GPIO_Init+0x300>)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	3302      	adds	r3, #2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_GPIO_Init+0x320>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001944:	4a32      	ldr	r2, [pc, #200]	; (8001a10 <HAL_GPIO_Init+0x320>)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800194a:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <HAL_GPIO_Init+0x320>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800196e:	4a28      	ldr	r2, [pc, #160]	; (8001a10 <HAL_GPIO_Init+0x320>)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001974:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <HAL_GPIO_Init+0x320>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001998:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_GPIO_Init+0x320>)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HAL_GPIO_Init+0x320>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019c2:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <HAL_GPIO_Init+0x320>)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3301      	adds	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	fa22 f303 	lsr.w	r3, r2, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f47f ae91 	bne.w	8001700 <HAL_GPIO_Init+0x10>
  }
}
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010000 	.word	0x40010000
 80019f4:	48000400 	.word	0x48000400
 80019f8:	48000800 	.word	0x48000800
 80019fc:	48000c00 	.word	0x48000c00
 8001a00:	48001000 	.word	0x48001000
 8001a04:	48001400 	.word	0x48001400
 8001a08:	48001800 	.word	0x48001800
 8001a0c:	48001c00 	.word	0x48001c00
 8001a10:	40010400 	.word	0x40010400

08001a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	4613      	mov	r3, r2
 8001a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a24:	787b      	ldrb	r3, [r7, #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a30:	e002      	b.n	8001a38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e081      	b.n	8001b5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff f9aa 	bl	8000dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2224      	movs	r2, #36	; 0x24
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0201 	bic.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	e006      	b.n	8001acc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001aca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d104      	bne.n	8001ade <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001adc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69d9      	ldr	r1, [r3, #28]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1a      	ldr	r2, [r3, #32]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b20      	cmp	r3, #32
 8001b76:	d138      	bne.n	8001bea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e032      	b.n	8001bec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2224      	movs	r2, #36	; 0x24
 8001b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0201 	bic.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bb4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bea:	2302      	movs	r3, #2
  }
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d139      	bne.n	8001c82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e033      	b.n	8001c84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2224      	movs	r2, #36	; 0x24
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2220      	movs	r2, #32
 8001c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
  }
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c94:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_PWREx_GetVoltageRange+0x3c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca0:	d102      	bne.n	8001ca8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca6:	e00b      	b.n	8001cc0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_PWREx_GetVoltageRange+0x3c>)
 8001caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cb6:	d102      	bne.n	8001cbe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cbc:	e000      	b.n	8001cc0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001cbe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40007000 	.word	0x40007000

08001cd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d141      	bne.n	8001d62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cde:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cea:	d131      	bne.n	8001d50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cec:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cf2:	4a46      	ldr	r2, [pc, #280]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cfc:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d04:	4a41      	ldr	r2, [pc, #260]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001d0c:	4b40      	ldr	r3, [pc, #256]	; (8001e10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2232      	movs	r2, #50	; 0x32
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	4a3f      	ldr	r2, [pc, #252]	; (8001e14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	0c9b      	lsrs	r3, r3, #18
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d22:	e002      	b.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d2a:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d36:	d102      	bne.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f2      	bne.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d3e:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4a:	d158      	bne.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e057      	b.n	8001e00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d50:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d56:	4a2d      	ldr	r2, [pc, #180]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d60:	e04d      	b.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d68:	d141      	bne.n	8001dee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d76:	d131      	bne.n	8001ddc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d7e:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d88:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d90:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2232      	movs	r2, #50	; 0x32
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0c9b      	lsrs	r3, r3, #18
 8001daa:	3301      	adds	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dae:	e002      	b.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc2:	d102      	bne.n	8001dca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f2      	bne.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd6:	d112      	bne.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e011      	b.n	8001e00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001dec:	e007      	b.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dfc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	20000000 	.word	0x20000000
 8001e14:	431bde83 	.word	0x431bde83

08001e18 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e26:	6053      	str	r3, [r2, #4]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40007000 	.word	0x40007000

08001e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f000 bc08 	b.w	800265c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4c:	4b96      	ldr	r3, [pc, #600]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e56:	4b94      	ldr	r3, [pc, #592]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80e4 	beq.w	8002036 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <HAL_RCC_OscConfig+0x4c>
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	f040 808b 	bne.w	8001f92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	f040 8087 	bne.w	8001f92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e84:	4b88      	ldr	r3, [pc, #544]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_OscConfig+0x64>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e3df      	b.n	800265c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1a      	ldr	r2, [r3, #32]
 8001ea0:	4b81      	ldr	r3, [pc, #516]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x7e>
 8001eac:	4b7e      	ldr	r3, [pc, #504]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb4:	e005      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8a>
 8001eb6:	4b7c      	ldr	r3, [pc, #496]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d223      	bcs.n	8001f0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fdcc 	bl	8002a68 <RCC_SetFlashLatencyFromMSIRange>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e3c0      	b.n	800265c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eda:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a72      	ldr	r2, [pc, #456]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001ee0:	f043 0308 	orr.w	r3, r3, #8
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b70      	ldr	r3, [pc, #448]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	496d      	ldr	r1, [pc, #436]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef8:	4b6b      	ldr	r3, [pc, #428]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	4968      	ldr	r1, [pc, #416]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
 8001f0c:	e025      	b.n	8001f5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f0e:	4b66      	ldr	r3, [pc, #408]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a65      	ldr	r2, [pc, #404]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001f14:	f043 0308 	orr.w	r3, r3, #8
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4960      	ldr	r1, [pc, #384]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f2c:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	495b      	ldr	r1, [pc, #364]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fd8c 	bl	8002a68 <RCC_SetFlashLatencyFromMSIRange>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e380      	b.n	800265c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f5a:	f000 fcc1 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	4b51      	ldr	r3, [pc, #324]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	4950      	ldr	r1, [pc, #320]	; (80020ac <HAL_RCC_OscConfig+0x274>)
 8001f6c:	5ccb      	ldrb	r3, [r1, r3]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	fa22 f303 	lsr.w	r3, r2, r3
 8001f76:	4a4e      	ldr	r2, [pc, #312]	; (80020b0 <HAL_RCC_OscConfig+0x278>)
 8001f78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f7a:	4b4e      	ldr	r3, [pc, #312]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fa74 	bl	800146c <HAL_InitTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d052      	beq.n	8002034 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	e364      	b.n	800265c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d032      	beq.n	8002000 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f9a:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a42      	ldr	r2, [pc, #264]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fab1 	bl	800150c <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fae:	f7ff faad 	bl	800150c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e34d      	b.n	800265c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc0:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a35      	ldr	r2, [pc, #212]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001fd2:	f043 0308 	orr.w	r3, r3, #8
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	4b33      	ldr	r3, [pc, #204]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4930      	ldr	r1, [pc, #192]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fea:	4b2f      	ldr	r3, [pc, #188]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	492b      	ldr	r1, [pc, #172]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
 8001ffe:	e01a      	b.n	8002036 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002000:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a28      	ldr	r2, [pc, #160]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800200c:	f7ff fa7e 	bl	800150c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002014:	f7ff fa7a 	bl	800150c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e31a      	b.n	800265c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x1dc>
 8002032:	e000      	b.n	8002036 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002034:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d073      	beq.n	800212a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d005      	beq.n	8002054 <HAL_RCC_OscConfig+0x21c>
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d10e      	bne.n	800206c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d10b      	bne.n	800206c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d063      	beq.n	8002128 <HAL_RCC_OscConfig+0x2f0>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d15f      	bne.n	8002128 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e2f7      	b.n	800265c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d106      	bne.n	8002084 <HAL_RCC_OscConfig+0x24c>
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e025      	b.n	80020d0 <HAL_RCC_OscConfig+0x298>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800208c:	d114      	bne.n	80020b8 <HAL_RCC_OscConfig+0x280>
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 8002094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a02      	ldr	r2, [pc, #8]	; (80020a8 <HAL_RCC_OscConfig+0x270>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e013      	b.n	80020d0 <HAL_RCC_OscConfig+0x298>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08005680 	.word	0x08005680
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000004 	.word	0x20000004
 80020b8:	4ba0      	ldr	r3, [pc, #640]	; (800233c <HAL_RCC_OscConfig+0x504>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a9f      	ldr	r2, [pc, #636]	; (800233c <HAL_RCC_OscConfig+0x504>)
 80020be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4b9d      	ldr	r3, [pc, #628]	; (800233c <HAL_RCC_OscConfig+0x504>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a9c      	ldr	r2, [pc, #624]	; (800233c <HAL_RCC_OscConfig+0x504>)
 80020ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d013      	beq.n	8002100 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff fa18 	bl	800150c <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff fa14 	bl	800150c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e2b4      	b.n	800265c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f2:	4b92      	ldr	r3, [pc, #584]	; (800233c <HAL_RCC_OscConfig+0x504>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2a8>
 80020fe:	e014      	b.n	800212a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7ff fa04 	bl	800150c <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002108:	f7ff fa00 	bl	800150c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e2a0      	b.n	800265c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800211a:	4b88      	ldr	r3, [pc, #544]	; (800233c <HAL_RCC_OscConfig+0x504>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x2d0>
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d060      	beq.n	80021f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d005      	beq.n	8002148 <HAL_RCC_OscConfig+0x310>
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d119      	bne.n	8002176 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d116      	bne.n	8002176 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002148:	4b7c      	ldr	r3, [pc, #496]	; (800233c <HAL_RCC_OscConfig+0x504>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_OscConfig+0x328>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e27d      	b.n	800265c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002160:	4b76      	ldr	r3, [pc, #472]	; (800233c <HAL_RCC_OscConfig+0x504>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	061b      	lsls	r3, r3, #24
 800216e:	4973      	ldr	r1, [pc, #460]	; (800233c <HAL_RCC_OscConfig+0x504>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002174:	e040      	b.n	80021f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d023      	beq.n	80021c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217e:	4b6f      	ldr	r3, [pc, #444]	; (800233c <HAL_RCC_OscConfig+0x504>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6e      	ldr	r2, [pc, #440]	; (800233c <HAL_RCC_OscConfig+0x504>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7ff f9bf 	bl	800150c <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7ff f9bb 	bl	800150c <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e25b      	b.n	800265c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a4:	4b65      	ldr	r3, [pc, #404]	; (800233c <HAL_RCC_OscConfig+0x504>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b62      	ldr	r3, [pc, #392]	; (800233c <HAL_RCC_OscConfig+0x504>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	495f      	ldr	r1, [pc, #380]	; (800233c <HAL_RCC_OscConfig+0x504>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
 80021c4:	e018      	b.n	80021f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c6:	4b5d      	ldr	r3, [pc, #372]	; (800233c <HAL_RCC_OscConfig+0x504>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a5c      	ldr	r2, [pc, #368]	; (800233c <HAL_RCC_OscConfig+0x504>)
 80021cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7ff f99b 	bl	800150c <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021da:	f7ff f997 	bl	800150c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e237      	b.n	800265c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ec:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_RCC_OscConfig+0x504>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d03c      	beq.n	800227e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01c      	beq.n	8002246 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220c:	4b4b      	ldr	r3, [pc, #300]	; (800233c <HAL_RCC_OscConfig+0x504>)
 800220e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002212:	4a4a      	ldr	r2, [pc, #296]	; (800233c <HAL_RCC_OscConfig+0x504>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221c:	f7ff f976 	bl	800150c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002224:	f7ff f972 	bl	800150c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e212      	b.n	800265c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <HAL_RCC_OscConfig+0x504>)
 8002238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ef      	beq.n	8002224 <HAL_RCC_OscConfig+0x3ec>
 8002244:	e01b      	b.n	800227e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002246:	4b3d      	ldr	r3, [pc, #244]	; (800233c <HAL_RCC_OscConfig+0x504>)
 8002248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224c:	4a3b      	ldr	r2, [pc, #236]	; (800233c <HAL_RCC_OscConfig+0x504>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7ff f959 	bl	800150c <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225e:	f7ff f955 	bl	800150c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e1f5      	b.n	800265c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002270:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_RCC_OscConfig+0x504>)
 8002272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ef      	bne.n	800225e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80a6 	beq.w	80023d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002290:	4b2a      	ldr	r3, [pc, #168]	; (800233c <HAL_RCC_OscConfig+0x504>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10d      	bne.n	80022b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229c:	4b27      	ldr	r3, [pc, #156]	; (800233c <HAL_RCC_OscConfig+0x504>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	4a26      	ldr	r2, [pc, #152]	; (800233c <HAL_RCC_OscConfig+0x504>)
 80022a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a6:	6593      	str	r3, [r2, #88]	; 0x58
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_OscConfig+0x504>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b4:	2301      	movs	r3, #1
 80022b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <HAL_RCC_OscConfig+0x508>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d118      	bne.n	80022f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022c4:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <HAL_RCC_OscConfig+0x508>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <HAL_RCC_OscConfig+0x508>)
 80022ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d0:	f7ff f91c 	bl	800150c <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d8:	f7ff f918 	bl	800150c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1b8      	b.n	800265c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <HAL_RCC_OscConfig+0x508>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d108      	bne.n	8002310 <HAL_RCC_OscConfig+0x4d8>
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_RCC_OscConfig+0x504>)
 8002300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_RCC_OscConfig+0x504>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800230e:	e029      	b.n	8002364 <HAL_RCC_OscConfig+0x52c>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d115      	bne.n	8002344 <HAL_RCC_OscConfig+0x50c>
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_RCC_OscConfig+0x504>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_RCC_OscConfig+0x504>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <HAL_RCC_OscConfig+0x504>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232e:	4a03      	ldr	r2, [pc, #12]	; (800233c <HAL_RCC_OscConfig+0x504>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002338:	e014      	b.n	8002364 <HAL_RCC_OscConfig+0x52c>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	40007000 	.word	0x40007000
 8002344:	4b9d      	ldr	r3, [pc, #628]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234a:	4a9c      	ldr	r2, [pc, #624]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002354:	4b99      	ldr	r3, [pc, #612]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235a:	4a98      	ldr	r2, [pc, #608]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d016      	beq.n	800239a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7ff f8ce 	bl	800150c <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002372:	e00a      	b.n	800238a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002374:	f7ff f8ca 	bl	800150c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e168      	b.n	800265c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238a:	4b8c      	ldr	r3, [pc, #560]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ed      	beq.n	8002374 <HAL_RCC_OscConfig+0x53c>
 8002398:	e015      	b.n	80023c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239a:	f7ff f8b7 	bl	800150c <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7ff f8b3 	bl	800150c <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e151      	b.n	800265c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b8:	4b80      	ldr	r3, [pc, #512]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1ed      	bne.n	80023a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c6:	7ffb      	ldrb	r3, [r7, #31]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d105      	bne.n	80023d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023cc:	4b7b      	ldr	r3, [pc, #492]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	4a7a      	ldr	r2, [pc, #488]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 80023d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d03c      	beq.n	800245e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01c      	beq.n	8002426 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023ec:	4b73      	ldr	r3, [pc, #460]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 80023ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023f2:	4a72      	ldr	r2, [pc, #456]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7ff f886 	bl	800150c <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002404:	f7ff f882 	bl	800150c <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e122      	b.n	800265c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002416:	4b69      	ldr	r3, [pc, #420]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 8002418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0ef      	beq.n	8002404 <HAL_RCC_OscConfig+0x5cc>
 8002424:	e01b      	b.n	800245e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002426:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 8002428:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800242c:	4a63      	ldr	r2, [pc, #396]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002436:	f7ff f869 	bl	800150c <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800243e:	f7ff f865 	bl	800150c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e105      	b.n	800265c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002450:	4b5a      	ldr	r3, [pc, #360]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 8002452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ef      	bne.n	800243e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80f9 	beq.w	800265a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	2b02      	cmp	r3, #2
 800246e:	f040 80cf 	bne.w	8002610 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002472:	4b52      	ldr	r3, [pc, #328]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f003 0203 	and.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	429a      	cmp	r2, r3
 8002484:	d12c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	3b01      	subs	r3, #1
 8002492:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d123      	bne.n	80024e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d11b      	bne.n	80024e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d113      	bne.n	80024e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	3b01      	subs	r3, #1
 80024c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d109      	bne.n	80024e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	085b      	lsrs	r3, r3, #1
 80024d8:	3b01      	subs	r3, #1
 80024da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d071      	beq.n	80025c4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	d068      	beq.n	80025b8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024e6:	4b35      	ldr	r3, [pc, #212]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d105      	bne.n	80024fe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024f2:	4b32      	ldr	r3, [pc, #200]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0ac      	b.n	800265c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002502:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a2d      	ldr	r2, [pc, #180]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 8002508:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800250c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800250e:	f7fe fffd 	bl	800150c <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe fff9 	bl	800150c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e099      	b.n	800265c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002534:	4b21      	ldr	r3, [pc, #132]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <HAL_RCC_OscConfig+0x788>)
 800253a:	4013      	ands	r3, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002544:	3a01      	subs	r2, #1
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	4311      	orrs	r1, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800254e:	0212      	lsls	r2, r2, #8
 8002550:	4311      	orrs	r1, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002556:	0852      	lsrs	r2, r2, #1
 8002558:	3a01      	subs	r2, #1
 800255a:	0552      	lsls	r2, r2, #21
 800255c:	4311      	orrs	r1, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002562:	0852      	lsrs	r2, r2, #1
 8002564:	3a01      	subs	r2, #1
 8002566:	0652      	lsls	r2, r2, #25
 8002568:	4311      	orrs	r1, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800256e:	06d2      	lsls	r2, r2, #27
 8002570:	430a      	orrs	r2, r1
 8002572:	4912      	ldr	r1, [pc, #72]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 8002574:	4313      	orrs	r3, r2
 8002576:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 800257e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002582:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002584:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 800258a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800258e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002590:	f7fe ffbc 	bl	800150c <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe ffb8 	bl	800150c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e058      	b.n	800265c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <HAL_RCC_OscConfig+0x784>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025b6:	e050      	b.n	800265a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e04f      	b.n	800265c <HAL_RCC_OscConfig+0x824>
 80025bc:	40021000 	.word	0x40021000
 80025c0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <HAL_RCC_OscConfig+0x82c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d144      	bne.n	800265a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025d0:	4b24      	ldr	r3, [pc, #144]	; (8002664 <HAL_RCC_OscConfig+0x82c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a23      	ldr	r2, [pc, #140]	; (8002664 <HAL_RCC_OscConfig+0x82c>)
 80025d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025dc:	4b21      	ldr	r3, [pc, #132]	; (8002664 <HAL_RCC_OscConfig+0x82c>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a20      	ldr	r2, [pc, #128]	; (8002664 <HAL_RCC_OscConfig+0x82c>)
 80025e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025e8:	f7fe ff90 	bl	800150c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe ff8c 	bl	800150c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e02c      	b.n	800265c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002602:	4b18      	ldr	r3, [pc, #96]	; (8002664 <HAL_RCC_OscConfig+0x82c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x7b8>
 800260e:	e024      	b.n	800265a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d01f      	beq.n	8002656 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b13      	ldr	r3, [pc, #76]	; (8002664 <HAL_RCC_OscConfig+0x82c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a12      	ldr	r2, [pc, #72]	; (8002664 <HAL_RCC_OscConfig+0x82c>)
 800261c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7fe ff73 	bl	800150c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262a:	f7fe ff6f 	bl	800150c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e00f      	b.n	800265c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_OscConfig+0x82c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_OscConfig+0x82c>)
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	4905      	ldr	r1, [pc, #20]	; (8002664 <HAL_RCC_OscConfig+0x82c>)
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_OscConfig+0x830>)
 8002650:	4013      	ands	r3, r2
 8002652:	60cb      	str	r3, [r1, #12]
 8002654:	e001      	b.n	800265a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3720      	adds	r7, #32
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	feeefffc 	.word	0xfeeefffc

0800266c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e11d      	b.n	80028c0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b90      	ldr	r3, [pc, #576]	; (80028c8 <HAL_RCC_ClockConfig+0x25c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d910      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b8d      	ldr	r3, [pc, #564]	; (80028c8 <HAL_RCC_ClockConfig+0x25c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 020f 	bic.w	r2, r3, #15
 800269a:	498b      	ldr	r1, [pc, #556]	; (80028c8 <HAL_RCC_ClockConfig+0x25c>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b89      	ldr	r3, [pc, #548]	; (80028c8 <HAL_RCC_ClockConfig+0x25c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e105      	b.n	80028c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d010      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	4b81      	ldr	r3, [pc, #516]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d908      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d0:	4b7e      	ldr	r3, [pc, #504]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	497b      	ldr	r1, [pc, #492]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d079      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d11e      	bne.n	8002734 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f6:	4b75      	ldr	r3, [pc, #468]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0dc      	b.n	80028c0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002706:	f000 fa09 	bl	8002b1c <RCC_GetSysClockFreqFromPLLSource>
 800270a:	4603      	mov	r3, r0
 800270c:	4a70      	ldr	r2, [pc, #448]	; (80028d0 <HAL_RCC_ClockConfig+0x264>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d946      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002712:	4b6e      	ldr	r3, [pc, #440]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d140      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800271e:	4b6b      	ldr	r3, [pc, #428]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002726:	4a69      	ldr	r2, [pc, #420]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 8002728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e035      	b.n	80027a0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d107      	bne.n	800274c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273c:	4b63      	ldr	r3, [pc, #396]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d115      	bne.n	8002774 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b9      	b.n	80028c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d107      	bne.n	8002764 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002754:	4b5d      	ldr	r3, [pc, #372]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d109      	bne.n	8002774 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0ad      	b.n	80028c0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0a5      	b.n	80028c0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002774:	f000 f8b4 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8002778:	4603      	mov	r3, r0
 800277a:	4a55      	ldr	r2, [pc, #340]	; (80028d0 <HAL_RCC_ClockConfig+0x264>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d90f      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002780:	4b52      	ldr	r3, [pc, #328]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800278c:	4b4f      	ldr	r3, [pc, #316]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002794:	4a4d      	ldr	r2, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 8002796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027a0:	4b4a      	ldr	r3, [pc, #296]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 0203 	bic.w	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4947      	ldr	r1, [pc, #284]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b2:	f7fe feab 	bl	800150c <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ba:	f7fe fea7 	bl	800150c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e077      	b.n	80028c0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d0:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 020c 	and.w	r2, r3, #12
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	429a      	cmp	r2, r3
 80027e0:	d1eb      	bne.n	80027ba <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d105      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027e8:	4b38      	ldr	r3, [pc, #224]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a37      	ldr	r2, [pc, #220]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 80027ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027f2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d010      	beq.n	8002822 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	4b31      	ldr	r3, [pc, #196]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800280c:	429a      	cmp	r2, r3
 800280e:	d208      	bcs.n	8002822 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002810:	4b2e      	ldr	r3, [pc, #184]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	492b      	ldr	r1, [pc, #172]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <HAL_RCC_ClockConfig+0x25c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d210      	bcs.n	8002852 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_RCC_ClockConfig+0x25c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 020f 	bic.w	r2, r3, #15
 8002838:	4923      	ldr	r1, [pc, #140]	; (80028c8 <HAL_RCC_ClockConfig+0x25c>)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002840:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <HAL_RCC_ClockConfig+0x25c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d001      	beq.n	8002852 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e036      	b.n	80028c0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	4918      	ldr	r1, [pc, #96]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d009      	beq.n	8002890 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800287c:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4910      	ldr	r1, [pc, #64]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 800288c:	4313      	orrs	r3, r2
 800288e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002890:	f000 f826 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_RCC_ClockConfig+0x260>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	490c      	ldr	r1, [pc, #48]	; (80028d4 <HAL_RCC_ClockConfig+0x268>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ac:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <HAL_RCC_ClockConfig+0x26c>)
 80028ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <HAL_RCC_ClockConfig+0x270>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe fdd9 	bl	800146c <HAL_InitTick>
 80028ba:	4603      	mov	r3, r0
 80028bc:	73fb      	strb	r3, [r7, #15]

  return status;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40022000 	.word	0x40022000
 80028cc:	40021000 	.word	0x40021000
 80028d0:	04c4b400 	.word	0x04c4b400
 80028d4:	08005680 	.word	0x08005680
 80028d8:	20000000 	.word	0x20000000
 80028dc:	20000004 	.word	0x20000004

080028e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	; 0x24
 80028e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ee:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f8:	4b3b      	ldr	r3, [pc, #236]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x34>
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d121      	bne.n	8002952 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d11e      	bne.n	8002952 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002914:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d107      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002920:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	e005      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800293c:	4a2b      	ldr	r2, [pc, #172]	; (80029ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002944:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10d      	bne.n	8002968 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b04      	cmp	r3, #4
 8002956:	d102      	bne.n	800295e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002958:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800295a:	61bb      	str	r3, [r7, #24]
 800295c:	e004      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b08      	cmp	r3, #8
 8002962:	d101      	bne.n	8002968 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002966:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d134      	bne.n	80029d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800296e:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d003      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0xa6>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d003      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0xac>
 8002984:	e005      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002986:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002988:	617b      	str	r3, [r7, #20]
      break;
 800298a:	e005      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800298e:	617b      	str	r3, [r7, #20]
      break;
 8002990:	e002      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	617b      	str	r3, [r7, #20]
      break;
 8002996:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3301      	adds	r3, #1
 80029a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	fb03 f202 	mul.w	r2, r3, r2
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	0e5b      	lsrs	r3, r3, #25
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	3301      	adds	r3, #1
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029d8:	69bb      	ldr	r3, [r7, #24]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	; 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	08005698 	.word	0x08005698
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	017d7840 	.word	0x017d7840

080029f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000000 	.word	0x20000000

08002a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a14:	f7ff fff0 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	0a1b      	lsrs	r3, r3, #8
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4904      	ldr	r1, [pc, #16]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08005690 	.word	0x08005690

08002a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a40:	f7ff ffda 	bl	80029f8 <HAL_RCC_GetHCLKFreq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	0adb      	lsrs	r3, r3, #11
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	4904      	ldr	r1, [pc, #16]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a52:	5ccb      	ldrb	r3, [r1, r3]
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08005690 	.word	0x08005690

08002a68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a74:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a80:	f7ff f906 	bl	8001c90 <HAL_PWREx_GetVoltageRange>
 8002a84:	6178      	str	r0, [r7, #20]
 8002a86:	e014      	b.n	8002ab2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a92:	6593      	str	r3, [r2, #88]	; 0x58
 8002a94:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002aa0:	f7ff f8f6 	bl	8001c90 <HAL_PWREx_GetVoltageRange>
 8002aa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab8:	d10b      	bne.n	8002ad2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b80      	cmp	r3, #128	; 0x80
 8002abe:	d913      	bls.n	8002ae8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ac4:	d902      	bls.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	e00d      	b.n	8002ae8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002acc:	2301      	movs	r3, #1
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	e00a      	b.n	8002ae8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ad6:	d902      	bls.n	8002ade <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002ad8:	2302      	movs	r3, #2
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	e004      	b.n	8002ae8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b70      	cmp	r3, #112	; 0x70
 8002ae2:	d101      	bne.n	8002ae8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 020f 	bic.w	r2, r3, #15
 8002af0:	4909      	ldr	r1, [pc, #36]	; (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d001      	beq.n	8002b0a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40022000 	.word	0x40022000

08002b1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b22:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d00b      	beq.n	8002b4a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d825      	bhi.n	8002b84 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d008      	beq.n	8002b50 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d11f      	bne.n	8002b84 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002b44:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002b46:	613b      	str	r3, [r7, #16]
    break;
 8002b48:	e01f      	b.n	8002b8a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002b4a:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002b4c:	613b      	str	r3, [r7, #16]
    break;
 8002b4e:	e01c      	b.n	8002b8a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b50:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d107      	bne.n	8002b6c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b5c:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b62:	0a1b      	lsrs	r3, r3, #8
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	e005      	b.n	8002b78 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002b78:	4a1a      	ldr	r2, [pc, #104]	; (8002be4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b80:	613b      	str	r3, [r7, #16]
    break;
 8002b82:	e002      	b.n	8002b8a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
    break;
 8002b88:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	3301      	adds	r3, #1
 8002b96:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	fb03 f202 	mul.w	r2, r3, r2
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bae:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0e5b      	lsrs	r3, r3, #25
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002bca:	683b      	ldr	r3, [r7, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	371c      	adds	r7, #28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	00f42400 	.word	0x00f42400
 8002be0:	017d7840 	.word	0x017d7840
 8002be4:	08005698 	.word	0x08005698

08002be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d040      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c08:	2b80      	cmp	r3, #128	; 0x80
 8002c0a:	d02a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c0c:	2b80      	cmp	r3, #128	; 0x80
 8002c0e:	d825      	bhi.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002c10:	2b60      	cmp	r3, #96	; 0x60
 8002c12:	d026      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c14:	2b60      	cmp	r3, #96	; 0x60
 8002c16:	d821      	bhi.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002c18:	2b40      	cmp	r3, #64	; 0x40
 8002c1a:	d006      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d81d      	bhi.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d009      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d010      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002c28:	e018      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c2a:	4b89      	ldr	r3, [pc, #548]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	4a88      	ldr	r2, [pc, #544]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c34:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c36:	e015      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fb02 	bl	8003248 <RCCEx_PLLSAI1_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c48:	e00c      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3320      	adds	r3, #32
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fbed 	bl	8003430 <RCCEx_PLLSAI2_Config>
 8002c56:	4603      	mov	r3, r0
 8002c58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c5a:	e003      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	74fb      	strb	r3, [r7, #19]
      break;
 8002c60:	e000      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10b      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c6a:	4b79      	ldr	r3, [pc, #484]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c70:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c78:	4975      	ldr	r1, [pc, #468]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002c80:	e001      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c82:	7cfb      	ldrb	r3, [r7, #19]
 8002c84:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d047      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9a:	d030      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca0:	d82a      	bhi.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ca6:	d02a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cac:	d824      	bhi.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb8:	d81e      	bhi.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc2:	d010      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002cc4:	e018      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cc6:	4b62      	ldr	r3, [pc, #392]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	4a61      	ldr	r2, [pc, #388]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cd2:	e015      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fab4 	bl	8003248 <RCCEx_PLLSAI1_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ce4:	e00c      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3320      	adds	r3, #32
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fb9f 	bl	8003430 <RCCEx_PLLSAI2_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cf6:	e003      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	74fb      	strb	r3, [r7, #19]
      break;
 8002cfc:	e000      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10b      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d06:	4b52      	ldr	r3, [pc, #328]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	494e      	ldr	r1, [pc, #312]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002d1c:	e001      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 809f 	beq.w	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d30:	2300      	movs	r3, #0
 8002d32:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d34:	4b46      	ldr	r3, [pc, #280]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002d44:	2300      	movs	r3, #0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00d      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4a:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	4a40      	ldr	r2, [pc, #256]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d54:	6593      	str	r3, [r2, #88]	; 0x58
 8002d56:	4b3e      	ldr	r3, [pc, #248]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d62:	2301      	movs	r3, #1
 8002d64:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a3a      	ldr	r2, [pc, #232]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d72:	f7fe fbcb 	bl	800150c <HAL_GetTick>
 8002d76:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d78:	e009      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7a:	f7fe fbc7 	bl	800150c <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d902      	bls.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	74fb      	strb	r3, [r7, #19]
        break;
 8002d8c:	e005      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d8e:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0ef      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d15b      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002da0:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002daa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01f      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d019      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dbe:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dca:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd0:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de0:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dea:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d016      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fb86 	bl	800150c <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e02:	e00b      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e04:	f7fe fb82 	bl	800150c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d902      	bls.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	74fb      	strb	r3, [r7, #19]
            break;
 8002e1a:	e006      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ec      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10c      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	4903      	ldr	r1, [pc, #12]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e48:	e008      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e4a:	7cfb      	ldrb	r3, [r7, #19]
 8002e4c:	74bb      	strb	r3, [r7, #18]
 8002e4e:	e005      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e58:	7cfb      	ldrb	r3, [r7, #19]
 8002e5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5c:	7c7b      	ldrb	r3, [r7, #17]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d105      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e62:	4ba0      	ldr	r3, [pc, #640]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	4a9f      	ldr	r2, [pc, #636]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e7a:	4b9a      	ldr	r3, [pc, #616]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e80:	f023 0203 	bic.w	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	4996      	ldr	r1, [pc, #600]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e9c:	4b91      	ldr	r3, [pc, #580]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea2:	f023 020c 	bic.w	r2, r3, #12
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	498e      	ldr	r1, [pc, #568]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ebe:	4b89      	ldr	r3, [pc, #548]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	4985      	ldr	r1, [pc, #532]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ee0:	4b80      	ldr	r3, [pc, #512]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eee:	497d      	ldr	r1, [pc, #500]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f02:	4b78      	ldr	r3, [pc, #480]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f10:	4974      	ldr	r1, [pc, #464]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f24:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f32:	496c      	ldr	r1, [pc, #432]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f46:	4b67      	ldr	r3, [pc, #412]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f54:	4963      	ldr	r1, [pc, #396]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f68:	4b5e      	ldr	r3, [pc, #376]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f76:	495b      	ldr	r1, [pc, #364]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f8a:	4b56      	ldr	r3, [pc, #344]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	4952      	ldr	r1, [pc, #328]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fac:	4b4d      	ldr	r3, [pc, #308]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	494a      	ldr	r1, [pc, #296]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fce:	4b45      	ldr	r3, [pc, #276]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	4941      	ldr	r1, [pc, #260]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ff0:	4b3c      	ldr	r3, [pc, #240]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ff6:	f023 0203 	bic.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffe:	4939      	ldr	r1, [pc, #228]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d028      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003012:	4b34      	ldr	r3, [pc, #208]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003020:	4930      	ldr	r1, [pc, #192]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003030:	d106      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003032:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4a2b      	ldr	r2, [pc, #172]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800303c:	60d3      	str	r3, [r2, #12]
 800303e:	e011      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003048:	d10c      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3304      	adds	r3, #4
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f000 f8f9 	bl	8003248 <RCCEx_PLLSAI1_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d04d      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003078:	d108      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800307c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003080:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003086:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800308a:	e012      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800308c:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800308e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003092:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003098:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030aa:	490e      	ldr	r1, [pc, #56]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ba:	d106      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c6:	60d3      	str	r3, [r2, #12]
 80030c8:	e020      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030d2:	d109      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4a02      	ldr	r2, [pc, #8]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030de:	60d3      	str	r3, [r2, #12]
 80030e0:	e014      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030f0:	d10c      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3304      	adds	r3, #4
 80030f6:	2101      	movs	r1, #1
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f8a5 	bl	8003248 <RCCEx_PLLSAI1_Config>
 80030fe:	4603      	mov	r3, r0
 8003100:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003102:	7cfb      	ldrb	r3, [r7, #19]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d028      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003118:	4b4a      	ldr	r3, [pc, #296]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003126:	4947      	ldr	r1, [pc, #284]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003136:	d106      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003138:	4b42      	ldr	r3, [pc, #264]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a41      	ldr	r2, [pc, #260]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800313e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003142:	60d3      	str	r3, [r2, #12]
 8003144:	e011      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800314a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800314e:	d10c      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	2101      	movs	r1, #1
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f876 	bl	8003248 <RCCEx_PLLSAI1_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01e      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003176:	4b33      	ldr	r3, [pc, #204]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003186:	492f      	ldr	r1, [pc, #188]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3304      	adds	r3, #4
 800319e:	2102      	movs	r1, #2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 f851 	bl	8003248 <RCCEx_PLLSAI1_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00b      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031c0:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031c6:	f023 0204 	bic.w	r2, r3, #4
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d0:	491c      	ldr	r1, [pc, #112]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00b      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ea:	f023 0218 	bic.w	r2, r3, #24
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	4913      	ldr	r1, [pc, #76]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d017      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800320a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800320e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003218:	490a      	ldr	r1, [pc, #40]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800322a:	d105      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4a04      	ldr	r2, [pc, #16]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003236:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003238:	7cbb      	ldrb	r3, [r7, #18]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000

08003248 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003256:	4b72      	ldr	r3, [pc, #456]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00e      	beq.n	8003280 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003262:	4b6f      	ldr	r3, [pc, #444]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0203 	and.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d103      	bne.n	800327a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
       ||
 8003276:	2b00      	cmp	r3, #0
 8003278:	d142      	bne.n	8003300 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
 800327e:	e03f      	b.n	8003300 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b03      	cmp	r3, #3
 8003286:	d018      	beq.n	80032ba <RCCEx_PLLSAI1_Config+0x72>
 8003288:	2b03      	cmp	r3, #3
 800328a:	d825      	bhi.n	80032d8 <RCCEx_PLLSAI1_Config+0x90>
 800328c:	2b01      	cmp	r3, #1
 800328e:	d002      	beq.n	8003296 <RCCEx_PLLSAI1_Config+0x4e>
 8003290:	2b02      	cmp	r3, #2
 8003292:	d009      	beq.n	80032a8 <RCCEx_PLLSAI1_Config+0x60>
 8003294:	e020      	b.n	80032d8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003296:	4b62      	ldr	r3, [pc, #392]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d11d      	bne.n	80032de <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a6:	e01a      	b.n	80032de <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032a8:	4b5d      	ldr	r3, [pc, #372]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d116      	bne.n	80032e2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b8:	e013      	b.n	80032e2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032ba:	4b59      	ldr	r3, [pc, #356]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10f      	bne.n	80032e6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032c6:	4b56      	ldr	r3, [pc, #344]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032d6:	e006      	b.n	80032e6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      break;
 80032dc:	e004      	b.n	80032e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80032de:	bf00      	nop
 80032e0:	e002      	b.n	80032e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80032e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d108      	bne.n	8003300 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80032ee:	4b4c      	ldr	r3, [pc, #304]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f023 0203 	bic.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4949      	ldr	r1, [pc, #292]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 8086 	bne.w	8003414 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003308:	4b45      	ldr	r3, [pc, #276]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a44      	ldr	r2, [pc, #272]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 800330e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003314:	f7fe f8fa 	bl	800150c <HAL_GetTick>
 8003318:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800331a:	e009      	b.n	8003330 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800331c:	f7fe f8f6 	bl	800150c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d902      	bls.n	8003330 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	73fb      	strb	r3, [r7, #15]
        break;
 800332e:	e005      	b.n	800333c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003330:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1ef      	bne.n	800331c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d168      	bne.n	8003414 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d113      	bne.n	8003370 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003348:	4b35      	ldr	r3, [pc, #212]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	4b35      	ldr	r3, [pc, #212]	; (8003424 <RCCEx_PLLSAI1_Config+0x1dc>)
 800334e:	4013      	ands	r3, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6892      	ldr	r2, [r2, #8]
 8003354:	0211      	lsls	r1, r2, #8
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68d2      	ldr	r2, [r2, #12]
 800335a:	06d2      	lsls	r2, r2, #27
 800335c:	4311      	orrs	r1, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6852      	ldr	r2, [r2, #4]
 8003362:	3a01      	subs	r2, #1
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	430a      	orrs	r2, r1
 8003368:	492d      	ldr	r1, [pc, #180]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 800336a:	4313      	orrs	r3, r2
 800336c:	610b      	str	r3, [r1, #16]
 800336e:	e02d      	b.n	80033cc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d115      	bne.n	80033a2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003376:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	4b2b      	ldr	r3, [pc, #172]	; (8003428 <RCCEx_PLLSAI1_Config+0x1e0>)
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6892      	ldr	r2, [r2, #8]
 8003382:	0211      	lsls	r1, r2, #8
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6912      	ldr	r2, [r2, #16]
 8003388:	0852      	lsrs	r2, r2, #1
 800338a:	3a01      	subs	r2, #1
 800338c:	0552      	lsls	r2, r2, #21
 800338e:	4311      	orrs	r1, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6852      	ldr	r2, [r2, #4]
 8003394:	3a01      	subs	r2, #1
 8003396:	0112      	lsls	r2, r2, #4
 8003398:	430a      	orrs	r2, r1
 800339a:	4921      	ldr	r1, [pc, #132]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 800339c:	4313      	orrs	r3, r2
 800339e:	610b      	str	r3, [r1, #16]
 80033a0:	e014      	b.n	80033cc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033a2:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	4b21      	ldr	r3, [pc, #132]	; (800342c <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6892      	ldr	r2, [r2, #8]
 80033ae:	0211      	lsls	r1, r2, #8
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6952      	ldr	r2, [r2, #20]
 80033b4:	0852      	lsrs	r2, r2, #1
 80033b6:	3a01      	subs	r2, #1
 80033b8:	0652      	lsls	r2, r2, #25
 80033ba:	4311      	orrs	r1, r2
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6852      	ldr	r2, [r2, #4]
 80033c0:	3a01      	subs	r2, #1
 80033c2:	0112      	lsls	r2, r2, #4
 80033c4:	430a      	orrs	r2, r1
 80033c6:	4916      	ldr	r1, [pc, #88]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033cc:	4b14      	ldr	r3, [pc, #80]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a13      	ldr	r2, [pc, #76]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fe f898 	bl	800150c <HAL_GetTick>
 80033dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033de:	e009      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033e0:	f7fe f894 	bl	800150c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d902      	bls.n	80033f4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	73fb      	strb	r3, [r7, #15]
          break;
 80033f2:	e005      	b.n	8003400 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033f4:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0ef      	beq.n	80033e0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	4904      	ldr	r1, [pc, #16]	; (8003420 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003410:	4313      	orrs	r3, r2
 8003412:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000
 8003424:	07ff800f 	.word	0x07ff800f
 8003428:	ff9f800f 	.word	0xff9f800f
 800342c:	f9ff800f 	.word	0xf9ff800f

08003430 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800343e:	4b72      	ldr	r3, [pc, #456]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00e      	beq.n	8003468 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800344a:	4b6f      	ldr	r3, [pc, #444]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 0203 	and.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d103      	bne.n	8003462 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
       ||
 800345e:	2b00      	cmp	r3, #0
 8003460:	d142      	bne.n	80034e8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
 8003466:	e03f      	b.n	80034e8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d018      	beq.n	80034a2 <RCCEx_PLLSAI2_Config+0x72>
 8003470:	2b03      	cmp	r3, #3
 8003472:	d825      	bhi.n	80034c0 <RCCEx_PLLSAI2_Config+0x90>
 8003474:	2b01      	cmp	r3, #1
 8003476:	d002      	beq.n	800347e <RCCEx_PLLSAI2_Config+0x4e>
 8003478:	2b02      	cmp	r3, #2
 800347a:	d009      	beq.n	8003490 <RCCEx_PLLSAI2_Config+0x60>
 800347c:	e020      	b.n	80034c0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800347e:	4b62      	ldr	r3, [pc, #392]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d11d      	bne.n	80034c6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800348e:	e01a      	b.n	80034c6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003490:	4b5d      	ldr	r3, [pc, #372]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003498:	2b00      	cmp	r3, #0
 800349a:	d116      	bne.n	80034ca <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a0:	e013      	b.n	80034ca <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034a2:	4b59      	ldr	r3, [pc, #356]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10f      	bne.n	80034ce <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ae:	4b56      	ldr	r3, [pc, #344]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034be:	e006      	b.n	80034ce <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
      break;
 80034c4:	e004      	b.n	80034d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80034c6:	bf00      	nop
 80034c8:	e002      	b.n	80034d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80034ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d108      	bne.n	80034e8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80034d6:	4b4c      	ldr	r3, [pc, #304]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f023 0203 	bic.w	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4949      	ldr	r1, [pc, #292]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f040 8086 	bne.w	80035fc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034f0:	4b45      	ldr	r3, [pc, #276]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a44      	ldr	r2, [pc, #272]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fc:	f7fe f806 	bl	800150c <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003502:	e009      	b.n	8003518 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003504:	f7fe f802 	bl	800150c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d902      	bls.n	8003518 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	73fb      	strb	r3, [r7, #15]
        break;
 8003516:	e005      	b.n	8003524 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003518:	4b3b      	ldr	r3, [pc, #236]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ef      	bne.n	8003504 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d168      	bne.n	80035fc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d113      	bne.n	8003558 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003530:	4b35      	ldr	r3, [pc, #212]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	4b35      	ldr	r3, [pc, #212]	; (800360c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003536:	4013      	ands	r3, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6892      	ldr	r2, [r2, #8]
 800353c:	0211      	lsls	r1, r2, #8
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68d2      	ldr	r2, [r2, #12]
 8003542:	06d2      	lsls	r2, r2, #27
 8003544:	4311      	orrs	r1, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6852      	ldr	r2, [r2, #4]
 800354a:	3a01      	subs	r2, #1
 800354c:	0112      	lsls	r2, r2, #4
 800354e:	430a      	orrs	r2, r1
 8003550:	492d      	ldr	r1, [pc, #180]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003552:	4313      	orrs	r3, r2
 8003554:	614b      	str	r3, [r1, #20]
 8003556:	e02d      	b.n	80035b4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d115      	bne.n	800358a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800355e:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003564:	4013      	ands	r3, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6892      	ldr	r2, [r2, #8]
 800356a:	0211      	lsls	r1, r2, #8
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6912      	ldr	r2, [r2, #16]
 8003570:	0852      	lsrs	r2, r2, #1
 8003572:	3a01      	subs	r2, #1
 8003574:	0552      	lsls	r2, r2, #21
 8003576:	4311      	orrs	r1, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6852      	ldr	r2, [r2, #4]
 800357c:	3a01      	subs	r2, #1
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	430a      	orrs	r2, r1
 8003582:	4921      	ldr	r1, [pc, #132]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003584:	4313      	orrs	r3, r2
 8003586:	614b      	str	r3, [r1, #20]
 8003588:	e014      	b.n	80035b4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	4b21      	ldr	r3, [pc, #132]	; (8003614 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003590:	4013      	ands	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6892      	ldr	r2, [r2, #8]
 8003596:	0211      	lsls	r1, r2, #8
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6952      	ldr	r2, [r2, #20]
 800359c:	0852      	lsrs	r2, r2, #1
 800359e:	3a01      	subs	r2, #1
 80035a0:	0652      	lsls	r2, r2, #25
 80035a2:	4311      	orrs	r1, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6852      	ldr	r2, [r2, #4]
 80035a8:	3a01      	subs	r2, #1
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	430a      	orrs	r2, r1
 80035ae:	4916      	ldr	r1, [pc, #88]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a13      	ldr	r2, [pc, #76]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c0:	f7fd ffa4 	bl	800150c <HAL_GetTick>
 80035c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035c6:	e009      	b.n	80035dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035c8:	f7fd ffa0 	bl	800150c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d902      	bls.n	80035dc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	73fb      	strb	r3, [r7, #15]
          break;
 80035da:	e005      	b.n	80035e8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0ef      	beq.n	80035c8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	4904      	ldr	r1, [pc, #16]	; (8003608 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	07ff800f 	.word	0x07ff800f
 8003610:	ff9f800f 	.word	0xff9f800f
 8003614:	f9ff800f 	.word	0xf9ff800f

08003618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e095      	b.n	8003756 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	d108      	bne.n	8003644 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800363a:	d009      	beq.n	8003650 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	61da      	str	r2, [r3, #28]
 8003642:	e005      	b.n	8003650 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fd fc96 	bl	8000f9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003686:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003690:	d902      	bls.n	8003698 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	e002      	b.n	800369e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800369c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80036a6:	d007      	beq.n	80036b8 <HAL_SPI_Init+0xa0>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036b0:	d002      	beq.n	80036b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	ea42 0103 	orr.w	r1, r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	0c1b      	lsrs	r3, r3, #16
 8003714:	f003 0204 	and.w	r2, r3, #4
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003734:	ea42 0103 	orr.w	r1, r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b088      	sub	sp, #32
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_SPI_Transmit+0x22>
 800377c:	2302      	movs	r3, #2
 800377e:	e158      	b.n	8003a32 <HAL_SPI_Transmit+0x2d4>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003788:	f7fd fec0 	bl	800150c <HAL_GetTick>
 800378c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b01      	cmp	r3, #1
 800379c:	d002      	beq.n	80037a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800379e:	2302      	movs	r3, #2
 80037a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037a2:	e13d      	b.n	8003a20 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_SPI_Transmit+0x52>
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037b4:	e134      	b.n	8003a20 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2203      	movs	r2, #3
 80037ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	88fa      	ldrh	r2, [r7, #6]
 80037ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	88fa      	ldrh	r2, [r7, #6]
 80037d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003800:	d10f      	bne.n	8003822 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003810:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003820:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d007      	beq.n	8003840 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800383e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003848:	d94b      	bls.n	80038e2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_SPI_Transmit+0xfa>
 8003852:	8afb      	ldrh	r3, [r7, #22]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d13e      	bne.n	80038d6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	881a      	ldrh	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	1c9a      	adds	r2, r3, #2
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800387c:	e02b      	b.n	80038d6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b02      	cmp	r3, #2
 800388a:	d112      	bne.n	80038b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	881a      	ldrh	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	1c9a      	adds	r2, r3, #2
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038b0:	e011      	b.n	80038d6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b2:	f7fd fe2b 	bl	800150c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d803      	bhi.n	80038ca <HAL_SPI_Transmit+0x16c>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d102      	bne.n	80038d0 <HAL_SPI_Transmit+0x172>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038d4:	e0a4      	b.n	8003a20 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ce      	bne.n	800387e <HAL_SPI_Transmit+0x120>
 80038e0:	e07c      	b.n	80039dc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_SPI_Transmit+0x192>
 80038ea:	8afb      	ldrh	r3, [r7, #22]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d170      	bne.n	80039d2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d912      	bls.n	8003920 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	881a      	ldrh	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	1c9a      	adds	r2, r3, #2
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b02      	subs	r3, #2
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800391e:	e058      	b.n	80039d2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	7812      	ldrb	r2, [r2, #0]
 800392c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003946:	e044      	b.n	80039d2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b02      	cmp	r3, #2
 8003954:	d12b      	bne.n	80039ae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	d912      	bls.n	8003986 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	881a      	ldrh	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	1c9a      	adds	r2, r3, #2
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b02      	subs	r3, #2
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003984:	e025      	b.n	80039d2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	330c      	adds	r3, #12
 8003990:	7812      	ldrb	r2, [r2, #0]
 8003992:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039ac:	e011      	b.n	80039d2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ae:	f7fd fdad 	bl	800150c <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d803      	bhi.n	80039c6 <HAL_SPI_Transmit+0x268>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c4:	d102      	bne.n	80039cc <HAL_SPI_Transmit+0x26e>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d102      	bne.n	80039d2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039d0:	e026      	b.n	8003a20 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1b5      	bne.n	8003948 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	6839      	ldr	r1, [r7, #0]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f949 	bl	8003c78 <SPI_EndRxTxTransaction>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e000      	b.n	8003a20 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003a1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a30:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a4c:	f7fd fd5e 	bl	800150c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	4413      	add	r3, r2
 8003a5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a5c:	f7fd fd56 	bl	800150c <HAL_GetTick>
 8003a60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a62:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	015b      	lsls	r3, r3, #5
 8003a68:	0d1b      	lsrs	r3, r3, #20
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a72:	e054      	b.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d050      	beq.n	8003b1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a7c:	f7fd fd46 	bl	800150c <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d902      	bls.n	8003a92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d13d      	bne.n	8003b0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003aa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aaa:	d111      	bne.n	8003ad0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab4:	d004      	beq.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003abe:	d107      	bne.n	8003ad0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ace:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ad8:	d10f      	bne.n	8003afa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e017      	b.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4013      	ands	r3, r2
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	bf0c      	ite	eq
 8003b2e:	2301      	moveq	r3, #1
 8003b30:	2300      	movne	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d19b      	bne.n	8003a74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000000 	.word	0x20000000

08003b4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b5e:	f7fd fcd5 	bl	800150c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003b6e:	f7fd fccd 	bl	800150c <HAL_GetTick>
 8003b72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b7c:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	00da      	lsls	r2, r3, #3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	0d1b      	lsrs	r3, r3, #20
 8003b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8e:	fb02 f303 	mul.w	r3, r2, r3
 8003b92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b94:	e060      	b.n	8003c58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b9c:	d107      	bne.n	8003bae <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d104      	bne.n	8003bae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d050      	beq.n	8003c58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bb6:	f7fd fca9 	bl	800150c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d902      	bls.n	8003bcc <SPI_WaitFifoStateUntilTimeout+0x80>
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d13d      	bne.n	8003c48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be4:	d111      	bne.n	8003c0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bee:	d004      	beq.n	8003bfa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf8:	d107      	bne.n	8003c0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c12:	d10f      	bne.n	8003c34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e010      	b.n	8003c6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4013      	ands	r3, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d196      	bne.n	8003b96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3728      	adds	r7, #40	; 0x28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000000 	.word	0x20000000

08003c78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff ff5b 	bl	8003b4c <SPI_WaitFifoStateUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d007      	beq.n	8003cac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e027      	b.n	8003cfc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2180      	movs	r1, #128	; 0x80
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f7ff fec0 	bl	8003a3c <SPI_WaitFlagStateUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc6:	f043 0220 	orr.w	r2, r3, #32
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e014      	b.n	8003cfc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f7ff ff34 	bl	8003b4c <SPI_WaitFifoStateUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cee:	f043 0220 	orr.w	r2, r3, #32
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e000      	b.n	8003cfc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e049      	b.n	8003daa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fd f97a 	bl	8001024 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4619      	mov	r1, r3
 8003d42:	4610      	mov	r0, r2
 8003d44:	f000 f94a 	bl	8003fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e0ff      	b.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b14      	cmp	r3, #20
 8003dde:	f200 80f0 	bhi.w	8003fc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003de2:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de8:	08003e3d 	.word	0x08003e3d
 8003dec:	08003fc3 	.word	0x08003fc3
 8003df0:	08003fc3 	.word	0x08003fc3
 8003df4:	08003fc3 	.word	0x08003fc3
 8003df8:	08003e7d 	.word	0x08003e7d
 8003dfc:	08003fc3 	.word	0x08003fc3
 8003e00:	08003fc3 	.word	0x08003fc3
 8003e04:	08003fc3 	.word	0x08003fc3
 8003e08:	08003ebf 	.word	0x08003ebf
 8003e0c:	08003fc3 	.word	0x08003fc3
 8003e10:	08003fc3 	.word	0x08003fc3
 8003e14:	08003fc3 	.word	0x08003fc3
 8003e18:	08003eff 	.word	0x08003eff
 8003e1c:	08003fc3 	.word	0x08003fc3
 8003e20:	08003fc3 	.word	0x08003fc3
 8003e24:	08003fc3 	.word	0x08003fc3
 8003e28:	08003f41 	.word	0x08003f41
 8003e2c:	08003fc3 	.word	0x08003fc3
 8003e30:	08003fc3 	.word	0x08003fc3
 8003e34:	08003fc3 	.word	0x08003fc3
 8003e38:	08003f81 	.word	0x08003f81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f964 	bl	8004110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0208 	orr.w	r2, r2, #8
 8003e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0204 	bic.w	r2, r2, #4
 8003e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6999      	ldr	r1, [r3, #24]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	619a      	str	r2, [r3, #24]
      break;
 8003e7a:	e0a5      	b.n	8003fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f9d4 	bl	8004230 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6999      	ldr	r1, [r3, #24]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	021a      	lsls	r2, r3, #8
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	619a      	str	r2, [r3, #24]
      break;
 8003ebc:	e084      	b.n	8003fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68b9      	ldr	r1, [r7, #8]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fa3d 	bl	8004344 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0208 	orr.w	r2, r2, #8
 8003ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0204 	bic.w	r2, r2, #4
 8003ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69d9      	ldr	r1, [r3, #28]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	61da      	str	r2, [r3, #28]
      break;
 8003efc:	e064      	b.n	8003fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 faa5 	bl	8004454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69da      	ldr	r2, [r3, #28]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69d9      	ldr	r1, [r3, #28]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	021a      	lsls	r2, r3, #8
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	61da      	str	r2, [r3, #28]
      break;
 8003f3e:	e043      	b.n	8003fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 faee 	bl	8004528 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0208 	orr.w	r2, r2, #8
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0204 	bic.w	r2, r2, #4
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f7e:	e023      	b.n	8003fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fb32 	bl	80045f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	021a      	lsls	r2, r3, #8
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fc0:	e002      	b.n	8003fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8003fc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop

08003fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a40      	ldr	r2, [pc, #256]	; (80040f0 <TIM_Base_SetConfig+0x114>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffa:	d00f      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3d      	ldr	r2, [pc, #244]	; (80040f4 <TIM_Base_SetConfig+0x118>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00b      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3c      	ldr	r2, [pc, #240]	; (80040f8 <TIM_Base_SetConfig+0x11c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d007      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a3b      	ldr	r2, [pc, #236]	; (80040fc <TIM_Base_SetConfig+0x120>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d003      	beq.n	800401c <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a3a      	ldr	r2, [pc, #232]	; (8004100 <TIM_Base_SetConfig+0x124>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d108      	bne.n	800402e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2f      	ldr	r2, [pc, #188]	; (80040f0 <TIM_Base_SetConfig+0x114>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01f      	beq.n	8004076 <TIM_Base_SetConfig+0x9a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403c:	d01b      	beq.n	8004076 <TIM_Base_SetConfig+0x9a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <TIM_Base_SetConfig+0x118>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d017      	beq.n	8004076 <TIM_Base_SetConfig+0x9a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a2b      	ldr	r2, [pc, #172]	; (80040f8 <TIM_Base_SetConfig+0x11c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <TIM_Base_SetConfig+0x9a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a2a      	ldr	r2, [pc, #168]	; (80040fc <TIM_Base_SetConfig+0x120>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00f      	beq.n	8004076 <TIM_Base_SetConfig+0x9a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a29      	ldr	r2, [pc, #164]	; (8004100 <TIM_Base_SetConfig+0x124>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00b      	beq.n	8004076 <TIM_Base_SetConfig+0x9a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a28      	ldr	r2, [pc, #160]	; (8004104 <TIM_Base_SetConfig+0x128>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d007      	beq.n	8004076 <TIM_Base_SetConfig+0x9a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a27      	ldr	r2, [pc, #156]	; (8004108 <TIM_Base_SetConfig+0x12c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_Base_SetConfig+0x9a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a26      	ldr	r2, [pc, #152]	; (800410c <TIM_Base_SetConfig+0x130>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d108      	bne.n	8004088 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a10      	ldr	r2, [pc, #64]	; (80040f0 <TIM_Base_SetConfig+0x114>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00f      	beq.n	80040d4 <TIM_Base_SetConfig+0xf8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a12      	ldr	r2, [pc, #72]	; (8004100 <TIM_Base_SetConfig+0x124>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00b      	beq.n	80040d4 <TIM_Base_SetConfig+0xf8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a11      	ldr	r2, [pc, #68]	; (8004104 <TIM_Base_SetConfig+0x128>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d007      	beq.n	80040d4 <TIM_Base_SetConfig+0xf8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a10      	ldr	r2, [pc, #64]	; (8004108 <TIM_Base_SetConfig+0x12c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d003      	beq.n	80040d4 <TIM_Base_SetConfig+0xf8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a0f      	ldr	r2, [pc, #60]	; (800410c <TIM_Base_SetConfig+0x130>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d103      	bne.n	80040dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	615a      	str	r2, [r3, #20]
}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	40000400 	.word	0x40000400
 80040f8:	40000800 	.word	0x40000800
 80040fc:	40000c00 	.word	0x40000c00
 8004100:	40013400 	.word	0x40013400
 8004104:	40014000 	.word	0x40014000
 8004108:	40014400 	.word	0x40014400
 800410c:	40014800 	.word	0x40014800

08004110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f023 0201 	bic.w	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f023 0302 	bic.w	r3, r3, #2
 800415c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a2c      	ldr	r2, [pc, #176]	; (800421c <TIM_OC1_SetConfig+0x10c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00f      	beq.n	8004190 <TIM_OC1_SetConfig+0x80>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a2b      	ldr	r2, [pc, #172]	; (8004220 <TIM_OC1_SetConfig+0x110>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00b      	beq.n	8004190 <TIM_OC1_SetConfig+0x80>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a2a      	ldr	r2, [pc, #168]	; (8004224 <TIM_OC1_SetConfig+0x114>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d007      	beq.n	8004190 <TIM_OC1_SetConfig+0x80>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a29      	ldr	r2, [pc, #164]	; (8004228 <TIM_OC1_SetConfig+0x118>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_OC1_SetConfig+0x80>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a28      	ldr	r2, [pc, #160]	; (800422c <TIM_OC1_SetConfig+0x11c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d10c      	bne.n	80041aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0308 	bic.w	r3, r3, #8
 8004196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f023 0304 	bic.w	r3, r3, #4
 80041a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a1b      	ldr	r2, [pc, #108]	; (800421c <TIM_OC1_SetConfig+0x10c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00f      	beq.n	80041d2 <TIM_OC1_SetConfig+0xc2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a1a      	ldr	r2, [pc, #104]	; (8004220 <TIM_OC1_SetConfig+0x110>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00b      	beq.n	80041d2 <TIM_OC1_SetConfig+0xc2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a19      	ldr	r2, [pc, #100]	; (8004224 <TIM_OC1_SetConfig+0x114>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <TIM_OC1_SetConfig+0xc2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a18      	ldr	r2, [pc, #96]	; (8004228 <TIM_OC1_SetConfig+0x118>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_OC1_SetConfig+0xc2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a17      	ldr	r2, [pc, #92]	; (800422c <TIM_OC1_SetConfig+0x11c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d111      	bne.n	80041f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	621a      	str	r2, [r3, #32]
}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40013400 	.word	0x40013400
 8004224:	40014000 	.word	0x40014000
 8004228:	40014400 	.word	0x40014400
 800422c:	40014800 	.word	0x40014800

08004230 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f023 0210 	bic.w	r2, r3, #16
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800425e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0320 	bic.w	r3, r3, #32
 800427e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a28      	ldr	r2, [pc, #160]	; (8004330 <TIM_OC2_SetConfig+0x100>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d003      	beq.n	800429c <TIM_OC2_SetConfig+0x6c>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a27      	ldr	r2, [pc, #156]	; (8004334 <TIM_OC2_SetConfig+0x104>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d10d      	bne.n	80042b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <TIM_OC2_SetConfig+0x100>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00f      	beq.n	80042e0 <TIM_OC2_SetConfig+0xb0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <TIM_OC2_SetConfig+0x104>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <TIM_OC2_SetConfig+0xb0>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <TIM_OC2_SetConfig+0x108>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d007      	beq.n	80042e0 <TIM_OC2_SetConfig+0xb0>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a1a      	ldr	r2, [pc, #104]	; (800433c <TIM_OC2_SetConfig+0x10c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_OC2_SetConfig+0xb0>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a19      	ldr	r2, [pc, #100]	; (8004340 <TIM_OC2_SetConfig+0x110>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d113      	bne.n	8004308 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40013400 	.word	0x40013400
 8004338:	40014000 	.word	0x40014000
 800433c:	40014400 	.word	0x40014400
 8004340:	40014800 	.word	0x40014800

08004344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0303 	bic.w	r3, r3, #3
 800437e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a27      	ldr	r2, [pc, #156]	; (8004440 <TIM_OC3_SetConfig+0xfc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d003      	beq.n	80043ae <TIM_OC3_SetConfig+0x6a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a26      	ldr	r2, [pc, #152]	; (8004444 <TIM_OC3_SetConfig+0x100>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d10d      	bne.n	80043ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <TIM_OC3_SetConfig+0xfc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00f      	beq.n	80043f2 <TIM_OC3_SetConfig+0xae>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <TIM_OC3_SetConfig+0x100>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00b      	beq.n	80043f2 <TIM_OC3_SetConfig+0xae>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a1a      	ldr	r2, [pc, #104]	; (8004448 <TIM_OC3_SetConfig+0x104>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <TIM_OC3_SetConfig+0xae>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a19      	ldr	r2, [pc, #100]	; (800444c <TIM_OC3_SetConfig+0x108>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_OC3_SetConfig+0xae>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a18      	ldr	r2, [pc, #96]	; (8004450 <TIM_OC3_SetConfig+0x10c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d113      	bne.n	800441a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	621a      	str	r2, [r3, #32]
}
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40013400 	.word	0x40013400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800

08004454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	031b      	lsls	r3, r3, #12
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a18      	ldr	r2, [pc, #96]	; (8004514 <TIM_OC4_SetConfig+0xc0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00f      	beq.n	80044d8 <TIM_OC4_SetConfig+0x84>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a17      	ldr	r2, [pc, #92]	; (8004518 <TIM_OC4_SetConfig+0xc4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00b      	beq.n	80044d8 <TIM_OC4_SetConfig+0x84>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a16      	ldr	r2, [pc, #88]	; (800451c <TIM_OC4_SetConfig+0xc8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_OC4_SetConfig+0x84>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a15      	ldr	r2, [pc, #84]	; (8004520 <TIM_OC4_SetConfig+0xcc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_OC4_SetConfig+0x84>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a14      	ldr	r2, [pc, #80]	; (8004524 <TIM_OC4_SetConfig+0xd0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d109      	bne.n	80044ec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	019b      	lsls	r3, r3, #6
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40013400 	.word	0x40013400
 800451c:	40014000 	.word	0x40014000
 8004520:	40014400 	.word	0x40014400
 8004524:	40014800 	.word	0x40014800

08004528 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800456c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	041b      	lsls	r3, r3, #16
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a17      	ldr	r2, [pc, #92]	; (80045dc <TIM_OC5_SetConfig+0xb4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00f      	beq.n	80045a2 <TIM_OC5_SetConfig+0x7a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a16      	ldr	r2, [pc, #88]	; (80045e0 <TIM_OC5_SetConfig+0xb8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00b      	beq.n	80045a2 <TIM_OC5_SetConfig+0x7a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <TIM_OC5_SetConfig+0xbc>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d007      	beq.n	80045a2 <TIM_OC5_SetConfig+0x7a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a14      	ldr	r2, [pc, #80]	; (80045e8 <TIM_OC5_SetConfig+0xc0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d003      	beq.n	80045a2 <TIM_OC5_SetConfig+0x7a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a13      	ldr	r2, [pc, #76]	; (80045ec <TIM_OC5_SetConfig+0xc4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d109      	bne.n	80045b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	621a      	str	r2, [r3, #32]
}
 80045d0:	bf00      	nop
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	40013400 	.word	0x40013400
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40014400 	.word	0x40014400
 80045ec:	40014800 	.word	0x40014800

080045f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800461e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	021b      	lsls	r3, r3, #8
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	051b      	lsls	r3, r3, #20
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <TIM_OC6_SetConfig+0xb8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00f      	beq.n	800466c <TIM_OC6_SetConfig+0x7c>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a17      	ldr	r2, [pc, #92]	; (80046ac <TIM_OC6_SetConfig+0xbc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00b      	beq.n	800466c <TIM_OC6_SetConfig+0x7c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a16      	ldr	r2, [pc, #88]	; (80046b0 <TIM_OC6_SetConfig+0xc0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d007      	beq.n	800466c <TIM_OC6_SetConfig+0x7c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <TIM_OC6_SetConfig+0xc4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <TIM_OC6_SetConfig+0x7c>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a14      	ldr	r2, [pc, #80]	; (80046b8 <TIM_OC6_SetConfig+0xc8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d109      	bne.n	8004680 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004672:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	029b      	lsls	r3, r3, #10
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40012c00 	.word	0x40012c00
 80046ac:	40013400 	.word	0x40013400
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40014400 	.word	0x40014400
 80046b8:	40014800 	.word	0x40014800

080046bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e068      	b.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a2e      	ldr	r2, [pc, #184]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2d      	ldr	r2, [pc, #180]	; (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d108      	bne.n	800471a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800470e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004720:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1e      	ldr	r2, [pc, #120]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01d      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004746:	d018      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1b      	ldr	r2, [pc, #108]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d013      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1a      	ldr	r2, [pc, #104]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00e      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a18      	ldr	r2, [pc, #96]	; (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d009      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a13      	ldr	r2, [pc, #76]	; (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d004      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d10c      	bne.n	8004794 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	4313      	orrs	r3, r2
 800478a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40013400 	.word	0x40013400
 80047bc:	40000400 	.word	0x40000400
 80047c0:	40000800 	.word	0x40000800
 80047c4:	40000c00 	.word	0x40000c00
 80047c8:	40014000 	.word	0x40014000

080047cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e065      	b.n	80048b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	041b      	lsls	r3, r3, #16
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a16      	ldr	r2, [pc, #88]	; (80048c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a14      	ldr	r2, [pc, #80]	; (80048c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d115      	bne.n	80048a2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	051b      	lsls	r3, r3, #20
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40013400 	.word	0x40013400

080048c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e042      	b.n	8004960 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fc fbf1 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2224      	movs	r2, #36	; 0x24
 80048f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0201 	bic.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8c4 	bl	8004a98 <UART_SetConfig>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e022      	b.n	8004960 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fbb4 	bl	8005090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fc3b 	bl	80051d4 <UART_CheckIdleState>
 800495e:	4603      	mov	r3, r0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	; 0x28
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497e:	2b20      	cmp	r3, #32
 8004980:	f040 8084 	bne.w	8004a8c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_UART_Transmit+0x28>
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e07c      	b.n	8004a8e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_UART_Transmit+0x3a>
 800499e:	2302      	movs	r3, #2
 80049a0:	e075      	b.n	8004a8e <HAL_UART_Transmit+0x126>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2221      	movs	r2, #33	; 0x21
 80049b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ba:	f7fc fda7 	bl	800150c <HAL_GetTick>
 80049be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	88fa      	ldrh	r2, [r7, #6]
 80049c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d8:	d108      	bne.n	80049ec <HAL_UART_Transmit+0x84>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d104      	bne.n	80049ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	e003      	b.n	80049f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80049fc:	e02d      	b.n	8004a5a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2200      	movs	r2, #0
 8004a06:	2180      	movs	r1, #128	; 0x80
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fc2e 	bl	800526a <UART_WaitOnFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e03a      	b.n	8004a8e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10b      	bne.n	8004a36 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	881a      	ldrh	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a2a:	b292      	uxth	r2, r2
 8004a2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	3302      	adds	r3, #2
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	e008      	b.n	8004a48 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	b292      	uxth	r2, r2
 8004a40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	3301      	adds	r3, #1
 8004a46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1cb      	bne.n	80049fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2140      	movs	r1, #64	; 0x40
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fbfa 	bl	800526a <UART_WaitOnFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e006      	b.n	8004a8e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e000      	b.n	8004a8e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004a8c:	2302      	movs	r3, #2
  }
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3720      	adds	r7, #32
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a9c:	b08c      	sub	sp, #48	; 0x30
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4baa      	ldr	r3, [pc, #680]	; (8004d70 <UART_SetConfig+0x2d8>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a9f      	ldr	r2, [pc, #636]	; (8004d74 <UART_SetConfig+0x2dc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b00:	4313      	orrs	r3, r2
 8004b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f023 010f 	bic.w	r1, r3, #15
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a90      	ldr	r2, [pc, #576]	; (8004d78 <UART_SetConfig+0x2e0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d125      	bne.n	8004b88 <UART_SetConfig+0xf0>
 8004b3c:	4b8f      	ldr	r3, [pc, #572]	; (8004d7c <UART_SetConfig+0x2e4>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d81a      	bhi.n	8004b80 <UART_SetConfig+0xe8>
 8004b4a:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <UART_SetConfig+0xb8>)
 8004b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b71 	.word	0x08004b71
 8004b58:	08004b69 	.word	0x08004b69
 8004b5c:	08004b79 	.word	0x08004b79
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b66:	e116      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b6e:	e112      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004b70:	2304      	movs	r3, #4
 8004b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b76:	e10e      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004b78:	2308      	movs	r3, #8
 8004b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b7e:	e10a      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004b80:	2310      	movs	r3, #16
 8004b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b86:	e106      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a7c      	ldr	r2, [pc, #496]	; (8004d80 <UART_SetConfig+0x2e8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d138      	bne.n	8004c04 <UART_SetConfig+0x16c>
 8004b92:	4b7a      	ldr	r3, [pc, #488]	; (8004d7c <UART_SetConfig+0x2e4>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	d82d      	bhi.n	8004bfc <UART_SetConfig+0x164>
 8004ba0:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0x110>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bdd 	.word	0x08004bdd
 8004bac:	08004bfd 	.word	0x08004bfd
 8004bb0:	08004bfd 	.word	0x08004bfd
 8004bb4:	08004bfd 	.word	0x08004bfd
 8004bb8:	08004bed 	.word	0x08004bed
 8004bbc:	08004bfd 	.word	0x08004bfd
 8004bc0:	08004bfd 	.word	0x08004bfd
 8004bc4:	08004bfd 	.word	0x08004bfd
 8004bc8:	08004be5 	.word	0x08004be5
 8004bcc:	08004bfd 	.word	0x08004bfd
 8004bd0:	08004bfd 	.word	0x08004bfd
 8004bd4:	08004bfd 	.word	0x08004bfd
 8004bd8:	08004bf5 	.word	0x08004bf5
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be2:	e0d8      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004be4:	2302      	movs	r3, #2
 8004be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bea:	e0d4      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004bec:	2304      	movs	r3, #4
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf2:	e0d0      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bfa:	e0cc      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c02:	e0c8      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a5e      	ldr	r2, [pc, #376]	; (8004d84 <UART_SetConfig+0x2ec>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d125      	bne.n	8004c5a <UART_SetConfig+0x1c2>
 8004c0e:	4b5b      	ldr	r3, [pc, #364]	; (8004d7c <UART_SetConfig+0x2e4>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c18:	2b30      	cmp	r3, #48	; 0x30
 8004c1a:	d016      	beq.n	8004c4a <UART_SetConfig+0x1b2>
 8004c1c:	2b30      	cmp	r3, #48	; 0x30
 8004c1e:	d818      	bhi.n	8004c52 <UART_SetConfig+0x1ba>
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d00a      	beq.n	8004c3a <UART_SetConfig+0x1a2>
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d814      	bhi.n	8004c52 <UART_SetConfig+0x1ba>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <UART_SetConfig+0x19a>
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d008      	beq.n	8004c42 <UART_SetConfig+0x1aa>
 8004c30:	e00f      	b.n	8004c52 <UART_SetConfig+0x1ba>
 8004c32:	2300      	movs	r3, #0
 8004c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c38:	e0ad      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c40:	e0a9      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004c42:	2304      	movs	r3, #4
 8004c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c48:	e0a5      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c50:	e0a1      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004c52:	2310      	movs	r3, #16
 8004c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c58:	e09d      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a4a      	ldr	r2, [pc, #296]	; (8004d88 <UART_SetConfig+0x2f0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d125      	bne.n	8004cb0 <UART_SetConfig+0x218>
 8004c64:	4b45      	ldr	r3, [pc, #276]	; (8004d7c <UART_SetConfig+0x2e4>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c70:	d016      	beq.n	8004ca0 <UART_SetConfig+0x208>
 8004c72:	2bc0      	cmp	r3, #192	; 0xc0
 8004c74:	d818      	bhi.n	8004ca8 <UART_SetConfig+0x210>
 8004c76:	2b80      	cmp	r3, #128	; 0x80
 8004c78:	d00a      	beq.n	8004c90 <UART_SetConfig+0x1f8>
 8004c7a:	2b80      	cmp	r3, #128	; 0x80
 8004c7c:	d814      	bhi.n	8004ca8 <UART_SetConfig+0x210>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <UART_SetConfig+0x1f0>
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	d008      	beq.n	8004c98 <UART_SetConfig+0x200>
 8004c86:	e00f      	b.n	8004ca8 <UART_SetConfig+0x210>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c8e:	e082      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004c90:	2302      	movs	r3, #2
 8004c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c96:	e07e      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004c98:	2304      	movs	r3, #4
 8004c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9e:	e07a      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca6:	e076      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004ca8:	2310      	movs	r3, #16
 8004caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cae:	e072      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a35      	ldr	r2, [pc, #212]	; (8004d8c <UART_SetConfig+0x2f4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d12a      	bne.n	8004d10 <UART_SetConfig+0x278>
 8004cba:	4b30      	ldr	r3, [pc, #192]	; (8004d7c <UART_SetConfig+0x2e4>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cc8:	d01a      	beq.n	8004d00 <UART_SetConfig+0x268>
 8004cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cce:	d81b      	bhi.n	8004d08 <UART_SetConfig+0x270>
 8004cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd4:	d00c      	beq.n	8004cf0 <UART_SetConfig+0x258>
 8004cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cda:	d815      	bhi.n	8004d08 <UART_SetConfig+0x270>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <UART_SetConfig+0x250>
 8004ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce4:	d008      	beq.n	8004cf8 <UART_SetConfig+0x260>
 8004ce6:	e00f      	b.n	8004d08 <UART_SetConfig+0x270>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cee:	e052      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf6:	e04e      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfe:	e04a      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004d00:	2308      	movs	r3, #8
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d06:	e046      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d0e:	e042      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a17      	ldr	r2, [pc, #92]	; (8004d74 <UART_SetConfig+0x2dc>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d13a      	bne.n	8004d90 <UART_SetConfig+0x2f8>
 8004d1a:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <UART_SetConfig+0x2e4>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d28:	d01a      	beq.n	8004d60 <UART_SetConfig+0x2c8>
 8004d2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d2e:	d81b      	bhi.n	8004d68 <UART_SetConfig+0x2d0>
 8004d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d34:	d00c      	beq.n	8004d50 <UART_SetConfig+0x2b8>
 8004d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3a:	d815      	bhi.n	8004d68 <UART_SetConfig+0x2d0>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <UART_SetConfig+0x2b0>
 8004d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d44:	d008      	beq.n	8004d58 <UART_SetConfig+0x2c0>
 8004d46:	e00f      	b.n	8004d68 <UART_SetConfig+0x2d0>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4e:	e022      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004d50:	2302      	movs	r3, #2
 8004d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d56:	e01e      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d5e:	e01a      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004d60:	2308      	movs	r3, #8
 8004d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d66:	e016      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d6e:	e012      	b.n	8004d96 <UART_SetConfig+0x2fe>
 8004d70:	cfff69f3 	.word	0xcfff69f3
 8004d74:	40008000 	.word	0x40008000
 8004d78:	40013800 	.word	0x40013800
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40004400 	.word	0x40004400
 8004d84:	40004800 	.word	0x40004800
 8004d88:	40004c00 	.word	0x40004c00
 8004d8c:	40005000 	.word	0x40005000
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4aae      	ldr	r2, [pc, #696]	; (8005054 <UART_SetConfig+0x5bc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	f040 8097 	bne.w	8004ed0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004da2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d823      	bhi.n	8004df2 <UART_SetConfig+0x35a>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <UART_SetConfig+0x318>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dd5 	.word	0x08004dd5
 8004db4:	08004df3 	.word	0x08004df3
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	08004df3 	.word	0x08004df3
 8004dc0:	08004de3 	.word	0x08004de3
 8004dc4:	08004df3 	.word	0x08004df3
 8004dc8:	08004df3 	.word	0x08004df3
 8004dcc:	08004df3 	.word	0x08004df3
 8004dd0:	08004deb 	.word	0x08004deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f7fd fe1c 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dda:	e010      	b.n	8004dfe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ddc:	4b9e      	ldr	r3, [pc, #632]	; (8005058 <UART_SetConfig+0x5c0>)
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004de0:	e00d      	b.n	8004dfe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de2:	f7fd fd7d 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8004de6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004de8:	e009      	b.n	8004dfe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004df0:	e005      	b.n	8004dfe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004dfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8130 	beq.w	8005066 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	4a94      	ldr	r2, [pc, #592]	; (800505c <UART_SetConfig+0x5c4>)
 8004e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e10:	461a      	mov	r2, r3
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	4413      	add	r3, r2
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d305      	bcc.n	8004e36 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d903      	bls.n	8004e3e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e3c:	e113      	b.n	8005066 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	2200      	movs	r2, #0
 8004e42:	60bb      	str	r3, [r7, #8]
 8004e44:	60fa      	str	r2, [r7, #12]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	4a84      	ldr	r2, [pc, #528]	; (800505c <UART_SetConfig+0x5c4>)
 8004e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2200      	movs	r2, #0
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e60:	f7fb f9d4 	bl	800020c <__aeabi_uldivmod>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	020b      	lsls	r3, r1, #8
 8004e76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e7a:	0202      	lsls	r2, r0, #8
 8004e7c:	6979      	ldr	r1, [r7, #20]
 8004e7e:	6849      	ldr	r1, [r1, #4]
 8004e80:	0849      	lsrs	r1, r1, #1
 8004e82:	2000      	movs	r0, #0
 8004e84:	460c      	mov	r4, r1
 8004e86:	4605      	mov	r5, r0
 8004e88:	eb12 0804 	adds.w	r8, r2, r4
 8004e8c:	eb43 0905 	adc.w	r9, r3, r5
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	469a      	mov	sl, r3
 8004e98:	4693      	mov	fp, r2
 8004e9a:	4652      	mov	r2, sl
 8004e9c:	465b      	mov	r3, fp
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	f7fb f9b3 	bl	800020c <__aeabi_uldivmod>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4613      	mov	r3, r2
 8004eac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb4:	d308      	bcc.n	8004ec8 <UART_SetConfig+0x430>
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ebc:	d204      	bcs.n	8004ec8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a3a      	ldr	r2, [r7, #32]
 8004ec4:	60da      	str	r2, [r3, #12]
 8004ec6:	e0ce      	b.n	8005066 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ece:	e0ca      	b.n	8005066 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed8:	d166      	bne.n	8004fa8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004eda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d827      	bhi.n	8004f32 <UART_SetConfig+0x49a>
 8004ee2:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <UART_SetConfig+0x450>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004f0d 	.word	0x08004f0d
 8004eec:	08004f15 	.word	0x08004f15
 8004ef0:	08004f1d 	.word	0x08004f1d
 8004ef4:	08004f33 	.word	0x08004f33
 8004ef8:	08004f23 	.word	0x08004f23
 8004efc:	08004f33 	.word	0x08004f33
 8004f00:	08004f33 	.word	0x08004f33
 8004f04:	08004f33 	.word	0x08004f33
 8004f08:	08004f2b 	.word	0x08004f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f0c:	f7fd fd80 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8004f10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f12:	e014      	b.n	8004f3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f14:	f7fd fd92 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8004f18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f1a:	e010      	b.n	8004f3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f1c:	4b4e      	ldr	r3, [pc, #312]	; (8005058 <UART_SetConfig+0x5c0>)
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f20:	e00d      	b.n	8004f3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f22:	f7fd fcdd 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8004f26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f28:	e009      	b.n	8004f3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f30:	e005      	b.n	8004f3e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8090 	beq.w	8005066 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	4a44      	ldr	r2, [pc, #272]	; (800505c <UART_SetConfig+0x5c4>)
 8004f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f50:	461a      	mov	r2, r3
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f58:	005a      	lsls	r2, r3, #1
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	441a      	add	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	2b0f      	cmp	r3, #15
 8004f70:	d916      	bls.n	8004fa0 <UART_SetConfig+0x508>
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f78:	d212      	bcs.n	8004fa0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f023 030f 	bic.w	r3, r3, #15
 8004f82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	8bfb      	ldrh	r3, [r7, #30]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	8bfa      	ldrh	r2, [r7, #30]
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	e062      	b.n	8005066 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fa6:	e05e      	b.n	8005066 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d828      	bhi.n	8005002 <UART_SetConfig+0x56a>
 8004fb0:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <UART_SetConfig+0x520>)
 8004fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb6:	bf00      	nop
 8004fb8:	08004fdd 	.word	0x08004fdd
 8004fbc:	08004fe5 	.word	0x08004fe5
 8004fc0:	08004fed 	.word	0x08004fed
 8004fc4:	08005003 	.word	0x08005003
 8004fc8:	08004ff3 	.word	0x08004ff3
 8004fcc:	08005003 	.word	0x08005003
 8004fd0:	08005003 	.word	0x08005003
 8004fd4:	08005003 	.word	0x08005003
 8004fd8:	08004ffb 	.word	0x08004ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fdc:	f7fd fd18 	bl	8002a10 <HAL_RCC_GetPCLK1Freq>
 8004fe0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fe2:	e014      	b.n	800500e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fe4:	f7fd fd2a 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8004fe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fea:	e010      	b.n	800500e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fec:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <UART_SetConfig+0x5c0>)
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ff0:	e00d      	b.n	800500e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff2:	f7fd fc75 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8004ff6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ff8:	e009      	b.n	800500e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005000:	e005      	b.n	800500e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800500c:	bf00      	nop
    }

    if (pclk != 0U)
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	2b00      	cmp	r3, #0
 8005012:	d028      	beq.n	8005066 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	4a10      	ldr	r2, [pc, #64]	; (800505c <UART_SetConfig+0x5c4>)
 800501a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800501e:	461a      	mov	r2, r3
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	fbb3 f2f2 	udiv	r2, r3, r2
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	085b      	lsrs	r3, r3, #1
 800502c:	441a      	add	r2, r3
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	fbb2 f3f3 	udiv	r3, r2, r3
 8005036:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	2b0f      	cmp	r3, #15
 800503c:	d910      	bls.n	8005060 <UART_SetConfig+0x5c8>
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005044:	d20c      	bcs.n	8005060 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	b29a      	uxth	r2, r3
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60da      	str	r2, [r3, #12]
 8005050:	e009      	b.n	8005066 <UART_SetConfig+0x5ce>
 8005052:	bf00      	nop
 8005054:	40008000 	.word	0x40008000
 8005058:	00f42400 	.word	0x00f42400
 800505c:	080056c8 	.word	0x080056c8
      }
      else
      {
        ret = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2201      	movs	r2, #1
 800506a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2201      	movs	r2, #1
 8005072:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2200      	movs	r2, #0
 800507a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2200      	movs	r2, #0
 8005080:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005082:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005086:	4618      	mov	r0, r3
 8005088:	3730      	adds	r7, #48	; 0x30
 800508a:	46bd      	mov	sp, r7
 800508c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01a      	beq.n	80051a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800518e:	d10a      	bne.n	80051a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af02      	add	r7, sp, #8
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051e4:	f7fc f992 	bl	800150c <HAL_GetTick>
 80051e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d10e      	bne.n	8005216 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f82f 	bl	800526a <UART_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e025      	b.n	8005262 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b04      	cmp	r3, #4
 8005222:	d10e      	bne.n	8005242 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f819 	bl	800526a <UART_WaitOnFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e00f      	b.n	8005262 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b09c      	sub	sp, #112	; 0x70
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	4613      	mov	r3, r2
 8005278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800527a:	e0a9      	b.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005282:	f000 80a5 	beq.w	80053d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005286:	f7fc f941 	bl	800150c <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <UART_WaitOnFlagUntilTimeout+0x32>
 8005296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005298:	2b00      	cmp	r3, #0
 800529a:	d140      	bne.n	800531e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052b0:	667b      	str	r3, [r7, #100]	; 0x64
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e6      	bne.n	800529c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3308      	adds	r3, #8
 80052d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	663b      	str	r3, [r7, #96]	; 0x60
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3308      	adds	r3, #8
 80052ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80052f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e5      	bne.n	80052ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e069      	b.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d051      	beq.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800533a:	d149      	bne.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005344:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800535a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
 8005366:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800536a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e6      	bne.n	8005346 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3308      	adds	r3, #8
 800537e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	613b      	str	r3, [r7, #16]
   return(result);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f023 0301 	bic.w	r3, r3, #1
 800538e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005398:	623a      	str	r2, [r7, #32]
 800539a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	69f9      	ldr	r1, [r7, #28]
 800539e:	6a3a      	ldr	r2, [r7, #32]
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e5      	bne.n	8005378 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e010      	b.n	80053f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69da      	ldr	r2, [r3, #28]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4013      	ands	r3, r2
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	429a      	cmp	r2, r3
 80053de:	bf0c      	ite	eq
 80053e0:	2301      	moveq	r3, #1
 80053e2:	2300      	movne	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	f43f af46 	beq.w	800527c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3770      	adds	r7, #112	; 0x70
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_UARTEx_DisableFifoMode+0x16>
 800540c:	2302      	movs	r3, #2
 800540e:	e027      	b.n	8005460 <HAL_UARTEx_DisableFifoMode+0x66>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2224      	movs	r2, #36	; 0x24
 800541c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0201 	bic.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800543e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005480:	2302      	movs	r3, #2
 8005482:	e02d      	b.n	80054e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2224      	movs	r2, #36	; 0x24
 8005490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0201 	bic.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f84f 	bl	8005564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e02d      	b.n	800555c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2224      	movs	r2, #36	; 0x24
 800550c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f811 	bl	8005564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2220      	movs	r2, #32
 800554e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005570:	2b00      	cmp	r3, #0
 8005572:	d108      	bne.n	8005586 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005584:	e031      	b.n	80055ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005586:	2308      	movs	r3, #8
 8005588:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800558a:	2308      	movs	r3, #8
 800558c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	0e5b      	lsrs	r3, r3, #25
 8005596:	b2db      	uxtb	r3, r3
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	0f5b      	lsrs	r3, r3, #29
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055ae:	7bbb      	ldrb	r3, [r7, #14]
 80055b0:	7b3a      	ldrb	r2, [r7, #12]
 80055b2:	4911      	ldr	r1, [pc, #68]	; (80055f8 <UARTEx_SetNbDataToProcess+0x94>)
 80055b4:	5c8a      	ldrb	r2, [r1, r2]
 80055b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055ba:	7b3a      	ldrb	r2, [r7, #12]
 80055bc:	490f      	ldr	r1, [pc, #60]	; (80055fc <UARTEx_SetNbDataToProcess+0x98>)
 80055be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	7b7a      	ldrb	r2, [r7, #13]
 80055d0:	4909      	ldr	r1, [pc, #36]	; (80055f8 <UARTEx_SetNbDataToProcess+0x94>)
 80055d2:	5c8a      	ldrb	r2, [r1, r2]
 80055d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055d8:	7b7a      	ldrb	r2, [r7, #13]
 80055da:	4908      	ldr	r1, [pc, #32]	; (80055fc <UARTEx_SetNbDataToProcess+0x98>)
 80055dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055de:	fb93 f3f2 	sdiv	r3, r3, r2
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	080056e0 	.word	0x080056e0
 80055fc:	080056e8 	.word	0x080056e8

08005600 <__libc_init_array>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	4d0d      	ldr	r5, [pc, #52]	; (8005638 <__libc_init_array+0x38>)
 8005604:	4c0d      	ldr	r4, [pc, #52]	; (800563c <__libc_init_array+0x3c>)
 8005606:	1b64      	subs	r4, r4, r5
 8005608:	10a4      	asrs	r4, r4, #2
 800560a:	2600      	movs	r6, #0
 800560c:	42a6      	cmp	r6, r4
 800560e:	d109      	bne.n	8005624 <__libc_init_array+0x24>
 8005610:	4d0b      	ldr	r5, [pc, #44]	; (8005640 <__libc_init_array+0x40>)
 8005612:	4c0c      	ldr	r4, [pc, #48]	; (8005644 <__libc_init_array+0x44>)
 8005614:	f000 f820 	bl	8005658 <_init>
 8005618:	1b64      	subs	r4, r4, r5
 800561a:	10a4      	asrs	r4, r4, #2
 800561c:	2600      	movs	r6, #0
 800561e:	42a6      	cmp	r6, r4
 8005620:	d105      	bne.n	800562e <__libc_init_array+0x2e>
 8005622:	bd70      	pop	{r4, r5, r6, pc}
 8005624:	f855 3b04 	ldr.w	r3, [r5], #4
 8005628:	4798      	blx	r3
 800562a:	3601      	adds	r6, #1
 800562c:	e7ee      	b.n	800560c <__libc_init_array+0xc>
 800562e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005632:	4798      	blx	r3
 8005634:	3601      	adds	r6, #1
 8005636:	e7f2      	b.n	800561e <__libc_init_array+0x1e>
 8005638:	080056f8 	.word	0x080056f8
 800563c:	080056f8 	.word	0x080056f8
 8005640:	080056f8 	.word	0x080056f8
 8005644:	080056fc 	.word	0x080056fc

08005648 <memset>:
 8005648:	4402      	add	r2, r0
 800564a:	4603      	mov	r3, r0
 800564c:	4293      	cmp	r3, r2
 800564e:	d100      	bne.n	8005652 <memset+0xa>
 8005650:	4770      	bx	lr
 8005652:	f803 1b01 	strb.w	r1, [r3], #1
 8005656:	e7f9      	b.n	800564c <memset+0x4>

08005658 <_init>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	bf00      	nop
 800565c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565e:	bc08      	pop	{r3}
 8005660:	469e      	mov	lr, r3
 8005662:	4770      	bx	lr

08005664 <_fini>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	bf00      	nop
 8005668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566a:	bc08      	pop	{r3}
 800566c:	469e      	mov	lr, r3
 800566e:	4770      	bx	lr
