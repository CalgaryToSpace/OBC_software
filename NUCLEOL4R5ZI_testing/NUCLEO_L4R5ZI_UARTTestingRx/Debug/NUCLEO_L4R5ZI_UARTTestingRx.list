
NUCLEO_L4R5ZI_UARTTestingRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a54  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004c10  08004c10  00014c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c90  08004c90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c90  08004c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c98  08004c98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c98  08004c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  2000000c  08004cac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08004cac  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010339  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000213d  00000000  00000000  00030375  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d70  00000000  00000000  000324b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  00033228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c5f  00000000  00000000  00033e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000abd9  00000000  00000000  0005daef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffe60  00000000  00000000  000686c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00168528  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000378c  00000000  00000000  001685a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004bf8 	.word	0x08004bf8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004bf8 	.word	0x08004bf8

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295
 800021c:	f04f 30ff 	movne.w	r0, #4294967295
 8000220:	f000 b972 	b.w	8000508 <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9e08      	ldr	r6, [sp, #32]
 8000242:	4604      	mov	r4, r0
 8000244:	4688      	mov	r8, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d14b      	bne.n	80002e2 <__udivmoddi4+0xa6>
 800024a:	428a      	cmp	r2, r1
 800024c:	4615      	mov	r5, r2
 800024e:	d967      	bls.n	8000320 <__udivmoddi4+0xe4>
 8000250:	fab2 f282 	clz	r2, r2
 8000254:	b14a      	cbz	r2, 800026a <__udivmoddi4+0x2e>
 8000256:	f1c2 0720 	rsb	r7, r2, #32
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	fa20 f707 	lsr.w	r7, r0, r7
 8000262:	4095      	lsls	r5, r2
 8000264:	ea47 0803 	orr.w	r8, r7, r3
 8000268:	4094      	lsls	r4, r2
 800026a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026e:	0c23      	lsrs	r3, r4, #16
 8000270:	fbb8 f7fe 	udiv	r7, r8, lr
 8000274:	fa1f fc85 	uxth.w	ip, r5
 8000278:	fb0e 8817 	mls	r8, lr, r7, r8
 800027c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000280:	fb07 f10c 	mul.w	r1, r7, ip
 8000284:	4299      	cmp	r1, r3
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x60>
 8000288:	18eb      	adds	r3, r5, r3
 800028a:	f107 30ff 	add.w	r0, r7, #4294967295
 800028e:	f080 811b 	bcs.w	80004c8 <__udivmoddi4+0x28c>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 8118 	bls.w	80004c8 <__udivmoddi4+0x28c>
 8000298:	3f02      	subs	r7, #2
 800029a:	442b      	add	r3, r5
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b0:	45a4      	cmp	ip, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x8c>
 80002b4:	192c      	adds	r4, r5, r4
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x290>
 80002be:	45a4      	cmp	ip, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x290>
 80002c4:	3802      	subs	r0, #2
 80002c6:	442c      	add	r4, r5
 80002c8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002cc:	eba4 040c 	sub.w	r4, r4, ip
 80002d0:	2700      	movs	r7, #0
 80002d2:	b11e      	cbz	r6, 80002dc <__udivmoddi4+0xa0>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c6 4300 	strd	r4, r3, [r6]
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xbe>
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f000 80eb 	beq.w	80004c2 <__udivmoddi4+0x286>
 80002ec:	2700      	movs	r7, #0
 80002ee:	e9c6 0100 	strd	r0, r1, [r6]
 80002f2:	4638      	mov	r0, r7
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f783 	clz	r7, r3
 80002fe:	2f00      	cmp	r7, #0
 8000300:	d147      	bne.n	8000392 <__udivmoddi4+0x156>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd0>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2c4>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4698      	mov	r8, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa0>
 800031a:	e9c6 4800 	strd	r4, r8, [r6]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa0>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xe8>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 808f 	bne.w	800044c <__udivmoddi4+0x210>
 800032e:	1b49      	subs	r1, r1, r5
 8000330:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000334:	fa1f f885 	uxth.w	r8, r5
 8000338:	2701      	movs	r7, #1
 800033a:	fbb1 fcfe 	udiv	ip, r1, lr
 800033e:	0c23      	lsrs	r3, r4, #16
 8000340:	fb0e 111c 	mls	r1, lr, ip, r1
 8000344:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000348:	fb08 f10c 	mul.w	r1, r8, ip
 800034c:	4299      	cmp	r1, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x124>
 8000350:	18eb      	adds	r3, r5, r3
 8000352:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x122>
 8000358:	4299      	cmp	r1, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2bc>
 800035e:	4684      	mov	ip, r0
 8000360:	1a59      	subs	r1, r3, r1
 8000362:	b2a3      	uxth	r3, r4
 8000364:	fbb1 f0fe 	udiv	r0, r1, lr
 8000368:	fb0e 1410 	mls	r4, lr, r0, r1
 800036c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000370:	fb08 f800 	mul.w	r8, r8, r0
 8000374:	45a0      	cmp	r8, r4
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x14c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x14a>
 8000380:	45a0      	cmp	r8, r4
 8000382:	f200 80b6 	bhi.w	80004f2 <__udivmoddi4+0x2b6>
 8000386:	4618      	mov	r0, r3
 8000388:	eba4 0408 	sub.w	r4, r4, r8
 800038c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000390:	e79f      	b.n	80002d2 <__udivmoddi4+0x96>
 8000392:	f1c7 0c20 	rsb	ip, r7, #32
 8000396:	40bb      	lsls	r3, r7
 8000398:	fa22 fe0c 	lsr.w	lr, r2, ip
 800039c:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a0:	fa01 f407 	lsl.w	r4, r1, r7
 80003a4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003ac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b0:	4325      	orrs	r5, r4
 80003b2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b6:	0c2c      	lsrs	r4, r5, #16
 80003b8:	fb08 3319 	mls	r3, r8, r9, r3
 80003bc:	fa1f fa8e 	uxth.w	sl, lr
 80003c0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c4:	fb09 f40a 	mul.w	r4, r9, sl
 80003c8:	429c      	cmp	r4, r3
 80003ca:	fa02 f207 	lsl.w	r2, r2, r7
 80003ce:	fa00 f107 	lsl.w	r1, r0, r7
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b0>
 80003d4:	eb1e 0303 	adds.w	r3, lr, r3
 80003d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003dc:	f080 8087 	bcs.w	80004ee <__udivmoddi4+0x2b2>
 80003e0:	429c      	cmp	r4, r3
 80003e2:	f240 8084 	bls.w	80004ee <__udivmoddi4+0x2b2>
 80003e6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ea:	4473      	add	r3, lr
 80003ec:	1b1b      	subs	r3, r3, r4
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f4:	fb08 3310 	mls	r3, r8, r0, r3
 80003f8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003fc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000400:	45a2      	cmp	sl, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1da>
 8000404:	eb1e 0404 	adds.w	r4, lr, r4
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295
 800040c:	d26b      	bcs.n	80004e6 <__udivmoddi4+0x2aa>
 800040e:	45a2      	cmp	sl, r4
 8000410:	d969      	bls.n	80004e6 <__udivmoddi4+0x2aa>
 8000412:	3802      	subs	r0, #2
 8000414:	4474      	add	r4, lr
 8000416:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041a:	fba0 8902 	umull	r8, r9, r0, r2
 800041e:	eba4 040a 	sub.w	r4, r4, sl
 8000422:	454c      	cmp	r4, r9
 8000424:	46c2      	mov	sl, r8
 8000426:	464b      	mov	r3, r9
 8000428:	d354      	bcc.n	80004d4 <__udivmoddi4+0x298>
 800042a:	d051      	beq.n	80004d0 <__udivmoddi4+0x294>
 800042c:	2e00      	cmp	r6, #0
 800042e:	d069      	beq.n	8000504 <__udivmoddi4+0x2c8>
 8000430:	ebb1 050a 	subs.w	r5, r1, sl
 8000434:	eb64 0403 	sbc.w	r4, r4, r3
 8000438:	fa04 fc0c 	lsl.w	ip, r4, ip
 800043c:	40fd      	lsrs	r5, r7
 800043e:	40fc      	lsrs	r4, r7
 8000440:	ea4c 0505 	orr.w	r5, ip, r5
 8000444:	e9c6 5400 	strd	r5, r4, [r6]
 8000448:	2700      	movs	r7, #0
 800044a:	e747      	b.n	80002dc <__udivmoddi4+0xa0>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f703 	lsr.w	r7, r0, r3
 8000454:	4095      	lsls	r5, r2
 8000456:	fa01 f002 	lsl.w	r0, r1, r2
 800045a:	fa21 f303 	lsr.w	r3, r1, r3
 800045e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000462:	4338      	orrs	r0, r7
 8000464:	0c01      	lsrs	r1, r0, #16
 8000466:	fbb3 f7fe 	udiv	r7, r3, lr
 800046a:	fa1f f885 	uxth.w	r8, r5
 800046e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb07 f308 	mul.w	r3, r7, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x256>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f107 3cff 	add.w	ip, r7, #4294967295
 8000488:	d22f      	bcs.n	80004ea <__udivmoddi4+0x2ae>
 800048a:	428b      	cmp	r3, r1
 800048c:	d92d      	bls.n	80004ea <__udivmoddi4+0x2ae>
 800048e:	3f02      	subs	r7, #2
 8000490:	4429      	add	r1, r5
 8000492:	1acb      	subs	r3, r1, r3
 8000494:	b281      	uxth	r1, r0
 8000496:	fbb3 f0fe 	udiv	r0, r3, lr
 800049a:	fb0e 3310 	mls	r3, lr, r0, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb00 f308 	mul.w	r3, r0, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x27e>
 80004aa:	1869      	adds	r1, r5, r1
 80004ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b0:	d217      	bcs.n	80004e2 <__udivmoddi4+0x2a6>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d915      	bls.n	80004e2 <__udivmoddi4+0x2a6>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4429      	add	r1, r5
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c0:	e73b      	b.n	800033a <__udivmoddi4+0xfe>
 80004c2:	4637      	mov	r7, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e709      	b.n	80002dc <__udivmoddi4+0xa0>
 80004c8:	4607      	mov	r7, r0
 80004ca:	e6e7      	b.n	800029c <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x8c>
 80004d0:	4541      	cmp	r1, r8
 80004d2:	d2ab      	bcs.n	800042c <__udivmoddi4+0x1f0>
 80004d4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d8:	eb69 020e 	sbc.w	r2, r9, lr
 80004dc:	3801      	subs	r0, #1
 80004de:	4613      	mov	r3, r2
 80004e0:	e7a4      	b.n	800042c <__udivmoddi4+0x1f0>
 80004e2:	4660      	mov	r0, ip
 80004e4:	e7e9      	b.n	80004ba <__udivmoddi4+0x27e>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e795      	b.n	8000416 <__udivmoddi4+0x1da>
 80004ea:	4667      	mov	r7, ip
 80004ec:	e7d1      	b.n	8000492 <__udivmoddi4+0x256>
 80004ee:	4681      	mov	r9, r0
 80004f0:	e77c      	b.n	80003ec <__udivmoddi4+0x1b0>
 80004f2:	3802      	subs	r0, #2
 80004f4:	442c      	add	r4, r5
 80004f6:	e747      	b.n	8000388 <__udivmoddi4+0x14c>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	442b      	add	r3, r5
 80004fe:	e72f      	b.n	8000360 <__udivmoddi4+0x124>
 8000500:	4638      	mov	r0, r7
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xda>
 8000504:	4637      	mov	r7, r6
 8000506:	e6e9      	b.n	80002dc <__udivmoddi4+0xa0>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b598      	push	{r3, r4, r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fc07 	bl	8000d22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f832 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f970 	bl	80007fc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800051c:	f000 f8ac 	bl	8000678 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000520:	f000 f8f6 	bl	8000710 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000524:	f000 f940 	bl	80007a8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */



	//Receive lpuart1 IT
	HAL_UART_Receive_IT(&hlpuart1, UART1_rxBuffer, 100);
 8000528:	2264      	movs	r2, #100	; 0x64
 800052a:	490f      	ldr	r1, [pc, #60]	; (8000568 <main+0x5c>)
 800052c:	480f      	ldr	r0, [pc, #60]	; (800056c <main+0x60>)
 800052e:	f002 feb5 	bl	800329c <HAL_UART_Receive_IT>

	strcpy((char*)uart_buf, "Testing UART\r\n");
 8000532:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <main+0x64>)
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <main+0x68>)
 8000536:	4614      	mov	r4, r2
 8000538:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800053a:	c407      	stmia	r4!, {r0, r1, r2}
 800053c:	8023      	strh	r3, [r4, #0]
 800053e:	3402      	adds	r4, #2
 8000540:	0c1b      	lsrs	r3, r3, #16
 8000542:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, strlen((char*)uart_buf), 100);
 8000544:	480a      	ldr	r0, [pc, #40]	; (8000570 <main+0x64>)
 8000546:	f7ff fe59 	bl	80001fc <strlen>
 800054a:	4603      	mov	r3, r0
 800054c:	b29a      	uxth	r2, r3
 800054e:	2364      	movs	r3, #100	; 0x64
 8000550:	4907      	ldr	r1, [pc, #28]	; (8000570 <main+0x64>)
 8000552:	4806      	ldr	r0, [pc, #24]	; (800056c <main+0x60>)
 8000554:	f002 fe0a 	bl	800316c <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//flash blue led to indicate its running
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	4807      	ldr	r0, [pc, #28]	; (8000578 <main+0x6c>)
 800055c:	f000 ff92 	bl	8001484 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000560:	20fa      	movs	r0, #250	; 0xfa
 8000562:	f000 fc53 	bl	8000e0c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000566:	e7f7      	b.n	8000558 <main+0x4c>
 8000568:	20000028 	.word	0x20000028
 800056c:	20000584 	.word	0x20000584
 8000570:	2000008c 	.word	0x2000008c
 8000574:	08004c10 	.word	0x08004c10
 8000578:	48000400 	.word	0x48000400

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b0bc      	sub	sp, #240	; 0xf0
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000586:	2244      	movs	r2, #68	; 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 fb2c 	bl	8004be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2294      	movs	r2, #148	; 0x94
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 fb1e 	bl	8004be8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005ac:	2000      	movs	r0, #0
 80005ae:	f001 f8eb 	bl	8001788 <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x40>
  {
    Error_Handler();
 80005b8:	f000 fa0a 	bl	80009d0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80005bc:	2322      	movs	r3, #34	; 0x22
 80005be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ca:	2301      	movs	r3, #1
 80005cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2340      	movs	r3, #64	; 0x40
 80005d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005e8:	231e      	movs	r3, #30
 80005ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000604:	4618      	mov	r0, r3
 8000606:	f001 f983 	bl	8001910 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000610:	f000 f9de 	bl	80009d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2303      	movs	r3, #3
 800061c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800062a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000638:	2105      	movs	r1, #5
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fd8e 	bl	800215c <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000646:	f000 f9c3 	bl	80009d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 800064a:	f242 0324 	movw	r3, #8228	; 0x2024
 800064e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000650:	2300      	movs	r3, #0
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000654:	2300      	movs	r3, #0
 8000656:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000658:	2300      	movs	r3, #0
 800065a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4618      	mov	r0, r3
 8000660:	f002 f82c 	bl	80026bc <HAL_RCCEx_PeriphCLKConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800066a:	f000 f9b1 	bl	80009d0 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	37f0      	adds	r7, #240	; 0xf0
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 800067e:	4a23      	ldr	r2, [pc, #140]	; (800070c <MX_LPUART1_UART_Init+0x94>)
 8000680:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 8000682:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 8000684:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000688:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 80006bc:	2200      	movs	r2, #0
 80006be:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006c0:	4811      	ldr	r0, [pc, #68]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 80006c2:	f002 fd03 	bl	80030cc <HAL_UART_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80006cc:	f000 f980 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d0:	2100      	movs	r1, #0
 80006d2:	480d      	ldr	r0, [pc, #52]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 80006d4:	f003 feef 	bl	80044b6 <HAL_UARTEx_SetTxFifoThreshold>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006de:	f000 f977 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4808      	ldr	r0, [pc, #32]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 80006e6:	f003 ff24 	bl	8004532 <HAL_UARTEx_SetRxFifoThreshold>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006f0:	f000 f96e 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_LPUART1_UART_Init+0x90>)
 80006f6:	f003 fea5 	bl	8004444 <HAL_UARTEx_DisableFifoMode>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000700:	f000 f966 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000584 	.word	0x20000584
 800070c:	40008000 	.word	0x40008000

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_USART3_UART_Init+0x94>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000758:	4811      	ldr	r0, [pc, #68]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800075a:	f002 fcb7 	bl	80030cc <HAL_UART_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000764:	f000 f934 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000768:	2100      	movs	r1, #0
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800076c:	f003 fea3 	bl	80044b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000776:	f000 f92b 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800077e:	f003 fed8 	bl	8004532 <HAL_UARTEx_SetRxFifoThreshold>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000788:	f000 f922 	bl	80009d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800078e:	f003 fe59 	bl	8004444 <HAL_UARTEx_DisableFifoMode>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000798:	f000 f91a 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000f0 	.word	0x200000f0
 80007a4:	40004800 	.word	0x40004800

080007a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007b6:	2206      	movs	r2, #6
 80007b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007bc:	2202      	movs	r2, #2
 80007be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007e6:	f000 fe67 	bl	80014b8 <HAL_PCD_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f8ee 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000017c 	.word	0x2000017c

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b58      	ldr	r3, [pc, #352]	; (8000974 <MX_GPIO_Init+0x178>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a57      	ldr	r2, [pc, #348]	; (8000974 <MX_GPIO_Init+0x178>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b55      	ldr	r3, [pc, #340]	; (8000974 <MX_GPIO_Init+0x178>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	4b52      	ldr	r3, [pc, #328]	; (8000974 <MX_GPIO_Init+0x178>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a51      	ldr	r2, [pc, #324]	; (8000974 <MX_GPIO_Init+0x178>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b4f      	ldr	r3, [pc, #316]	; (8000974 <MX_GPIO_Init+0x178>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b4c      	ldr	r3, [pc, #304]	; (8000974 <MX_GPIO_Init+0x178>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a4b      	ldr	r2, [pc, #300]	; (8000974 <MX_GPIO_Init+0x178>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b49      	ldr	r3, [pc, #292]	; (8000974 <MX_GPIO_Init+0x178>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	4b46      	ldr	r3, [pc, #280]	; (8000974 <MX_GPIO_Init+0x178>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a45      	ldr	r2, [pc, #276]	; (8000974 <MX_GPIO_Init+0x178>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b43      	ldr	r3, [pc, #268]	; (8000974 <MX_GPIO_Init+0x178>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000872:	4b40      	ldr	r3, [pc, #256]	; (8000974 <MX_GPIO_Init+0x178>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a3f      	ldr	r2, [pc, #252]	; (8000974 <MX_GPIO_Init+0x178>)
 8000878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <MX_GPIO_Init+0x178>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800088a:	f001 f831 	bl	80018f0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b39      	ldr	r3, [pc, #228]	; (8000974 <MX_GPIO_Init+0x178>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a38      	ldr	r2, [pc, #224]	; (8000974 <MX_GPIO_Init+0x178>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b36      	ldr	r3, [pc, #216]	; (8000974 <MX_GPIO_Init+0x178>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008ac:	4832      	ldr	r0, [pc, #200]	; (8000978 <MX_GPIO_Init+0x17c>)
 80008ae:	f000 fdd1 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	4831      	ldr	r0, [pc, #196]	; (800097c <MX_GPIO_Init+0x180>)
 80008b8:	f000 fdcc 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <MX_GPIO_Init+0x184>)
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	482c      	ldr	r0, [pc, #176]	; (8000984 <MX_GPIO_Init+0x188>)
 80008d2:	f000 fc2d 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008d6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4822      	ldr	r0, [pc, #136]	; (8000978 <MX_GPIO_Init+0x17c>)
 80008f0:	f000 fc1e 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008f4:	2320      	movs	r3, #32
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	481c      	ldr	r0, [pc, #112]	; (800097c <MX_GPIO_Init+0x180>)
 800090c:	f000 fc10 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000910:	2340      	movs	r3, #64	; 0x40
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4816      	ldr	r0, [pc, #88]	; (800097c <MX_GPIO_Init+0x180>)
 8000924:	f000 fc04 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800093a:	2308      	movs	r3, #8
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	480f      	ldr	r0, [pc, #60]	; (8000984 <MX_GPIO_Init+0x188>)
 8000946:	f000 fbf3 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800094a:	2304      	movs	r3, #4
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800095a:	2308      	movs	r3, #8
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000966:	f000 fbe3 	bl	8001130 <HAL_GPIO_Init>

}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	; 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	48000400 	.word	0x48000400
 800097c:	48001800 	.word	0x48001800
 8000980:	10110000 	.word	0x10110000
 8000984:	48000800 	.word	0x48000800
 8000988:	48000c00 	.word	0x48000c00

0800098c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000994:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <HAL_UART_RxCpltCallback+0x3c>)
 800099a:	f000 fd73 	bl	8001484 <HAL_GPIO_TogglePin>

    HAL_UART_Transmit(hlpuart1, UART1_rxBuffer, strlen((char*)UART1_rxBuffer), HAL_MAX_DELAY);
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <HAL_UART_RxCpltCallback+0x40>)
 80009a0:	f7ff fc2c 	bl	80001fc <strlen>
 80009a4:	4603      	mov	r3, r0
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	4907      	ldr	r1, [pc, #28]	; (80009cc <HAL_UART_RxCpltCallback+0x40>)
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f002 fbdc 	bl	800316c <HAL_UART_Transmit>

	HAL_UART_Receive_IT(hlpuart1, UART1_rxBuffer, 100);
 80009b4:	2264      	movs	r2, #100	; 0x64
 80009b6:	4905      	ldr	r1, [pc, #20]	; (80009cc <HAL_UART_RxCpltCallback+0x40>)
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f002 fc6f 	bl	800329c <HAL_UART_Receive_IT>

}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	48000400 	.word	0x48000400
 80009cc:	20000028 	.word	0x20000028

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <Error_Handler+0x6>

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_MspInit+0x44>)
 80009e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_MspInit+0x44>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_MspInit+0x44>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x44>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x44>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6593      	str	r3, [r2, #88]	; 0x58
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x44>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08c      	sub	sp, #48	; 0x30
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a34      	ldr	r2, [pc, #208]	; (8000b10 <HAL_UART_MspInit+0xf0>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d133      	bne.n	8000aaa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a42:	4b34      	ldr	r3, [pc, #208]	; (8000b14 <HAL_UART_MspInit+0xf4>)
 8000a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a46:	4a33      	ldr	r2, [pc, #204]	; (8000b14 <HAL_UART_MspInit+0xf4>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a4e:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <HAL_UART_MspInit+0xf4>)
 8000a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5a:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <HAL_UART_MspInit+0xf4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a2d      	ldr	r2, [pc, #180]	; (8000b14 <HAL_UART_MspInit+0xf4>)
 8000a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <HAL_UART_MspInit+0xf4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000a72:	f000 ff3d 	bl	80018f0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000a76:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4821      	ldr	r0, [pc, #132]	; (8000b18 <HAL_UART_MspInit+0xf8>)
 8000a94:	f000 fb4c 	bl	8001130 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2046      	movs	r0, #70	; 0x46
 8000a9e:	f000 fab2 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000aa2:	2046      	movs	r0, #70	; 0x46
 8000aa4:	f000 facb 	bl	800103e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aa8:	e02d      	b.n	8000b06 <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART3)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <HAL_UART_MspInit+0xfc>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d128      	bne.n	8000b06 <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_UART_MspInit+0xf4>)
 8000ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab8:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <HAL_UART_MspInit+0xf4>)
 8000aba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000abe:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_UART_MspInit+0xf4>)
 8000ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_UART_MspInit+0xf4>)
 8000ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad0:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <HAL_UART_MspInit+0xf4>)
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_UART_MspInit+0xf4>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ae4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000af6:	2307      	movs	r3, #7
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <HAL_UART_MspInit+0x100>)
 8000b02:	f000 fb15 	bl	8001130 <HAL_GPIO_Init>
}
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	; 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40008000 	.word	0x40008000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48001800 	.word	0x48001800
 8000b1c:	40004800 	.word	0x40004800
 8000b20:	48000c00 	.word	0x48000c00

08000b24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b44:	d154      	bne.n	8000bf0 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <HAL_PCD_MspInit+0xd4>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a2b      	ldr	r2, [pc, #172]	; (8000bf8 <HAL_PCD_MspInit+0xd4>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <HAL_PCD_MspInit+0xd4>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b5e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b70:	230a      	movs	r3, #10
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f000 fad7 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f000 fac9 	bl	8001130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_PCD_MspInit+0xd4>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <HAL_PCD_MspInit+0xd4>)
 8000ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_PCD_MspInit+0xd4>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_PCD_MspInit+0xd4>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d114      	bne.n	8000bec <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_PCD_MspInit+0xd4>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc6:	4a0c      	ldr	r2, [pc, #48]	; (8000bf8 <HAL_PCD_MspInit+0xd4>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_PCD_MspInit+0xd4>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000bda:	f000 fe79 	bl	80018d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_PCD_MspInit+0xd4>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <HAL_PCD_MspInit+0xd4>)
 8000be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bea:	e001      	b.n	8000bf0 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000bec:	f000 fe70 	bl	80018d0 <HAL_PWREx_EnableVddUSB>
}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40021000 	.word	0x40021000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 f8c0 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <LPUART1_IRQHandler+0x10>)
 8000c56:	f002 fbf9 	bl	800344c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000584 	.word	0x20000584

08000c64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <SystemInit+0x64>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <SystemInit+0x64>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <SystemInit+0x68>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <SystemInit+0x68>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <SystemInit+0x68>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <SystemInit+0x68>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <SystemInit+0x68>)
 8000c90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <SystemInit+0x68>)
 8000c9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ca0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <SystemInit+0x68>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a09      	ldr	r2, [pc, #36]	; (8000ccc <SystemInit+0x68>)
 8000ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <SystemInit+0x68>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SystemInit+0x64>)
 8000cb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cba:	609a      	str	r2, [r3, #8]
#endif
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd4:	f7ff ffc6 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cda:	e003      	b.n	8000ce4 <LoopCopyDataInit>

08000cdc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ce0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ce2:	3104      	adds	r1, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ce4:	480a      	ldr	r0, [pc, #40]	; (8000d10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ce8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cec:	d3f6      	bcc.n	8000cdc <CopyDataInit>
	ldr	r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cf0:	e002      	b.n	8000cf8 <LoopFillZerobss>

08000cf2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cf2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cf4:	f842 3b04 	str.w	r3, [r2], #4

08000cf8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <LoopForever+0x16>)
	cmp	r2, r3
 8000cfa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cfc:	d3f9      	bcc.n	8000cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f003 ff4f 	bl	8004ba0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d02:	f7ff fc03 	bl	800050c <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d08:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000d0c:	08004ca0 	.word	0x08004ca0
	ldr	r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d14:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000d18:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000d1c:	20000614 	.word	0x20000614

08000d20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_IRQHandler>

08000d22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f95f 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f80e 	bl	8000d54 <HAL_InitTick>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	e001      	b.n	8000d48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d44:	f7ff fe48 	bl	80009d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_InitTick+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d023      	beq.n	8000db0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_InitTick+0x70>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_InitTick+0x6c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f96b 	bl	800105a <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10f      	bne.n	8000daa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d809      	bhi.n	8000da4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 f935 	bl	8001006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_InitTick+0x74>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e007      	b.n	8000db4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e004      	b.n	8000db4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e001      	b.n	8000db4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000610 	.word	0x20000610

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000610 	.word	0x20000610

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ffee 	bl	8000df4 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_Delay+0x40>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffde 	bl	8000df4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000008 	.word	0x20000008

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff29 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff3e 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff8e 	bl	8000f44 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff31 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa2 	bl	8000fac <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d005      	beq.n	8001096 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2204      	movs	r2, #4
 800108e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e047      	b.n	8001126 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 020e 	bic.w	r2, r2, #14
 80010a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f003 021c 	and.w	r2, r3, #28
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	2101      	movs	r1, #1
 80010d4:	fa01 f202 	lsl.w	r2, r1, r2
 80010d8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010e2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00c      	beq.n	8001106 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001104:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	4798      	blx	r3
    }
  }
  return status;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	e166      	b.n	800140e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8158 	beq.w	8001408 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d00b      	beq.n	8001178 <HAL_GPIO_Init+0x48>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d007      	beq.n	8001178 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800116c:	2b11      	cmp	r3, #17
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b12      	cmp	r3, #18
 8001176:	d130      	bne.n	80011da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ae:	2201      	movs	r2, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	f003 0201 	and.w	r2, r3, #1
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0xea>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b12      	cmp	r3, #18
 8001218:	d123      	bne.n	8001262 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	6939      	ldr	r1, [r7, #16]
 800125e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0203 	and.w	r2, r3, #3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 80b2 	beq.w	8001408 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a4:	4b61      	ldr	r3, [pc, #388]	; (800142c <HAL_GPIO_Init+0x2fc>)
 80012a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a8:	4a60      	ldr	r2, [pc, #384]	; (800142c <HAL_GPIO_Init+0x2fc>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6613      	str	r3, [r2, #96]	; 0x60
 80012b0:	4b5e      	ldr	r3, [pc, #376]	; (800142c <HAL_GPIO_Init+0x2fc>)
 80012b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012bc:	4a5c      	ldr	r2, [pc, #368]	; (8001430 <HAL_GPIO_Init+0x300>)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012e6:	d02b      	beq.n	8001340 <HAL_GPIO_Init+0x210>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a52      	ldr	r2, [pc, #328]	; (8001434 <HAL_GPIO_Init+0x304>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d025      	beq.n	800133c <HAL_GPIO_Init+0x20c>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a51      	ldr	r2, [pc, #324]	; (8001438 <HAL_GPIO_Init+0x308>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d01f      	beq.n	8001338 <HAL_GPIO_Init+0x208>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a50      	ldr	r2, [pc, #320]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d019      	beq.n	8001334 <HAL_GPIO_Init+0x204>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a4f      	ldr	r2, [pc, #316]	; (8001440 <HAL_GPIO_Init+0x310>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d013      	beq.n	8001330 <HAL_GPIO_Init+0x200>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a4e      	ldr	r2, [pc, #312]	; (8001444 <HAL_GPIO_Init+0x314>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d00d      	beq.n	800132c <HAL_GPIO_Init+0x1fc>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a4d      	ldr	r2, [pc, #308]	; (8001448 <HAL_GPIO_Init+0x318>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d007      	beq.n	8001328 <HAL_GPIO_Init+0x1f8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a4c      	ldr	r2, [pc, #304]	; (800144c <HAL_GPIO_Init+0x31c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d101      	bne.n	8001324 <HAL_GPIO_Init+0x1f4>
 8001320:	2307      	movs	r3, #7
 8001322:	e00e      	b.n	8001342 <HAL_GPIO_Init+0x212>
 8001324:	2308      	movs	r3, #8
 8001326:	e00c      	b.n	8001342 <HAL_GPIO_Init+0x212>
 8001328:	2306      	movs	r3, #6
 800132a:	e00a      	b.n	8001342 <HAL_GPIO_Init+0x212>
 800132c:	2305      	movs	r3, #5
 800132e:	e008      	b.n	8001342 <HAL_GPIO_Init+0x212>
 8001330:	2304      	movs	r3, #4
 8001332:	e006      	b.n	8001342 <HAL_GPIO_Init+0x212>
 8001334:	2303      	movs	r3, #3
 8001336:	e004      	b.n	8001342 <HAL_GPIO_Init+0x212>
 8001338:	2302      	movs	r3, #2
 800133a:	e002      	b.n	8001342 <HAL_GPIO_Init+0x212>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <HAL_GPIO_Init+0x212>
 8001340:	2300      	movs	r3, #0
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	f002 0203 	and.w	r2, r2, #3
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	4093      	lsls	r3, r2
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001352:	4937      	ldr	r1, [pc, #220]	; (8001430 <HAL_GPIO_Init+0x300>)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001360:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <HAL_GPIO_Init+0x320>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001384:	4a32      	ldr	r2, [pc, #200]	; (8001450 <HAL_GPIO_Init+0x320>)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800138a:	4b31      	ldr	r3, [pc, #196]	; (8001450 <HAL_GPIO_Init+0x320>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013ae:	4a28      	ldr	r2, [pc, #160]	; (8001450 <HAL_GPIO_Init+0x320>)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <HAL_GPIO_Init+0x320>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013d8:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <HAL_GPIO_Init+0x320>)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <HAL_GPIO_Init+0x320>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001402:	4a13      	ldr	r2, [pc, #76]	; (8001450 <HAL_GPIO_Init+0x320>)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	fa22 f303 	lsr.w	r3, r2, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	f47f ae91 	bne.w	8001140 <HAL_GPIO_Init+0x10>
  }
}
 800141e:	bf00      	nop
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	40010000 	.word	0x40010000
 8001434:	48000400 	.word	0x48000400
 8001438:	48000800 	.word	0x48000800
 800143c:	48000c00 	.word	0x48000c00
 8001440:	48001000 	.word	0x48001000
 8001444:	48001400 	.word	0x48001400
 8001448:	48001800 	.word	0x48001800
 800144c:	48001c00 	.word	0x48001c00
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001470:	e002      	b.n	8001478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	041a      	lsls	r2, r3, #16
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43d9      	mvns	r1, r3
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	400b      	ands	r3, r1
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	b08f      	sub	sp, #60	; 0x3c
 80014bc:	af0a      	add	r7, sp, #40	; 0x28
 80014be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e116      	b.n	80016f8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d106      	bne.n	80014ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff fb1d 	bl	8000b24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2203      	movs	r2, #3
 80014ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f003 f90b 	bl	8004724 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	687e      	ldr	r6, [r7, #4]
 8001516:	466d      	mov	r5, sp
 8001518:	f106 0410 	add.w	r4, r6, #16
 800151c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001524:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001528:	e885 0003 	stmia.w	r5, {r0, r1}
 800152c:	1d33      	adds	r3, r6, #4
 800152e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001530:	6838      	ldr	r0, [r7, #0]
 8001532:	f003 f8a5 	bl	8004680 <USB_CoreInit>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0d7      	b.n	80016f8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f003 f8f9 	bl	8004746 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e04a      	b.n	80015f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	333d      	adds	r3, #61	; 0x3d
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	333c      	adds	r3, #60	; 0x3c
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	b298      	uxth	r0, r3
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	1a9b      	subs	r3, r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	3342      	adds	r3, #66	; 0x42
 8001596:	4602      	mov	r2, r0
 8001598:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	1a9b      	subs	r3, r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	333f      	adds	r3, #63	; 0x3f
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	1a9b      	subs	r3, r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	3344      	adds	r3, #68	; 0x44
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	1a9b      	subs	r3, r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	3348      	adds	r3, #72	; 0x48
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	1a9b      	subs	r3, r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	3350      	adds	r3, #80	; 0x50
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	3301      	adds	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3af      	bcc.n	800155a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e044      	b.n	800168a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	1a9b      	subs	r3, r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	1a9b      	subs	r3, r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	3301      	adds	r3, #1
 8001688:	73fb      	strb	r3, [r7, #15]
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	d3b5      	bcc.n	8001600 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	687e      	ldr	r6, [r7, #4]
 800169c:	466d      	mov	r5, sp
 800169e:	f106 0410 	add.w	r4, r6, #16
 80016a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80016b2:	1d33      	adds	r3, r6, #4
 80016b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b6:	6838      	ldr	r0, [r7, #0]
 80016b8:	f003 f870 	bl	800479c <USB_DevInit>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2202      	movs	r2, #2
 80016c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e014      	b.n	80016f8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d102      	bne.n	80016ec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f80a 	bl	8001700 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 fa00 	bl	8004af6 <USB_DevDisconnect>

  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001700 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001732:	f043 0303 	orr.w	r3, r3, #3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_PWREx_GetVoltageRange+0x3c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001758:	d102      	bne.n	8001760 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800175a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175e:	e00b      	b.n	8001778 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800176e:	d102      	bne.n	8001776 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001774:	e000      	b.n	8001778 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001776:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40007000 	.word	0x40007000

08001788 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d141      	bne.n	800181a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001796:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800179e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a2:	d131      	bne.n	8001808 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017a4:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017aa:	4a46      	ldr	r2, [pc, #280]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b4:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017bc:	4a41      	ldr	r2, [pc, #260]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80017c4:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2232      	movs	r2, #50	; 0x32
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	0c9b      	lsrs	r3, r3, #18
 80017d6:	3301      	adds	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017da:	e002      	b.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3b01      	subs	r3, #1
 80017e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017e2:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ee:	d102      	bne.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f2      	bne.n	80017dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017f6:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001802:	d158      	bne.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e057      	b.n	80018b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001808:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800180e:	4a2d      	ldr	r2, [pc, #180]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001818:	e04d      	b.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001820:	d141      	bne.n	80018a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800182a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182e:	d131      	bne.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001836:	4a23      	ldr	r2, [pc, #140]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001840:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001848:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2232      	movs	r2, #50	; 0x32
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	0c9b      	lsrs	r3, r3, #18
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001866:	e002      	b.n	800186e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3b01      	subs	r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800187a:	d102      	bne.n	8001882 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f2      	bne.n	8001868 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188e:	d112      	bne.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e011      	b.n	80018b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018a4:	e007      	b.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40007000 	.word	0x40007000
 80018c8:	20000000 	.word	0x20000000
 80018cc:	431bde83 	.word	0x431bde83

080018d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80018da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018de:	6053      	str	r3, [r2, #4]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40007000 	.word	0x40007000

080018f0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_PWREx_EnableVddIO2+0x1c>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_PWREx_EnableVddIO2+0x1c>)
 80018fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fe:	6053      	str	r3, [r2, #4]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40007000 	.word	0x40007000

08001910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	f000 bc16 	b.w	8002150 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001924:	4ba0      	ldr	r3, [pc, #640]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800192e:	4b9e      	ldr	r3, [pc, #632]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80e4 	beq.w	8001b0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <HAL_RCC_OscConfig+0x4c>
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	f040 808b 	bne.w	8001a6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b01      	cmp	r3, #1
 8001958:	f040 8087 	bne.w	8001a6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800195c:	4b92      	ldr	r3, [pc, #584]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_OscConfig+0x64>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e3ed      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1a      	ldr	r2, [r3, #32]
 8001978:	4b8b      	ldr	r3, [pc, #556]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_RCC_OscConfig+0x7e>
 8001984:	4b88      	ldr	r3, [pc, #544]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800198c:	e005      	b.n	800199a <HAL_RCC_OscConfig+0x8a>
 800198e:	4b86      	ldr	r3, [pc, #536]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199a:	4293      	cmp	r3, r2
 800199c:	d223      	bcs.n	80019e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fdc8 	bl	8002538 <RCC_SetFlashLatencyFromMSIRange>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e3ce      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b2:	4b7d      	ldr	r3, [pc, #500]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a7c      	ldr	r2, [pc, #496]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019b8:	f043 0308 	orr.w	r3, r3, #8
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b7a      	ldr	r3, [pc, #488]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4977      	ldr	r1, [pc, #476]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d0:	4b75      	ldr	r3, [pc, #468]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	4972      	ldr	r1, [pc, #456]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
 80019e4:	e025      	b.n	8001a32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e6:	4b70      	ldr	r3, [pc, #448]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a6f      	ldr	r2, [pc, #444]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b6d      	ldr	r3, [pc, #436]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	496a      	ldr	r1, [pc, #424]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a04:	4b68      	ldr	r3, [pc, #416]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	4965      	ldr	r1, [pc, #404]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fd88 	bl	8002538 <RCC_SetFlashLatencyFromMSIRange>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e38e      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a32:	f000 fcbf 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8001a36:	4601      	mov	r1, r0
 8001a38:	4b5b      	ldr	r3, [pc, #364]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	4a5a      	ldr	r2, [pc, #360]	; (8001bac <HAL_RCC_OscConfig+0x29c>)
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	fa21 f303 	lsr.w	r3, r1, r3
 8001a4e:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_RCC_OscConfig+0x2a0>)
 8001a50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a52:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <HAL_RCC_OscConfig+0x2a4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f97c 	bl	8000d54 <HAL_InitTick>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d052      	beq.n	8001b0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	e372      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d032      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a72:	4b4d      	ldr	r3, [pc, #308]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a4c      	ldr	r2, [pc, #304]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f9b9 	bl	8000df4 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a86:	f7ff f9b5 	bl	8000df4 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e35b      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a98:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa4:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a3f      	ldr	r2, [pc, #252]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	493a      	ldr	r1, [pc, #232]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac2:	4b39      	ldr	r3, [pc, #228]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	4935      	ldr	r1, [pc, #212]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
 8001ad6:	e01a      	b.n	8001b0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ad8:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a32      	ldr	r2, [pc, #200]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001ade:	f023 0301 	bic.w	r3, r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f986 	bl	8000df4 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aec:	f7ff f982 	bl	8000df4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e328      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x1dc>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d073      	beq.n	8001c02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_OscConfig+0x21c>
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2b0c      	cmp	r3, #12
 8001b24:	d10e      	bne.n	8001b44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d10b      	bne.n	8001b44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d063      	beq.n	8001c00 <HAL_RCC_OscConfig+0x2f0>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d15f      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e305      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4c:	d106      	bne.n	8001b5c <HAL_RCC_OscConfig+0x24c>
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e01d      	b.n	8001b98 <HAL_RCC_OscConfig+0x288>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x270>
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a0c      	ldr	r2, [pc, #48]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0x288>
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <HAL_RCC_OscConfig+0x298>)
 8001b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01b      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f928 	bl	8000df4 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba6:	e010      	b.n	8001bca <HAL_RCC_OscConfig+0x2ba>
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	08004c30 	.word	0x08004c30
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff f91c 	bl	8000df4 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e2c2      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bca:	4baf      	ldr	r3, [pc, #700]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x2a8>
 8001bd6:	e014      	b.n	8001c02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f90c 	bl	8000df4 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be0:	f7ff f908 	bl	8000df4 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	; 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e2ae      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf2:	4ba5      	ldr	r3, [pc, #660]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x2d0>
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d060      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_OscConfig+0x310>
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d119      	bne.n	8001c4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d116      	bne.n	8001c4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c20:	4b99      	ldr	r3, [pc, #612]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_OscConfig+0x328>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e28b      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b93      	ldr	r3, [pc, #588]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	061b      	lsls	r3, r3, #24
 8001c46:	4990      	ldr	r1, [pc, #576]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c4c:	e040      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d023      	beq.n	8001c9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c56:	4b8c      	ldr	r3, [pc, #560]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a8b      	ldr	r2, [pc, #556]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff f8c7 	bl	8000df4 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff f8c3 	bl	8000df4 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e269      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7c:	4b82      	ldr	r3, [pc, #520]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b7f      	ldr	r3, [pc, #508]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	497c      	ldr	r1, [pc, #496]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
 8001c9c:	e018      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b7a      	ldr	r3, [pc, #488]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a79      	ldr	r2, [pc, #484]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7ff f8a3 	bl	8000df4 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff f89f 	bl	8000df4 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e245      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc4:	4b70      	ldr	r3, [pc, #448]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f0      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d03c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d01c      	beq.n	8001d1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce4:	4b68      	ldr	r3, [pc, #416]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cea:	4a67      	ldr	r2, [pc, #412]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7ff f87e 	bl	8000df4 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7ff f87a 	bl	8000df4 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e220      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d0e:	4b5e      	ldr	r3, [pc, #376]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ef      	beq.n	8001cfc <HAL_RCC_OscConfig+0x3ec>
 8001d1c:	e01b      	b.n	8001d56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1e:	4b5a      	ldr	r3, [pc, #360]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d24:	4a58      	ldr	r2, [pc, #352]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2e:	f7ff f861 	bl	8000df4 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d36:	f7ff f85d 	bl	8000df4 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e203      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d48:	4b4f      	ldr	r3, [pc, #316]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1ef      	bne.n	8001d36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80a6 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d64:	2300      	movs	r3, #0
 8001d66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d68:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10d      	bne.n	8001d90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	4b44      	ldr	r3, [pc, #272]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	4a43      	ldr	r2, [pc, #268]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d80:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d90:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <HAL_RCC_OscConfig+0x57c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d118      	bne.n	8001dce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d9c:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <HAL_RCC_OscConfig+0x57c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <HAL_RCC_OscConfig+0x57c>)
 8001da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da8:	f7ff f824 	bl	8000df4 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db0:	f7ff f820 	bl	8000df4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1c6      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc2:	4b32      	ldr	r3, [pc, #200]	; (8001e8c <HAL_RCC_OscConfig+0x57c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d108      	bne.n	8001de8 <HAL_RCC_OscConfig+0x4d8>
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ddc:	4a2a      	ldr	r2, [pc, #168]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de6:	e024      	b.n	8001e32 <HAL_RCC_OscConfig+0x522>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d110      	bne.n	8001e12 <HAL_RCC_OscConfig+0x502>
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df6:	4a24      	ldr	r2, [pc, #144]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001df8:	f043 0304 	orr.w	r3, r3, #4
 8001dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	4a20      	ldr	r2, [pc, #128]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e10:	e00f      	b.n	8001e32 <HAL_RCC_OscConfig+0x522>
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e28:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001e2a:	f023 0304 	bic.w	r3, r3, #4
 8001e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3a:	f7fe ffdb 	bl	8000df4 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7fe ffd7 	bl	8000df4 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e17b      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0ed      	beq.n	8001e42 <HAL_RCC_OscConfig+0x532>
 8001e66:	e01a      	b.n	8001e9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e68:	f7fe ffc4 	bl	8000df4 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e6e:	e00f      	b.n	8001e90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7fe ffc0 	bl	8000df4 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d906      	bls.n	8001e90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e164      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e90:	4ba8      	ldr	r3, [pc, #672]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1e8      	bne.n	8001e70 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea4:	4ba3      	ldr	r3, [pc, #652]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	4aa2      	ldr	r2, [pc, #648]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d03c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01c      	beq.n	8001efe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ec4:	4b9b      	ldr	r3, [pc, #620]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eca:	4a9a      	ldr	r2, [pc, #616]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed4:	f7fe ff8e 	bl	8000df4 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001edc:	f7fe ff8a 	bl	8000df4 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e130      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eee:	4b91      	ldr	r3, [pc, #580]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001ef0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ef      	beq.n	8001edc <HAL_RCC_OscConfig+0x5cc>
 8001efc:	e01b      	b.n	8001f36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001efe:	4b8d      	ldr	r3, [pc, #564]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f04:	4a8b      	ldr	r2, [pc, #556]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7fe ff71 	bl	8000df4 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f16:	f7fe ff6d 	bl	8000df4 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e113      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f28:	4b82      	ldr	r3, [pc, #520]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1ef      	bne.n	8001f16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 8107 	beq.w	800214e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	f040 80cb 	bne.w	80020e0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f4a:	4b7a      	ldr	r3, [pc, #488]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 0203 	and.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d12c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d123      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d113      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d109      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d06d      	beq.n	8002094 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2b0c      	cmp	r3, #12
 8001fbc:	d068      	beq.n	8002090 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fbe:	4b5d      	ldr	r3, [pc, #372]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fca:	4b5a      	ldr	r3, [pc, #360]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0ba      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fda:	4b56      	ldr	r3, [pc, #344]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a55      	ldr	r2, [pc, #340]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8001fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fe6:	f7fe ff05 	bl	8000df4 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7fe ff01 	bl	8000df4 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0a7      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002000:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200c:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	4b49      	ldr	r3, [pc, #292]	; (8002138 <HAL_RCC_OscConfig+0x828>)
 8002012:	4013      	ands	r3, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800201c:	3a01      	subs	r2, #1
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	4311      	orrs	r1, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002026:	0212      	lsls	r2, r2, #8
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800202e:	0852      	lsrs	r2, r2, #1
 8002030:	3a01      	subs	r2, #1
 8002032:	0552      	lsls	r2, r2, #21
 8002034:	4311      	orrs	r1, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800203a:	0852      	lsrs	r2, r2, #1
 800203c:	3a01      	subs	r2, #1
 800203e:	0652      	lsls	r2, r2, #25
 8002040:	4311      	orrs	r1, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002046:	06d2      	lsls	r2, r2, #27
 8002048:	430a      	orrs	r2, r1
 800204a:	493a      	ldr	r1, [pc, #232]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 800204c:	4313      	orrs	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a37      	ldr	r2, [pc, #220]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8002056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800205c:	4b35      	ldr	r3, [pc, #212]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a34      	ldr	r2, [pc, #208]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002066:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002068:	f7fe fec4 	bl	8000df4 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002070:	f7fe fec0 	bl	8000df4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e066      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002082:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800208e:	e05e      	b.n	800214e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e05d      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d156      	bne.n	800214e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a23      	ldr	r2, [pc, #140]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a20      	ldr	r2, [pc, #128]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020b8:	f7fe fe9c 	bl	8000df4 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe fe98 	bl	8000df4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e03e      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x7b0>
 80020de:	e036      	b.n	800214e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d031      	beq.n	800214a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e6:	4b13      	ldr	r3, [pc, #76]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 80020ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8002104:	f023 0303 	bic.w	r3, r3, #3
 8002108:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_OscConfig+0x824>)
 8002110:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002118:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7fe fe6b 	bl	8000df4 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002120:	e00c      	b.n	800213c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7fe fe67 	bl	8000df4 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d905      	bls.n	800213c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e00d      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
 8002134:	40021000 	.word	0x40021000
 8002138:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_RCC_OscConfig+0x848>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ec      	bne.n	8002122 <HAL_RCC_OscConfig+0x812>
 8002148:	e001      	b.n	800214e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3720      	adds	r7, #32
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000

0800215c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e10f      	b.n	8002394 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002174:	4b89      	ldr	r3, [pc, #548]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d910      	bls.n	80021a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b86      	ldr	r3, [pc, #536]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 020f 	bic.w	r2, r3, #15
 800218a:	4984      	ldr	r1, [pc, #528]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b82      	ldr	r3, [pc, #520]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0f7      	b.n	8002394 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 8089 	beq.w	80022c4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d133      	bne.n	8002222 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	4b79      	ldr	r3, [pc, #484]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0e4      	b.n	8002394 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80021ca:	f000 fa0f 	bl	80025ec <RCC_GetSysClockFreqFromPLLSource>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b74      	ldr	r3, [pc, #464]	; (80023a4 <HAL_RCC_ClockConfig+0x248>)
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d955      	bls.n	8002282 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80021d6:	4b72      	ldr	r3, [pc, #456]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10a      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021e2:	4b6f      	ldr	r3, [pc, #444]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021ea:	4a6d      	ldr	r2, [pc, #436]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80021ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e044      	b.n	8002282 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d03e      	beq.n	8002282 <HAL_RCC_ClockConfig+0x126>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d13a      	bne.n	8002282 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800220c:	4b64      	ldr	r3, [pc, #400]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002214:	4a62      	ldr	r2, [pc, #392]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800221a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	e02f      	b.n	8002282 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800222a:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d115      	bne.n	8002262 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0ac      	b.n	8002394 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002242:	4b57      	ldr	r3, [pc, #348]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0a0      	b.n	8002394 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002252:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e098      	b.n	8002394 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002262:	f000 f8a7 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8002266:	4602      	mov	r2, r0
 8002268:	4b4e      	ldr	r3, [pc, #312]	; (80023a4 <HAL_RCC_ClockConfig+0x248>)
 800226a:	429a      	cmp	r2, r3
 800226c:	d909      	bls.n	8002282 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800226e:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002276:	4a4a      	ldr	r2, [pc, #296]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800227c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b47      	ldr	r3, [pc, #284]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4944      	ldr	r1, [pc, #272]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002294:	f7fe fdae 	bl	8000df4 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7fe fdaa 	bl	8000df4 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e070      	b.n	8002394 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d009      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4930      	ldr	r1, [pc, #192]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b80      	cmp	r3, #128	; 0x80
 80022e8:	d105      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022ea:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4a2c      	ldr	r2, [pc, #176]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 80022f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022f4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d210      	bcs.n	8002326 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 020f 	bic.w	r2, r3, #15
 800230c:	4923      	ldr	r1, [pc, #140]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002314:	4b21      	ldr	r3, [pc, #132]	; (800239c <HAL_RCC_ClockConfig+0x240>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d001      	beq.n	8002326 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e036      	b.n	8002394 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	2b00      	cmp	r3, #0
 8002330:	d008      	beq.n	8002344 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002332:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	4918      	ldr	r1, [pc, #96]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d009      	beq.n	8002364 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4910      	ldr	r1, [pc, #64]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002364:	f000 f826 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8002368:	4601      	mov	r1, r0
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_RCC_ClockConfig+0x244>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <HAL_RCC_ClockConfig+0x24c>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	fa21 f303 	lsr.w	r3, r1, r3
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x250>)
 8002382:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x254>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fce3 	bl	8000d54 <HAL_InitTick>
 800238e:	4603      	mov	r3, r0
 8002390:	73fb      	strb	r3, [r7, #15]

  return status;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40022000 	.word	0x40022000
 80023a0:	40021000 	.word	0x40021000
 80023a4:	04c4b400 	.word	0x04c4b400
 80023a8:	08004c30 	.word	0x08004c30
 80023ac:	20000000 	.word	0x20000000
 80023b0:	20000004 	.word	0x20000004

080023b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c2:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023cc:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x34>
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	2b0c      	cmp	r3, #12
 80023e0:	d121      	bne.n	8002426 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d11e      	bne.n	8002426 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023e8:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023f4:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80023f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e005      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002404:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002410:	4a2a      	ldr	r2, [pc, #168]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002418:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10d      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002424:	e00a      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	2b04      	cmp	r3, #4
 800242a:	d102      	bne.n	8002432 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	e004      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d101      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002438:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800243a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d133      	bne.n	80024aa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d002      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0xa4>
 8002452:	2b03      	cmp	r3, #3
 8002454:	d003      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0xaa>
 8002456:	e005      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800245a:	617b      	str	r3, [r7, #20]
      break;
 800245c:	e005      	b.n	800246a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002460:	617b      	str	r3, [r7, #20]
      break;
 8002462:	e002      	b.n	800246a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	617b      	str	r3, [r7, #20]
      break;
 8002468:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x104>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	3301      	adds	r3, #1
 8002476:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x104>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	fb02 f203 	mul.w	r2, r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	0e5b      	lsrs	r3, r3, #25
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	3301      	adds	r3, #1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024aa:	69bb      	ldr	r3, [r7, #24]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3724      	adds	r7, #36	; 0x24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08004c48 	.word	0x08004c48
 80024c0:	00f42400 	.word	0x00f42400
 80024c4:	007a1200 	.word	0x007a1200

080024c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000000 	.word	0x20000000

080024e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024e4:	f7ff fff0 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 80024e8:	4601      	mov	r1, r0
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	08004c40 	.word	0x08004c40

0800250c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002510:	f7ff ffda 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 8002514:	4601      	mov	r1, r0
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0adb      	lsrs	r3, r3, #11
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	fa21 f303 	lsr.w	r3, r1, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	08004c40 	.word	0x08004c40

08002538 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002540:	2300      	movs	r3, #0
 8002542:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002550:	f7ff f8fa 	bl	8001748 <HAL_PWREx_GetVoltageRange>
 8002554:	6178      	str	r0, [r7, #20]
 8002556:	e014      	b.n	8002582 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800255e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002562:	6593      	str	r3, [r2, #88]	; 0x58
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002570:	f7ff f8ea 	bl	8001748 <HAL_PWREx_GetVoltageRange>
 8002574:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002580:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002588:	d10b      	bne.n	80025a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b80      	cmp	r3, #128	; 0x80
 800258e:	d913      	bls.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2ba0      	cmp	r3, #160	; 0xa0
 8002594:	d902      	bls.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002596:	2302      	movs	r3, #2
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	e00d      	b.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800259c:	2301      	movs	r3, #1
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	e00a      	b.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b7f      	cmp	r3, #127	; 0x7f
 80025a6:	d902      	bls.n	80025ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80025a8:	2302      	movs	r3, #2
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	e004      	b.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b70      	cmp	r3, #112	; 0x70
 80025b2:	d101      	bne.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025b4:	2301      	movs	r3, #1
 80025b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 020f 	bic.w	r2, r3, #15
 80025c0:	4909      	ldr	r1, [pc, #36]	; (80025e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025c8:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d001      	beq.n	80025da <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40022000 	.word	0x40022000

080025ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80025f6:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d118      	bne.n	8002634 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002602:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d107      	bne.n	800261e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e005      	b.n	800262a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800261e:	4b23      	ldr	r3, [pc, #140]	; (80026ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800262a:	4a21      	ldr	r2, [pc, #132]	; (80026b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d002      	beq.n	800264a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002644:	2b03      	cmp	r3, #3
 8002646:	d003      	beq.n	8002650 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002648:	e005      	b.n	8002656 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800264a:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800264c:	613b      	str	r3, [r7, #16]
    break;
 800264e:	e005      	b.n	800265c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002652:	613b      	str	r3, [r7, #16]
    break;
 8002654:	e002      	b.n	800265c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	613b      	str	r3, [r7, #16]
    break;
 800265a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3301      	adds	r3, #1
 8002668:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	fb02 f203 	mul.w	r2, r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	0e5b      	lsrs	r3, r3, #25
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	3301      	adds	r3, #1
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	fbb2 f3f3 	udiv	r3, r2, r3
 800269a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800269c:	683b      	ldr	r3, [r7, #0]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	08004c48 	.word	0x08004c48
 80026b4:	00f42400 	.word	0x00f42400
 80026b8:	007a1200 	.word	0x007a1200

080026bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026c4:	2300      	movs	r3, #0
 80026c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026c8:	2300      	movs	r3, #0
 80026ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d03d      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d00b      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80026e0:	2b40      	cmp	r3, #64	; 0x40
 80026e2:	d804      	bhi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x32>
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00e      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d015      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80026ec:	e01d      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80026ee:	2b60      	cmp	r3, #96	; 0x60
 80026f0:	d01e      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026f2:	2b80      	cmp	r3, #128	; 0x80
 80026f4:	d01c      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026f6:	e018      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026f8:	4b86      	ldr	r3, [pc, #536]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4a85      	ldr	r2, [pc, #532]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002702:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002704:	e015      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3304      	adds	r3, #4
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fafd 	bl	8002d0c <RCCEx_PLLSAI1_Config>
 8002712:	4603      	mov	r3, r0
 8002714:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002716:	e00c      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3320      	adds	r3, #32
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fbe4 	bl	8002eec <RCCEx_PLLSAI2_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002728:	e003      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	74fb      	strb	r3, [r7, #19]
      break;
 800272e:	e000      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8002730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10b      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002738:	4b76      	ldr	r3, [pc, #472]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800273a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800273e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002746:	4973      	ldr	r1, [pc, #460]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800274e:	e001      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d042      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002768:	d00f      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800276a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276e:	d805      	bhi.n	800277c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d011      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002778:	d017      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0xee>
 800277a:	e01f      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x100>
 800277c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002780:	d01f      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002786:	d01c      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002788:	e018      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800278a:	4b62      	ldr	r3, [pc, #392]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a61      	ldr	r2, [pc, #388]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002796:	e015      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fab4 	bl	8002d0c <RCCEx_PLLSAI1_Config>
 80027a4:	4603      	mov	r3, r0
 80027a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027a8:	e00c      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3320      	adds	r3, #32
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fb9b 	bl	8002eec <RCCEx_PLLSAI2_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027ba:	e003      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	74fb      	strb	r3, [r7, #19]
      break;
 80027c0:	e000      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80027c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10b      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027ca:	4b52      	ldr	r3, [pc, #328]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	494e      	ldr	r1, [pc, #312]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80027e0:	e001      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 809f 	beq.w	8002932 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027f8:	4b46      	ldr	r3, [pc, #280]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002808:	2300      	movs	r3, #0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00d      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	4b41      	ldr	r3, [pc, #260]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	4a40      	ldr	r2, [pc, #256]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002818:	6593      	str	r3, [r2, #88]	; 0x58
 800281a:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002826:	2301      	movs	r3, #1
 8002828:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800282a:	4b3b      	ldr	r3, [pc, #236]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a3a      	ldr	r2, [pc, #232]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002836:	f7fe fadd 	bl	8000df4 <HAL_GetTick>
 800283a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800283c:	e009      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283e:	f7fe fad9 	bl	8000df4 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d902      	bls.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	74fb      	strb	r3, [r7, #19]
        break;
 8002850:	e005      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002852:	4b31      	ldr	r3, [pc, #196]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0ef      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d15b      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002864:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01f      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	429a      	cmp	r2, r3
 8002880:	d019      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800288e:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	4a1f      	ldr	r2, [pc, #124]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800289e:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028ae:	4a19      	ldr	r2, [pc, #100]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d016      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe fa98 	bl	8000df4 <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c6:	e00b      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c8:	f7fe fa94 	bl	8000df4 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d902      	bls.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	74fb      	strb	r3, [r7, #19]
            break;
 80028de:	e006      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0ec      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10c      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	4903      	ldr	r1, [pc, #12]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800290c:	e008      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	74bb      	strb	r3, [r7, #18]
 8002912:	e005      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002914:	40021000 	.word	0x40021000
 8002918:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002920:	7c7b      	ldrb	r3, [r7, #17]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d105      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002926:	4ba0      	ldr	r3, [pc, #640]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	4a9f      	ldr	r2, [pc, #636]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002930:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800293e:	4b9a      	ldr	r3, [pc, #616]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	f023 0203 	bic.w	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	4996      	ldr	r1, [pc, #600]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002960:	4b91      	ldr	r3, [pc, #580]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f023 020c 	bic.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	498e      	ldr	r1, [pc, #568]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002982:	4b89      	ldr	r3, [pc, #548]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002990:	4985      	ldr	r1, [pc, #532]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029a4:	4b80      	ldr	r3, [pc, #512]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b2:	497d      	ldr	r1, [pc, #500]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029c6:	4b78      	ldr	r3, [pc, #480]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d4:	4974      	ldr	r1, [pc, #464]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029e8:	4b6f      	ldr	r3, [pc, #444]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f6:	496c      	ldr	r1, [pc, #432]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a0a:	4b67      	ldr	r3, [pc, #412]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a18:	4963      	ldr	r1, [pc, #396]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a2c:	4b5e      	ldr	r3, [pc, #376]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a3a:	495b      	ldr	r1, [pc, #364]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a4e:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5c:	4952      	ldr	r1, [pc, #328]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a70:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	494a      	ldr	r1, [pc, #296]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a92:	4b45      	ldr	r3, [pc, #276]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	4941      	ldr	r1, [pc, #260]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ab4:	4b3c      	ldr	r3, [pc, #240]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac2:	4939      	ldr	r1, [pc, #228]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d028      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ad6:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae4:	4930      	ldr	r1, [pc, #192]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002af4:	d106      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af6:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4a2b      	ldr	r2, [pc, #172]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b00:	60d3      	str	r3, [r2, #12]
 8002b02:	e011      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2101      	movs	r1, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f8f9 	bl	8002d0c <RCCEx_PLLSAI1_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b1e:	7cfb      	ldrb	r3, [r7, #19]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d04d      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b3c:	d108      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b44:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002b4e:	e012      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002b50:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b56:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b5c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b6e:	490e      	ldr	r1, [pc, #56]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b8a:	60d3      	str	r3, [r2, #12]
 8002b8c:	e020      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b96:	d109      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4a02      	ldr	r2, [pc, #8]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba2:	60d3      	str	r3, [r2, #12]
 8002ba4:	e014      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 f8a5 	bl	8002d0c <RCCEx_PLLSAI1_Config>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bc6:	7cfb      	ldrb	r3, [r7, #19]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d028      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bdc:	4b4a      	ldr	r3, [pc, #296]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bea:	4947      	ldr	r1, [pc, #284]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bfc:	4b42      	ldr	r3, [pc, #264]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a41      	ldr	r2, [pc, #260]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c06:	60d3      	str	r3, [r2, #12]
 8002c08:	e011      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c12:	d10c      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f876 	bl	8002d0c <RCCEx_PLLSAI1_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01e      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c3a:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4a:	492f      	ldr	r1, [pc, #188]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	2102      	movs	r1, #2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 f851 	bl	8002d0c <RCCEx_PLLSAI1_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c84:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c8a:	f023 0204 	bic.w	r2, r3, #4
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c94:	491c      	ldr	r1, [pc, #112]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cae:	f023 0218 	bic.w	r2, r3, #24
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	4913      	ldr	r1, [pc, #76]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d017      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cdc:	490a      	ldr	r1, [pc, #40]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cee:	d105      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cfc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000

08002d0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d1a:	4b70      	ldr	r3, [pc, #448]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00e      	beq.n	8002d44 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d26:	4b6d      	ldr	r3, [pc, #436]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0203 	and.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d103      	bne.n	8002d3e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
       ||
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d13f      	bne.n	8002dbe <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
 8002d42:	e03c      	b.n	8002dbe <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d00c      	beq.n	8002d66 <RCCEx_PLLSAI1_Config+0x5a>
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d013      	beq.n	8002d78 <RCCEx_PLLSAI1_Config+0x6c>
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d120      	bne.n	8002d96 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d54:	4b61      	ldr	r3, [pc, #388]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d11d      	bne.n	8002d9c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d64:	e01a      	b.n	8002d9c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d66:	4b5d      	ldr	r3, [pc, #372]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d116      	bne.n	8002da0 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d76:	e013      	b.n	8002da0 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d78:	4b58      	ldr	r3, [pc, #352]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10f      	bne.n	8002da4 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d84:	4b55      	ldr	r3, [pc, #340]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d94:	e006      	b.n	8002da4 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
      break;
 8002d9a:	e004      	b.n	8002da6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002d9c:	bf00      	nop
 8002d9e:	e002      	b.n	8002da6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002da0:	bf00      	nop
 8002da2:	e000      	b.n	8002da6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002da4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d108      	bne.n	8002dbe <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002dac:	4b4b      	ldr	r3, [pc, #300]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f023 0203 	bic.w	r2, r3, #3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4948      	ldr	r1, [pc, #288]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f040 8086 	bne.w	8002ed2 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002dc6:	4b45      	ldr	r3, [pc, #276]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a44      	ldr	r2, [pc, #272]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002dcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd2:	f7fe f80f 	bl	8000df4 <HAL_GetTick>
 8002dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dd8:	e009      	b.n	8002dee <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dda:	f7fe f80b 	bl	8000df4 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d902      	bls.n	8002dee <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	73fb      	strb	r3, [r7, #15]
        break;
 8002dec:	e005      	b.n	8002dfa <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dee:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ef      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d168      	bne.n	8002ed2 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d113      	bne.n	8002e2e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e06:	4b35      	ldr	r3, [pc, #212]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	4b35      	ldr	r3, [pc, #212]	; (8002ee0 <RCCEx_PLLSAI1_Config+0x1d4>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6892      	ldr	r2, [r2, #8]
 8002e12:	0211      	lsls	r1, r2, #8
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68d2      	ldr	r2, [r2, #12]
 8002e18:	06d2      	lsls	r2, r2, #27
 8002e1a:	4311      	orrs	r1, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6852      	ldr	r2, [r2, #4]
 8002e20:	3a01      	subs	r2, #1
 8002e22:	0112      	lsls	r2, r2, #4
 8002e24:	430a      	orrs	r2, r1
 8002e26:	492d      	ldr	r1, [pc, #180]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	610b      	str	r3, [r1, #16]
 8002e2c:	e02d      	b.n	8002e8a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d115      	bne.n	8002e60 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e34:	4b29      	ldr	r3, [pc, #164]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6892      	ldr	r2, [r2, #8]
 8002e40:	0211      	lsls	r1, r2, #8
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6912      	ldr	r2, [r2, #16]
 8002e46:	0852      	lsrs	r2, r2, #1
 8002e48:	3a01      	subs	r2, #1
 8002e4a:	0552      	lsls	r2, r2, #21
 8002e4c:	4311      	orrs	r1, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6852      	ldr	r2, [r2, #4]
 8002e52:	3a01      	subs	r2, #1
 8002e54:	0112      	lsls	r2, r2, #4
 8002e56:	430a      	orrs	r2, r1
 8002e58:	4920      	ldr	r1, [pc, #128]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	610b      	str	r3, [r1, #16]
 8002e5e:	e014      	b.n	8002e8a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e60:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6892      	ldr	r2, [r2, #8]
 8002e6c:	0211      	lsls	r1, r2, #8
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6952      	ldr	r2, [r2, #20]
 8002e72:	0852      	lsrs	r2, r2, #1
 8002e74:	3a01      	subs	r2, #1
 8002e76:	0652      	lsls	r2, r2, #25
 8002e78:	4311      	orrs	r1, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6852      	ldr	r2, [r2, #4]
 8002e7e:	3a01      	subs	r2, #1
 8002e80:	0112      	lsls	r2, r2, #4
 8002e82:	430a      	orrs	r2, r1
 8002e84:	4915      	ldr	r1, [pc, #84]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e8a:	4b14      	ldr	r3, [pc, #80]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a13      	ldr	r2, [pc, #76]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7fd ffad 	bl	8000df4 <HAL_GetTick>
 8002e9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e9c:	e009      	b.n	8002eb2 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e9e:	f7fd ffa9 	bl	8000df4 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d902      	bls.n	8002eb2 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	73fb      	strb	r3, [r7, #15]
          break;
 8002eb0:	e005      	b.n	8002ebe <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0ef      	beq.n	8002e9e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	4903      	ldr	r1, [pc, #12]	; (8002edc <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	07ff800f 	.word	0x07ff800f
 8002ee4:	ff9f800f 	.word	0xff9f800f
 8002ee8:	f9ff800f 	.word	0xf9ff800f

08002eec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002efa:	4b70      	ldr	r3, [pc, #448]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00e      	beq.n	8002f24 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f06:	4b6d      	ldr	r3, [pc, #436]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 0203 	and.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d103      	bne.n	8002f1e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
       ||
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d13f      	bne.n	8002f9e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
 8002f22:	e03c      	b.n	8002f9e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d00c      	beq.n	8002f46 <RCCEx_PLLSAI2_Config+0x5a>
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d013      	beq.n	8002f58 <RCCEx_PLLSAI2_Config+0x6c>
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d120      	bne.n	8002f76 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f34:	4b61      	ldr	r3, [pc, #388]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d11d      	bne.n	8002f7c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f44:	e01a      	b.n	8002f7c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f46:	4b5d      	ldr	r3, [pc, #372]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d116      	bne.n	8002f80 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f56:	e013      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f58:	4b58      	ldr	r3, [pc, #352]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10f      	bne.n	8002f84 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f64:	4b55      	ldr	r3, [pc, #340]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f74:	e006      	b.n	8002f84 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7a:	e004      	b.n	8002f86 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002f7c:	bf00      	nop
 8002f7e:	e002      	b.n	8002f86 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002f80:	bf00      	nop
 8002f82:	e000      	b.n	8002f86 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002f84:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d108      	bne.n	8002f9e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002f8c:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f023 0203 	bic.w	r2, r3, #3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4948      	ldr	r1, [pc, #288]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f040 8086 	bne.w	80030b2 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fa6:	4b45      	ldr	r3, [pc, #276]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a44      	ldr	r2, [pc, #272]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb2:	f7fd ff1f 	bl	8000df4 <HAL_GetTick>
 8002fb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fb8:	e009      	b.n	8002fce <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fba:	f7fd ff1b 	bl	8000df4 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d902      	bls.n	8002fce <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	73fb      	strb	r3, [r7, #15]
        break;
 8002fcc:	e005      	b.n	8002fda <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fce:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ef      	bne.n	8002fba <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d168      	bne.n	80030b2 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d113      	bne.n	800300e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fe6:	4b35      	ldr	r3, [pc, #212]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	4b35      	ldr	r3, [pc, #212]	; (80030c0 <RCCEx_PLLSAI2_Config+0x1d4>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6892      	ldr	r2, [r2, #8]
 8002ff2:	0211      	lsls	r1, r2, #8
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	68d2      	ldr	r2, [r2, #12]
 8002ff8:	06d2      	lsls	r2, r2, #27
 8002ffa:	4311      	orrs	r1, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6852      	ldr	r2, [r2, #4]
 8003000:	3a01      	subs	r2, #1
 8003002:	0112      	lsls	r2, r2, #4
 8003004:	430a      	orrs	r2, r1
 8003006:	492d      	ldr	r1, [pc, #180]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003008:	4313      	orrs	r3, r2
 800300a:	614b      	str	r3, [r1, #20]
 800300c:	e02d      	b.n	800306a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d115      	bne.n	8003040 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003014:	4b29      	ldr	r3, [pc, #164]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	4b2a      	ldr	r3, [pc, #168]	; (80030c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800301a:	4013      	ands	r3, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6892      	ldr	r2, [r2, #8]
 8003020:	0211      	lsls	r1, r2, #8
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6912      	ldr	r2, [r2, #16]
 8003026:	0852      	lsrs	r2, r2, #1
 8003028:	3a01      	subs	r2, #1
 800302a:	0552      	lsls	r2, r2, #21
 800302c:	4311      	orrs	r1, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6852      	ldr	r2, [r2, #4]
 8003032:	3a01      	subs	r2, #1
 8003034:	0112      	lsls	r2, r2, #4
 8003036:	430a      	orrs	r2, r1
 8003038:	4920      	ldr	r1, [pc, #128]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 800303a:	4313      	orrs	r3, r2
 800303c:	614b      	str	r3, [r1, #20]
 800303e:	e014      	b.n	800306a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003040:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003046:	4013      	ands	r3, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6892      	ldr	r2, [r2, #8]
 800304c:	0211      	lsls	r1, r2, #8
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6952      	ldr	r2, [r2, #20]
 8003052:	0852      	lsrs	r2, r2, #1
 8003054:	3a01      	subs	r2, #1
 8003056:	0652      	lsls	r2, r2, #25
 8003058:	4311      	orrs	r1, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6852      	ldr	r2, [r2, #4]
 800305e:	3a01      	subs	r2, #1
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	430a      	orrs	r2, r1
 8003064:	4915      	ldr	r1, [pc, #84]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800306a:	4b14      	ldr	r3, [pc, #80]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a13      	ldr	r2, [pc, #76]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003074:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003076:	f7fd febd 	bl	8000df4 <HAL_GetTick>
 800307a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800307c:	e009      	b.n	8003092 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800307e:	f7fd feb9 	bl	8000df4 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d902      	bls.n	8003092 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	73fb      	strb	r3, [r7, #15]
          break;
 8003090:	e005      	b.n	800309e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0ef      	beq.n	800307e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	4903      	ldr	r1, [pc, #12]	; (80030bc <RCCEx_PLLSAI2_Config+0x1d0>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	07ff800f 	.word	0x07ff800f
 80030c4:	ff9f800f 	.word	0xff9f800f
 80030c8:	f9ff800f 	.word	0xf9ff800f

080030cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e042      	b.n	8003164 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7fd fc95 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2224      	movs	r2, #36	; 0x24
 80030fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fb30 	bl	8003774 <UART_SetConfig>
 8003114:	4603      	mov	r3, r0
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e022      	b.n	8003164 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fdf6 	bl	8003d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800313a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800314a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fe7d 	bl	8003e5c <UART_CheckIdleState>
 8003162:	4603      	mov	r3, r0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003182:	2b20      	cmp	r3, #32
 8003184:	f040 8084 	bne.w	8003290 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_UART_Transmit+0x28>
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e07c      	b.n	8003292 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Transmit+0x3a>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e075      	b.n	8003292 <HAL_UART_Transmit+0x126>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2221      	movs	r2, #33	; 0x21
 80031ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80031be:	f7fd fe19 	bl	8000df4 <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	88fa      	ldrh	r2, [r7, #6]
 80031c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	88fa      	ldrh	r2, [r7, #6]
 80031d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031dc:	d108      	bne.n	80031f0 <HAL_UART_Transmit+0x84>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d104      	bne.n	80031f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	e003      	b.n	80031f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003200:	e02d      	b.n	800325e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2200      	movs	r2, #0
 800320a:	2180      	movs	r1, #128	; 0x80
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fe6d 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e03a      	b.n	8003292 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10b      	bne.n	800323a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	881a      	ldrh	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800322e:	b292      	uxth	r2, r2
 8003230:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	3302      	adds	r3, #2
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	e008      	b.n	800324c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	781a      	ldrb	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	b292      	uxth	r2, r2
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3301      	adds	r3, #1
 800324a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1cb      	bne.n	8003202 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2200      	movs	r2, #0
 8003272:	2140      	movs	r1, #64	; 0x40
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fe39 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e006      	b.n	8003292 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	f040 80bc 	bne.w	800342e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_UART_Receive_IT+0x26>
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0b4      	b.n	8003430 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_UART_Receive_IT+0x38>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e0ad      	b.n	8003430 <HAL_UART_Receive_IT+0x194>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	88fa      	ldrh	r2, [r7, #6]
 80032ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003300:	d10e      	bne.n	8003320 <HAL_UART_Receive_IT+0x84>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d105      	bne.n	8003316 <HAL_UART_Receive_IT+0x7a>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003310:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003314:	e02d      	b.n	8003372 <HAL_UART_Receive_IT+0xd6>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	22ff      	movs	r2, #255	; 0xff
 800331a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800331e:	e028      	b.n	8003372 <HAL_UART_Receive_IT+0xd6>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10d      	bne.n	8003344 <HAL_UART_Receive_IT+0xa8>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d104      	bne.n	800333a <HAL_UART_Receive_IT+0x9e>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	22ff      	movs	r2, #255	; 0xff
 8003334:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003338:	e01b      	b.n	8003372 <HAL_UART_Receive_IT+0xd6>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	227f      	movs	r2, #127	; 0x7f
 800333e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003342:	e016      	b.n	8003372 <HAL_UART_Receive_IT+0xd6>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800334c:	d10d      	bne.n	800336a <HAL_UART_Receive_IT+0xce>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d104      	bne.n	8003360 <HAL_UART_Receive_IT+0xc4>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	227f      	movs	r2, #127	; 0x7f
 800335a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800335e:	e008      	b.n	8003372 <HAL_UART_Receive_IT+0xd6>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	223f      	movs	r2, #63	; 0x3f
 8003364:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003368:	e003      	b.n	8003372 <HAL_UART_Receive_IT+0xd6>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2222      	movs	r2, #34	; 0x22
 800337e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	609a      	str	r2, [r3, #8]

#if defined(USART_CR1_FIFOEN)
    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800339a:	d12a      	bne.n	80033f2 <HAL_UART_Receive_IT+0x156>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d324      	bcc.n	80033f2 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b0:	d107      	bne.n	80033c2 <HAL_UART_Receive_IT+0x126>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4a1f      	ldr	r2, [pc, #124]	; (800343c <HAL_UART_Receive_IT+0x1a0>)
 80033be:	66da      	str	r2, [r3, #108]	; 0x6c
 80033c0:	e002      	b.n	80033c8 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <HAL_UART_Receive_IT+0x1a4>)
 80033c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033de:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	e01b      	b.n	800342a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fa:	d107      	bne.n	800340c <HAL_UART_Receive_IT+0x170>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d103      	bne.n	800340c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4a0f      	ldr	r2, [pc, #60]	; (8003444 <HAL_UART_Receive_IT+0x1a8>)
 8003408:	66da      	str	r2, [r3, #108]	; 0x6c
 800340a:	e002      	b.n	8003412 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <HAL_UART_Receive_IT+0x1ac>)
 8003410:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003428:	601a      	str	r2, [r3, #0]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800342e:	2302      	movs	r3, #2
  }
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	080042fd 	.word	0x080042fd
 8003440:	080041f1 	.word	0x080041f1
 8003444:	08004141 	.word	0x08004141
 8003448:	08004093 	.word	0x08004093

0800344c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003472:	4013      	ands	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d118      	bne.n	80034ae <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	d013      	beq.n	80034ae <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d104      	bne.n	800349a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8145 	beq.w	800372e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
      }
      return;
 80034ac:	e13f      	b.n	800372e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80e8 	beq.w	8003686 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4ba1      	ldr	r3, [pc, #644]	; (8003740 <HAL_UART_IRQHandler+0x2f4>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d105      	bne.n	80034cc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4ba0      	ldr	r3, [pc, #640]	; (8003744 <HAL_UART_IRQHandler+0x2f8>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80dd 	beq.w	8003686 <HAL_UART_IRQHandler+0x23a>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d010      	beq.n	80034f8 <HAL_UART_IRQHandler+0xac>
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00b      	beq.n	80034f8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2201      	movs	r2, #1
 80034e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f043 0201 	orr.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d010      	beq.n	8003524 <HAL_UART_IRQHandler+0xd8>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2202      	movs	r2, #2
 8003512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f043 0204 	orr.w	r2, r3, #4
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <HAL_UART_IRQHandler+0x104>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00b      	beq.n	8003550 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2204      	movs	r2, #4
 800353e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f043 0202 	orr.w	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d015      	beq.n	8003586 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b00      	cmp	r3, #0
 8003562:	d104      	bne.n	800356e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4b76      	ldr	r3, [pc, #472]	; (8003740 <HAL_UART_IRQHandler+0x2f4>)
 8003568:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2208      	movs	r2, #8
 8003574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357c:	f043 0208 	orr.w	r2, r3, #8
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358c:	2b00      	cmp	r3, #0
 800358e:	d011      	beq.n	80035b4 <HAL_UART_IRQHandler+0x168>
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80b9 	beq.w	8003732 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d011      	beq.n	80035ee <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d104      	bne.n	80035de <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d004      	beq.n	800360e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800360a:	2b00      	cmp	r3, #0
 800360c:	d031      	beq.n	8003672 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fcec 	bl	8003fec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d123      	bne.n	800366a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003630:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003636:	2b00      	cmp	r3, #0
 8003638:	d013      	beq.n	8003662 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800363e:	4a42      	ldr	r2, [pc, #264]	; (8003748 <HAL_UART_IRQHandler+0x2fc>)
 8003640:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003646:	4618      	mov	r0, r3
 8003648:	f7fd fd13 	bl	8001072 <HAL_DMA_Abort_IT>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d017      	beq.n	8003682 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800365c:	4610      	mov	r0, r2
 800365e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003660:	e00f      	b.n	8003682 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f87c 	bl	8003760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003668:	e00b      	b.n	8003682 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f878 	bl	8003760 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	e007      	b.n	8003682 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f874 	bl	8003760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8003680:	e057      	b.n	8003732 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003682:	bf00      	nop
    return;
 8003684:	e055      	b.n	8003732 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <HAL_UART_IRQHandler+0x260>
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 feaf 	bl	8004408 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036aa:	e045      	b.n	8003738 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d012      	beq.n	80036dc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_UART_IRQHandler+0x290>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d031      	beq.n	8003736 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	4798      	blx	r3
    }
    return;
 80036da:	e02c      	b.n	8003736 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_UART_IRQHandler+0x2ac>
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fcb4 	bl	800405e <UART_EndTransmit_IT>
    return;
 80036f6:	e01f      	b.n	8003738 <HAL_UART_IRQHandler+0x2ec>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <HAL_UART_IRQHandler+0x2c8>
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fe8f 	bl	8004430 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003712:	e011      	b.n	8003738 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00c      	beq.n	8003738 <HAL_UART_IRQHandler+0x2ec>
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	da09      	bge.n	8003738 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fe79 	bl	800441c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800372a:	bf00      	nop
 800372c:	e004      	b.n	8003738 <HAL_UART_IRQHandler+0x2ec>
      return;
 800372e:	bf00      	nop
 8003730:	e002      	b.n	8003738 <HAL_UART_IRQHandler+0x2ec>
    return;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <HAL_UART_IRQHandler+0x2ec>
    return;
 8003736:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	10000001 	.word	0x10000001
 8003744:	04000120 	.word	0x04000120
 8003748:	08004033 	.word	0x08004033

0800374c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003774:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003778:	b088      	sub	sp, #32
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	4313      	orrs	r3, r2
 8003798:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800379e:	69fa      	ldr	r2, [r7, #28]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4bb1      	ldr	r3, [pc, #708]	; (8003a70 <UART_SetConfig+0x2fc>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	69f9      	ldr	r1, [r7, #28]
 80037b4:	430b      	orrs	r3, r1
 80037b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4aa6      	ldr	r2, [pc, #664]	; (8003a74 <UART_SetConfig+0x300>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80037f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	69f9      	ldr	r1, [r7, #28]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	f023 010f 	bic.w	r1, r3, #15
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a97      	ldr	r2, [pc, #604]	; (8003a78 <UART_SetConfig+0x304>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d121      	bne.n	8003864 <UART_SetConfig+0xf0>
 8003820:	4b96      	ldr	r3, [pc, #600]	; (8003a7c <UART_SetConfig+0x308>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b03      	cmp	r3, #3
 800382c:	d816      	bhi.n	800385c <UART_SetConfig+0xe8>
 800382e:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <UART_SetConfig+0xc0>)
 8003830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003834:	08003845 	.word	0x08003845
 8003838:	08003851 	.word	0x08003851
 800383c:	0800384b 	.word	0x0800384b
 8003840:	08003857 	.word	0x08003857
 8003844:	2301      	movs	r3, #1
 8003846:	76fb      	strb	r3, [r7, #27]
 8003848:	e0e8      	b.n	8003a1c <UART_SetConfig+0x2a8>
 800384a:	2302      	movs	r3, #2
 800384c:	76fb      	strb	r3, [r7, #27]
 800384e:	e0e5      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003850:	2304      	movs	r3, #4
 8003852:	76fb      	strb	r3, [r7, #27]
 8003854:	e0e2      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003856:	2308      	movs	r3, #8
 8003858:	76fb      	strb	r3, [r7, #27]
 800385a:	e0df      	b.n	8003a1c <UART_SetConfig+0x2a8>
 800385c:	2310      	movs	r3, #16
 800385e:	76fb      	strb	r3, [r7, #27]
 8003860:	bf00      	nop
 8003862:	e0db      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a85      	ldr	r2, [pc, #532]	; (8003a80 <UART_SetConfig+0x30c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d134      	bne.n	80038d8 <UART_SetConfig+0x164>
 800386e:	4b83      	ldr	r3, [pc, #524]	; (8003a7c <UART_SetConfig+0x308>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	2b0c      	cmp	r3, #12
 800387a:	d829      	bhi.n	80038d0 <UART_SetConfig+0x15c>
 800387c:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <UART_SetConfig+0x110>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	080038b9 	.word	0x080038b9
 8003888:	080038d1 	.word	0x080038d1
 800388c:	080038d1 	.word	0x080038d1
 8003890:	080038d1 	.word	0x080038d1
 8003894:	080038c5 	.word	0x080038c5
 8003898:	080038d1 	.word	0x080038d1
 800389c:	080038d1 	.word	0x080038d1
 80038a0:	080038d1 	.word	0x080038d1
 80038a4:	080038bf 	.word	0x080038bf
 80038a8:	080038d1 	.word	0x080038d1
 80038ac:	080038d1 	.word	0x080038d1
 80038b0:	080038d1 	.word	0x080038d1
 80038b4:	080038cb 	.word	0x080038cb
 80038b8:	2300      	movs	r3, #0
 80038ba:	76fb      	strb	r3, [r7, #27]
 80038bc:	e0ae      	b.n	8003a1c <UART_SetConfig+0x2a8>
 80038be:	2302      	movs	r3, #2
 80038c0:	76fb      	strb	r3, [r7, #27]
 80038c2:	e0ab      	b.n	8003a1c <UART_SetConfig+0x2a8>
 80038c4:	2304      	movs	r3, #4
 80038c6:	76fb      	strb	r3, [r7, #27]
 80038c8:	e0a8      	b.n	8003a1c <UART_SetConfig+0x2a8>
 80038ca:	2308      	movs	r3, #8
 80038cc:	76fb      	strb	r3, [r7, #27]
 80038ce:	e0a5      	b.n	8003a1c <UART_SetConfig+0x2a8>
 80038d0:	2310      	movs	r3, #16
 80038d2:	76fb      	strb	r3, [r7, #27]
 80038d4:	bf00      	nop
 80038d6:	e0a1      	b.n	8003a1c <UART_SetConfig+0x2a8>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a69      	ldr	r2, [pc, #420]	; (8003a84 <UART_SetConfig+0x310>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d120      	bne.n	8003924 <UART_SetConfig+0x1b0>
 80038e2:	4b66      	ldr	r3, [pc, #408]	; (8003a7c <UART_SetConfig+0x308>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d00f      	beq.n	8003910 <UART_SetConfig+0x19c>
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d802      	bhi.n	80038fa <UART_SetConfig+0x186>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <UART_SetConfig+0x190>
 80038f8:	e010      	b.n	800391c <UART_SetConfig+0x1a8>
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d005      	beq.n	800390a <UART_SetConfig+0x196>
 80038fe:	2b30      	cmp	r3, #48	; 0x30
 8003900:	d009      	beq.n	8003916 <UART_SetConfig+0x1a2>
 8003902:	e00b      	b.n	800391c <UART_SetConfig+0x1a8>
 8003904:	2300      	movs	r3, #0
 8003906:	76fb      	strb	r3, [r7, #27]
 8003908:	e088      	b.n	8003a1c <UART_SetConfig+0x2a8>
 800390a:	2302      	movs	r3, #2
 800390c:	76fb      	strb	r3, [r7, #27]
 800390e:	e085      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003910:	2304      	movs	r3, #4
 8003912:	76fb      	strb	r3, [r7, #27]
 8003914:	e082      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003916:	2308      	movs	r3, #8
 8003918:	76fb      	strb	r3, [r7, #27]
 800391a:	e07f      	b.n	8003a1c <UART_SetConfig+0x2a8>
 800391c:	2310      	movs	r3, #16
 800391e:	76fb      	strb	r3, [r7, #27]
 8003920:	bf00      	nop
 8003922:	e07b      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a57      	ldr	r2, [pc, #348]	; (8003a88 <UART_SetConfig+0x314>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d120      	bne.n	8003970 <UART_SetConfig+0x1fc>
 800392e:	4b53      	ldr	r3, [pc, #332]	; (8003a7c <UART_SetConfig+0x308>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d00f      	beq.n	800395c <UART_SetConfig+0x1e8>
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d802      	bhi.n	8003946 <UART_SetConfig+0x1d2>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <UART_SetConfig+0x1dc>
 8003944:	e010      	b.n	8003968 <UART_SetConfig+0x1f4>
 8003946:	2b80      	cmp	r3, #128	; 0x80
 8003948:	d005      	beq.n	8003956 <UART_SetConfig+0x1e2>
 800394a:	2bc0      	cmp	r3, #192	; 0xc0
 800394c:	d009      	beq.n	8003962 <UART_SetConfig+0x1ee>
 800394e:	e00b      	b.n	8003968 <UART_SetConfig+0x1f4>
 8003950:	2300      	movs	r3, #0
 8003952:	76fb      	strb	r3, [r7, #27]
 8003954:	e062      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003956:	2302      	movs	r3, #2
 8003958:	76fb      	strb	r3, [r7, #27]
 800395a:	e05f      	b.n	8003a1c <UART_SetConfig+0x2a8>
 800395c:	2304      	movs	r3, #4
 800395e:	76fb      	strb	r3, [r7, #27]
 8003960:	e05c      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003962:	2308      	movs	r3, #8
 8003964:	76fb      	strb	r3, [r7, #27]
 8003966:	e059      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003968:	2310      	movs	r3, #16
 800396a:	76fb      	strb	r3, [r7, #27]
 800396c:	bf00      	nop
 800396e:	e055      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a45      	ldr	r2, [pc, #276]	; (8003a8c <UART_SetConfig+0x318>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d124      	bne.n	80039c4 <UART_SetConfig+0x250>
 800397a:	4b40      	ldr	r3, [pc, #256]	; (8003a7c <UART_SetConfig+0x308>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003988:	d012      	beq.n	80039b0 <UART_SetConfig+0x23c>
 800398a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398e:	d802      	bhi.n	8003996 <UART_SetConfig+0x222>
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <UART_SetConfig+0x230>
 8003994:	e012      	b.n	80039bc <UART_SetConfig+0x248>
 8003996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800399a:	d006      	beq.n	80039aa <UART_SetConfig+0x236>
 800399c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a0:	d009      	beq.n	80039b6 <UART_SetConfig+0x242>
 80039a2:	e00b      	b.n	80039bc <UART_SetConfig+0x248>
 80039a4:	2300      	movs	r3, #0
 80039a6:	76fb      	strb	r3, [r7, #27]
 80039a8:	e038      	b.n	8003a1c <UART_SetConfig+0x2a8>
 80039aa:	2302      	movs	r3, #2
 80039ac:	76fb      	strb	r3, [r7, #27]
 80039ae:	e035      	b.n	8003a1c <UART_SetConfig+0x2a8>
 80039b0:	2304      	movs	r3, #4
 80039b2:	76fb      	strb	r3, [r7, #27]
 80039b4:	e032      	b.n	8003a1c <UART_SetConfig+0x2a8>
 80039b6:	2308      	movs	r3, #8
 80039b8:	76fb      	strb	r3, [r7, #27]
 80039ba:	e02f      	b.n	8003a1c <UART_SetConfig+0x2a8>
 80039bc:	2310      	movs	r3, #16
 80039be:	76fb      	strb	r3, [r7, #27]
 80039c0:	bf00      	nop
 80039c2:	e02b      	b.n	8003a1c <UART_SetConfig+0x2a8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2a      	ldr	r2, [pc, #168]	; (8003a74 <UART_SetConfig+0x300>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d124      	bne.n	8003a18 <UART_SetConfig+0x2a4>
 80039ce:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <UART_SetConfig+0x308>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039dc:	d012      	beq.n	8003a04 <UART_SetConfig+0x290>
 80039de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e2:	d802      	bhi.n	80039ea <UART_SetConfig+0x276>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <UART_SetConfig+0x284>
 80039e8:	e012      	b.n	8003a10 <UART_SetConfig+0x29c>
 80039ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ee:	d006      	beq.n	80039fe <UART_SetConfig+0x28a>
 80039f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039f4:	d009      	beq.n	8003a0a <UART_SetConfig+0x296>
 80039f6:	e00b      	b.n	8003a10 <UART_SetConfig+0x29c>
 80039f8:	2300      	movs	r3, #0
 80039fa:	76fb      	strb	r3, [r7, #27]
 80039fc:	e00e      	b.n	8003a1c <UART_SetConfig+0x2a8>
 80039fe:	2302      	movs	r3, #2
 8003a00:	76fb      	strb	r3, [r7, #27]
 8003a02:	e00b      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003a04:	2304      	movs	r3, #4
 8003a06:	76fb      	strb	r3, [r7, #27]
 8003a08:	e008      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	76fb      	strb	r3, [r7, #27]
 8003a0e:	e005      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003a10:	2310      	movs	r3, #16
 8003a12:	76fb      	strb	r3, [r7, #27]
 8003a14:	bf00      	nop
 8003a16:	e001      	b.n	8003a1c <UART_SetConfig+0x2a8>
 8003a18:	2310      	movs	r3, #16
 8003a1a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <UART_SetConfig+0x300>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	f040 80a1 	bne.w	8003b6a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a28:	7efb      	ldrb	r3, [r7, #27]
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d836      	bhi.n	8003a9c <UART_SetConfig+0x328>
 8003a2e:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <UART_SetConfig+0x2c0>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a59 	.word	0x08003a59
 8003a38:	08003a9d 	.word	0x08003a9d
 8003a3c:	08003a61 	.word	0x08003a61
 8003a40:	08003a9d 	.word	0x08003a9d
 8003a44:	08003a67 	.word	0x08003a67
 8003a48:	08003a9d 	.word	0x08003a9d
 8003a4c:	08003a9d 	.word	0x08003a9d
 8003a50:	08003a9d 	.word	0x08003a9d
 8003a54:	08003a95 	.word	0x08003a95
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a58:	f7fe fd42 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8003a5c:	6178      	str	r0, [r7, #20]
        break;
 8003a5e:	e022      	b.n	8003aa6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <UART_SetConfig+0x31c>)
 8003a62:	617b      	str	r3, [r7, #20]
        break;
 8003a64:	e01f      	b.n	8003aa6 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a66:	f7fe fca5 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8003a6a:	6178      	str	r0, [r7, #20]
        break;
 8003a6c:	e01b      	b.n	8003aa6 <UART_SetConfig+0x332>
 8003a6e:	bf00      	nop
 8003a70:	cfff69f3 	.word	0xcfff69f3
 8003a74:	40008000 	.word	0x40008000
 8003a78:	40013800 	.word	0x40013800
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40004400 	.word	0x40004400
 8003a84:	40004800 	.word	0x40004800
 8003a88:	40004c00 	.word	0x40004c00
 8003a8c:	40005000 	.word	0x40005000
 8003a90:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a98:	617b      	str	r3, [r7, #20]
        break;
 8003a9a:	e004      	b.n	8003aa6 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	76bb      	strb	r3, [r7, #26]
        break;
 8003aa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 811d 	beq.w	8003ce8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	4a97      	ldr	r2, [pc, #604]	; (8003d10 <UART_SetConfig+0x59c>)
 8003ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ac0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d305      	bcc.n	8003ade <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d902      	bls.n	8003ae4 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	76bb      	strb	r3, [r7, #26]
 8003ae2:	e101      	b.n	8003ce8 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	4a87      	ldr	r2, [pc, #540]	; (8003d10 <UART_SetConfig+0x59c>)
 8003af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f04f 0400 	mov.w	r4, #0
 8003afc:	461a      	mov	r2, r3
 8003afe:	4623      	mov	r3, r4
 8003b00:	f7fc fb84 	bl	800020c <__aeabi_uldivmod>
 8003b04:	4603      	mov	r3, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	f04f 0400 	mov.w	r4, #0
 8003b14:	0214      	lsls	r4, r2, #8
 8003b16:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b1a:	020b      	lsls	r3, r1, #8
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6852      	ldr	r2, [r2, #4]
 8003b20:	0852      	lsrs	r2, r2, #1
 8003b22:	4611      	mov	r1, r2
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	eb13 0b01 	adds.w	fp, r3, r1
 8003b2c:	eb44 0c02 	adc.w	ip, r4, r2
 8003b30:	4658      	mov	r0, fp
 8003b32:	4661      	mov	r1, ip
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f04f 0400 	mov.w	r4, #0
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	f7fc fb64 	bl	800020c <__aeabi_uldivmod>
 8003b44:	4603      	mov	r3, r0
 8003b46:	460c      	mov	r4, r1
 8003b48:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b50:	d308      	bcc.n	8003b64 <UART_SetConfig+0x3f0>
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b58:	d204      	bcs.n	8003b64 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	e0c1      	b.n	8003ce8 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	76bb      	strb	r3, [r7, #26]
 8003b68:	e0be      	b.n	8003ce8 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b72:	d164      	bne.n	8003c3e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003b74:	7efb      	ldrb	r3, [r7, #27]
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d827      	bhi.n	8003bca <UART_SetConfig+0x456>
 8003b7a:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <UART_SetConfig+0x40c>)
 8003b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b80:	08003ba5 	.word	0x08003ba5
 8003b84:	08003bad 	.word	0x08003bad
 8003b88:	08003bb5 	.word	0x08003bb5
 8003b8c:	08003bcb 	.word	0x08003bcb
 8003b90:	08003bbb 	.word	0x08003bbb
 8003b94:	08003bcb 	.word	0x08003bcb
 8003b98:	08003bcb 	.word	0x08003bcb
 8003b9c:	08003bcb 	.word	0x08003bcb
 8003ba0:	08003bc3 	.word	0x08003bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba4:	f7fe fc9c 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8003ba8:	6178      	str	r0, [r7, #20]
        break;
 8003baa:	e013      	b.n	8003bd4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bac:	f7fe fcae 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 8003bb0:	6178      	str	r0, [r7, #20]
        break;
 8003bb2:	e00f      	b.n	8003bd4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb4:	4b57      	ldr	r3, [pc, #348]	; (8003d14 <UART_SetConfig+0x5a0>)
 8003bb6:	617b      	str	r3, [r7, #20]
        break;
 8003bb8:	e00c      	b.n	8003bd4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bba:	f7fe fbfb 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8003bbe:	6178      	str	r0, [r7, #20]
        break;
 8003bc0:	e008      	b.n	8003bd4 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bc6:	617b      	str	r3, [r7, #20]
        break;
 8003bc8:	e004      	b.n	8003bd4 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	76bb      	strb	r3, [r7, #26]
        break;
 8003bd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8086 	beq.w	8003ce8 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	4a4b      	ldr	r2, [pc, #300]	; (8003d10 <UART_SetConfig+0x59c>)
 8003be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003be6:	461a      	mov	r2, r3
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bee:	005a      	lsls	r2, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	441a      	add	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b0f      	cmp	r3, #15
 8003c08:	d916      	bls.n	8003c38 <UART_SetConfig+0x4c4>
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c10:	d212      	bcs.n	8003c38 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f023 030f 	bic.w	r3, r3, #15
 8003c1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	085b      	lsrs	r3, r3, #1
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	89fb      	ldrh	r3, [r7, #14]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	89fa      	ldrh	r2, [r7, #14]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	e057      	b.n	8003ce8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	76bb      	strb	r3, [r7, #26]
 8003c3c:	e054      	b.n	8003ce8 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c3e:	7efb      	ldrb	r3, [r7, #27]
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d828      	bhi.n	8003c96 <UART_SetConfig+0x522>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <UART_SetConfig+0x4d8>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c71 	.word	0x08003c71
 8003c50:	08003c79 	.word	0x08003c79
 8003c54:	08003c81 	.word	0x08003c81
 8003c58:	08003c97 	.word	0x08003c97
 8003c5c:	08003c87 	.word	0x08003c87
 8003c60:	08003c97 	.word	0x08003c97
 8003c64:	08003c97 	.word	0x08003c97
 8003c68:	08003c97 	.word	0x08003c97
 8003c6c:	08003c8f 	.word	0x08003c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c70:	f7fe fc36 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8003c74:	6178      	str	r0, [r7, #20]
        break;
 8003c76:	e013      	b.n	8003ca0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c78:	f7fe fc48 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 8003c7c:	6178      	str	r0, [r7, #20]
        break;
 8003c7e:	e00f      	b.n	8003ca0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c80:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <UART_SetConfig+0x5a0>)
 8003c82:	617b      	str	r3, [r7, #20]
        break;
 8003c84:	e00c      	b.n	8003ca0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c86:	f7fe fb95 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8003c8a:	6178      	str	r0, [r7, #20]
        break;
 8003c8c:	e008      	b.n	8003ca0 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c92:	617b      	str	r3, [r7, #20]
        break;
 8003c94:	e004      	b.n	8003ca0 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	76bb      	strb	r3, [r7, #26]
        break;
 8003c9e:	bf00      	nop
    }

    if (pclk != 0U)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d020      	beq.n	8003ce8 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <UART_SetConfig+0x59c>)
 8003cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	085b      	lsrs	r3, r3, #1
 8003cbe:	441a      	add	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b0f      	cmp	r3, #15
 8003cd0:	d908      	bls.n	8003ce4 <UART_SetConfig+0x570>
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd8:	d204      	bcs.n	8003ce4 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	e001      	b.n	8003ce8 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003d04:	7ebb      	ldrb	r3, [r7, #26]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003d10:	08004c78 	.word	0x08004c78
 8003d14:	00f42400 	.word	0x00f42400

08003d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01a      	beq.n	8003e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e16:	d10a      	bne.n	8003e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	605a      	str	r2, [r3, #4]
  }
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e6c:	f7fc ffc2 	bl	8000df4 <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d10e      	bne.n	8003e9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f82c 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e022      	b.n	8003ee4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d10e      	bne.n	8003eca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f816 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e00c      	b.n	8003ee4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efc:	e062      	b.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d05e      	beq.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f06:	f7fc ff75 	bl	8000df4 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d11d      	bne.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f2a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e045      	b.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d02e      	beq.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f74:	d126      	bne.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f8e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0201 	bic.w	r2, r2, #1
 8003f9e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e00f      	b.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d08d      	beq.n	8003efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004002:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff fb85 	bl	8003760 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004074:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff fb61 	bl	800374c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80040a0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040a8:	2b22      	cmp	r3, #34	; 0x22
 80040aa:	d13b      	bne.n	8004124 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040b2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040b4:	89bb      	ldrh	r3, [r7, #12]
 80040b6:	b2d9      	uxtb	r1, r3
 80040b8:	89fb      	ldrh	r3, [r7, #14]
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	400a      	ands	r2, r1
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d124      	bne.n	8004138 <UART_RxISR_8BIT+0xa6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040fc:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7fc fc35 	bl	800098c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004122:	e009      	b.n	8004138 <UART_RxISR_8BIT+0xa6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	8b1b      	ldrh	r3, [r3, #24]
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0208 	orr.w	r2, r2, #8
 8004134:	b292      	uxth	r2, r2
 8004136:	831a      	strh	r2, [r3, #24]
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800414e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004156:	2b22      	cmp	r3, #34	; 0x22
 8004158:	d13b      	bne.n	80041d2 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004160:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004168:	89ba      	ldrh	r2, [r7, #12]
 800416a:	89fb      	ldrh	r3, [r7, #14]
 800416c:	4013      	ands	r3, r2
 800416e:	b29a      	uxth	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004178:	1c9a      	adds	r2, r3, #2
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d124      	bne.n	80041e6 <UART_RxISR_16BIT+0xa6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041aa:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fc fbde 	bl	800098c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041d0:	e009      	b.n	80041e6 <UART_RxISR_16BIT+0xa6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	8b1b      	ldrh	r3, [r3, #24]
 80041d8:	b29a      	uxth	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0208 	orr.w	r2, r2, #8
 80041e2:	b292      	uxth	r2, r2
 80041e4:	831a      	strh	r2, [r3, #24]
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80041fe:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004206:	2b22      	cmp	r3, #34	; 0x22
 8004208:	d168      	bne.n	80042dc <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004210:	81fb      	strh	r3, [r7, #14]
 8004212:	e03f      	b.n	8004294 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800421a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800421c:	893b      	ldrh	r3, [r7, #8]
 800421e:	b2d9      	uxtb	r1, r3
 8004220:	89bb      	ldrh	r3, [r7, #12]
 8004222:	b2da      	uxtb	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004228:	400a      	ands	r2, r1
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d11b      	bne.n	800428e <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004264:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fc fb7f 	bl	800098c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800428e:	89fb      	ldrh	r3, [r7, #14]
 8004290:	3b01      	subs	r3, #1
 8004292:	81fb      	strh	r3, [r7, #14]
 8004294:	89fb      	ldrh	r3, [r7, #14]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1bc      	bne.n	8004214 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042a0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80042a2:	897b      	ldrh	r3, [r7, #10]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d023      	beq.n	80042f0 <UART_RxISR_8BIT_FIFOEN+0x100>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80042ae:	897a      	ldrh	r2, [r7, #10]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d21d      	bcs.n	80042f0 <UART_RxISR_8BIT_FIFOEN+0x100>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80042c2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a0c      	ldr	r2, [pc, #48]	; (80042f8 <UART_RxISR_8BIT_FIFOEN+0x108>)
 80042c8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0220 	orr.w	r2, r2, #32
 80042d8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042da:	e009      	b.n	80042f0 <UART_RxISR_8BIT_FIFOEN+0x100>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	8b1b      	ldrh	r3, [r3, #24]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0208 	orr.w	r2, r2, #8
 80042ec:	b292      	uxth	r2, r2
 80042ee:	831a      	strh	r2, [r3, #24]
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	08004093 	.word	0x08004093

080042fc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800430a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004312:	2b22      	cmp	r3, #34	; 0x22
 8004314:	d168      	bne.n	80043e8 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800431c:	82fb      	strh	r3, [r7, #22]
 800431e:	e03f      	b.n	80043a0 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004326:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800432e:	8a3a      	ldrh	r2, [r7, #16]
 8004330:	8abb      	ldrh	r3, [r7, #20]
 8004332:	4013      	ands	r3, r2
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433e:	1c9a      	adds	r2, r3, #2
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d11b      	bne.n	800439a <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004370:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004380:	f023 0301 	bic.w	r3, r3, #1
 8004384:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7fc faf9 	bl	800098c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800439a:	8afb      	ldrh	r3, [r7, #22]
 800439c:	3b01      	subs	r3, #1
 800439e:	82fb      	strh	r3, [r7, #22]
 80043a0:	8afb      	ldrh	r3, [r7, #22]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1bc      	bne.n	8004320 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043ac:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80043ae:	8a7b      	ldrh	r3, [r7, #18]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d023      	beq.n	80043fc <UART_RxISR_16BIT_FIFOEN+0x100>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80043ba:	8a7a      	ldrh	r2, [r7, #18]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d21d      	bcs.n	80043fc <UART_RxISR_16BIT_FIFOEN+0x100>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80043ce:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a0c      	ldr	r2, [pc, #48]	; (8004404 <UART_RxISR_16BIT_FIFOEN+0x108>)
 80043d4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0220 	orr.w	r2, r2, #32
 80043e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043e6:	e009      	b.n	80043fc <UART_RxISR_16BIT_FIFOEN+0x100>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	8b1b      	ldrh	r3, [r3, #24]
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0208 	orr.w	r2, r2, #8
 80043f8:	b292      	uxth	r2, r2
 80043fa:	831a      	strh	r2, [r3, #24]
}
 80043fc:	bf00      	nop
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	08004141 	.word	0x08004141

08004408 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_UARTEx_DisableFifoMode+0x16>
 8004456:	2302      	movs	r3, #2
 8004458:	e027      	b.n	80044aa <HAL_UARTEx_DisableFifoMode+0x66>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2224      	movs	r2, #36	; 0x24
 8004466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004488:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e02d      	b.n	800452a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2224      	movs	r2, #36	; 0x24
 80044da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0201 	bic.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f850 	bl	80045b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004546:	2302      	movs	r3, #2
 8004548:	e02d      	b.n	80045a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2224      	movs	r2, #36	; 0x24
 8004556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f812 	bl	80045b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b089      	sub	sp, #36	; 0x24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80045b8:	4a2f      	ldr	r2, [pc, #188]	; (8004678 <UARTEx_SetNbDataToProcess+0xc8>)
 80045ba:	f107 0314 	add.w	r3, r7, #20
 80045be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045c2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80045c6:	4a2d      	ldr	r2, [pc, #180]	; (800467c <UARTEx_SetNbDataToProcess+0xcc>)
 80045c8:	f107 030c 	add.w	r3, r7, #12
 80045cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045d0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d108      	bne.n	80045ee <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045ec:	e03d      	b.n	800466a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045ee:	2308      	movs	r3, #8
 80045f0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045f2:	2308      	movs	r3, #8
 80045f4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	0e5b      	lsrs	r3, r3, #25
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	0f5b      	lsrs	r3, r3, #29
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004616:	7fbb      	ldrb	r3, [r7, #30]
 8004618:	7f3a      	ldrb	r2, [r7, #28]
 800461a:	f107 0120 	add.w	r1, r7, #32
 800461e:	440a      	add	r2, r1
 8004620:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004624:	fb02 f303 	mul.w	r3, r2, r3
 8004628:	7f3a      	ldrb	r2, [r7, #28]
 800462a:	f107 0120 	add.w	r1, r7, #32
 800462e:	440a      	add	r2, r1
 8004630:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004634:	fb93 f3f2 	sdiv	r3, r3, r2
 8004638:	b29a      	uxth	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004640:	7ffb      	ldrb	r3, [r7, #31]
 8004642:	7f7a      	ldrb	r2, [r7, #29]
 8004644:	f107 0120 	add.w	r1, r7, #32
 8004648:	440a      	add	r2, r1
 800464a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800464e:	fb02 f303 	mul.w	r3, r2, r3
 8004652:	7f7a      	ldrb	r2, [r7, #29]
 8004654:	f107 0120 	add.w	r1, r7, #32
 8004658:	440a      	add	r2, r1
 800465a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800465e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004662:	b29a      	uxth	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800466a:	bf00      	nop
 800466c:	3724      	adds	r7, #36	; 0x24
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	08004c20 	.word	0x08004c20
 800467c:	08004c28 	.word	0x08004c28

08004680 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004680:	b084      	sub	sp, #16
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	f107 001c 	add.w	r0, r7, #28
 800468e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	2b01      	cmp	r3, #1
 8004696:	d122      	bne.n	80046de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d105      	bne.n	80046d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fa30 	bl	8004b38 <USB_CoreReset>
 80046d8:	4603      	mov	r3, r0
 80046da:	73fb      	strb	r3, [r7, #15]
 80046dc:	e01a      	b.n	8004714 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa24 	bl	8004b38 <USB_CoreReset>
 80046f0:	4603      	mov	r3, r0
 80046f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	639a      	str	r2, [r3, #56]	; 0x38
 8004706:	e005      	b.n	8004714 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004714:	7bfb      	ldrb	r3, [r7, #15]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004720:	b004      	add	sp, #16
 8004722:	4770      	bx	lr

08004724 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f023 0201 	bic.w	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	460b      	mov	r3, r1
 8004750:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d106      	bne.n	8004772 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60da      	str	r2, [r3, #12]
 8004770:	e00b      	b.n	800478a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d106      	bne.n	8004786 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	60da      	str	r2, [r3, #12]
 8004784:	e001      	b.n	800478a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e003      	b.n	8004792 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800478a:	2032      	movs	r0, #50	; 0x32
 800478c:	f7fc fb3e 	bl	8000e0c <HAL_Delay>

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800479c:	b084      	sub	sp, #16
 800479e:	b580      	push	{r7, lr}
 80047a0:	b086      	sub	sp, #24
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	e009      	b.n	80047d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	3340      	adds	r3, #64	; 0x40
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	2200      	movs	r2, #0
 80047c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	3301      	adds	r3, #1
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b0e      	cmp	r3, #14
 80047d4:	d9f2      	bls.n	80047bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d11c      	bne.n	8004816 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ea:	f043 0302 	orr.w	r3, r3, #2
 80047ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	e005      	b.n	8004822 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004828:	461a      	mov	r2, r3
 800482a:	2300      	movs	r3, #0
 800482c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004834:	4619      	mov	r1, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483c:	461a      	mov	r2, r3
 800483e:	680b      	ldr	r3, [r1, #0]
 8004840:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004842:	2103      	movs	r1, #3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f93d 	bl	8004ac4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800484a:	2110      	movs	r1, #16
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f8f1 	bl	8004a34 <USB_FlushTxFifo>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f90f 	bl	8004a80 <USB_FlushRxFifo>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004872:	461a      	mov	r2, r3
 8004874:	2300      	movs	r3, #0
 8004876:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	461a      	mov	r2, r3
 8004880:	2300      	movs	r3, #0
 8004882:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488a:	461a      	mov	r2, r3
 800488c:	2300      	movs	r3, #0
 800488e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	e043      	b.n	800491e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ac:	d118      	bne.n	80048e0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c0:	461a      	mov	r2, r3
 80048c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	e013      	b.n	80048f2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d6:	461a      	mov	r2, r3
 80048d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e008      	b.n	80048f2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	461a      	mov	r2, r3
 80048ee:	2300      	movs	r3, #0
 80048f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	461a      	mov	r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004910:	461a      	mov	r2, r3
 8004912:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004916:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	3301      	adds	r3, #1
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	429a      	cmp	r2, r3
 8004924:	d3b7      	bcc.n	8004896 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	e043      	b.n	80049b4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800493e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004942:	d118      	bne.n	8004976 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10a      	bne.n	8004960 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004956:	461a      	mov	r2, r3
 8004958:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e013      	b.n	8004988 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496c:	461a      	mov	r2, r3
 800496e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	e008      	b.n	8004988 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004982:	461a      	mov	r2, r3
 8004984:	2300      	movs	r3, #0
 8004986:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	461a      	mov	r2, r3
 8004996:	2300      	movs	r3, #0
 8004998:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	461a      	mov	r2, r3
 80049a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	3301      	adds	r3, #1
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d3b7      	bcc.n	800492c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f043 0210 	orr.w	r2, r3, #16
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <USB_DevInit+0x294>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f043 0208 	orr.w	r2, r3, #8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d107      	bne.n	8004a1e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a16:	f043 0304 	orr.w	r3, r3, #4
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a2a:	b004      	add	sp, #16
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	803c3800 	.word	0x803c3800

08004a34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	019b      	lsls	r3, r3, #6
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3301      	adds	r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <USB_FlushTxFifo+0x48>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e006      	b.n	8004a6e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d0f0      	beq.n	8004a4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	00030d40 	.word	0x00030d40

08004a80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2210      	movs	r2, #16
 8004a90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3301      	adds	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <USB_FlushRxFifo+0x40>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d901      	bls.n	8004aa4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e006      	b.n	8004ab2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d0f0      	beq.n	8004a92 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	00030d40 	.word	0x00030d40

08004ac4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b085      	sub	sp, #20
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b10:	f023 0303 	bic.w	r3, r3, #3
 8004b14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b24:	f043 0302 	orr.w	r3, r3, #2
 8004b28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <USB_CoreReset+0x64>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e01b      	b.n	8004b8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	daf2      	bge.n	8004b44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f043 0201 	orr.w	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3301      	adds	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <USB_CoreReset+0x64>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e006      	b.n	8004b8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d0f0      	beq.n	8004b6e <USB_CoreReset+0x36>

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	00030d40 	.word	0x00030d40

08004ba0 <__libc_init_array>:
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	4e0d      	ldr	r6, [pc, #52]	; (8004bd8 <__libc_init_array+0x38>)
 8004ba4:	4c0d      	ldr	r4, [pc, #52]	; (8004bdc <__libc_init_array+0x3c>)
 8004ba6:	1ba4      	subs	r4, r4, r6
 8004ba8:	10a4      	asrs	r4, r4, #2
 8004baa:	2500      	movs	r5, #0
 8004bac:	42a5      	cmp	r5, r4
 8004bae:	d109      	bne.n	8004bc4 <__libc_init_array+0x24>
 8004bb0:	4e0b      	ldr	r6, [pc, #44]	; (8004be0 <__libc_init_array+0x40>)
 8004bb2:	4c0c      	ldr	r4, [pc, #48]	; (8004be4 <__libc_init_array+0x44>)
 8004bb4:	f000 f820 	bl	8004bf8 <_init>
 8004bb8:	1ba4      	subs	r4, r4, r6
 8004bba:	10a4      	asrs	r4, r4, #2
 8004bbc:	2500      	movs	r5, #0
 8004bbe:	42a5      	cmp	r5, r4
 8004bc0:	d105      	bne.n	8004bce <__libc_init_array+0x2e>
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}
 8004bc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bc8:	4798      	blx	r3
 8004bca:	3501      	adds	r5, #1
 8004bcc:	e7ee      	b.n	8004bac <__libc_init_array+0xc>
 8004bce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bd2:	4798      	blx	r3
 8004bd4:	3501      	adds	r5, #1
 8004bd6:	e7f2      	b.n	8004bbe <__libc_init_array+0x1e>
 8004bd8:	08004c98 	.word	0x08004c98
 8004bdc:	08004c98 	.word	0x08004c98
 8004be0:	08004c98 	.word	0x08004c98
 8004be4:	08004c9c 	.word	0x08004c9c

08004be8 <memset>:
 8004be8:	4402      	add	r2, r0
 8004bea:	4603      	mov	r3, r0
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d100      	bne.n	8004bf2 <memset+0xa>
 8004bf0:	4770      	bx	lr
 8004bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bf6:	e7f9      	b.n	8004bec <memset+0x4>

08004bf8 <_init>:
 8004bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfa:	bf00      	nop
 8004bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfe:	bc08      	pop	{r3}
 8004c00:	469e      	mov	lr, r3
 8004c02:	4770      	bx	lr

08004c04 <_fini>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	bf00      	nop
 8004c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0a:	bc08      	pop	{r3}
 8004c0c:	469e      	mov	lr, r3
 8004c0e:	4770      	bx	lr
