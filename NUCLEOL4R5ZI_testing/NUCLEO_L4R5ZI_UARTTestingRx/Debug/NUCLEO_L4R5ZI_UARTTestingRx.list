
NUCLEO_L4R5ZI_UARTTestingRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000497c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba8  08004ba8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bb0  08004bb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  2000000c  08004bc4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  08004bc4  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100f1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002166  00000000  00000000  0003012d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00032298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c78  00000000  00000000  00033018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c5f  00000000  00000000  00033c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ac34  00000000  00000000  0005d8ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffe8c  00000000  00000000  00068523  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001683af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c8  00000000  00000000  0016842c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004b20 	.word	0x08004b20

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004b20 	.word	0x08004b20

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295
 800021c:	f04f 30ff 	movne.w	r0, #4294967295
 8000220:	f000 b972 	b.w	8000508 <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9e08      	ldr	r6, [sp, #32]
 8000242:	4604      	mov	r4, r0
 8000244:	4688      	mov	r8, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d14b      	bne.n	80002e2 <__udivmoddi4+0xa6>
 800024a:	428a      	cmp	r2, r1
 800024c:	4615      	mov	r5, r2
 800024e:	d967      	bls.n	8000320 <__udivmoddi4+0xe4>
 8000250:	fab2 f282 	clz	r2, r2
 8000254:	b14a      	cbz	r2, 800026a <__udivmoddi4+0x2e>
 8000256:	f1c2 0720 	rsb	r7, r2, #32
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	fa20 f707 	lsr.w	r7, r0, r7
 8000262:	4095      	lsls	r5, r2
 8000264:	ea47 0803 	orr.w	r8, r7, r3
 8000268:	4094      	lsls	r4, r2
 800026a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026e:	0c23      	lsrs	r3, r4, #16
 8000270:	fbb8 f7fe 	udiv	r7, r8, lr
 8000274:	fa1f fc85 	uxth.w	ip, r5
 8000278:	fb0e 8817 	mls	r8, lr, r7, r8
 800027c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000280:	fb07 f10c 	mul.w	r1, r7, ip
 8000284:	4299      	cmp	r1, r3
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x60>
 8000288:	18eb      	adds	r3, r5, r3
 800028a:	f107 30ff 	add.w	r0, r7, #4294967295
 800028e:	f080 811b 	bcs.w	80004c8 <__udivmoddi4+0x28c>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 8118 	bls.w	80004c8 <__udivmoddi4+0x28c>
 8000298:	3f02      	subs	r7, #2
 800029a:	442b      	add	r3, r5
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b0:	45a4      	cmp	ip, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x8c>
 80002b4:	192c      	adds	r4, r5, r4
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x290>
 80002be:	45a4      	cmp	ip, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x290>
 80002c4:	3802      	subs	r0, #2
 80002c6:	442c      	add	r4, r5
 80002c8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002cc:	eba4 040c 	sub.w	r4, r4, ip
 80002d0:	2700      	movs	r7, #0
 80002d2:	b11e      	cbz	r6, 80002dc <__udivmoddi4+0xa0>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c6 4300 	strd	r4, r3, [r6]
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xbe>
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f000 80eb 	beq.w	80004c2 <__udivmoddi4+0x286>
 80002ec:	2700      	movs	r7, #0
 80002ee:	e9c6 0100 	strd	r0, r1, [r6]
 80002f2:	4638      	mov	r0, r7
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f783 	clz	r7, r3
 80002fe:	2f00      	cmp	r7, #0
 8000300:	d147      	bne.n	8000392 <__udivmoddi4+0x156>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd0>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2c4>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4698      	mov	r8, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa0>
 800031a:	e9c6 4800 	strd	r4, r8, [r6]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa0>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xe8>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 808f 	bne.w	800044c <__udivmoddi4+0x210>
 800032e:	1b49      	subs	r1, r1, r5
 8000330:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000334:	fa1f f885 	uxth.w	r8, r5
 8000338:	2701      	movs	r7, #1
 800033a:	fbb1 fcfe 	udiv	ip, r1, lr
 800033e:	0c23      	lsrs	r3, r4, #16
 8000340:	fb0e 111c 	mls	r1, lr, ip, r1
 8000344:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000348:	fb08 f10c 	mul.w	r1, r8, ip
 800034c:	4299      	cmp	r1, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x124>
 8000350:	18eb      	adds	r3, r5, r3
 8000352:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x122>
 8000358:	4299      	cmp	r1, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2bc>
 800035e:	4684      	mov	ip, r0
 8000360:	1a59      	subs	r1, r3, r1
 8000362:	b2a3      	uxth	r3, r4
 8000364:	fbb1 f0fe 	udiv	r0, r1, lr
 8000368:	fb0e 1410 	mls	r4, lr, r0, r1
 800036c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000370:	fb08 f800 	mul.w	r8, r8, r0
 8000374:	45a0      	cmp	r8, r4
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x14c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x14a>
 8000380:	45a0      	cmp	r8, r4
 8000382:	f200 80b6 	bhi.w	80004f2 <__udivmoddi4+0x2b6>
 8000386:	4618      	mov	r0, r3
 8000388:	eba4 0408 	sub.w	r4, r4, r8
 800038c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000390:	e79f      	b.n	80002d2 <__udivmoddi4+0x96>
 8000392:	f1c7 0c20 	rsb	ip, r7, #32
 8000396:	40bb      	lsls	r3, r7
 8000398:	fa22 fe0c 	lsr.w	lr, r2, ip
 800039c:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a0:	fa01 f407 	lsl.w	r4, r1, r7
 80003a4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003ac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b0:	4325      	orrs	r5, r4
 80003b2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b6:	0c2c      	lsrs	r4, r5, #16
 80003b8:	fb08 3319 	mls	r3, r8, r9, r3
 80003bc:	fa1f fa8e 	uxth.w	sl, lr
 80003c0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c4:	fb09 f40a 	mul.w	r4, r9, sl
 80003c8:	429c      	cmp	r4, r3
 80003ca:	fa02 f207 	lsl.w	r2, r2, r7
 80003ce:	fa00 f107 	lsl.w	r1, r0, r7
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b0>
 80003d4:	eb1e 0303 	adds.w	r3, lr, r3
 80003d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003dc:	f080 8087 	bcs.w	80004ee <__udivmoddi4+0x2b2>
 80003e0:	429c      	cmp	r4, r3
 80003e2:	f240 8084 	bls.w	80004ee <__udivmoddi4+0x2b2>
 80003e6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ea:	4473      	add	r3, lr
 80003ec:	1b1b      	subs	r3, r3, r4
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f4:	fb08 3310 	mls	r3, r8, r0, r3
 80003f8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003fc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000400:	45a2      	cmp	sl, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1da>
 8000404:	eb1e 0404 	adds.w	r4, lr, r4
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295
 800040c:	d26b      	bcs.n	80004e6 <__udivmoddi4+0x2aa>
 800040e:	45a2      	cmp	sl, r4
 8000410:	d969      	bls.n	80004e6 <__udivmoddi4+0x2aa>
 8000412:	3802      	subs	r0, #2
 8000414:	4474      	add	r4, lr
 8000416:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041a:	fba0 8902 	umull	r8, r9, r0, r2
 800041e:	eba4 040a 	sub.w	r4, r4, sl
 8000422:	454c      	cmp	r4, r9
 8000424:	46c2      	mov	sl, r8
 8000426:	464b      	mov	r3, r9
 8000428:	d354      	bcc.n	80004d4 <__udivmoddi4+0x298>
 800042a:	d051      	beq.n	80004d0 <__udivmoddi4+0x294>
 800042c:	2e00      	cmp	r6, #0
 800042e:	d069      	beq.n	8000504 <__udivmoddi4+0x2c8>
 8000430:	ebb1 050a 	subs.w	r5, r1, sl
 8000434:	eb64 0403 	sbc.w	r4, r4, r3
 8000438:	fa04 fc0c 	lsl.w	ip, r4, ip
 800043c:	40fd      	lsrs	r5, r7
 800043e:	40fc      	lsrs	r4, r7
 8000440:	ea4c 0505 	orr.w	r5, ip, r5
 8000444:	e9c6 5400 	strd	r5, r4, [r6]
 8000448:	2700      	movs	r7, #0
 800044a:	e747      	b.n	80002dc <__udivmoddi4+0xa0>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f703 	lsr.w	r7, r0, r3
 8000454:	4095      	lsls	r5, r2
 8000456:	fa01 f002 	lsl.w	r0, r1, r2
 800045a:	fa21 f303 	lsr.w	r3, r1, r3
 800045e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000462:	4338      	orrs	r0, r7
 8000464:	0c01      	lsrs	r1, r0, #16
 8000466:	fbb3 f7fe 	udiv	r7, r3, lr
 800046a:	fa1f f885 	uxth.w	r8, r5
 800046e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb07 f308 	mul.w	r3, r7, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x256>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f107 3cff 	add.w	ip, r7, #4294967295
 8000488:	d22f      	bcs.n	80004ea <__udivmoddi4+0x2ae>
 800048a:	428b      	cmp	r3, r1
 800048c:	d92d      	bls.n	80004ea <__udivmoddi4+0x2ae>
 800048e:	3f02      	subs	r7, #2
 8000490:	4429      	add	r1, r5
 8000492:	1acb      	subs	r3, r1, r3
 8000494:	b281      	uxth	r1, r0
 8000496:	fbb3 f0fe 	udiv	r0, r3, lr
 800049a:	fb0e 3310 	mls	r3, lr, r0, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb00 f308 	mul.w	r3, r0, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x27e>
 80004aa:	1869      	adds	r1, r5, r1
 80004ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b0:	d217      	bcs.n	80004e2 <__udivmoddi4+0x2a6>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d915      	bls.n	80004e2 <__udivmoddi4+0x2a6>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4429      	add	r1, r5
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c0:	e73b      	b.n	800033a <__udivmoddi4+0xfe>
 80004c2:	4637      	mov	r7, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e709      	b.n	80002dc <__udivmoddi4+0xa0>
 80004c8:	4607      	mov	r7, r0
 80004ca:	e6e7      	b.n	800029c <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x8c>
 80004d0:	4541      	cmp	r1, r8
 80004d2:	d2ab      	bcs.n	800042c <__udivmoddi4+0x1f0>
 80004d4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d8:	eb69 020e 	sbc.w	r2, r9, lr
 80004dc:	3801      	subs	r0, #1
 80004de:	4613      	mov	r3, r2
 80004e0:	e7a4      	b.n	800042c <__udivmoddi4+0x1f0>
 80004e2:	4660      	mov	r0, ip
 80004e4:	e7e9      	b.n	80004ba <__udivmoddi4+0x27e>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e795      	b.n	8000416 <__udivmoddi4+0x1da>
 80004ea:	4667      	mov	r7, ip
 80004ec:	e7d1      	b.n	8000492 <__udivmoddi4+0x256>
 80004ee:	4681      	mov	r9, r0
 80004f0:	e77c      	b.n	80003ec <__udivmoddi4+0x1b0>
 80004f2:	3802      	subs	r0, #2
 80004f4:	442c      	add	r4, r5
 80004f6:	e747      	b.n	8000388 <__udivmoddi4+0x14c>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	442b      	add	r3, r5
 80004fe:	e72f      	b.n	8000360 <__udivmoddi4+0x124>
 8000500:	4638      	mov	r0, r7
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xda>
 8000504:	4637      	mov	r7, r6
 8000506:	e6e9      	b.n	80002dc <__udivmoddi4+0xa0>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fcbf 	bl	8000e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f820 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f9d6 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f000 f9aa 	bl	8000874 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000520:	f000 f89a 	bl	8000658 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000524:	f000 f930 	bl	8000788 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000528:	f000 f97a 	bl	8000820 <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 800052c:	f000 f8e0 	bl	80006f0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */



	//Receive UART5 DMA
	HAL_UART_Receive_DMA(&huart5, UART1_rxBuffer, 100);
 8000530:	2264      	movs	r2, #100	; 0x64
 8000532:	4906      	ldr	r1, [pc, #24]	; (800054c <main+0x40>)
 8000534:	4806      	ldr	r0, [pc, #24]	; (8000550 <main+0x44>)
 8000536:	f003 f97d 	bl	8003834 <HAL_UART_Receive_DMA>
		HAL_UART_Transmit(&hlpuart1, UART1_rxBuffer, strlen((char*)UART1_rxBuffer), HAL_MAX_DELAY);
	}
	*/

	//flash blue led to indicate its running
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <main+0x48>)
 800053e:	f001 fa6d 	bl	8001a1c <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000542:	20fa      	movs	r0, #250	; 0xfa
 8000544:	f000 fd1a 	bl	8000f7c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000548:	e7f7      	b.n	800053a <main+0x2e>
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028
 8000550:	200005ac 	.word	0x200005ac
 8000554:	48000400 	.word	0x48000400

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b0bc      	sub	sp, #240	; 0xf0
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000562:	2244      	movs	r2, #68	; 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 fad2 	bl	8004b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2294      	movs	r2, #148	; 0x94
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f004 fac4 	bl	8004b10 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000588:	2000      	movs	r0, #0
 800058a:	f001 fbc9 	bl	8001d20 <HAL_PWREx_ControlVoltageScaling>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000594:	f000 fa60 	bl	8000a58 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000598:	2322      	movs	r3, #34	; 0x22
 800059a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005a6:	2301      	movs	r3, #1
 80005a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2340      	movs	r3, #64	; 0x40
 80005ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005c4:	231e      	movs	r3, #30
 80005c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fc61 	bl	8001ea8 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005ec:	f000 fa34 	bl	8000a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2303      	movs	r3, #3
 80005f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000610:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000614:	2105      	movs	r1, #5
 8000616:	4618      	mov	r0, r3
 8000618:	f002 f86c 	bl	80026f4 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000622:	f000 fa19 	bl	8000a58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART5
 8000626:	f242 0334 	movw	r3, #8244	; 0x2034
 800062a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800062c:	2300      	movs	r3, #0
 800062e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000630:	2300      	movs	r3, #0
 8000632:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000634:	2300      	movs	r3, #0
 8000636:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000638:	2300      	movs	r3, #0
 800063a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fb08 	bl	8002c54 <HAL_RCCEx_PeriphCLKConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800064a:	f000 fa05 	bl	8000a58 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	37f0      	adds	r7, #240	; 0xf0
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 800065e:	4a23      	ldr	r2, [pc, #140]	; (80006ec <MX_LPUART1_UART_Init+0x94>)
 8000660:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 8000664:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000668:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 8000696:	2200      	movs	r2, #0
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 800069c:	2200      	movs	r2, #0
 800069e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006a0:	4811      	ldr	r0, [pc, #68]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 80006a2:	f002 ffdf 	bl	8003664 <HAL_UART_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80006ac:	f000 f9d4 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b0:	2100      	movs	r1, #0
 80006b2:	480d      	ldr	r0, [pc, #52]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 80006b4:	f003 fe93 	bl	80043de <HAL_UARTEx_SetTxFifoThreshold>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006be:	f000 f9cb 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4808      	ldr	r0, [pc, #32]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 80006c6:	f003 fec8 	bl	800445a <HAL_UARTEx_SetRxFifoThreshold>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006d0:	f000 f9c2 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_LPUART1_UART_Init+0x90>)
 80006d6:	f003 fe49 	bl	800436c <HAL_UARTEx_DisableFifoMode>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006e0:	f000 f9ba 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000520 	.word	0x20000520
 80006ec:	40008000 	.word	0x40008000

080006f0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <MX_UART5_Init+0x90>)
 80006f6:	4a23      	ldr	r2, [pc, #140]	; (8000784 <MX_UART5_Init+0x94>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_UART5_Init+0x90>)
 80006fc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000700:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_UART5_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_UART5_Init+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_UART5_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_UART5_Init+0x90>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_UART5_Init+0x90>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_UART5_Init+0x90>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_UART5_Init+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_UART5_Init+0x90>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_UART5_Init+0x90>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <MX_UART5_Init+0x90>)
 800073a:	f002 ff93 	bl	8003664 <HAL_UART_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000744:	f000 f988 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_UART5_Init+0x90>)
 800074c:	f003 fe47 	bl	80043de <HAL_UARTEx_SetTxFifoThreshold>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000756:	f000 f97f 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075a:	2100      	movs	r1, #0
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <MX_UART5_Init+0x90>)
 800075e:	f003 fe7c 	bl	800445a <HAL_UARTEx_SetRxFifoThreshold>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000768:	f000 f976 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_UART5_Init+0x90>)
 800076e:	f003 fdfd 	bl	800436c <HAL_UARTEx_DisableFifoMode>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000778:	f000 f96e 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200005ac 	.word	0x200005ac
 8000784:	40005000 	.word	0x40005000

08000788 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_USART3_UART_Init+0x90>)
 800078e:	4a23      	ldr	r2, [pc, #140]	; (800081c <MX_USART3_UART_Init+0x94>)
 8000790:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_USART3_UART_Init+0x90>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_USART3_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d0:	4811      	ldr	r0, [pc, #68]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007d2:	f002 ff47 	bl	8003664 <HAL_UART_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007dc:	f000 f93c 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007e4:	f003 fdfb 	bl	80043de <HAL_UARTEx_SetTxFifoThreshold>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007ee:	f000 f933 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4808      	ldr	r0, [pc, #32]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007f6:	f003 fe30 	bl	800445a <HAL_UARTEx_SetRxFifoThreshold>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000800:	f000 f92a 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_USART3_UART_Init+0x90>)
 8000806:	f003 fdb1 	bl	800436c <HAL_UARTEx_DisableFifoMode>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000810:	f000 f922 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000008c 	.word	0x2000008c
 800081c:	40004800 	.word	0x40004800

08000820 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800082a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800082e:	2206      	movs	r2, #6
 8000830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000834:	2202      	movs	r2, #2
 8000836:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800083a:	2201      	movs	r2, #1
 800083c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800084c:	2201      	movs	r2, #1
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000858:	2201      	movs	r2, #1
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800085e:	f001 f8f7 	bl	8001a50 <HAL_PCD_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000868:	f000 f8f6 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000118 	.word	0x20000118

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_DMA_Init+0x50>)
 800087c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <MX_DMA_Init+0x50>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6493      	str	r3, [r2, #72]	; 0x48
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_DMA_Init+0x50>)
 8000888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_DMA_Init+0x50>)
 8000894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <MX_DMA_Init+0x50>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6493      	str	r3, [r2, #72]	; 0x48
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_DMA_Init+0x50>)
 80008a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	200b      	movs	r0, #11
 80008b0:	f000 fc61 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008b4:	200b      	movs	r0, #11
 80008b6:	f000 fc7a 	bl	80011ae <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b47      	ldr	r3, [pc, #284]	; (80009fc <MX_GPIO_Init+0x134>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a46      	ldr	r2, [pc, #280]	; (80009fc <MX_GPIO_Init+0x134>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b44      	ldr	r3, [pc, #272]	; (80009fc <MX_GPIO_Init+0x134>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	4b41      	ldr	r3, [pc, #260]	; (80009fc <MX_GPIO_Init+0x134>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a40      	ldr	r2, [pc, #256]	; (80009fc <MX_GPIO_Init+0x134>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b3e      	ldr	r3, [pc, #248]	; (80009fc <MX_GPIO_Init+0x134>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <MX_GPIO_Init+0x134>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a3a      	ldr	r2, [pc, #232]	; (80009fc <MX_GPIO_Init+0x134>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b38      	ldr	r3, [pc, #224]	; (80009fc <MX_GPIO_Init+0x134>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	4b35      	ldr	r3, [pc, #212]	; (80009fc <MX_GPIO_Init+0x134>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a34      	ldr	r2, [pc, #208]	; (80009fc <MX_GPIO_Init+0x134>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b32      	ldr	r3, [pc, #200]	; (80009fc <MX_GPIO_Init+0x134>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093e:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <MX_GPIO_Init+0x134>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a2e      	ldr	r2, [pc, #184]	; (80009fc <MX_GPIO_Init+0x134>)
 8000944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <MX_GPIO_Init+0x134>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000956:	f001 fa97 	bl	8001e88 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_GPIO_Init+0x134>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a27      	ldr	r2, [pc, #156]	; (80009fc <MX_GPIO_Init+0x134>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <MX_GPIO_Init+0x134>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000978:	4821      	ldr	r0, [pc, #132]	; (8000a00 <MX_GPIO_Init+0x138>)
 800097a:	f001 f837 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2120      	movs	r1, #32
 8000982:	4820      	ldr	r0, [pc, #128]	; (8000a04 <MX_GPIO_Init+0x13c>)
 8000984:	f001 f832 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_GPIO_Init+0x140>)
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	481b      	ldr	r0, [pc, #108]	; (8000a0c <MX_GPIO_Init+0x144>)
 800099e:	f000 fe93 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80009a2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4811      	ldr	r0, [pc, #68]	; (8000a00 <MX_GPIO_Init+0x138>)
 80009bc:	f000 fe84 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009c0:	2320      	movs	r3, #32
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	480b      	ldr	r0, [pc, #44]	; (8000a04 <MX_GPIO_Init+0x13c>)
 80009d8:	f000 fe76 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009dc:	2340      	movs	r3, #64	; 0x40
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_GPIO_Init+0x13c>)
 80009f0:	f000 fe6a 	bl	80016c8 <HAL_GPIO_Init>

}
 80009f4:	bf00      	nop
 80009f6:	3730      	adds	r7, #48	; 0x30
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000400 	.word	0x48000400
 8000a04:	48001800 	.word	0x48001800
 8000a08:	10110000 	.word	0x10110000
 8000a0c:	48000800 	.word	0x48000800

08000a10 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart5)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&hlpuart1, UART1_rxBuffer, strlen((char*)UART1_rxBuffer), HAL_MAX_DELAY);
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <HAL_UART_RxCpltCallback+0x3c>)
 8000a1a:	f7ff fbef 	bl	80001fc <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	4909      	ldr	r1, [pc, #36]	; (8000a4c <HAL_UART_RxCpltCallback+0x3c>)
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <HAL_UART_RxCpltCallback+0x40>)
 8000a2a:	f002 fe6b 	bl	8003704 <HAL_UART_Transmit>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000a2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a32:	4808      	ldr	r0, [pc, #32]	; (8000a54 <HAL_UART_RxCpltCallback+0x44>)
 8000a34:	f000 fff2 	bl	8001a1c <HAL_GPIO_TogglePin>

    HAL_UART_Receive_DMA(huart5, UART1_rxBuffer, 100);
 8000a38:	2264      	movs	r2, #100	; 0x64
 8000a3a:	4904      	ldr	r1, [pc, #16]	; (8000a4c <HAL_UART_RxCpltCallback+0x3c>)
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f002 fef9 	bl	8003834 <HAL_UART_Receive_DMA>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000028 	.word	0x20000028
 8000a50:	20000520 	.word	0x20000520
 8000a54:	48000400 	.word	0x48000400

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <Error_Handler+0x6>

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6613      	str	r3, [r2, #96]	; 0x60
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	; 0x38
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a6a      	ldr	r2, [pc, #424]	; (8000c70 <HAL_UART_MspInit+0x1c8>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d12b      	bne.n	8000b22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aca:	4b6a      	ldr	r3, [pc, #424]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ace:	4a69      	ldr	r2, [pc, #420]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ad6:	4b67      	ldr	r3, [pc, #412]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	623b      	str	r3, [r7, #32]
 8000ae0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b64      	ldr	r3, [pc, #400]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a63      	ldr	r2, [pc, #396]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b61      	ldr	r3, [pc, #388]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
    HAL_PWREx_EnableVddIO2();
 8000afa:	f001 f9c5 	bl	8001e88 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000afe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b10:	2308      	movs	r3, #8
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4857      	ldr	r0, [pc, #348]	; (8000c78 <HAL_UART_MspInit+0x1d0>)
 8000b1c:	f000 fdd4 	bl	80016c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b20:	e0a1      	b.n	8000c66 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==UART5)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a55      	ldr	r2, [pc, #340]	; (8000c7c <HAL_UART_MspInit+0x1d4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d16e      	bne.n	8000c0a <HAL_UART_MspInit+0x162>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000b2c:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b30:	4a50      	ldr	r2, [pc, #320]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b36:	6593      	str	r3, [r2, #88]	; 0x58
 8000b38:	4b4e      	ldr	r3, [pc, #312]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	4b4b      	ldr	r3, [pc, #300]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	4a4a      	ldr	r2, [pc, #296]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b50:	4b48      	ldr	r3, [pc, #288]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5c:	4b45      	ldr	r3, [pc, #276]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b60:	4a44      	ldr	r2, [pc, #272]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b68:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b86:	2308      	movs	r3, #8
 8000b88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	483b      	ldr	r0, [pc, #236]	; (8000c80 <HAL_UART_MspInit+0x1d8>)
 8000b92:	f000 fd99 	bl	80016c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b96:	2304      	movs	r3, #4
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4834      	ldr	r0, [pc, #208]	; (8000c84 <HAL_UART_MspInit+0x1dc>)
 8000bb2:	f000 fd89 	bl	80016c8 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Channel1;
 8000bb6:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <HAL_UART_MspInit+0x1e0>)
 8000bb8:	4a34      	ldr	r2, [pc, #208]	; (8000c8c <HAL_UART_MspInit+0x1e4>)
 8000bba:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8000bbc:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <HAL_UART_MspInit+0x1e0>)
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc2:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <HAL_UART_MspInit+0x1e0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <HAL_UART_MspInit+0x1e0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <HAL_UART_MspInit+0x1e0>)
 8000bd0:	2280      	movs	r2, #128	; 0x80
 8000bd2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <HAL_UART_MspInit+0x1e0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bda:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <HAL_UART_MspInit+0x1e0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <HAL_UART_MspInit+0x1e0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000be6:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <HAL_UART_MspInit+0x1e0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8000bec:	4826      	ldr	r0, [pc, #152]	; (8000c88 <HAL_UART_MspInit+0x1e0>)
 8000bee:	f000 faf9 	bl	80011e4 <HAL_DMA_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_UART_MspInit+0x154>
      Error_Handler();
 8000bf8:	f7ff ff2e 	bl	8000a58 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <HAL_UART_MspInit+0x1e0>)
 8000c00:	679a      	str	r2, [r3, #120]	; 0x78
 8000c02:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <HAL_UART_MspInit+0x1e0>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000c08:	e02d      	b.n	8000c66 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART3)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <HAL_UART_MspInit+0x1e8>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d128      	bne.n	8000c66 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c18:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_UART_MspInit+0x1cc>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c56:	2307      	movs	r3, #7
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <HAL_UART_MspInit+0x1dc>)
 8000c62:	f000 fd31 	bl	80016c8 <HAL_GPIO_Init>
}
 8000c66:	bf00      	nop
 8000c68:	3738      	adds	r7, #56	; 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40008000 	.word	0x40008000
 8000c74:	40021000 	.word	0x40021000
 8000c78:	48001800 	.word	0x48001800
 8000c7c:	40005000 	.word	0x40005000
 8000c80:	48000800 	.word	0x48000800
 8000c84:	48000c00 	.word	0x48000c00
 8000c88:	20000638 	.word	0x20000638
 8000c8c:	40020008 	.word	0x40020008
 8000c90:	40004800 	.word	0x40004800

08000c94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cb4:	d154      	bne.n	8000d60 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <HAL_PCD_MspInit+0xd4>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a2b      	ldr	r2, [pc, #172]	; (8000d68 <HAL_PCD_MspInit+0xd4>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <HAL_PCD_MspInit+0xd4>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ce0:	230a      	movs	r3, #10
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cee:	f000 fceb 	bl	80016c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f000 fcdd 	bl	80016c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_PCD_MspInit+0xd4>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <HAL_PCD_MspInit+0xd4>)
 8000d14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_PCD_MspInit+0xd4>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_PCD_MspInit+0xd4>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d114      	bne.n	8000d5c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_PCD_MspInit+0xd4>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <HAL_PCD_MspInit+0xd4>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_PCD_MspInit+0xd4>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000d4a:	f001 f88d 	bl	8001e68 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_PCD_MspInit+0xd4>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <HAL_PCD_MspInit+0xd4>)
 8000d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d5a:	e001      	b.n	8000d60 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000d5c:	f001 f884 	bl	8001e68 <HAL_PWREx_EnableVddUSB>
}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40021000 	.word	0x40021000

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f8c0 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <DMA1_Channel1_IRQHandler+0x10>)
 8000dc6:	f000 fb30 	bl	800142a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000638 	.word	0x20000638

08000dd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <SystemInit+0x64>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dde:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <SystemInit+0x64>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <SystemInit+0x68>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <SystemInit+0x68>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <SystemInit+0x68>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <SystemInit+0x68>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <SystemInit+0x68>)
 8000e00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <SystemInit+0x68>)
 8000e0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <SystemInit+0x68>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <SystemInit+0x68>)
 8000e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <SystemInit+0x68>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SystemInit+0x64>)
 8000e26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00
 8000e3c:	40021000 	.word	0x40021000

08000e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e44:	f7ff ffc6 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e4a:	e003      	b.n	8000e54 <LoopCopyDataInit>

08000e4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e52:	3104      	adds	r1, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e54:	480a      	ldr	r0, [pc, #40]	; (8000e80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e5c:	d3f6      	bcc.n	8000e4c <CopyDataInit>
	ldr	r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e60:	e002      	b.n	8000e68 <LoopFillZerobss>

08000e62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e64:	f842 3b04 	str.w	r3, [r2], #4

08000e68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <LoopForever+0x16>)
	cmp	r2, r3
 8000e6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e6c:	d3f9      	bcc.n	8000e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f003 fe2b 	bl	8004ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e72:	f7ff fb4b 	bl	800050c <main>

08000e76 <LoopForever>:

LoopForever:
    b LoopForever
 8000e76:	e7fe      	b.n	8000e76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e78:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000e7c:	08004bb8 	.word	0x08004bb8
	ldr	r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e84:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000e88:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000e8c:	2000069c 	.word	0x2000069c

08000e90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_IRQHandler>

08000e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f95f 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 f80e 	bl	8000ec4 <HAL_InitTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d002      	beq.n	8000eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	e001      	b.n	8000eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb4:	f7ff fdd4 	bl	8000a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_InitTick+0x6c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d023      	beq.n	8000f20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_InitTick+0x70>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_InitTick+0x6c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f96b 	bl	80011ca <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10f      	bne.n	8000f1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d809      	bhi.n	8000f14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f935 	bl	8001176 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_InitTick+0x74>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e007      	b.n	8000f24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e004      	b.n	8000f24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	e001      	b.n	8000f24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000698 	.word	0x20000698

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000698 	.word	0x20000698

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff ffee 	bl	8000f64 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_Delay+0x40>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffde 	bl	8000f64 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff3e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff8e 	bl	80010b4 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5d 	bl	8001060 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff31 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e08d      	b.n	8001312 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b47      	ldr	r3, [pc, #284]	; (800131c <HAL_DMA_Init+0x138>)
 80011fe:	429a      	cmp	r2, r3
 8001200:	d80f      	bhi.n	8001222 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	4b45      	ldr	r3, [pc, #276]	; (8001320 <HAL_DMA_Init+0x13c>)
 800120a:	4413      	add	r3, r2
 800120c:	4a45      	ldr	r2, [pc, #276]	; (8001324 <HAL_DMA_Init+0x140>)
 800120e:	fba2 2303 	umull	r2, r3, r2, r3
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	009a      	lsls	r2, r3, #2
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a42      	ldr	r2, [pc, #264]	; (8001328 <HAL_DMA_Init+0x144>)
 800121e:	641a      	str	r2, [r3, #64]	; 0x40
 8001220:	e00e      	b.n	8001240 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	4b40      	ldr	r3, [pc, #256]	; (800132c <HAL_DMA_Init+0x148>)
 800122a:	4413      	add	r3, r2
 800122c:	4a3d      	ldr	r2, [pc, #244]	; (8001324 <HAL_DMA_Init+0x140>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	009a      	lsls	r2, r3, #2
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <HAL_DMA_Init+0x14c>)
 800123e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2202      	movs	r2, #2
 8001244:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800125a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f9b6 	bl	8001604 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012a0:	d102      	bne.n	80012a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012bc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d010      	beq.n	80012e8 <HAL_DMA_Init+0x104>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d80c      	bhi.n	80012e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f9d6 	bl	8001680 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	e008      	b.n	80012fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40020407 	.word	0x40020407
 8001320:	bffdfff8 	.word	0xbffdfff8
 8001324:	cccccccd 	.word	0xcccccccd
 8001328:	40020000 	.word	0x40020000
 800132c:	bffdfbf8 	.word	0xbffdfbf8
 8001330:	40020400 	.word	0x40020400

08001334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_DMA_Start_IT+0x20>
 8001350:	2302      	movs	r3, #2
 8001352:	e066      	b.n	8001422 <HAL_DMA_Start_IT+0xee>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d155      	bne.n	8001414 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2202      	movs	r2, #2
 800136c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0201 	bic.w	r2, r2, #1
 8001384:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 f8fb 	bl	8001588 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	2b00      	cmp	r3, #0
 8001398:	d008      	beq.n	80013ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 020e 	orr.w	r2, r2, #14
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	e00f      	b.n	80013cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0204 	bic.w	r2, r2, #4
 80013ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 020a 	orr.w	r2, r2, #10
 80013ca:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013e8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001400:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0201 	orr.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e005      	b.n	8001420 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800141c:	2302      	movs	r3, #2
 800141e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001420:	7dfb      	ldrb	r3, [r7, #23]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f003 031c 	and.w	r3, r3, #28
 800144a:	2204      	movs	r2, #4
 800144c:	409a      	lsls	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4013      	ands	r3, r2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d026      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x7a>
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d021      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0320 	and.w	r3, r3, #32
 800146a:	2b00      	cmp	r3, #0
 800146c:	d107      	bne.n	800147e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0204 	bic.w	r2, r2, #4
 800147c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f003 021c 	and.w	r2, r3, #28
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2104      	movs	r1, #4
 800148c:	fa01 f202 	lsl.w	r2, r1, r2
 8001490:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	2b00      	cmp	r3, #0
 8001498:	d071      	beq.n	800157e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80014a2:	e06c      	b.n	800157e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	f003 031c 	and.w	r3, r3, #28
 80014ac:	2202      	movs	r2, #2
 80014ae:	409a      	lsls	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d02e      	beq.n	8001516 <HAL_DMA_IRQHandler+0xec>
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d029      	beq.n	8001516 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10b      	bne.n	80014e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 020a 	bic.w	r2, r2, #10
 80014de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ec:	f003 021c 	and.w	r2, r3, #28
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	2102      	movs	r1, #2
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	2b00      	cmp	r3, #0
 800150a:	d038      	beq.n	800157e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001514:	e033      	b.n	800157e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f003 031c 	and.w	r3, r3, #28
 800151e:	2208      	movs	r2, #8
 8001520:	409a      	lsls	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4013      	ands	r3, r2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d02a      	beq.n	8001580 <HAL_DMA_IRQHandler+0x156>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d025      	beq.n	8001580 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 020e 	bic.w	r2, r2, #14
 8001542:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	f003 021c 	and.w	r2, r3, #28
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	2101      	movs	r1, #1
 8001552:	fa01 f202 	lsl.w	r2, r1, r2
 8001556:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001572:	2b00      	cmp	r3, #0
 8001574:	d004      	beq.n	8001580 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800157e:	bf00      	nop
 8001580:	bf00      	nop
}
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800159e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d004      	beq.n	80015b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015b0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f003 021c 	and.w	r2, r3, #28
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	2101      	movs	r1, #1
 80015c0:	fa01 f202 	lsl.w	r2, r1, r2
 80015c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b10      	cmp	r3, #16
 80015d4:	d108      	bne.n	80015e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015e6:	e007      	b.n	80015f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	60da      	str	r2, [r3, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001614:	429a      	cmp	r2, r3
 8001616:	d80a      	bhi.n	800162e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001624:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6493      	str	r3, [r2, #72]	; 0x48
 800162c:	e007      	b.n	800163e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	009a      	lsls	r2, r3, #2
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001638:	4413      	add	r3, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	3b08      	subs	r3, #8
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001648:	fba2 2303 	umull	r2, r3, r2, r3
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001654:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	2201      	movs	r2, #1
 800165e:	409a      	lsls	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	40020407 	.word	0x40020407
 8001674:	4002081c 	.word	0x4002081c
 8001678:	cccccccd 	.word	0xcccccccd
 800167c:	40020880 	.word	0x40020880

08001680 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	461a      	mov	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2201      	movs	r2, #1
 80016ae:	409a      	lsls	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	1000823f 	.word	0x1000823f
 80016c4:	40020940 	.word	0x40020940

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	e166      	b.n	80019a6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8158 	beq.w	80019a0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d00b      	beq.n	8001710 <HAL_GPIO_Init+0x48>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d007      	beq.n	8001710 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001704:	2b11      	cmp	r3, #17
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b12      	cmp	r3, #18
 800170e:	d130      	bne.n	8001772 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001746:	2201      	movs	r2, #1
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	f003 0201 	and.w	r2, r3, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0xea>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b12      	cmp	r3, #18
 80017b0:	d123      	bne.n	80017fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	08da      	lsrs	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3208      	adds	r2, #8
 80017f4:	6939      	ldr	r1, [r7, #16]
 80017f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0203 	and.w	r2, r3, #3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 80b2 	beq.w	80019a0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183c:	4b61      	ldr	r3, [pc, #388]	; (80019c4 <HAL_GPIO_Init+0x2fc>)
 800183e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001840:	4a60      	ldr	r2, [pc, #384]	; (80019c4 <HAL_GPIO_Init+0x2fc>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6613      	str	r3, [r2, #96]	; 0x60
 8001848:	4b5e      	ldr	r3, [pc, #376]	; (80019c4 <HAL_GPIO_Init+0x2fc>)
 800184a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001854:	4a5c      	ldr	r2, [pc, #368]	; (80019c8 <HAL_GPIO_Init+0x300>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800187e:	d02b      	beq.n	80018d8 <HAL_GPIO_Init+0x210>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a52      	ldr	r2, [pc, #328]	; (80019cc <HAL_GPIO_Init+0x304>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d025      	beq.n	80018d4 <HAL_GPIO_Init+0x20c>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a51      	ldr	r2, [pc, #324]	; (80019d0 <HAL_GPIO_Init+0x308>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d01f      	beq.n	80018d0 <HAL_GPIO_Init+0x208>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a50      	ldr	r2, [pc, #320]	; (80019d4 <HAL_GPIO_Init+0x30c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d019      	beq.n	80018cc <HAL_GPIO_Init+0x204>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a4f      	ldr	r2, [pc, #316]	; (80019d8 <HAL_GPIO_Init+0x310>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d013      	beq.n	80018c8 <HAL_GPIO_Init+0x200>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a4e      	ldr	r2, [pc, #312]	; (80019dc <HAL_GPIO_Init+0x314>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d00d      	beq.n	80018c4 <HAL_GPIO_Init+0x1fc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a4d      	ldr	r2, [pc, #308]	; (80019e0 <HAL_GPIO_Init+0x318>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d007      	beq.n	80018c0 <HAL_GPIO_Init+0x1f8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a4c      	ldr	r2, [pc, #304]	; (80019e4 <HAL_GPIO_Init+0x31c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d101      	bne.n	80018bc <HAL_GPIO_Init+0x1f4>
 80018b8:	2307      	movs	r3, #7
 80018ba:	e00e      	b.n	80018da <HAL_GPIO_Init+0x212>
 80018bc:	2308      	movs	r3, #8
 80018be:	e00c      	b.n	80018da <HAL_GPIO_Init+0x212>
 80018c0:	2306      	movs	r3, #6
 80018c2:	e00a      	b.n	80018da <HAL_GPIO_Init+0x212>
 80018c4:	2305      	movs	r3, #5
 80018c6:	e008      	b.n	80018da <HAL_GPIO_Init+0x212>
 80018c8:	2304      	movs	r3, #4
 80018ca:	e006      	b.n	80018da <HAL_GPIO_Init+0x212>
 80018cc:	2303      	movs	r3, #3
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x212>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x212>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x212>
 80018d8:	2300      	movs	r3, #0
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ea:	4937      	ldr	r1, [pc, #220]	; (80019c8 <HAL_GPIO_Init+0x300>)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018f8:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_GPIO_Init+0x320>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800191c:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <HAL_GPIO_Init+0x320>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001922:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <HAL_GPIO_Init+0x320>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001946:	4a28      	ldr	r2, [pc, #160]	; (80019e8 <HAL_GPIO_Init+0x320>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_GPIO_Init+0x320>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_GPIO_Init+0x320>)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_GPIO_Init+0x320>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800199a:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <HAL_GPIO_Init+0x320>)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f47f ae91 	bne.w	80016d8 <HAL_GPIO_Init+0x10>
  }
}
 80019b6:	bf00      	nop
 80019b8:	371c      	adds	r7, #28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000
 80019cc:	48000400 	.word	0x48000400
 80019d0:	48000800 	.word	0x48000800
 80019d4:	48000c00 	.word	0x48000c00
 80019d8:	48001000 	.word	0x48001000
 80019dc:	48001400 	.word	0x48001400
 80019e0:	48001800 	.word	0x48001800
 80019e4:	48001c00 	.word	0x48001c00
 80019e8:	40010400 	.word	0x40010400

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43d9      	mvns	r1, r3
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	619a      	str	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a52:	b08f      	sub	sp, #60	; 0x3c
 8001a54:	af0a      	add	r7, sp, #40	; 0x28
 8001a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e116      	b.n	8001c90 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d106      	bne.n	8001a82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff f909 	bl	8000c94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2203      	movs	r2, #3
 8001a86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 fdd3 	bl	800464c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	687e      	ldr	r6, [r7, #4]
 8001aae:	466d      	mov	r5, sp
 8001ab0:	f106 0410 	add.w	r4, r6, #16
 8001ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001abc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ac0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ac4:	1d33      	adds	r3, r6, #4
 8001ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac8:	6838      	ldr	r0, [r7, #0]
 8001aca:	f002 fd6d 	bl	80045a8 <USB_CoreInit>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0d7      	b.n	8001c90 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 fdc1 	bl	800466e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e04a      	b.n	8001b88 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	333d      	adds	r3, #61	; 0x3d
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	333c      	adds	r3, #60	; 0x3c
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	b298      	uxth	r0, r3
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	3342      	adds	r3, #66	; 0x42
 8001b2e:	4602      	mov	r2, r0
 8001b30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	333f      	adds	r3, #63	; 0x3f
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	3344      	adds	r3, #68	; 0x44
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	3348      	adds	r3, #72	; 0x48
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3350      	adds	r3, #80	; 0x50
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	3301      	adds	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d3af      	bcc.n	8001af2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	e044      	b.n	8001c22 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	1a9b      	subs	r3, r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001bc0:	7bfa      	ldrb	r2, [r7, #15]
 8001bc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	73fb      	strb	r3, [r7, #15]
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d3b5      	bcc.n	8001b98 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	687e      	ldr	r6, [r7, #4]
 8001c34:	466d      	mov	r5, sp
 8001c36:	f106 0410 	add.w	r4, r6, #16
 8001c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c46:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c4a:	1d33      	adds	r3, r6, #4
 8001c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c4e:	6838      	ldr	r0, [r7, #0]
 8001c50:	f002 fd38 	bl	80046c4 <USB_DevInit>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e014      	b.n	8001c90 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d102      	bne.n	8001c84 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f80a 	bl	8001c98 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 fec8 	bl	8004a1e <USB_DevDisconnect>

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cca:	f043 0303 	orr.w	r3, r3, #3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf0:	d102      	bne.n	8001cf8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf6:	e00b      	b.n	8001d10 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d06:	d102      	bne.n	8001d0e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0c:	e000      	b.n	8001d10 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001d0e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40007000 	.word	0x40007000

08001d20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d141      	bne.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d2e:	4b4b      	ldr	r3, [pc, #300]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d3a:	d131      	bne.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d3c:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d42:	4a46      	ldr	r2, [pc, #280]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d4c:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d54:	4a41      	ldr	r2, [pc, #260]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001d5c:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2232      	movs	r2, #50	; 0x32
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	4a3f      	ldr	r2, [pc, #252]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	0c9b      	lsrs	r3, r3, #18
 8001d6e:	3301      	adds	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d72:	e002      	b.n	8001d7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d7a:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d86:	d102      	bne.n	8001d8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f2      	bne.n	8001d74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d8e:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9a:	d158      	bne.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e057      	b.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001da0:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001da6:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001db0:	e04d      	b.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db8:	d141      	bne.n	8001e3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc6:	d131      	bne.n	8001e2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dce:	4a23      	ldr	r2, [pc, #140]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001de0:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2232      	movs	r2, #50	; 0x32
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	0c9b      	lsrs	r3, r3, #18
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dfe:	e002      	b.n	8001e06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e12:	d102      	bne.n	8001e1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f2      	bne.n	8001e00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e26:	d112      	bne.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e011      	b.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e3c:	e007      	b.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	20000000 	.word	0x20000000
 8001e64:	431bde83 	.word	0x431bde83

08001e68 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e76:	6053      	str	r3, [r2, #4]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40007000 	.word	0x40007000

08001e88 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e96:	6053      	str	r3, [r2, #4]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40007000 	.word	0x40007000

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f000 bc16 	b.w	80026e8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebc:	4ba0      	ldr	r3, [pc, #640]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec6:	4b9e      	ldr	r3, [pc, #632]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80e4 	beq.w	80020a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x4c>
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	f040 808b 	bne.w	8002002 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	f040 8087 	bne.w	8002002 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ef4:	4b92      	ldr	r3, [pc, #584]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_OscConfig+0x64>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e3ed      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1a      	ldr	r2, [r3, #32]
 8001f10:	4b8b      	ldr	r3, [pc, #556]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <HAL_RCC_OscConfig+0x7e>
 8001f1c:	4b88      	ldr	r3, [pc, #544]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f24:	e005      	b.n	8001f32 <HAL_RCC_OscConfig+0x8a>
 8001f26:	4b86      	ldr	r3, [pc, #536]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d223      	bcs.n	8001f7e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fdc8 	bl	8002ad0 <RCC_SetFlashLatencyFromMSIRange>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e3ce      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4a:	4b7d      	ldr	r3, [pc, #500]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7c      	ldr	r2, [pc, #496]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b7a      	ldr	r3, [pc, #488]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4977      	ldr	r1, [pc, #476]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f68:	4b75      	ldr	r3, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	4972      	ldr	r1, [pc, #456]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
 8001f7c:	e025      	b.n	8001fca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7e:	4b70      	ldr	r3, [pc, #448]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6f      	ldr	r2, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b6d      	ldr	r3, [pc, #436]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	496a      	ldr	r1, [pc, #424]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9c:	4b68      	ldr	r3, [pc, #416]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	4965      	ldr	r1, [pc, #404]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fd88 	bl	8002ad0 <RCC_SetFlashLatencyFromMSIRange>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e38e      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fca:	f000 fcbf 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8001fce:	4601      	mov	r1, r0
 8001fd0:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	4a5a      	ldr	r2, [pc, #360]	; (8002144 <HAL_RCC_OscConfig+0x29c>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fe6:	4a58      	ldr	r2, [pc, #352]	; (8002148 <HAL_RCC_OscConfig+0x2a0>)
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fea:	4b58      	ldr	r3, [pc, #352]	; (800214c <HAL_RCC_OscConfig+0x2a4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe ff68 	bl	8000ec4 <HAL_InitTick>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d052      	beq.n	80020a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	e372      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d032      	beq.n	8002070 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800200a:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002016:	f7fe ffa5 	bl	8000f64 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800201e:	f7fe ffa1 	bl	8000f64 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e35b      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002030:	4b43      	ldr	r3, [pc, #268]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800203c:	4b40      	ldr	r3, [pc, #256]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a3f      	ldr	r2, [pc, #252]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	493a      	ldr	r1, [pc, #232]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800205a:	4b39      	ldr	r3, [pc, #228]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	4935      	ldr	r1, [pc, #212]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
 800206e:	e01a      	b.n	80020a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002070:	4b33      	ldr	r3, [pc, #204]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a32      	ldr	r2, [pc, #200]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800207c:	f7fe ff72 	bl	8000f64 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002084:	f7fe ff6e 	bl	8000f64 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e328      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x1dc>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d073      	beq.n	800219a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_OscConfig+0x21c>
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2b0c      	cmp	r3, #12
 80020bc:	d10e      	bne.n	80020dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d10b      	bne.n	80020dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d063      	beq.n	8002198 <HAL_RCC_OscConfig+0x2f0>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d15f      	bne.n	8002198 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e305      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e4:	d106      	bne.n	80020f4 <HAL_RCC_OscConfig+0x24c>
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a15      	ldr	r2, [pc, #84]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0x288>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x270>
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0x288>
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a05      	ldr	r2, [pc, #20]	; (8002140 <HAL_RCC_OscConfig+0x298>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01b      	beq.n	8002170 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7fe ff14 	bl	8000f64 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800213e:	e010      	b.n	8002162 <HAL_RCC_OscConfig+0x2ba>
 8002140:	40021000 	.word	0x40021000
 8002144:	08004b48 	.word	0x08004b48
 8002148:	20000000 	.word	0x20000000
 800214c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7fe ff08 	bl	8000f64 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e2c2      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002162:	4baf      	ldr	r3, [pc, #700]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x2a8>
 800216e:	e014      	b.n	800219a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe fef8 	bl	8000f64 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7fe fef4 	bl	8000f64 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e2ae      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218a:	4ba5      	ldr	r3, [pc, #660]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x2d0>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d060      	beq.n	8002268 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_OscConfig+0x310>
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d119      	bne.n	80021e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d116      	bne.n	80021e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b8:	4b99      	ldr	r3, [pc, #612]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x328>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e28b      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b93      	ldr	r3, [pc, #588]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	061b      	lsls	r3, r3, #24
 80021de:	4990      	ldr	r1, [pc, #576]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e4:	e040      	b.n	8002268 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d023      	beq.n	8002236 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ee:	4b8c      	ldr	r3, [pc, #560]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a8b      	ldr	r2, [pc, #556]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7fe feb3 	bl	8000f64 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002202:	f7fe feaf 	bl	8000f64 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e269      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002214:	4b82      	ldr	r3, [pc, #520]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4b7f      	ldr	r3, [pc, #508]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	497c      	ldr	r1, [pc, #496]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
 8002234:	e018      	b.n	8002268 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002236:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a79      	ldr	r2, [pc, #484]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800223c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7fe fe8f 	bl	8000f64 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224a:	f7fe fe8b 	bl	8000f64 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e245      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800225c:	4b70      	ldr	r3, [pc, #448]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d03c      	beq.n	80022ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227c:	4b68      	ldr	r3, [pc, #416]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002282:	4a67      	ldr	r2, [pc, #412]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7fe fe6a 	bl	8000f64 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7fe fe66 	bl	8000f64 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e220      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022a6:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ef      	beq.n	8002294 <HAL_RCC_OscConfig+0x3ec>
 80022b4:	e01b      	b.n	80022ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b6:	4b5a      	ldr	r3, [pc, #360]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80022b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022bc:	4a58      	ldr	r2, [pc, #352]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7fe fe4d 	bl	8000f64 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ce:	f7fe fe49 	bl	8000f64 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e203      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e0:	4b4f      	ldr	r3, [pc, #316]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1ef      	bne.n	80022ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80a6 	beq.w	8002448 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002300:	4b47      	ldr	r3, [pc, #284]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10d      	bne.n	8002328 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	4b44      	ldr	r3, [pc, #272]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	4a43      	ldr	r2, [pc, #268]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002316:	6593      	str	r3, [r2, #88]	; 0x58
 8002318:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002324:	2301      	movs	r3, #1
 8002326:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002328:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <HAL_RCC_OscConfig+0x57c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d118      	bne.n	8002366 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002334:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <HAL_RCC_OscConfig+0x57c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a3a      	ldr	r2, [pc, #232]	; (8002424 <HAL_RCC_OscConfig+0x57c>)
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002340:	f7fe fe10 	bl	8000f64 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002348:	f7fe fe0c 	bl	8000f64 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1c6      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235a:	4b32      	ldr	r3, [pc, #200]	; (8002424 <HAL_RCC_OscConfig+0x57c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <HAL_RCC_OscConfig+0x4d8>
 800236e:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002374:	4a2a      	ldr	r2, [pc, #168]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800237e:	e024      	b.n	80023ca <HAL_RCC_OscConfig+0x522>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d110      	bne.n	80023aa <HAL_RCC_OscConfig+0x502>
 8002388:	4b25      	ldr	r3, [pc, #148]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	4a24      	ldr	r2, [pc, #144]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	4a20      	ldr	r2, [pc, #128]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a8:	e00f      	b.n	80023ca <HAL_RCC_OscConfig+0x522>
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ba:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	4a17      	ldr	r2, [pc, #92]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80023c2:	f023 0304 	bic.w	r3, r3, #4
 80023c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d2:	f7fe fdc7 	bl	8000f64 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe fdc3 	bl	8000f64 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e17b      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_OscConfig+0x578>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0ed      	beq.n	80023da <HAL_RCC_OscConfig+0x532>
 80023fe:	e01a      	b.n	8002436 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7fe fdb0 	bl	8000f64 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002406:	e00f      	b.n	8002428 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002408:	f7fe fdac 	bl	8000f64 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d906      	bls.n	8002428 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e164      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002428:	4ba8      	ldr	r3, [pc, #672]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e8      	bne.n	8002408 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002436:	7ffb      	ldrb	r3, [r7, #31]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4ba3      	ldr	r3, [pc, #652]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4aa2      	ldr	r2, [pc, #648]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 8002442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d03c      	beq.n	80024ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01c      	beq.n	8002496 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800245c:	4b9b      	ldr	r3, [pc, #620]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 800245e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002462:	4a9a      	ldr	r2, [pc, #616]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246c:	f7fe fd7a 	bl	8000f64 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002474:	f7fe fd76 	bl	8000f64 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e130      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002486:	4b91      	ldr	r3, [pc, #580]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 8002488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ef      	beq.n	8002474 <HAL_RCC_OscConfig+0x5cc>
 8002494:	e01b      	b.n	80024ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002496:	4b8d      	ldr	r3, [pc, #564]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 8002498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800249c:	4a8b      	ldr	r2, [pc, #556]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a6:	f7fe fd5d 	bl	8000f64 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ae:	f7fe fd59 	bl	8000f64 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e113      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024c0:	4b82      	ldr	r3, [pc, #520]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 80024c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1ef      	bne.n	80024ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8107 	beq.w	80026e6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	2b02      	cmp	r3, #2
 80024de:	f040 80cb 	bne.w	8002678 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024e2:	4b7a      	ldr	r3, [pc, #488]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0203 	and.w	r2, r3, #3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d12c      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	3b01      	subs	r3, #1
 8002502:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d123      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002512:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d11b      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d113      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	3b01      	subs	r3, #1
 8002536:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d109      	bne.n	8002550 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	3b01      	subs	r3, #1
 800254a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d06d      	beq.n	800262c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d068      	beq.n	8002628 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002556:	4b5d      	ldr	r3, [pc, #372]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d105      	bne.n	800256e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002562:	4b5a      	ldr	r3, [pc, #360]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0ba      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002572:	4b56      	ldr	r3, [pc, #344]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a55      	ldr	r2, [pc, #340]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 8002578:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800257c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800257e:	f7fe fcf1 	bl	8000f64 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe fced 	bl	8000f64 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0a7      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002598:	4b4c      	ldr	r3, [pc, #304]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a4:	4b49      	ldr	r3, [pc, #292]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	4b49      	ldr	r3, [pc, #292]	; (80026d0 <HAL_RCC_OscConfig+0x828>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025b4:	3a01      	subs	r2, #1
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	4311      	orrs	r1, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025be:	0212      	lsls	r2, r2, #8
 80025c0:	4311      	orrs	r1, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025c6:	0852      	lsrs	r2, r2, #1
 80025c8:	3a01      	subs	r2, #1
 80025ca:	0552      	lsls	r2, r2, #21
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025d2:	0852      	lsrs	r2, r2, #1
 80025d4:	3a01      	subs	r2, #1
 80025d6:	0652      	lsls	r2, r2, #25
 80025d8:	4311      	orrs	r1, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025de:	06d2      	lsls	r2, r2, #27
 80025e0:	430a      	orrs	r2, r1
 80025e2:	493a      	ldr	r1, [pc, #232]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025e8:	4b38      	ldr	r3, [pc, #224]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a37      	ldr	r2, [pc, #220]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 80025ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025f4:	4b35      	ldr	r3, [pc, #212]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a34      	ldr	r2, [pc, #208]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002600:	f7fe fcb0 	bl	8000f64 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe fcac 	bl	8000f64 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e066      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261a:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002626:	e05e      	b.n	80026e6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e05d      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d156      	bne.n	80026e6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002638:	4b24      	ldr	r3, [pc, #144]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a23      	ldr	r2, [pc, #140]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 800263e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002642:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002644:	4b21      	ldr	r3, [pc, #132]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a20      	ldr	r2, [pc, #128]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 800264a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002650:	f7fe fc88 	bl	8000f64 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe fc84 	bl	8000f64 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e03e      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x7b0>
 8002676:	e036      	b.n	80026e6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2b0c      	cmp	r3, #12
 800267c:	d031      	beq.n	80026e2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267e:	4b13      	ldr	r3, [pc, #76]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 8002684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002688:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d105      	bne.n	80026a2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 800269c:	f023 0303 	bic.w	r3, r3, #3
 80026a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	4a09      	ldr	r2, [pc, #36]	; (80026cc <HAL_RCC_OscConfig+0x824>)
 80026a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7fe fc57 	bl	8000f64 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b8:	e00c      	b.n	80026d4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ba:	f7fe fc53 	bl	8000f64 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d905      	bls.n	80026d4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e00d      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
 80026cc:	40021000 	.word	0x40021000
 80026d0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_OscConfig+0x848>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ec      	bne.n	80026ba <HAL_RCC_OscConfig+0x812>
 80026e0:	e001      	b.n	80026e6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e10f      	b.n	800292c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800270c:	4b89      	ldr	r3, [pc, #548]	; (8002934 <HAL_RCC_ClockConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d910      	bls.n	800273c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b86      	ldr	r3, [pc, #536]	; (8002934 <HAL_RCC_ClockConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 020f 	bic.w	r2, r3, #15
 8002722:	4984      	ldr	r1, [pc, #528]	; (8002934 <HAL_RCC_ClockConfig+0x240>)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b82      	ldr	r3, [pc, #520]	; (8002934 <HAL_RCC_ClockConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0f7      	b.n	800292c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 8089 	beq.w	800285c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d133      	bne.n	80027ba <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002752:	4b79      	ldr	r3, [pc, #484]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e0e4      	b.n	800292c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002762:	f000 fa0f 	bl	8002b84 <RCC_GetSysClockFreqFromPLLSource>
 8002766:	4602      	mov	r2, r0
 8002768:	4b74      	ldr	r3, [pc, #464]	; (800293c <HAL_RCC_ClockConfig+0x248>)
 800276a:	429a      	cmp	r2, r3
 800276c:	d955      	bls.n	800281a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800276e:	4b72      	ldr	r3, [pc, #456]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800277a:	4b6f      	ldr	r3, [pc, #444]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002782:	4a6d      	ldr	r2, [pc, #436]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002788:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	e044      	b.n	800281a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d03e      	beq.n	800281a <HAL_RCC_ClockConfig+0x126>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d13a      	bne.n	800281a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027a4:	4b64      	ldr	r3, [pc, #400]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ac:	4a62      	ldr	r2, [pc, #392]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 80027ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	e02f      	b.n	800281a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c2:	4b5d      	ldr	r3, [pc, #372]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d115      	bne.n	80027fa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0ac      	b.n	800292c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027da:	4b57      	ldr	r3, [pc, #348]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0a0      	b.n	800292c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ea:	4b53      	ldr	r3, [pc, #332]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e098      	b.n	800292c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80027fa:	f000 f8a7 	bl	800294c <HAL_RCC_GetSysClockFreq>
 80027fe:	4602      	mov	r2, r0
 8002800:	4b4e      	ldr	r3, [pc, #312]	; (800293c <HAL_RCC_ClockConfig+0x248>)
 8002802:	429a      	cmp	r2, r3
 8002804:	d909      	bls.n	800281a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002806:	4b4c      	ldr	r3, [pc, #304]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800280e:	4a4a      	ldr	r2, [pc, #296]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002814:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800281a:	4b47      	ldr	r3, [pc, #284]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f023 0203 	bic.w	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4944      	ldr	r1, [pc, #272]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002828:	4313      	orrs	r3, r2
 800282a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282c:	f7fe fb9a 	bl	8000f64 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002832:	e00a      	b.n	800284a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002834:	f7fe fb96 	bl	8000f64 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e070      	b.n	800292c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284a:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 020c 	and.w	r2, r3, #12
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	429a      	cmp	r2, r3
 800285a:	d1eb      	bne.n	8002834 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4b33      	ldr	r3, [pc, #204]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4930      	ldr	r1, [pc, #192]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
 800287a:	e008      	b.n	800288e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b80      	cmp	r3, #128	; 0x80
 8002880:	d105      	bne.n	800288e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	4a2c      	ldr	r2, [pc, #176]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002888:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800288c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800288e:	4b29      	ldr	r3, [pc, #164]	; (8002934 <HAL_RCC_ClockConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d210      	bcs.n	80028be <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289c:	4b25      	ldr	r3, [pc, #148]	; (8002934 <HAL_RCC_ClockConfig+0x240>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 020f 	bic.w	r2, r3, #15
 80028a4:	4923      	ldr	r1, [pc, #140]	; (8002934 <HAL_RCC_ClockConfig+0x240>)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ac:	4b21      	ldr	r3, [pc, #132]	; (8002934 <HAL_RCC_ClockConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e036      	b.n	800292c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	4918      	ldr	r1, [pc, #96]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d009      	beq.n	80028fc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4910      	ldr	r1, [pc, #64]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028fc:	f000 f826 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8002900:	4601      	mov	r1, r0
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <HAL_RCC_ClockConfig+0x244>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <HAL_RCC_ClockConfig+0x24c>)
 800290e:	5cd3      	ldrb	r3, [r2, r3]
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	fa21 f303 	lsr.w	r3, r1, r3
 8002918:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <HAL_RCC_ClockConfig+0x250>)
 800291a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_RCC_ClockConfig+0x254>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7fe facf 	bl	8000ec4 <HAL_InitTick>
 8002926:	4603      	mov	r3, r0
 8002928:	73fb      	strb	r3, [r7, #15]

  return status;
 800292a:	7bfb      	ldrb	r3, [r7, #15]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40022000 	.word	0x40022000
 8002938:	40021000 	.word	0x40021000
 800293c:	04c4b400 	.word	0x04c4b400
 8002940:	08004b48 	.word	0x08004b48
 8002944:	20000000 	.word	0x20000000
 8002948:	20000004 	.word	0x20000004

0800294c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800295a:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x104>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002964:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x34>
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	2b0c      	cmp	r3, #12
 8002978:	d121      	bne.n	80029be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d11e      	bne.n	80029be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002980:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800298c:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x104>)
 800298e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	e005      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800299c:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x104>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029a8:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x108>)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10d      	bne.n	80029d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d102      	bne.n	80029ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029c4:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029c6:	61bb      	str	r3, [r7, #24]
 80029c8:	e004      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x110>)
 80029d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d133      	bne.n	8002a42 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x104>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d002      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0xa4>
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0xaa>
 80029ee:	e005      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029f2:	617b      	str	r3, [r7, #20]
      break;
 80029f4:	e005      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029f6:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x110>)
 80029f8:	617b      	str	r3, [r7, #20]
      break;
 80029fa:	e002      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	617b      	str	r3, [r7, #20]
      break;
 8002a00:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a02:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	fb02 f203 	mul.w	r2, r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0e5b      	lsrs	r3, r3, #25
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a42:	69bb      	ldr	r3, [r7, #24]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3724      	adds	r7, #36	; 0x24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	40021000 	.word	0x40021000
 8002a54:	08004b60 	.word	0x08004b60
 8002a58:	00f42400 	.word	0x00f42400
 8002a5c:	007a1200 	.word	0x007a1200

08002a60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000000 	.word	0x20000000

08002a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a7c:	f7ff fff0 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002a80:	4601      	mov	r1, r0
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a8e:	5cd3      	ldrb	r3, [r2, r3]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	08004b58 	.word	0x08004b58

08002aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002aa8:	f7ff ffda 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002aac:	4601      	mov	r1, r0
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	0adb      	lsrs	r3, r3, #11
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aba:	5cd3      	ldrb	r3, [r2, r3]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	08004b58 	.word	0x08004b58

08002ad0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ad8:	2300      	movs	r3, #0
 8002ada:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002adc:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ae8:	f7ff f8fa 	bl	8001ce0 <HAL_PWREx_GetVoltageRange>
 8002aec:	6178      	str	r0, [r7, #20]
 8002aee:	e014      	b.n	8002b1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002af0:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afa:	6593      	str	r3, [r2, #88]	; 0x58
 8002afc:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b08:	f7ff f8ea 	bl	8001ce0 <HAL_PWREx_GetVoltageRange>
 8002b0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b12:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b20:	d10b      	bne.n	8002b3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d913      	bls.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2ba0      	cmp	r3, #160	; 0xa0
 8002b2c:	d902      	bls.n	8002b34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b2e:	2302      	movs	r3, #2
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	e00d      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b34:	2301      	movs	r3, #1
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	e00a      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8002b3e:	d902      	bls.n	8002b46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002b40:	2302      	movs	r3, #2
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	e004      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b70      	cmp	r3, #112	; 0x70
 8002b4a:	d101      	bne.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 020f 	bic.w	r2, r3, #15
 8002b58:	4909      	ldr	r1, [pc, #36]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b60:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d001      	beq.n	8002b72 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40022000 	.word	0x40022000

08002b84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d118      	bne.n	8002bcc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b9a:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d107      	bne.n	8002bb6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ba6:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e005      	b.n	8002bc2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bc2:	4a21      	ldr	r2, [pc, #132]	; (8002c48 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bca:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d002      	beq.n	8002be2 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d003      	beq.n	8002be8 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002be0:	e005      	b.n	8002bee <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002be2:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002be4:	613b      	str	r3, [r7, #16]
    break;
 8002be6:	e005      	b.n	8002bf4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002bea:	613b      	str	r3, [r7, #16]
    break;
 8002bec:	e002      	b.n	8002bf4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	613b      	str	r3, [r7, #16]
    break;
 8002bf2:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	3301      	adds	r3, #1
 8002c00:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	fb02 f203 	mul.w	r2, r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	0e5b      	lsrs	r3, r3, #25
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	3301      	adds	r3, #1
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002c34:	683b      	ldr	r3, [r7, #0]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	08004b60 	.word	0x08004b60
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	007a1200 	.word	0x007a1200

08002c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c60:	2300      	movs	r3, #0
 8002c62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d03d      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c74:	2b40      	cmp	r3, #64	; 0x40
 8002c76:	d00b      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d804      	bhi.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00e      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d015      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c84:	e01d      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002c86:	2b60      	cmp	r3, #96	; 0x60
 8002c88:	d01e      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002c8a:	2b80      	cmp	r3, #128	; 0x80
 8002c8c:	d01c      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002c8e:	e018      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c90:	4b86      	ldr	r3, [pc, #536]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a85      	ldr	r2, [pc, #532]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c9c:	e015      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fafd 	bl	80032a4 <RCCEx_PLLSAI1_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cae:	e00c      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3320      	adds	r3, #32
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fbe4 	bl	8003484 <RCCEx_PLLSAI2_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cc0:	e003      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	74fb      	strb	r3, [r7, #19]
      break;
 8002cc6:	e000      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8002cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cca:	7cfb      	ldrb	r3, [r7, #19]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cd0:	4b76      	ldr	r3, [pc, #472]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cd6:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cde:	4973      	ldr	r1, [pc, #460]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002ce6:	e001      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce8:	7cfb      	ldrb	r3, [r7, #19]
 8002cea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d042      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d00:	d00f      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d06:	d805      	bhi.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d011      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d10:	d017      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002d12:	e01f      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d18:	d01f      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1e:	d01c      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d20:	e018      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d22:	4b62      	ldr	r3, [pc, #392]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	4a61      	ldr	r2, [pc, #388]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d2e:	e015      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3304      	adds	r3, #4
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fab4 	bl	80032a4 <RCCEx_PLLSAI1_Config>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d40:	e00c      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3320      	adds	r3, #32
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fb9b 	bl	8003484 <RCCEx_PLLSAI2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d52:	e003      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	74fb      	strb	r3, [r7, #19]
      break;
 8002d58:	e000      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8002d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10b      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d62:	4b52      	ldr	r3, [pc, #328]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	494e      	ldr	r1, [pc, #312]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002d78:	e001      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7a:	7cfb      	ldrb	r3, [r7, #19]
 8002d7c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 809f 	beq.w	8002eca <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d90:	4b46      	ldr	r3, [pc, #280]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002da0:	2300      	movs	r3, #0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	4b41      	ldr	r3, [pc, #260]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	4a40      	ldr	r2, [pc, #256]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db0:	6593      	str	r3, [r2, #88]	; 0x58
 8002db2:	4b3e      	ldr	r3, [pc, #248]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3a      	ldr	r2, [pc, #232]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dce:	f7fe f8c9 	bl	8000f64 <HAL_GetTick>
 8002dd2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dd4:	e009      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd6:	f7fe f8c5 	bl	8000f64 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d902      	bls.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	74fb      	strb	r3, [r7, #19]
        break;
 8002de8:	e005      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dea:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0ef      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8002df6:	7cfb      	ldrb	r3, [r7, #19]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d15b      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01f      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d019      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e1a:	4b24      	ldr	r3, [pc, #144]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e26:	4b21      	ldr	r3, [pc, #132]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	4a1f      	ldr	r2, [pc, #124]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3c:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e46:	4a19      	ldr	r2, [pc, #100]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d016      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe f884 	bl	8000f64 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7fe f880 	bl	8000f64 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d902      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	74fb      	strb	r3, [r7, #19]
            break;
 8002e76:	e006      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0ec      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8002e86:	7cfb      	ldrb	r3, [r7, #19]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	4903      	ldr	r1, [pc, #12]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ea6:	7cfb      	ldrb	r3, [r7, #19]
 8002ea8:	74bb      	strb	r3, [r7, #18]
 8002eaa:	e005      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb8:	7c7b      	ldrb	r3, [r7, #17]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebe:	4ba0      	ldr	r3, [pc, #640]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	4a9f      	ldr	r2, [pc, #636]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ed6:	4b9a      	ldr	r3, [pc, #616]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	f023 0203 	bic.w	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee4:	4996      	ldr	r1, [pc, #600]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ef8:	4b91      	ldr	r3, [pc, #580]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	f023 020c 	bic.w	r2, r3, #12
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	498e      	ldr	r1, [pc, #568]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f1a:	4b89      	ldr	r3, [pc, #548]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	4985      	ldr	r1, [pc, #532]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f3c:	4b80      	ldr	r3, [pc, #512]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4a:	497d      	ldr	r1, [pc, #500]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f5e:	4b78      	ldr	r3, [pc, #480]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6c:	4974      	ldr	r1, [pc, #464]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f80:	4b6f      	ldr	r3, [pc, #444]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8e:	496c      	ldr	r1, [pc, #432]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fa2:	4b67      	ldr	r3, [pc, #412]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb0:	4963      	ldr	r1, [pc, #396]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fc4:	4b5e      	ldr	r3, [pc, #376]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fd2:	495b      	ldr	r1, [pc, #364]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe6:	4b56      	ldr	r3, [pc, #344]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff4:	4952      	ldr	r1, [pc, #328]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003008:	4b4d      	ldr	r3, [pc, #308]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	494a      	ldr	r1, [pc, #296]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800302a:	4b45      	ldr	r3, [pc, #276]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	4941      	ldr	r1, [pc, #260]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800304c:	4b3c      	ldr	r3, [pc, #240]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800305a:	4939      	ldr	r1, [pc, #228]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d028      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800306e:	4b34      	ldr	r3, [pc, #208]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307c:	4930      	ldr	r1, [pc, #192]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800308c:	d106      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800308e:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	4a2b      	ldr	r2, [pc, #172]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003098:	60d3      	str	r3, [r2, #12]
 800309a:	e011      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 f8f9 	bl	80032a4 <RCCEx_PLLSAI1_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d04d      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030d4:	d108      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80030d6:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030dc:	4a18      	ldr	r2, [pc, #96]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80030e6:	e012      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80030e8:	4b15      	ldr	r3, [pc, #84]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ee:	4a14      	ldr	r2, [pc, #80]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030f4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003106:	490e      	ldr	r1, [pc, #56]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003116:	d106      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003118:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a08      	ldr	r2, [pc, #32]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003122:	60d3      	str	r3, [r2, #12]
 8003124:	e020      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800312a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800312e:	d109      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a02      	ldr	r2, [pc, #8]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313a:	60d3      	str	r3, [r2, #12]
 800313c:	e014      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003148:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800314c:	d10c      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3304      	adds	r3, #4
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f8a5 	bl	80032a4 <RCCEx_PLLSAI1_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d028      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003174:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003182:	4947      	ldr	r1, [pc, #284]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800318e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003192:	d106      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003194:	4b42      	ldr	r3, [pc, #264]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a41      	ldr	r2, [pc, #260]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800319a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800319e:	60d3      	str	r3, [r2, #12]
 80031a0:	e011      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3304      	adds	r3, #4
 80031b0:	2101      	movs	r1, #1
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 f876 	bl	80032a4 <RCCEx_PLLSAI1_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80031c2:	7cfb      	ldrb	r3, [r7, #19]
 80031c4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d01e      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031d2:	4b33      	ldr	r3, [pc, #204]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031e2:	492f      	ldr	r1, [pc, #188]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031f4:	d10c      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2102      	movs	r1, #2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f851 	bl	80032a4 <RCCEx_PLLSAI1_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003206:	7cfb      	ldrb	r3, [r7, #19]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00b      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800321e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003222:	f023 0204 	bic.w	r2, r3, #4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322c:	491c      	ldr	r1, [pc, #112]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00b      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003240:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003242:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003246:	f023 0218 	bic.w	r2, r3, #24
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	4913      	ldr	r1, [pc, #76]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d017      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800326a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003274:	490a      	ldr	r1, [pc, #40]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003282:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003286:	d105      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800328e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003292:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003294:	7cbb      	ldrb	r3, [r7, #18]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000

080032a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032b2:	4b70      	ldr	r3, [pc, #448]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00e      	beq.n	80032dc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032be:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f003 0203 	and.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d103      	bne.n	80032d6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
       ||
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d13f      	bne.n	8003356 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	73fb      	strb	r3, [r7, #15]
 80032da:	e03c      	b.n	8003356 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d00c      	beq.n	80032fe <RCCEx_PLLSAI1_Config+0x5a>
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d013      	beq.n	8003310 <RCCEx_PLLSAI1_Config+0x6c>
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d120      	bne.n	800332e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032ec:	4b61      	ldr	r3, [pc, #388]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d11d      	bne.n	8003334 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032fc:	e01a      	b.n	8003334 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032fe:	4b5d      	ldr	r3, [pc, #372]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	2b00      	cmp	r3, #0
 8003308:	d116      	bne.n	8003338 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800330e:	e013      	b.n	8003338 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003310:	4b58      	ldr	r3, [pc, #352]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10f      	bne.n	800333c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800331c:	4b55      	ldr	r3, [pc, #340]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800332c:	e006      	b.n	800333c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
      break;
 8003332:	e004      	b.n	800333e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003334:	bf00      	nop
 8003336:	e002      	b.n	800333e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003338:	bf00      	nop
 800333a:	e000      	b.n	800333e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800333c:	bf00      	nop
    }

    if(status == HAL_OK)
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d108      	bne.n	8003356 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003344:	4b4b      	ldr	r3, [pc, #300]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f023 0203 	bic.w	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4948      	ldr	r1, [pc, #288]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003352:	4313      	orrs	r3, r2
 8003354:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f040 8086 	bne.w	800346a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800335e:	4b45      	ldr	r3, [pc, #276]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a44      	ldr	r2, [pc, #272]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003364:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336a:	f7fd fdfb 	bl	8000f64 <HAL_GetTick>
 800336e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003370:	e009      	b.n	8003386 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003372:	f7fd fdf7 	bl	8000f64 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d902      	bls.n	8003386 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	73fb      	strb	r3, [r7, #15]
        break;
 8003384:	e005      	b.n	8003392 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003386:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1ef      	bne.n	8003372 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d168      	bne.n	800346a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d113      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800339e:	4b35      	ldr	r3, [pc, #212]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	4b35      	ldr	r3, [pc, #212]	; (8003478 <RCCEx_PLLSAI1_Config+0x1d4>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	0211      	lsls	r1, r2, #8
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	68d2      	ldr	r2, [r2, #12]
 80033b0:	06d2      	lsls	r2, r2, #27
 80033b2:	4311      	orrs	r1, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6852      	ldr	r2, [r2, #4]
 80033b8:	3a01      	subs	r2, #1
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	430a      	orrs	r2, r1
 80033be:	492d      	ldr	r1, [pc, #180]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	610b      	str	r3, [r1, #16]
 80033c4:	e02d      	b.n	8003422 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d115      	bne.n	80033f8 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033cc:	4b29      	ldr	r3, [pc, #164]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <RCCEx_PLLSAI1_Config+0x1d8>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6892      	ldr	r2, [r2, #8]
 80033d8:	0211      	lsls	r1, r2, #8
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6912      	ldr	r2, [r2, #16]
 80033de:	0852      	lsrs	r2, r2, #1
 80033e0:	3a01      	subs	r2, #1
 80033e2:	0552      	lsls	r2, r2, #21
 80033e4:	4311      	orrs	r1, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6852      	ldr	r2, [r2, #4]
 80033ea:	3a01      	subs	r2, #1
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	430a      	orrs	r2, r1
 80033f0:	4920      	ldr	r1, [pc, #128]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	610b      	str	r3, [r1, #16]
 80033f6:	e014      	b.n	8003422 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033f8:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	4b20      	ldr	r3, [pc, #128]	; (8003480 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033fe:	4013      	ands	r3, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6892      	ldr	r2, [r2, #8]
 8003404:	0211      	lsls	r1, r2, #8
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6952      	ldr	r2, [r2, #20]
 800340a:	0852      	lsrs	r2, r2, #1
 800340c:	3a01      	subs	r2, #1
 800340e:	0652      	lsls	r2, r2, #25
 8003410:	4311      	orrs	r1, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6852      	ldr	r2, [r2, #4]
 8003416:	3a01      	subs	r2, #1
 8003418:	0112      	lsls	r2, r2, #4
 800341a:	430a      	orrs	r2, r1
 800341c:	4915      	ldr	r1, [pc, #84]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 800341e:	4313      	orrs	r3, r2
 8003420:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003422:	4b14      	ldr	r3, [pc, #80]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a13      	ldr	r2, [pc, #76]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003428:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800342c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fd fd99 	bl	8000f64 <HAL_GetTick>
 8003432:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003434:	e009      	b.n	800344a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003436:	f7fd fd95 	bl	8000f64 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d902      	bls.n	800344a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	73fb      	strb	r3, [r7, #15]
          break;
 8003448:	e005      	b.n	8003456 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0ef      	beq.n	8003436 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	4903      	ldr	r1, [pc, #12]	; (8003474 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003466:	4313      	orrs	r3, r2
 8003468:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800346a:	7bfb      	ldrb	r3, [r7, #15]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000
 8003478:	07ff800f 	.word	0x07ff800f
 800347c:	ff9f800f 	.word	0xff9f800f
 8003480:	f9ff800f 	.word	0xf9ff800f

08003484 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003492:	4b70      	ldr	r3, [pc, #448]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00e      	beq.n	80034bc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800349e:	4b6d      	ldr	r3, [pc, #436]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0203 	and.w	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d103      	bne.n	80034b6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
       ||
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d13f      	bne.n	8003536 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	73fb      	strb	r3, [r7, #15]
 80034ba:	e03c      	b.n	8003536 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d00c      	beq.n	80034de <RCCEx_PLLSAI2_Config+0x5a>
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d013      	beq.n	80034f0 <RCCEx_PLLSAI2_Config+0x6c>
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d120      	bne.n	800350e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034cc:	4b61      	ldr	r3, [pc, #388]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d11d      	bne.n	8003514 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034dc:	e01a      	b.n	8003514 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034de:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d116      	bne.n	8003518 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ee:	e013      	b.n	8003518 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034f0:	4b58      	ldr	r3, [pc, #352]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10f      	bne.n	800351c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034fc:	4b55      	ldr	r3, [pc, #340]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800350c:	e006      	b.n	800351c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
      break;
 8003512:	e004      	b.n	800351e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003514:	bf00      	nop
 8003516:	e002      	b.n	800351e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003518:	bf00      	nop
 800351a:	e000      	b.n	800351e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800351c:	bf00      	nop
    }

    if(status == HAL_OK)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d108      	bne.n	8003536 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003524:	4b4b      	ldr	r3, [pc, #300]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f023 0203 	bic.w	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4948      	ldr	r1, [pc, #288]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003532:	4313      	orrs	r3, r2
 8003534:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b00      	cmp	r3, #0
 800353a:	f040 8086 	bne.w	800364a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800353e:	4b45      	ldr	r3, [pc, #276]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a44      	ldr	r2, [pc, #272]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354a:	f7fd fd0b 	bl	8000f64 <HAL_GetTick>
 800354e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003550:	e009      	b.n	8003566 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003552:	f7fd fd07 	bl	8000f64 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d902      	bls.n	8003566 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	73fb      	strb	r3, [r7, #15]
        break;
 8003564:	e005      	b.n	8003572 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003566:	4b3b      	ldr	r3, [pc, #236]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1ef      	bne.n	8003552 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d168      	bne.n	800364a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d113      	bne.n	80035a6 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800357e:	4b35      	ldr	r3, [pc, #212]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	4b35      	ldr	r3, [pc, #212]	; (8003658 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003584:	4013      	ands	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6892      	ldr	r2, [r2, #8]
 800358a:	0211      	lsls	r1, r2, #8
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68d2      	ldr	r2, [r2, #12]
 8003590:	06d2      	lsls	r2, r2, #27
 8003592:	4311      	orrs	r1, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6852      	ldr	r2, [r2, #4]
 8003598:	3a01      	subs	r2, #1
 800359a:	0112      	lsls	r2, r2, #4
 800359c:	430a      	orrs	r2, r1
 800359e:	492d      	ldr	r1, [pc, #180]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	614b      	str	r3, [r1, #20]
 80035a4:	e02d      	b.n	8003602 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d115      	bne.n	80035d8 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035ac:	4b29      	ldr	r3, [pc, #164]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	4b2a      	ldr	r3, [pc, #168]	; (800365c <RCCEx_PLLSAI2_Config+0x1d8>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6892      	ldr	r2, [r2, #8]
 80035b8:	0211      	lsls	r1, r2, #8
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6912      	ldr	r2, [r2, #16]
 80035be:	0852      	lsrs	r2, r2, #1
 80035c0:	3a01      	subs	r2, #1
 80035c2:	0552      	lsls	r2, r2, #21
 80035c4:	4311      	orrs	r1, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6852      	ldr	r2, [r2, #4]
 80035ca:	3a01      	subs	r2, #1
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	430a      	orrs	r2, r1
 80035d0:	4920      	ldr	r1, [pc, #128]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	614b      	str	r3, [r1, #20]
 80035d6:	e014      	b.n	8003602 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035d8:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	4b20      	ldr	r3, [pc, #128]	; (8003660 <RCCEx_PLLSAI2_Config+0x1dc>)
 80035de:	4013      	ands	r3, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6892      	ldr	r2, [r2, #8]
 80035e4:	0211      	lsls	r1, r2, #8
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6952      	ldr	r2, [r2, #20]
 80035ea:	0852      	lsrs	r2, r2, #1
 80035ec:	3a01      	subs	r2, #1
 80035ee:	0652      	lsls	r2, r2, #25
 80035f0:	4311      	orrs	r1, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6852      	ldr	r2, [r2, #4]
 80035f6:	3a01      	subs	r2, #1
 80035f8:	0112      	lsls	r2, r2, #4
 80035fa:	430a      	orrs	r2, r1
 80035fc:	4915      	ldr	r1, [pc, #84]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a13      	ldr	r2, [pc, #76]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360e:	f7fd fca9 	bl	8000f64 <HAL_GetTick>
 8003612:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003614:	e009      	b.n	800362a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003616:	f7fd fca5 	bl	8000f64 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d902      	bls.n	800362a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	73fb      	strb	r3, [r7, #15]
          break;
 8003628:	e005      	b.n	8003636 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0ef      	beq.n	8003616 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	4903      	ldr	r1, [pc, #12]	; (8003654 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003646:	4313      	orrs	r3, r2
 8003648:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000
 8003658:	07ff800f 	.word	0x07ff800f
 800365c:	ff9f800f 	.word	0xff9f800f
 8003660:	f9ff800f 	.word	0xf9ff800f

08003664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e042      	b.n	80036fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fd fa0d 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2224      	movs	r2, #36	; 0x24
 8003692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0201 	bic.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f960 	bl	800396c <UART_SetConfig>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e022      	b.n	80036fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fc26 	bl	8003f10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fcad 	bl	8004054 <UART_CheckIdleState>
 80036fa:	4603      	mov	r3, r0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800371a:	2b20      	cmp	r3, #32
 800371c:	f040 8084 	bne.w	8003828 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_UART_Transmit+0x28>
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e07c      	b.n	800382a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_UART_Transmit+0x3a>
 800373a:	2302      	movs	r3, #2
 800373c:	e075      	b.n	800382a <HAL_UART_Transmit+0x126>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2221      	movs	r2, #33	; 0x21
 8003752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003756:	f7fd fc05 	bl	8000f64 <HAL_GetTick>
 800375a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	88fa      	ldrh	r2, [r7, #6]
 8003760:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003774:	d108      	bne.n	8003788 <HAL_UART_Transmit+0x84>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	e003      	b.n	8003790 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003798:	e02d      	b.n	80037f6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2200      	movs	r2, #0
 80037a2:	2180      	movs	r1, #128	; 0x80
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fc9d 	bl	80040e4 <UART_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e03a      	b.n	800382a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10b      	bne.n	80037d2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	881a      	ldrh	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037c6:	b292      	uxth	r2, r2
 80037c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	3302      	adds	r3, #2
 80037ce:	61bb      	str	r3, [r7, #24]
 80037d0:	e008      	b.n	80037e4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	781a      	ldrb	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	b292      	uxth	r2, r2
 80037dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3301      	adds	r3, #1
 80037e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1cb      	bne.n	800379a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2200      	movs	r2, #0
 800380a:	2140      	movs	r1, #64	; 0x40
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fc69 	bl	80040e4 <UART_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e006      	b.n	800382a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	e000      	b.n	800382a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003828:	2302      	movs	r3, #2
  }
}
 800382a:	4618      	mov	r0, r3
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	4613      	mov	r3, r2
 8003840:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003848:	2b20      	cmp	r3, #32
 800384a:	d170      	bne.n	800392e <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_UART_Receive_DMA+0x24>
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e069      	b.n	8003930 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_UART_Receive_DMA+0x36>
 8003866:	2302      	movs	r3, #2
 8003868:	e062      	b.n	8003930 <HAL_UART_Receive_DMA+0xfc>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2222      	movs	r2, #34	; 0x22
 800388c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02c      	beq.n	80038f2 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800389c:	4a26      	ldr	r2, [pc, #152]	; (8003938 <HAL_UART_Receive_DMA+0x104>)
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038a4:	4a25      	ldr	r2, [pc, #148]	; (800393c <HAL_UART_Receive_DMA+0x108>)
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ac:	4a24      	ldr	r2, [pc, #144]	; (8003940 <HAL_UART_Receive_DMA+0x10c>)
 80038ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b4:	2200      	movs	r2, #0
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3324      	adds	r3, #36	; 0x24
 80038c2:	4619      	mov	r1, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	461a      	mov	r2, r3
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	f7fd fd32 	bl	8001334 <HAL_DMA_Start_IT>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00d      	beq.n	80038f2 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2210      	movs	r2, #16
 80038da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e01e      	b.n	8003930 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003908:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0201 	orr.w	r2, r2, #1
 8003918:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003928:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	08004267 	.word	0x08004267
 800393c:	080042d1 	.word	0x080042d1
 8003940:	080042ed 	.word	0x080042ed

08003944 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800396c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003970:	b088      	sub	sp, #32
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	4313      	orrs	r3, r2
 8003990:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	4313      	orrs	r3, r2
 800399a:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4bb1      	ldr	r3, [pc, #708]	; (8003c68 <UART_SetConfig+0x2fc>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	69f9      	ldr	r1, [r7, #28]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4aa6      	ldr	r2, [pc, #664]	; (8003c6c <UART_SetConfig+0x300>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80039ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	69f9      	ldr	r1, [r7, #28]
 80039f4:	430b      	orrs	r3, r1
 80039f6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	f023 010f 	bic.w	r1, r3, #15
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a97      	ldr	r2, [pc, #604]	; (8003c70 <UART_SetConfig+0x304>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d121      	bne.n	8003a5c <UART_SetConfig+0xf0>
 8003a18:	4b96      	ldr	r3, [pc, #600]	; (8003c74 <UART_SetConfig+0x308>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d816      	bhi.n	8003a54 <UART_SetConfig+0xe8>
 8003a26:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <UART_SetConfig+0xc0>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a49 	.word	0x08003a49
 8003a34:	08003a43 	.word	0x08003a43
 8003a38:	08003a4f 	.word	0x08003a4f
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	76fb      	strb	r3, [r7, #27]
 8003a40:	e0e8      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003a42:	2302      	movs	r3, #2
 8003a44:	76fb      	strb	r3, [r7, #27]
 8003a46:	e0e5      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	76fb      	strb	r3, [r7, #27]
 8003a4c:	e0e2      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003a4e:	2308      	movs	r3, #8
 8003a50:	76fb      	strb	r3, [r7, #27]
 8003a52:	e0df      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003a54:	2310      	movs	r3, #16
 8003a56:	76fb      	strb	r3, [r7, #27]
 8003a58:	bf00      	nop
 8003a5a:	e0db      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a85      	ldr	r2, [pc, #532]	; (8003c78 <UART_SetConfig+0x30c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d134      	bne.n	8003ad0 <UART_SetConfig+0x164>
 8003a66:	4b83      	ldr	r3, [pc, #524]	; (8003c74 <UART_SetConfig+0x308>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6c:	f003 030c 	and.w	r3, r3, #12
 8003a70:	2b0c      	cmp	r3, #12
 8003a72:	d829      	bhi.n	8003ac8 <UART_SetConfig+0x15c>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <UART_SetConfig+0x110>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003ab1 	.word	0x08003ab1
 8003a80:	08003ac9 	.word	0x08003ac9
 8003a84:	08003ac9 	.word	0x08003ac9
 8003a88:	08003ac9 	.word	0x08003ac9
 8003a8c:	08003abd 	.word	0x08003abd
 8003a90:	08003ac9 	.word	0x08003ac9
 8003a94:	08003ac9 	.word	0x08003ac9
 8003a98:	08003ac9 	.word	0x08003ac9
 8003a9c:	08003ab7 	.word	0x08003ab7
 8003aa0:	08003ac9 	.word	0x08003ac9
 8003aa4:	08003ac9 	.word	0x08003ac9
 8003aa8:	08003ac9 	.word	0x08003ac9
 8003aac:	08003ac3 	.word	0x08003ac3
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	76fb      	strb	r3, [r7, #27]
 8003ab4:	e0ae      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	76fb      	strb	r3, [r7, #27]
 8003aba:	e0ab      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003abc:	2304      	movs	r3, #4
 8003abe:	76fb      	strb	r3, [r7, #27]
 8003ac0:	e0a8      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	76fb      	strb	r3, [r7, #27]
 8003ac6:	e0a5      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	76fb      	strb	r3, [r7, #27]
 8003acc:	bf00      	nop
 8003ace:	e0a1      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a69      	ldr	r2, [pc, #420]	; (8003c7c <UART_SetConfig+0x310>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d120      	bne.n	8003b1c <UART_SetConfig+0x1b0>
 8003ada:	4b66      	ldr	r3, [pc, #408]	; (8003c74 <UART_SetConfig+0x308>)
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d00f      	beq.n	8003b08 <UART_SetConfig+0x19c>
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d802      	bhi.n	8003af2 <UART_SetConfig+0x186>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <UART_SetConfig+0x190>
 8003af0:	e010      	b.n	8003b14 <UART_SetConfig+0x1a8>
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d005      	beq.n	8003b02 <UART_SetConfig+0x196>
 8003af6:	2b30      	cmp	r3, #48	; 0x30
 8003af8:	d009      	beq.n	8003b0e <UART_SetConfig+0x1a2>
 8003afa:	e00b      	b.n	8003b14 <UART_SetConfig+0x1a8>
 8003afc:	2300      	movs	r3, #0
 8003afe:	76fb      	strb	r3, [r7, #27]
 8003b00:	e088      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003b02:	2302      	movs	r3, #2
 8003b04:	76fb      	strb	r3, [r7, #27]
 8003b06:	e085      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	76fb      	strb	r3, [r7, #27]
 8003b0c:	e082      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003b0e:	2308      	movs	r3, #8
 8003b10:	76fb      	strb	r3, [r7, #27]
 8003b12:	e07f      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003b14:	2310      	movs	r3, #16
 8003b16:	76fb      	strb	r3, [r7, #27]
 8003b18:	bf00      	nop
 8003b1a:	e07b      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a57      	ldr	r2, [pc, #348]	; (8003c80 <UART_SetConfig+0x314>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d120      	bne.n	8003b68 <UART_SetConfig+0x1fc>
 8003b26:	4b53      	ldr	r3, [pc, #332]	; (8003c74 <UART_SetConfig+0x308>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b30:	2b40      	cmp	r3, #64	; 0x40
 8003b32:	d00f      	beq.n	8003b54 <UART_SetConfig+0x1e8>
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d802      	bhi.n	8003b3e <UART_SetConfig+0x1d2>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <UART_SetConfig+0x1dc>
 8003b3c:	e010      	b.n	8003b60 <UART_SetConfig+0x1f4>
 8003b3e:	2b80      	cmp	r3, #128	; 0x80
 8003b40:	d005      	beq.n	8003b4e <UART_SetConfig+0x1e2>
 8003b42:	2bc0      	cmp	r3, #192	; 0xc0
 8003b44:	d009      	beq.n	8003b5a <UART_SetConfig+0x1ee>
 8003b46:	e00b      	b.n	8003b60 <UART_SetConfig+0x1f4>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	76fb      	strb	r3, [r7, #27]
 8003b4c:	e062      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	76fb      	strb	r3, [r7, #27]
 8003b52:	e05f      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003b54:	2304      	movs	r3, #4
 8003b56:	76fb      	strb	r3, [r7, #27]
 8003b58:	e05c      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	76fb      	strb	r3, [r7, #27]
 8003b5e:	e059      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003b60:	2310      	movs	r3, #16
 8003b62:	76fb      	strb	r3, [r7, #27]
 8003b64:	bf00      	nop
 8003b66:	e055      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a45      	ldr	r2, [pc, #276]	; (8003c84 <UART_SetConfig+0x318>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d124      	bne.n	8003bbc <UART_SetConfig+0x250>
 8003b72:	4b40      	ldr	r3, [pc, #256]	; (8003c74 <UART_SetConfig+0x308>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b80:	d012      	beq.n	8003ba8 <UART_SetConfig+0x23c>
 8003b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b86:	d802      	bhi.n	8003b8e <UART_SetConfig+0x222>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d007      	beq.n	8003b9c <UART_SetConfig+0x230>
 8003b8c:	e012      	b.n	8003bb4 <UART_SetConfig+0x248>
 8003b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b92:	d006      	beq.n	8003ba2 <UART_SetConfig+0x236>
 8003b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b98:	d009      	beq.n	8003bae <UART_SetConfig+0x242>
 8003b9a:	e00b      	b.n	8003bb4 <UART_SetConfig+0x248>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	76fb      	strb	r3, [r7, #27]
 8003ba0:	e038      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	76fb      	strb	r3, [r7, #27]
 8003ba6:	e035      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003ba8:	2304      	movs	r3, #4
 8003baa:	76fb      	strb	r3, [r7, #27]
 8003bac:	e032      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003bae:	2308      	movs	r3, #8
 8003bb0:	76fb      	strb	r3, [r7, #27]
 8003bb2:	e02f      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	76fb      	strb	r3, [r7, #27]
 8003bb8:	bf00      	nop
 8003bba:	e02b      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <UART_SetConfig+0x300>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d124      	bne.n	8003c10 <UART_SetConfig+0x2a4>
 8003bc6:	4b2b      	ldr	r3, [pc, #172]	; (8003c74 <UART_SetConfig+0x308>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd4:	d012      	beq.n	8003bfc <UART_SetConfig+0x290>
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d802      	bhi.n	8003be2 <UART_SetConfig+0x276>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <UART_SetConfig+0x284>
 8003be0:	e012      	b.n	8003c08 <UART_SetConfig+0x29c>
 8003be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be6:	d006      	beq.n	8003bf6 <UART_SetConfig+0x28a>
 8003be8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bec:	d009      	beq.n	8003c02 <UART_SetConfig+0x296>
 8003bee:	e00b      	b.n	8003c08 <UART_SetConfig+0x29c>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	76fb      	strb	r3, [r7, #27]
 8003bf4:	e00e      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	76fb      	strb	r3, [r7, #27]
 8003bfa:	e00b      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	76fb      	strb	r3, [r7, #27]
 8003c00:	e008      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003c02:	2308      	movs	r3, #8
 8003c04:	76fb      	strb	r3, [r7, #27]
 8003c06:	e005      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003c08:	2310      	movs	r3, #16
 8003c0a:	76fb      	strb	r3, [r7, #27]
 8003c0c:	bf00      	nop
 8003c0e:	e001      	b.n	8003c14 <UART_SetConfig+0x2a8>
 8003c10:	2310      	movs	r3, #16
 8003c12:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <UART_SetConfig+0x300>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	f040 80a1 	bne.w	8003d62 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c20:	7efb      	ldrb	r3, [r7, #27]
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d836      	bhi.n	8003c94 <UART_SetConfig+0x328>
 8003c26:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <UART_SetConfig+0x2c0>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003c51 	.word	0x08003c51
 8003c30:	08003c95 	.word	0x08003c95
 8003c34:	08003c59 	.word	0x08003c59
 8003c38:	08003c95 	.word	0x08003c95
 8003c3c:	08003c5f 	.word	0x08003c5f
 8003c40:	08003c95 	.word	0x08003c95
 8003c44:	08003c95 	.word	0x08003c95
 8003c48:	08003c95 	.word	0x08003c95
 8003c4c:	08003c8d 	.word	0x08003c8d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c50:	f7fe ff12 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8003c54:	6178      	str	r0, [r7, #20]
        break;
 8003c56:	e022      	b.n	8003c9e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <UART_SetConfig+0x31c>)
 8003c5a:	617b      	str	r3, [r7, #20]
        break;
 8003c5c:	e01f      	b.n	8003c9e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c5e:	f7fe fe75 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8003c62:	6178      	str	r0, [r7, #20]
        break;
 8003c64:	e01b      	b.n	8003c9e <UART_SetConfig+0x332>
 8003c66:	bf00      	nop
 8003c68:	cfff69f3 	.word	0xcfff69f3
 8003c6c:	40008000 	.word	0x40008000
 8003c70:	40013800 	.word	0x40013800
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40004400 	.word	0x40004400
 8003c7c:	40004800 	.word	0x40004800
 8003c80:	40004c00 	.word	0x40004c00
 8003c84:	40005000 	.word	0x40005000
 8003c88:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c90:	617b      	str	r3, [r7, #20]
        break;
 8003c92:	e004      	b.n	8003c9e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	76bb      	strb	r3, [r7, #26]
        break;
 8003c9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 811d 	beq.w	8003ee0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	4a97      	ldr	r2, [pc, #604]	; (8003f08 <UART_SetConfig+0x59c>)
 8003cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cb8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d305      	bcc.n	8003cd6 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d902      	bls.n	8003cdc <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	76bb      	strb	r3, [r7, #26]
 8003cda:	e101      	b.n	8003ee0 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	4a87      	ldr	r2, [pc, #540]	; (8003f08 <UART_SetConfig+0x59c>)
 8003cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f04f 0400 	mov.w	r4, #0
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	f7fc fa88 	bl	800020c <__aeabi_uldivmod>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	4619      	mov	r1, r3
 8003d02:	4622      	mov	r2, r4
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	f04f 0400 	mov.w	r4, #0
 8003d0c:	0214      	lsls	r4, r2, #8
 8003d0e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d12:	020b      	lsls	r3, r1, #8
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6852      	ldr	r2, [r2, #4]
 8003d18:	0852      	lsrs	r2, r2, #1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	eb13 0b01 	adds.w	fp, r3, r1
 8003d24:	eb44 0c02 	adc.w	ip, r4, r2
 8003d28:	4658      	mov	r0, fp
 8003d2a:	4661      	mov	r1, ip
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f04f 0400 	mov.w	r4, #0
 8003d34:	461a      	mov	r2, r3
 8003d36:	4623      	mov	r3, r4
 8003d38:	f7fc fa68 	bl	800020c <__aeabi_uldivmod>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d48:	d308      	bcc.n	8003d5c <UART_SetConfig+0x3f0>
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d50:	d204      	bcs.n	8003d5c <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	e0c1      	b.n	8003ee0 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	76bb      	strb	r3, [r7, #26]
 8003d60:	e0be      	b.n	8003ee0 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d6a:	d164      	bne.n	8003e36 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003d6c:	7efb      	ldrb	r3, [r7, #27]
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d827      	bhi.n	8003dc2 <UART_SetConfig+0x456>
 8003d72:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <UART_SetConfig+0x40c>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003d9d 	.word	0x08003d9d
 8003d7c:	08003da5 	.word	0x08003da5
 8003d80:	08003dad 	.word	0x08003dad
 8003d84:	08003dc3 	.word	0x08003dc3
 8003d88:	08003db3 	.word	0x08003db3
 8003d8c:	08003dc3 	.word	0x08003dc3
 8003d90:	08003dc3 	.word	0x08003dc3
 8003d94:	08003dc3 	.word	0x08003dc3
 8003d98:	08003dbb 	.word	0x08003dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d9c:	f7fe fe6c 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8003da0:	6178      	str	r0, [r7, #20]
        break;
 8003da2:	e013      	b.n	8003dcc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003da4:	f7fe fe7e 	bl	8002aa4 <HAL_RCC_GetPCLK2Freq>
 8003da8:	6178      	str	r0, [r7, #20]
        break;
 8003daa:	e00f      	b.n	8003dcc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dac:	4b57      	ldr	r3, [pc, #348]	; (8003f0c <UART_SetConfig+0x5a0>)
 8003dae:	617b      	str	r3, [r7, #20]
        break;
 8003db0:	e00c      	b.n	8003dcc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003db2:	f7fe fdcb 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8003db6:	6178      	str	r0, [r7, #20]
        break;
 8003db8:	e008      	b.n	8003dcc <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dbe:	617b      	str	r3, [r7, #20]
        break;
 8003dc0:	e004      	b.n	8003dcc <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	76bb      	strb	r3, [r7, #26]
        break;
 8003dca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8086 	beq.w	8003ee0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	4a4b      	ldr	r2, [pc, #300]	; (8003f08 <UART_SetConfig+0x59c>)
 8003dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dde:	461a      	mov	r2, r3
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003de6:	005a      	lsls	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	441a      	add	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	d916      	bls.n	8003e30 <UART_SetConfig+0x4c4>
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d212      	bcs.n	8003e30 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	f023 030f 	bic.w	r3, r3, #15
 8003e12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	89fb      	ldrh	r3, [r7, #14]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	89fa      	ldrh	r2, [r7, #14]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	e057      	b.n	8003ee0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	76bb      	strb	r3, [r7, #26]
 8003e34:	e054      	b.n	8003ee0 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e36:	7efb      	ldrb	r3, [r7, #27]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d828      	bhi.n	8003e8e <UART_SetConfig+0x522>
 8003e3c:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <UART_SetConfig+0x4d8>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e69 	.word	0x08003e69
 8003e48:	08003e71 	.word	0x08003e71
 8003e4c:	08003e79 	.word	0x08003e79
 8003e50:	08003e8f 	.word	0x08003e8f
 8003e54:	08003e7f 	.word	0x08003e7f
 8003e58:	08003e8f 	.word	0x08003e8f
 8003e5c:	08003e8f 	.word	0x08003e8f
 8003e60:	08003e8f 	.word	0x08003e8f
 8003e64:	08003e87 	.word	0x08003e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e68:	f7fe fe06 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8003e6c:	6178      	str	r0, [r7, #20]
        break;
 8003e6e:	e013      	b.n	8003e98 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e70:	f7fe fe18 	bl	8002aa4 <HAL_RCC_GetPCLK2Freq>
 8003e74:	6178      	str	r0, [r7, #20]
        break;
 8003e76:	e00f      	b.n	8003e98 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <UART_SetConfig+0x5a0>)
 8003e7a:	617b      	str	r3, [r7, #20]
        break;
 8003e7c:	e00c      	b.n	8003e98 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7e:	f7fe fd65 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8003e82:	6178      	str	r0, [r7, #20]
        break;
 8003e84:	e008      	b.n	8003e98 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8a:	617b      	str	r3, [r7, #20]
        break;
 8003e8c:	e004      	b.n	8003e98 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	76bb      	strb	r3, [r7, #26]
        break;
 8003e96:	bf00      	nop
    }

    if (pclk != 0U)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d020      	beq.n	8003ee0 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <UART_SetConfig+0x59c>)
 8003ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	fbb3 f2f2 	udiv	r2, r3, r2
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	085b      	lsrs	r3, r3, #1
 8003eb6:	441a      	add	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b0f      	cmp	r3, #15
 8003ec8:	d908      	bls.n	8003edc <UART_SetConfig+0x570>
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed0:	d204      	bcs.n	8003edc <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	e001      	b.n	8003ee0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003efc:	7ebb      	ldrb	r3, [r7, #26]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003f08:	08004b90 	.word	0x08004b90
 8003f0c:	00f42400 	.word	0x00f42400

08003f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01a      	beq.n	8004026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800400e:	d10a      	bne.n	8004026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	605a      	str	r2, [r3, #4]
  }
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af02      	add	r7, sp, #8
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004064:	f7fc ff7e 	bl	8000f64 <HAL_GetTick>
 8004068:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b08      	cmp	r3, #8
 8004076:	d10e      	bne.n	8004096 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f82c 	bl	80040e4 <UART_WaitOnFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e022      	b.n	80040dc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d10e      	bne.n	80040c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f816 	bl	80040e4 <UART_WaitOnFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e00c      	b.n	80040dc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f4:	e062      	b.n	80041bc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d05e      	beq.n	80041bc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fe:	f7fc ff31 	bl	8000f64 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <UART_WaitOnFlagUntilTimeout+0x30>
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d11d      	bne.n	8004150 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004122:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e045      	b.n	80041dc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d02e      	beq.n	80041bc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416c:	d126      	bne.n	80041bc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004176:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004186:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e00f      	b.n	80041dc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d08d      	beq.n	80040f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80041fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800420a:	609a      	str	r2, [r3, #8]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004236:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d11f      	bne.n	80042c2 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004298:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b8:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f7fc fba4 	bl	8000a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7ff fb30 	bl	8003944 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e4:	bf00      	nop
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004300:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004308:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	2b80      	cmp	r3, #128	; 0x80
 8004316:	d109      	bne.n	800432c <UART_DMAError+0x40>
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b21      	cmp	r3, #33	; 0x21
 800431c:	d106      	bne.n	800432c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2200      	movs	r2, #0
 8004322:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004326:	6978      	ldr	r0, [r7, #20]
 8004328:	f7ff ff5c 	bl	80041e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d109      	bne.n	800434e <UART_DMAError+0x62>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b22      	cmp	r3, #34	; 0x22
 800433e:	d106      	bne.n	800434e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004348:	6978      	ldr	r0, [r7, #20]
 800434a:	f7ff ff69 	bl	8004220 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f043 0210 	orr.w	r2, r3, #16
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800435e:	6978      	ldr	r0, [r7, #20]
 8004360:	f7ff fafa 	bl	8003958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004364:	bf00      	nop
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_UARTEx_DisableFifoMode+0x16>
 800437e:	2302      	movs	r3, #2
 8004380:	e027      	b.n	80043d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2224      	movs	r2, #36	; 0x24
 800438e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0201 	bic.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80043b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e02d      	b.n	8004452 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2224      	movs	r2, #36	; 0x24
 8004402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0201 	bic.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f850 	bl	80044d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800446e:	2302      	movs	r3, #2
 8004470:	e02d      	b.n	80044ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2224      	movs	r2, #36	; 0x24
 800447e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0201 	bic.w	r2, r2, #1
 8004498:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f812 	bl	80044d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b089      	sub	sp, #36	; 0x24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80044e0:	4a2f      	ldr	r2, [pc, #188]	; (80045a0 <UARTEx_SetNbDataToProcess+0xc8>)
 80044e2:	f107 0314 	add.w	r3, r7, #20
 80044e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044ea:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80044ee:	4a2d      	ldr	r2, [pc, #180]	; (80045a4 <UARTEx_SetNbDataToProcess+0xcc>)
 80044f0:	f107 030c 	add.w	r3, r7, #12
 80044f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044f8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004500:	2b00      	cmp	r3, #0
 8004502:	d108      	bne.n	8004516 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004514:	e03d      	b.n	8004592 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004516:	2308      	movs	r3, #8
 8004518:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800451a:	2308      	movs	r3, #8
 800451c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	0e5b      	lsrs	r3, r3, #25
 8004526:	b2db      	uxtb	r3, r3
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	0f5b      	lsrs	r3, r3, #29
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800453e:	7fbb      	ldrb	r3, [r7, #30]
 8004540:	7f3a      	ldrb	r2, [r7, #28]
 8004542:	f107 0120 	add.w	r1, r7, #32
 8004546:	440a      	add	r2, r1
 8004548:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800454c:	fb02 f303 	mul.w	r3, r2, r3
 8004550:	7f3a      	ldrb	r2, [r7, #28]
 8004552:	f107 0120 	add.w	r1, r7, #32
 8004556:	440a      	add	r2, r1
 8004558:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800455c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004560:	b29a      	uxth	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004568:	7ffb      	ldrb	r3, [r7, #31]
 800456a:	7f7a      	ldrb	r2, [r7, #29]
 800456c:	f107 0120 	add.w	r1, r7, #32
 8004570:	440a      	add	r2, r1
 8004572:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	7f7a      	ldrb	r2, [r7, #29]
 800457c:	f107 0120 	add.w	r1, r7, #32
 8004580:	440a      	add	r2, r1
 8004582:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004586:	fb93 f3f2 	sdiv	r3, r3, r2
 800458a:	b29a      	uxth	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004592:	bf00      	nop
 8004594:	3724      	adds	r7, #36	; 0x24
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	08004b38 	.word	0x08004b38
 80045a4:	08004b40 	.word	0x08004b40

080045a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045a8:	b084      	sub	sp, #16
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	f107 001c 	add.w	r0, r7, #28
 80045b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d122      	bne.n	8004606 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d105      	bne.n	80045fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fa30 	bl	8004a60 <USB_CoreReset>
 8004600:	4603      	mov	r3, r0
 8004602:	73fb      	strb	r3, [r7, #15]
 8004604:	e01a      	b.n	800463c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fa24 	bl	8004a60 <USB_CoreReset>
 8004618:	4603      	mov	r3, r0
 800461a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800461c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
 800462e:	e005      	b.n	800463c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004648:	b004      	add	sp, #16
 800464a:	4770      	bx	lr

0800464c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f023 0201 	bic.w	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	460b      	mov	r3, r1
 8004678:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d106      	bne.n	800469a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	60da      	str	r2, [r3, #12]
 8004698:	e00b      	b.n	80046b2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60da      	str	r2, [r3, #12]
 80046ac:	e001      	b.n	80046b2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e003      	b.n	80046ba <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80046b2:	2032      	movs	r0, #50	; 0x32
 80046b4:	f7fc fc62 	bl	8000f7c <HAL_Delay>

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046c4:	b084      	sub	sp, #16
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b086      	sub	sp, #24
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	e009      	b.n	80046f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	3340      	adds	r3, #64	; 0x40
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	2200      	movs	r2, #0
 80046f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	3301      	adds	r3, #1
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b0e      	cmp	r3, #14
 80046fc:	d9f2      	bls.n	80046e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d11c      	bne.n	800473e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004712:	f043 0302 	orr.w	r3, r3, #2
 8004716:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	e005      	b.n	800474a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004750:	461a      	mov	r2, r3
 8004752:	2300      	movs	r3, #0
 8004754:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475c:	4619      	mov	r1, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004764:	461a      	mov	r2, r3
 8004766:	680b      	ldr	r3, [r1, #0]
 8004768:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800476a:	2103      	movs	r1, #3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f93d 	bl	80049ec <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004772:	2110      	movs	r1, #16
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f8f1 	bl	800495c <USB_FlushTxFifo>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f90f 	bl	80049a8 <USB_FlushRxFifo>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479a:	461a      	mov	r2, r3
 800479c:	2300      	movs	r3, #0
 800479e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a6:	461a      	mov	r2, r3
 80047a8:	2300      	movs	r3, #0
 80047aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b2:	461a      	mov	r2, r3
 80047b4:	2300      	movs	r3, #0
 80047b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b8:	2300      	movs	r3, #0
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	e043      	b.n	8004846 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047d4:	d118      	bne.n	8004808 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	461a      	mov	r2, r3
 80047ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e013      	b.n	800481a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fe:	461a      	mov	r2, r3
 8004800:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e008      	b.n	800481a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	461a      	mov	r2, r3
 8004816:	2300      	movs	r3, #0
 8004818:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004826:	461a      	mov	r2, r3
 8004828:	2300      	movs	r3, #0
 800482a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004838:	461a      	mov	r2, r3
 800483a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800483e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	3301      	adds	r3, #1
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	429a      	cmp	r2, r3
 800484c:	d3b7      	bcc.n	80047be <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	e043      	b.n	80048dc <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800486a:	d118      	bne.n	800489e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487e:	461a      	mov	r2, r3
 8004880:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e013      	b.n	80048b0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004894:	461a      	mov	r2, r3
 8004896:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	e008      	b.n	80048b0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	461a      	mov	r2, r3
 80048ac:	2300      	movs	r3, #0
 80048ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048bc:	461a      	mov	r2, r3
 80048be:	2300      	movs	r3, #0
 80048c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ce:	461a      	mov	r2, r3
 80048d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	3301      	adds	r3, #1
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d3b7      	bcc.n	8004854 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004904:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f043 0210 	orr.w	r2, r3, #16
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	4b10      	ldr	r3, [pc, #64]	; (8004958 <USB_DevInit+0x294>)
 8004918:	4313      	orrs	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800491e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	f043 0208 	orr.w	r2, r3, #8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004932:	2b01      	cmp	r3, #1
 8004934:	d107      	bne.n	8004946 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800493e:	f043 0304 	orr.w	r3, r3, #4
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004946:	7dfb      	ldrb	r3, [r7, #23]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004952:	b004      	add	sp, #16
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	803c3800 	.word	0x803c3800

0800495c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	019b      	lsls	r3, r3, #6
 800496e:	f043 0220 	orr.w	r2, r3, #32
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3301      	adds	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4a09      	ldr	r2, [pc, #36]	; (80049a4 <USB_FlushTxFifo+0x48>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d901      	bls.n	8004988 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e006      	b.n	8004996 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b20      	cmp	r3, #32
 8004992:	d0f0      	beq.n	8004976 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	00030d40 	.word	0x00030d40

080049a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2210      	movs	r2, #16
 80049b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3301      	adds	r3, #1
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <USB_FlushRxFifo+0x40>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e006      	b.n	80049da <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d0f0      	beq.n	80049ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	00030d40 	.word	0x00030d40

080049ec <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	68f9      	ldr	r1, [r7, #12]
 8004a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a38:	f023 0303 	bic.w	r3, r3, #3
 8004a3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a4c:	f043 0302 	orr.w	r3, r3, #2
 8004a50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a13      	ldr	r2, [pc, #76]	; (8004ac4 <USB_CoreReset+0x64>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e01b      	b.n	8004ab6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	daf2      	bge.n	8004a6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f043 0201 	orr.w	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a09      	ldr	r2, [pc, #36]	; (8004ac4 <USB_CoreReset+0x64>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d901      	bls.n	8004aa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e006      	b.n	8004ab6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d0f0      	beq.n	8004a96 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	00030d40 	.word	0x00030d40

08004ac8 <__libc_init_array>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	4e0d      	ldr	r6, [pc, #52]	; (8004b00 <__libc_init_array+0x38>)
 8004acc:	4c0d      	ldr	r4, [pc, #52]	; (8004b04 <__libc_init_array+0x3c>)
 8004ace:	1ba4      	subs	r4, r4, r6
 8004ad0:	10a4      	asrs	r4, r4, #2
 8004ad2:	2500      	movs	r5, #0
 8004ad4:	42a5      	cmp	r5, r4
 8004ad6:	d109      	bne.n	8004aec <__libc_init_array+0x24>
 8004ad8:	4e0b      	ldr	r6, [pc, #44]	; (8004b08 <__libc_init_array+0x40>)
 8004ada:	4c0c      	ldr	r4, [pc, #48]	; (8004b0c <__libc_init_array+0x44>)
 8004adc:	f000 f820 	bl	8004b20 <_init>
 8004ae0:	1ba4      	subs	r4, r4, r6
 8004ae2:	10a4      	asrs	r4, r4, #2
 8004ae4:	2500      	movs	r5, #0
 8004ae6:	42a5      	cmp	r5, r4
 8004ae8:	d105      	bne.n	8004af6 <__libc_init_array+0x2e>
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004af0:	4798      	blx	r3
 8004af2:	3501      	adds	r5, #1
 8004af4:	e7ee      	b.n	8004ad4 <__libc_init_array+0xc>
 8004af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004afa:	4798      	blx	r3
 8004afc:	3501      	adds	r5, #1
 8004afe:	e7f2      	b.n	8004ae6 <__libc_init_array+0x1e>
 8004b00:	08004bb0 	.word	0x08004bb0
 8004b04:	08004bb0 	.word	0x08004bb0
 8004b08:	08004bb0 	.word	0x08004bb0
 8004b0c:	08004bb4 	.word	0x08004bb4

08004b10 <memset>:
 8004b10:	4402      	add	r2, r0
 8004b12:	4603      	mov	r3, r0
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d100      	bne.n	8004b1a <memset+0xa>
 8004b18:	4770      	bx	lr
 8004b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b1e:	e7f9      	b.n	8004b14 <memset+0x4>

08004b20 <_init>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	bf00      	nop
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr

08004b2c <_fini>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	bf00      	nop
 8004b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b32:	bc08      	pop	{r3}
 8004b34:	469e      	mov	lr, r3
 8004b36:	4770      	bx	lr
