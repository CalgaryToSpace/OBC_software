
NUCLEO_L4R5ZI_SPIMemory_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005128  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053bc  080053bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053c4  080053c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  2000000c  080053d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  080053d8  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f08  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002108  00000000  00000000  00030f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  00033050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  00033f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a0bb  00000000  00000000  00034cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b757  00000000  00000000  0005ed83  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00101eeb  00000000  00000000  0006a4da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016c3c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dec  00000000  00000000  0016c440  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080052cc 	.word	0x080052cc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080052cc 	.word	0x080052cc

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295
 800021c:	f04f 30ff 	movne.w	r0, #4294967295
 8000220:	f000 b972 	b.w	8000508 <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9e08      	ldr	r6, [sp, #32]
 8000242:	4604      	mov	r4, r0
 8000244:	4688      	mov	r8, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d14b      	bne.n	80002e2 <__udivmoddi4+0xa6>
 800024a:	428a      	cmp	r2, r1
 800024c:	4615      	mov	r5, r2
 800024e:	d967      	bls.n	8000320 <__udivmoddi4+0xe4>
 8000250:	fab2 f282 	clz	r2, r2
 8000254:	b14a      	cbz	r2, 800026a <__udivmoddi4+0x2e>
 8000256:	f1c2 0720 	rsb	r7, r2, #32
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	fa20 f707 	lsr.w	r7, r0, r7
 8000262:	4095      	lsls	r5, r2
 8000264:	ea47 0803 	orr.w	r8, r7, r3
 8000268:	4094      	lsls	r4, r2
 800026a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026e:	0c23      	lsrs	r3, r4, #16
 8000270:	fbb8 f7fe 	udiv	r7, r8, lr
 8000274:	fa1f fc85 	uxth.w	ip, r5
 8000278:	fb0e 8817 	mls	r8, lr, r7, r8
 800027c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000280:	fb07 f10c 	mul.w	r1, r7, ip
 8000284:	4299      	cmp	r1, r3
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x60>
 8000288:	18eb      	adds	r3, r5, r3
 800028a:	f107 30ff 	add.w	r0, r7, #4294967295
 800028e:	f080 811b 	bcs.w	80004c8 <__udivmoddi4+0x28c>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 8118 	bls.w	80004c8 <__udivmoddi4+0x28c>
 8000298:	3f02      	subs	r7, #2
 800029a:	442b      	add	r3, r5
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b0:	45a4      	cmp	ip, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x8c>
 80002b4:	192c      	adds	r4, r5, r4
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x290>
 80002be:	45a4      	cmp	ip, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x290>
 80002c4:	3802      	subs	r0, #2
 80002c6:	442c      	add	r4, r5
 80002c8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002cc:	eba4 040c 	sub.w	r4, r4, ip
 80002d0:	2700      	movs	r7, #0
 80002d2:	b11e      	cbz	r6, 80002dc <__udivmoddi4+0xa0>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c6 4300 	strd	r4, r3, [r6]
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xbe>
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f000 80eb 	beq.w	80004c2 <__udivmoddi4+0x286>
 80002ec:	2700      	movs	r7, #0
 80002ee:	e9c6 0100 	strd	r0, r1, [r6]
 80002f2:	4638      	mov	r0, r7
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f783 	clz	r7, r3
 80002fe:	2f00      	cmp	r7, #0
 8000300:	d147      	bne.n	8000392 <__udivmoddi4+0x156>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd0>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2c4>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4698      	mov	r8, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa0>
 800031a:	e9c6 4800 	strd	r4, r8, [r6]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa0>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xe8>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 808f 	bne.w	800044c <__udivmoddi4+0x210>
 800032e:	1b49      	subs	r1, r1, r5
 8000330:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000334:	fa1f f885 	uxth.w	r8, r5
 8000338:	2701      	movs	r7, #1
 800033a:	fbb1 fcfe 	udiv	ip, r1, lr
 800033e:	0c23      	lsrs	r3, r4, #16
 8000340:	fb0e 111c 	mls	r1, lr, ip, r1
 8000344:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000348:	fb08 f10c 	mul.w	r1, r8, ip
 800034c:	4299      	cmp	r1, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x124>
 8000350:	18eb      	adds	r3, r5, r3
 8000352:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x122>
 8000358:	4299      	cmp	r1, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2bc>
 800035e:	4684      	mov	ip, r0
 8000360:	1a59      	subs	r1, r3, r1
 8000362:	b2a3      	uxth	r3, r4
 8000364:	fbb1 f0fe 	udiv	r0, r1, lr
 8000368:	fb0e 1410 	mls	r4, lr, r0, r1
 800036c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000370:	fb08 f800 	mul.w	r8, r8, r0
 8000374:	45a0      	cmp	r8, r4
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x14c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x14a>
 8000380:	45a0      	cmp	r8, r4
 8000382:	f200 80b6 	bhi.w	80004f2 <__udivmoddi4+0x2b6>
 8000386:	4618      	mov	r0, r3
 8000388:	eba4 0408 	sub.w	r4, r4, r8
 800038c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000390:	e79f      	b.n	80002d2 <__udivmoddi4+0x96>
 8000392:	f1c7 0c20 	rsb	ip, r7, #32
 8000396:	40bb      	lsls	r3, r7
 8000398:	fa22 fe0c 	lsr.w	lr, r2, ip
 800039c:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a0:	fa01 f407 	lsl.w	r4, r1, r7
 80003a4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003ac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b0:	4325      	orrs	r5, r4
 80003b2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b6:	0c2c      	lsrs	r4, r5, #16
 80003b8:	fb08 3319 	mls	r3, r8, r9, r3
 80003bc:	fa1f fa8e 	uxth.w	sl, lr
 80003c0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c4:	fb09 f40a 	mul.w	r4, r9, sl
 80003c8:	429c      	cmp	r4, r3
 80003ca:	fa02 f207 	lsl.w	r2, r2, r7
 80003ce:	fa00 f107 	lsl.w	r1, r0, r7
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b0>
 80003d4:	eb1e 0303 	adds.w	r3, lr, r3
 80003d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003dc:	f080 8087 	bcs.w	80004ee <__udivmoddi4+0x2b2>
 80003e0:	429c      	cmp	r4, r3
 80003e2:	f240 8084 	bls.w	80004ee <__udivmoddi4+0x2b2>
 80003e6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ea:	4473      	add	r3, lr
 80003ec:	1b1b      	subs	r3, r3, r4
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f4:	fb08 3310 	mls	r3, r8, r0, r3
 80003f8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003fc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000400:	45a2      	cmp	sl, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1da>
 8000404:	eb1e 0404 	adds.w	r4, lr, r4
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295
 800040c:	d26b      	bcs.n	80004e6 <__udivmoddi4+0x2aa>
 800040e:	45a2      	cmp	sl, r4
 8000410:	d969      	bls.n	80004e6 <__udivmoddi4+0x2aa>
 8000412:	3802      	subs	r0, #2
 8000414:	4474      	add	r4, lr
 8000416:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041a:	fba0 8902 	umull	r8, r9, r0, r2
 800041e:	eba4 040a 	sub.w	r4, r4, sl
 8000422:	454c      	cmp	r4, r9
 8000424:	46c2      	mov	sl, r8
 8000426:	464b      	mov	r3, r9
 8000428:	d354      	bcc.n	80004d4 <__udivmoddi4+0x298>
 800042a:	d051      	beq.n	80004d0 <__udivmoddi4+0x294>
 800042c:	2e00      	cmp	r6, #0
 800042e:	d069      	beq.n	8000504 <__udivmoddi4+0x2c8>
 8000430:	ebb1 050a 	subs.w	r5, r1, sl
 8000434:	eb64 0403 	sbc.w	r4, r4, r3
 8000438:	fa04 fc0c 	lsl.w	ip, r4, ip
 800043c:	40fd      	lsrs	r5, r7
 800043e:	40fc      	lsrs	r4, r7
 8000440:	ea4c 0505 	orr.w	r5, ip, r5
 8000444:	e9c6 5400 	strd	r5, r4, [r6]
 8000448:	2700      	movs	r7, #0
 800044a:	e747      	b.n	80002dc <__udivmoddi4+0xa0>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f703 	lsr.w	r7, r0, r3
 8000454:	4095      	lsls	r5, r2
 8000456:	fa01 f002 	lsl.w	r0, r1, r2
 800045a:	fa21 f303 	lsr.w	r3, r1, r3
 800045e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000462:	4338      	orrs	r0, r7
 8000464:	0c01      	lsrs	r1, r0, #16
 8000466:	fbb3 f7fe 	udiv	r7, r3, lr
 800046a:	fa1f f885 	uxth.w	r8, r5
 800046e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb07 f308 	mul.w	r3, r7, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x256>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f107 3cff 	add.w	ip, r7, #4294967295
 8000488:	d22f      	bcs.n	80004ea <__udivmoddi4+0x2ae>
 800048a:	428b      	cmp	r3, r1
 800048c:	d92d      	bls.n	80004ea <__udivmoddi4+0x2ae>
 800048e:	3f02      	subs	r7, #2
 8000490:	4429      	add	r1, r5
 8000492:	1acb      	subs	r3, r1, r3
 8000494:	b281      	uxth	r1, r0
 8000496:	fbb3 f0fe 	udiv	r0, r3, lr
 800049a:	fb0e 3310 	mls	r3, lr, r0, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb00 f308 	mul.w	r3, r0, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x27e>
 80004aa:	1869      	adds	r1, r5, r1
 80004ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b0:	d217      	bcs.n	80004e2 <__udivmoddi4+0x2a6>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d915      	bls.n	80004e2 <__udivmoddi4+0x2a6>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4429      	add	r1, r5
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c0:	e73b      	b.n	800033a <__udivmoddi4+0xfe>
 80004c2:	4637      	mov	r7, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e709      	b.n	80002dc <__udivmoddi4+0xa0>
 80004c8:	4607      	mov	r7, r0
 80004ca:	e6e7      	b.n	800029c <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x8c>
 80004d0:	4541      	cmp	r1, r8
 80004d2:	d2ab      	bcs.n	800042c <__udivmoddi4+0x1f0>
 80004d4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d8:	eb69 020e 	sbc.w	r2, r9, lr
 80004dc:	3801      	subs	r0, #1
 80004de:	4613      	mov	r3, r2
 80004e0:	e7a4      	b.n	800042c <__udivmoddi4+0x1f0>
 80004e2:	4660      	mov	r0, ip
 80004e4:	e7e9      	b.n	80004ba <__udivmoddi4+0x27e>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e795      	b.n	8000416 <__udivmoddi4+0x1da>
 80004ea:	4667      	mov	r7, ip
 80004ec:	e7d1      	b.n	8000492 <__udivmoddi4+0x256>
 80004ee:	4681      	mov	r9, r0
 80004f0:	e77c      	b.n	80003ec <__udivmoddi4+0x1b0>
 80004f2:	3802      	subs	r0, #2
 80004f4:	442c      	add	r4, r5
 80004f6:	e747      	b.n	8000388 <__udivmoddi4+0x14c>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	442b      	add	r3, r5
 80004fe:	e72f      	b.n	8000360 <__udivmoddi4+0x124>
 8000500:	4638      	mov	r0, r7
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xda>
 8000504:	4637      	mov	r7, r6
 8000506:	e6e9      	b.n	80002dc <__udivmoddi4+0xa0>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b0cf      	sub	sp, #316	; 0x13c
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	char uart_buf[100];
	char spiTX_buf[100] = {0};
 8000512:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000516:	2264      	movs	r2, #100	; 0x64
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 fecd 	bl	80052ba <memset>
	char spiRX_buf[100] = {0};
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	4618      	mov	r0, r3
 8000526:	2364      	movs	r3, #100	; 0x64
 8000528:	461a      	mov	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f004 fec5 	bl	80052ba <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 fd89 	bl	8001046 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f974 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 faf0 	bl	8000b1c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800053c:	f000 f9ee 	bl	800091c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000540:	f000 fa38 	bl	80009b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000544:	f000 fac0 	bl	8000ac8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000548:	f000 fa80 	bl	8000a4c <MX_SPI1_Init>


  /* USER CODE BEGIN 2 */

  //flash red led to indicate its running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	48a7      	ldr	r0, [pc, #668]	; (80007f0 <main+0x2e4>)
 8000552:	f001 f887 	bl	8001664 <HAL_GPIO_WritePin>

  //chip select high
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055c:	48a5      	ldr	r0, [pc, #660]	; (80007f4 <main+0x2e8>)
 800055e:	f001 f881 	bl	8001664 <HAL_GPIO_WritePin>

  // Send something to UART
  strcpy((char*)uart_buf, "Testing SPI\r\n");
 8000562:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000566:	4aa4      	ldr	r2, [pc, #656]	; (80007f8 <main+0x2ec>)
 8000568:	461c      	mov	r4, r3
 800056a:	4613      	mov	r3, r2
 800056c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800056e:	c407      	stmia	r4!, {r0, r1, r2}
 8000570:	8023      	strh	r3, [r4, #0]
   HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, strlen((char*)uart_buf), 100);
 8000572:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fe40 	bl	80001fc <strlen>
 800057c:	4603      	mov	r3, r0
 800057e:	b29a      	uxth	r2, r3
 8000580:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000584:	2364      	movs	r3, #100	; 0x64
 8000586:	489d      	ldr	r0, [pc, #628]	; (80007fc <main+0x2f0>)
 8000588:	f003 fde6 	bl	8004158 <HAL_UART_Transmit>

   //check to see if status reg
   	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000592:	4898      	ldr	r0, [pc, #608]	; (80007f4 <main+0x2e8>)
 8000594:	f001 f866 	bl	8001664 <HAL_GPIO_WritePin>
   	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	2201      	movs	r2, #1
 800059c:	4998      	ldr	r1, [pc, #608]	; (8000800 <main+0x2f4>)
 800059e:	4899      	ldr	r0, [pc, #612]	; (8000804 <main+0x2f8>)
 80005a0:	f002 ff25 	bl	80033ee <HAL_SPI_Transmit>
   	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 80005a4:	f107 0108 	add.w	r1, r7, #8
 80005a8:	2364      	movs	r3, #100	; 0x64
 80005aa:	2201      	movs	r2, #1
 80005ac:	4895      	ldr	r0, [pc, #596]	; (8000804 <main+0x2f8>)
 80005ae:	f003 f88c 	bl	80036ca <HAL_SPI_Receive>
   	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b8:	488e      	ldr	r0, [pc, #568]	; (80007f4 <main+0x2e8>)
 80005ba:	f001 f853 	bl	8001664 <HAL_GPIO_WritePin>

   //write enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c4:	488b      	ldr	r0, [pc, #556]	; (80007f4 <main+0x2e8>)
 80005c6:	f001 f84d 	bl	8001664 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_WREN, 1, 100);
 80005ca:	2364      	movs	r3, #100	; 0x64
 80005cc:	2201      	movs	r2, #1
 80005ce:	498e      	ldr	r1, [pc, #568]	; (8000808 <main+0x2fc>)
 80005d0:	488c      	ldr	r0, [pc, #560]	; (8000804 <main+0x2f8>)
 80005d2:	f002 ff0c 	bl	80033ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005dc:	4885      	ldr	r0, [pc, #532]	; (80007f4 <main+0x2e8>)
 80005de:	f001 f841 	bl	8001664 <HAL_GPIO_WritePin>

	//check to see if status reg
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e8:	4882      	ldr	r0, [pc, #520]	; (80007f4 <main+0x2e8>)
 80005ea:	f001 f83b 	bl	8001664 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	2201      	movs	r2, #1
 80005f2:	4983      	ldr	r1, [pc, #524]	; (8000800 <main+0x2f4>)
 80005f4:	4883      	ldr	r0, [pc, #524]	; (8000804 <main+0x2f8>)
 80005f6:	f002 fefa 	bl	80033ee <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 80005fa:	f107 0108 	add.w	r1, r7, #8
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	2201      	movs	r2, #1
 8000602:	4880      	ldr	r0, [pc, #512]	; (8000804 <main+0x2f8>)
 8000604:	f003 f861 	bl	80036ca <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	4879      	ldr	r0, [pc, #484]	; (80007f4 <main+0x2e8>)
 8000610:	f001 f828 	bl	8001664 <HAL_GPIO_WritePin>

	//address to save to
	addr[0] = 0x0f;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	220f      	movs	r2, #15
 8000618:	701a      	strb	r2, [r3, #0]
	addr[1] = 0xff;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	22ff      	movs	r2, #255	; 0xff
 800061e:	705a      	strb	r2, [r3, #1]
	addr[2] = 0x00;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	709a      	strb	r2, [r3, #2]


   //erase block
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062c:	4871      	ldr	r0, [pc, #452]	; (80007f4 <main+0x2e8>)
 800062e:	f001 f819 	bl	8001664 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_ER32, 1, 100);
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	2201      	movs	r2, #1
 8000636:	4975      	ldr	r1, [pc, #468]	; (800080c <main+0x300>)
 8000638:	4872      	ldr	r0, [pc, #456]	; (8000804 <main+0x2f8>)
 800063a:	f002 fed8 	bl	80033ee <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&addr, 3, 100);			//write address
 800063e:	1d39      	adds	r1, r7, #4
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	2203      	movs	r2, #3
 8000644:	486f      	ldr	r0, [pc, #444]	; (8000804 <main+0x2f8>)
 8000646:	f002 fed2 	bl	80033ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000650:	4868      	ldr	r0, [pc, #416]	; (80007f4 <main+0x2e8>)
 8000652:	f001 f807 	bl	8001664 <HAL_GPIO_WritePin>

	//check to see status reg
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065c:	4865      	ldr	r0, [pc, #404]	; (80007f4 <main+0x2e8>)
 800065e:	f001 f801 	bl	8001664 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	2201      	movs	r2, #1
 8000666:	4966      	ldr	r1, [pc, #408]	; (8000800 <main+0x2f4>)
 8000668:	4866      	ldr	r0, [pc, #408]	; (8000804 <main+0x2f8>)
 800066a:	f002 fec0 	bl	80033ee <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 800066e:	f107 0108 	add.w	r1, r7, #8
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	2201      	movs	r2, #1
 8000676:	4863      	ldr	r0, [pc, #396]	; (8000804 <main+0x2f8>)
 8000678:	f003 f827 	bl	80036ca <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <main+0x2e8>)
 8000684:	f000 ffee 	bl	8001664 <HAL_GPIO_WritePin>

	//write enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068e:	4859      	ldr	r0, [pc, #356]	; (80007f4 <main+0x2e8>)
 8000690:	f000 ffe8 	bl	8001664 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_WREN, 1, 100);
 8000694:	2364      	movs	r3, #100	; 0x64
 8000696:	2201      	movs	r2, #1
 8000698:	495b      	ldr	r1, [pc, #364]	; (8000808 <main+0x2fc>)
 800069a:	485a      	ldr	r0, [pc, #360]	; (8000804 <main+0x2f8>)
 800069c:	f002 fea7 	bl	80033ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a6:	4853      	ldr	r0, [pc, #332]	; (80007f4 <main+0x2e8>)
 80006a8:	f000 ffdc 	bl	8001664 <HAL_GPIO_WritePin>

	//check to see status reg
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b2:	4850      	ldr	r0, [pc, #320]	; (80007f4 <main+0x2e8>)
 80006b4:	f000 ffd6 	bl	8001664 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 80006b8:	2364      	movs	r3, #100	; 0x64
 80006ba:	2201      	movs	r2, #1
 80006bc:	4950      	ldr	r1, [pc, #320]	; (8000800 <main+0x2f4>)
 80006be:	4851      	ldr	r0, [pc, #324]	; (8000804 <main+0x2f8>)
 80006c0:	f002 fe95 	bl	80033ee <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 80006c4:	f107 0108 	add.w	r1, r7, #8
 80006c8:	2364      	movs	r3, #100	; 0x64
 80006ca:	2201      	movs	r2, #1
 80006cc:	484d      	ldr	r0, [pc, #308]	; (8000804 <main+0x2f8>)
 80006ce:	f002 fffc 	bl	80036ca <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d8:	4846      	ldr	r0, [pc, #280]	; (80007f4 <main+0x2e8>)
 80006da:	f000 ffc3 	bl	8001664 <HAL_GPIO_WritePin>

	//save message into tx buffer
	strcpy((char*)spiTX_buf, "I shall write this message into flash memory and then get it back! Please?\r\n");
 80006de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006e2:	4a4b      	ldr	r2, [pc, #300]	; (8000810 <main+0x304>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	4611      	mov	r1, r2
 80006e8:	234d      	movs	r3, #77	; 0x4d
 80006ea:	461a      	mov	r2, r3
 80006ec:	f004 fdda 	bl	80052a4 <memcpy>
	uint8_t buflen = strlen((char*)spiTX_buf);
 80006f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fd81 	bl	80001fc <strlen>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137


	//write data
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	//cs low
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000706:	483b      	ldr	r0, [pc, #236]	; (80007f4 <main+0x2e8>)
 8000708:	f000 ffac 	bl	8001664 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_WRITE, 1, 100);	//write opcode
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	2201      	movs	r2, #1
 8000710:	4940      	ldr	r1, [pc, #256]	; (8000814 <main+0x308>)
 8000712:	483c      	ldr	r0, [pc, #240]	; (8000804 <main+0x2f8>)
 8000714:	f002 fe6b 	bl	80033ee <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&addr, 3, 100);			//write address
 8000718:	1d39      	adds	r1, r7, #4
 800071a:	2364      	movs	r3, #100	; 0x64
 800071c:	2203      	movs	r2, #3
 800071e:	4839      	ldr	r0, [pc, #228]	; (8000804 <main+0x2f8>)
 8000720:	f002 fe65 	bl	80033ee <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&spiTX_buf, 100, 100);//data
 8000724:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	2264      	movs	r2, #100	; 0x64
 800072c:	4835      	ldr	r0, [pc, #212]	; (8000804 <main+0x2f8>)
 800072e:	f002 fe5e 	bl	80033ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000738:	482e      	ldr	r0, [pc, #184]	; (80007f4 <main+0x2e8>)
 800073a:	f000 ff93 	bl	8001664 <HAL_GPIO_WritePin>

	//write disable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <main+0x2e8>)
 8000746:	f000 ff8d 	bl	8001664 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_WRDI, 1, 100);
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2201      	movs	r2, #1
 800074e:	4932      	ldr	r1, [pc, #200]	; (8000818 <main+0x30c>)
 8000750:	482c      	ldr	r0, [pc, #176]	; (8000804 <main+0x2f8>)
 8000752:	f002 fe4c 	bl	80033ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800075c:	4825      	ldr	r0, [pc, #148]	; (80007f4 <main+0x2e8>)
 800075e:	f000 ff81 	bl	8001664 <HAL_GPIO_WritePin>

	//check to see if status reg
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000768:	4822      	ldr	r0, [pc, #136]	; (80007f4 <main+0x2e8>)
 800076a:	f000 ff7b 	bl	8001664 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 800076e:	2364      	movs	r3, #100	; 0x64
 8000770:	2201      	movs	r2, #1
 8000772:	4923      	ldr	r1, [pc, #140]	; (8000800 <main+0x2f4>)
 8000774:	4823      	ldr	r0, [pc, #140]	; (8000804 <main+0x2f8>)
 8000776:	f002 fe3a 	bl	80033ee <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 800077a:	f107 0108 	add.w	r1, r7, #8
 800077e:	2364      	movs	r3, #100	; 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4820      	ldr	r0, [pc, #128]	; (8000804 <main+0x2f8>)
 8000784:	f002 ffa1 	bl	80036ca <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078e:	4819      	ldr	r0, [pc, #100]	; (80007f4 <main+0x2e8>)
 8000790:	f000 ff68 	bl	8001664 <HAL_GPIO_WritePin>

	//read the data back
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	//cs low
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079a:	4816      	ldr	r0, [pc, #88]	; (80007f4 <main+0x2e8>)
 800079c:	f000 ff62 	bl	8001664 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_READ, 1, 100);	//opcode for read
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	2201      	movs	r2, #1
 80007a4:	491d      	ldr	r1, [pc, #116]	; (800081c <main+0x310>)
 80007a6:	4817      	ldr	r0, [pc, #92]	; (8000804 <main+0x2f8>)
 80007a8:	f002 fe21 	bl	80033ee <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&addr, 3, 100);			//address to read
 80007ac:	1d39      	adds	r1, r7, #4
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2203      	movs	r2, #3
 80007b2:	4814      	ldr	r0, [pc, #80]	; (8000804 <main+0x2f8>)
 80007b4:	f002 fe1b 	bl	80033ee <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 100, 100);	//Receive data
 80007b8:	f107 0108 	add.w	r1, r7, #8
 80007bc:	2364      	movs	r3, #100	; 0x64
 80007be:	2264      	movs	r2, #100	; 0x64
 80007c0:	4810      	ldr	r0, [pc, #64]	; (8000804 <main+0x2f8>)
 80007c2:	f002 ff82 	bl	80036ca <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <main+0x2e8>)
 80007ce:	f000 ff49 	bl	8001664 <HAL_GPIO_WritePin>

	//print the data to UART
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)spiRX_buf, strlen((char*)spiRX_buf), 100);
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fd10 	bl	80001fc <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f107 0108 	add.w	r1, r7, #8
 80007e4:	2364      	movs	r3, #100	; 0x64
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <main+0x2f0>)
 80007e8:	f003 fcb6 	bl	8004158 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <main+0x2e0>
 80007ee:	bf00      	nop
 80007f0:	48000400 	.word	0x48000400
 80007f4:	48000c00 	.word	0x48000c00
 80007f8:	080052e4 	.word	0x080052e4
 80007fc:	200004bc 	.word	0x200004bc
 8000800:	08005359 	.word	0x08005359
 8000804:	20000548 	.word	0x20000548
 8000808:	08005356 	.word	0x08005356
 800080c:	08005358 	.word	0x08005358
 8000810:	080052f4 	.word	0x080052f4
 8000814:	08005355 	.word	0x08005355
 8000818:	08005357 	.word	0x08005357
 800081c:	08005354 	.word	0x08005354

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b0bc      	sub	sp, #240	; 0xf0
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800082a:	2244      	movs	r2, #68	; 0x44
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f004 fd43 	bl	80052ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2294      	movs	r2, #148	; 0x94
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f004 fd35 	bl	80052ba <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000850:	2000      	movs	r0, #0
 8000852:	f001 f887 	bl	8001964 <HAL_PWREx_ControlVoltageScaling>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800085c:	f000 fa1a 	bl	8000c94 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000860:	2322      	movs	r3, #34	; 0x22
 8000862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800086a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800086e:	2301      	movs	r3, #1
 8000870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000874:	2340      	movs	r3, #64	; 0x40
 8000876:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 800088c:	231e      	movs	r3, #30
 800088e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000892:	2302      	movs	r3, #2
 8000894:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800089e:	2302      	movs	r3, #2
 80008a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 f91f 	bl	8001aec <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008b4:	f000 f9ee 	bl	8000c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2303      	movs	r3, #3
 80008c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008dc:	2105      	movs	r1, #5
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 fd2a 	bl	8002338 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xce>
  {
    Error_Handler();
 80008ea:	f000 f9d3 	bl	8000c94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 80008ee:	f242 0324 	movw	r3, #8228	; 0x2024
 80008f2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80008fc:	2300      	movs	r3, #0
 80008fe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	4618      	mov	r0, r3
 8000904:	f001 ffc8 	bl	8002898 <HAL_RCCEx_PeriphCLKConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800090e:	f000 f9c1 	bl	8000c94 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	37f0      	adds	r7, #240	; 0xf0
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 8000922:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <MX_LPUART1_UART_Init+0x94>)
 8000924:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 8000966:	f003 fba7 	bl	80040b8 <HAL_UART_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000970:	f000 f990 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 8000978:	f004 f8fb 	bl	8004b72 <HAL_UARTEx_SetTxFifoThreshold>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000982:	f000 f987 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4808      	ldr	r0, [pc, #32]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 800098a:	f004 f930 	bl	8004bee <HAL_UARTEx_SetRxFifoThreshold>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000994:	f000 f97e 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_LPUART1_UART_Init+0x90>)
 800099a:	f004 f8b1 	bl	8004b00 <HAL_UARTEx_DisableFifoMode>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009a4:	f000 f976 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200004bc 	.word	0x200004bc
 80009b0:	40008000 	.word	0x40008000

080009b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009ba:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <MX_USART3_UART_Init+0x94>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009fc:	4811      	ldr	r0, [pc, #68]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009fe:	f003 fb5b 	bl	80040b8 <HAL_UART_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a08:	f000 f944 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 8000a10:	f004 f8af 	bl	8004b72 <HAL_UARTEx_SetTxFifoThreshold>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1a:	f000 f93b 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 8000a22:	f004 f8e4 	bl	8004bee <HAL_UARTEx_SetRxFifoThreshold>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a2c:	f000 f932 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 8000a32:	f004 f865 	bl	8004b00 <HAL_UARTEx_DisableFifoMode>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a3c:	f000 f92a 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000028 	.word	0x20000028
 8000a48:	40004800 	.word	0x40004800

08000a4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a52:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <MX_SPI1_Init+0x78>)
 8000a54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a82:	2228      	movs	r2, #40	; 0x28
 8000a84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000a9a:	2207      	movs	r2, #7
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_SPI1_Init+0x74>)
 8000aac:	f002 fbfc 	bl	80032a8 <HAL_SPI_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ab6:	f000 f8ed 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000548 	.word	0x20000548
 8000ac4:	40013000 	.word	0x40013000

08000ac8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ace:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ad2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ad6:	2206      	movs	r2, #6
 8000ad8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b06:	f000 fdc5 	bl	8001694 <HAL_PCD_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000b10:	f000 f8c0 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000b4 	.word	0x200000b4

08000b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	; 0x30
 8000b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b52      	ldr	r3, [pc, #328]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a51      	ldr	r2, [pc, #324]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b4f      	ldr	r3, [pc, #316]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	4b4c      	ldr	r3, [pc, #304]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a4b      	ldr	r2, [pc, #300]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b49      	ldr	r3, [pc, #292]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b46      	ldr	r3, [pc, #280]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a45      	ldr	r2, [pc, #276]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b43      	ldr	r3, [pc, #268]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b40      	ldr	r3, [pc, #256]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a3f      	ldr	r2, [pc, #252]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b3d      	ldr	r3, [pc, #244]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	4b3a      	ldr	r3, [pc, #232]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a39      	ldr	r2, [pc, #228]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000baa:	4b34      	ldr	r3, [pc, #208]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a33      	ldr	r2, [pc, #204]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b31      	ldr	r3, [pc, #196]	; (8000c7c <MX_GPIO_Init+0x160>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000bc2:	f000 ff83 	bl	8001acc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000bcc:	482c      	ldr	r0, [pc, #176]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000bce:	f000 fd49 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd8:	482a      	ldr	r0, [pc, #168]	; (8000c84 <MX_GPIO_Init+0x168>)
 8000bda:	f000 fd43 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2120      	movs	r1, #32
 8000be2:	4829      	ldr	r0, [pc, #164]	; (8000c88 <MX_GPIO_Init+0x16c>)
 8000be4:	f000 fd3e 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_GPIO_Init+0x170>)
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4824      	ldr	r0, [pc, #144]	; (8000c90 <MX_GPIO_Init+0x174>)
 8000bfe:	f000 fb9f 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c02:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4819      	ldr	r0, [pc, #100]	; (8000c80 <MX_GPIO_Init+0x164>)
 8000c1c:	f000 fb90 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4812      	ldr	r0, [pc, #72]	; (8000c84 <MX_GPIO_Init+0x168>)
 8000c3a:	f000 fb81 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c3e:	2320      	movs	r3, #32
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <MX_GPIO_Init+0x16c>)
 8000c56:	f000 fb73 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c5a:	2340      	movs	r3, #64	; 0x40
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4806      	ldr	r0, [pc, #24]	; (8000c88 <MX_GPIO_Init+0x16c>)
 8000c6e:	f000 fb67 	bl	8001340 <HAL_GPIO_Init>

}
 8000c72:	bf00      	nop
 8000c74:	3730      	adds	r7, #48	; 0x30
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	48000400 	.word	0x48000400
 8000c84:	48000c00 	.word	0x48000c00
 8000c88:	48001800 	.word	0x48001800
 8000c8c:	10110000 	.word	0x10110000
 8000c90:	48000800 	.word	0x48000800

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <Error_Handler+0x6>

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6613      	str	r3, [r2, #96]	; 0x60
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a30      	ldr	r2, [pc, #192]	; (8000dc4 <HAL_UART_MspInit+0xe0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d12b      	bne.n	8000d5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <HAL_UART_MspInit+0xe4>)
 8000d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <HAL_UART_MspInit+0xe4>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <HAL_UART_MspInit+0xe4>)
 8000d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
 8000d1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <HAL_UART_MspInit+0xe4>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <HAL_UART_MspInit+0xe4>)
 8000d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <HAL_UART_MspInit+0xe4>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000d36:	f000 fec9 	bl	8001acc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000d3a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	481d      	ldr	r0, [pc, #116]	; (8000dcc <HAL_UART_MspInit+0xe8>)
 8000d58:	f000 faf2 	bl	8001340 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d5c:	e02d      	b.n	8000dba <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <HAL_UART_MspInit+0xec>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d128      	bne.n	8000dba <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0xe4>)
 8000d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6c:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <HAL_UART_MspInit+0xe4>)
 8000d6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d72:	6593      	str	r3, [r2, #88]	; 0x58
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_UART_MspInit+0xe4>)
 8000d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_UART_MspInit+0xe4>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_UART_MspInit+0xe4>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_UART_MspInit+0xe4>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000daa:	2307      	movs	r3, #7
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <HAL_UART_MspInit+0xf0>)
 8000db6:	f000 fac3 	bl	8001340 <HAL_GPIO_Init>
}
 8000dba:	bf00      	nop
 8000dbc:	3730      	adds	r7, #48	; 0x30
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40008000 	.word	0x40008000
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	48001800 	.word	0x48001800
 8000dd0:	40004800 	.word	0x40004800
 8000dd4:	48000c00 	.word	0x48000c00

08000dd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_SPI_MspInit+0x7c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d128      	bne.n	8000e4c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_SPI_MspInit+0x80>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfe:	4a16      	ldr	r2, [pc, #88]	; (8000e58 <HAL_SPI_MspInit+0x80>)
 8000e00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e04:	6613      	str	r3, [r2, #96]	; 0x60
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_SPI_MspInit+0x80>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_SPI_MspInit+0x80>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <HAL_SPI_MspInit+0x80>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_SPI_MspInit+0x80>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e2a:	23e0      	movs	r3, #224	; 0xe0
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f000 fa7a 	bl	8001340 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40013000 	.word	0x40013000
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e7c:	d154      	bne.n	8000f28 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <HAL_PCD_MspInit+0xd4>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a2b      	ldr	r2, [pc, #172]	; (8000f30 <HAL_PCD_MspInit+0xd4>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <HAL_PCD_MspInit+0xd4>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f000 fa43 	bl	8001340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f000 fa35 	bl	8001340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_PCD_MspInit+0xd4>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <HAL_PCD_MspInit+0xd4>)
 8000edc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <HAL_PCD_MspInit+0xd4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_PCD_MspInit+0xd4>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d114      	bne.n	8000f24 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_PCD_MspInit+0xd4>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <HAL_PCD_MspInit+0xd4>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	6593      	str	r3, [r2, #88]	; 0x58
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_PCD_MspInit+0xd4>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000f12:	f000 fdcb 	bl	8001aac <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_PCD_MspInit+0xd4>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <HAL_PCD_MspInit+0xd4>)
 8000f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f22:	e001      	b.n	8000f28 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000f24:	f000 fdc2 	bl	8001aac <HAL_PWREx_EnableVddUSB>
}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <NMI_Handler+0x4>

08000f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler+0x4>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f80:	f000 f8b6 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <SystemInit+0x64>)
 8000f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f92:	4a16      	ldr	r2, [pc, #88]	; (8000fec <SystemInit+0x64>)
 8000f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <SystemInit+0x68>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <SystemInit+0x68>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <SystemInit+0x68>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <SystemInit+0x68>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <SystemInit+0x68>)
 8000fb4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000fb8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fbc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <SystemInit+0x68>)
 8000fc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fc4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <SystemInit+0x68>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <SystemInit+0x68>)
 8000fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <SystemInit+0x68>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SystemInit+0x64>)
 8000fda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fde:	609a      	str	r2, [r3, #8]
#endif
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800102c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff8:	f7ff ffc6 	bl	8000f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ffc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ffe:	e003      	b.n	8001008 <LoopCopyDataInit>

08001000 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001002:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001004:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001006:	3104      	adds	r1, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001008:	480a      	ldr	r0, [pc, #40]	; (8001034 <LoopForever+0xa>)
	ldr	r3, =_edata
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <LoopForever+0xe>)
	adds	r2, r0, r1
 800100c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800100e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001010:	d3f6      	bcc.n	8001000 <CopyDataInit>
	ldr	r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001014:	e002      	b.n	800101c <LoopFillZerobss>

08001016 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001016:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001018:	f842 3b04 	str.w	r3, [r2], #4

0800101c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <LoopForever+0x16>)
	cmp	r2, r3
 800101e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001020:	d3f9      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001022:	f004 f91b 	bl	800525c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001026:	f7ff fa71 	bl	800050c <main>

0800102a <LoopForever>:

LoopForever:
    b LoopForever
 800102a:	e7fe      	b.n	800102a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800102c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001030:	080053cc 	.word	0x080053cc
	ldr	r0, =_sdata
 8001034:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001038:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800103c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001040:	200005b0 	.word	0x200005b0

08001044 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC1_IRQHandler>

08001046 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f941 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f80e 	bl	8001078 <HAL_InitTick>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	e001      	b.n	800106c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001068:	f7ff fe18 	bl	8000c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800106c:	79fb      	ldrb	r3, [r7, #7]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_InitTick+0x6c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d023      	beq.n	80010d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_InitTick+0x70>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_InitTick+0x6c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f93f 	bl	8001326 <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10f      	bne.n	80010ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d809      	bhi.n	80010c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f917 	bl	80012ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_InitTick+0x74>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e007      	b.n	80010d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e004      	b.n	80010d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e001      	b.n	80010d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008
 8001114:	200005ac 	.word	0x200005ac

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	200005ac 	.word	0x200005ac

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffee 	bl	8001118 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_Delay+0x40>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffde 	bl	8001118 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000008 	.word	0x20000008

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800119c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff47 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff5c 	bl	80011bc <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff8e 	bl	800122c <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffb0 	bl	8001294 <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134e:	e166      	b.n	800161e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2101      	movs	r1, #1
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 8158 	beq.w	8001618 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d00b      	beq.n	8001388 <HAL_GPIO_Init+0x48>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d007      	beq.n	8001388 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800137c:	2b11      	cmp	r3, #17
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b12      	cmp	r3, #18
 8001386:	d130      	bne.n	80013ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013be:	2201      	movs	r2, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	f003 0201 	and.w	r2, r3, #1
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0xea>
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b12      	cmp	r3, #18
 8001428:	d123      	bne.n	8001472 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	691a      	ldr	r2, [r3, #16]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	6939      	ldr	r1, [r7, #16]
 800146e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0203 	and.w	r2, r3, #3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80b2 	beq.w	8001618 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b4:	4b61      	ldr	r3, [pc, #388]	; (800163c <HAL_GPIO_Init+0x2fc>)
 80014b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b8:	4a60      	ldr	r2, [pc, #384]	; (800163c <HAL_GPIO_Init+0x2fc>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6613      	str	r3, [r2, #96]	; 0x60
 80014c0:	4b5e      	ldr	r3, [pc, #376]	; (800163c <HAL_GPIO_Init+0x2fc>)
 80014c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014cc:	4a5c      	ldr	r2, [pc, #368]	; (8001640 <HAL_GPIO_Init+0x300>)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014f6:	d02b      	beq.n	8001550 <HAL_GPIO_Init+0x210>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a52      	ldr	r2, [pc, #328]	; (8001644 <HAL_GPIO_Init+0x304>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d025      	beq.n	800154c <HAL_GPIO_Init+0x20c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a51      	ldr	r2, [pc, #324]	; (8001648 <HAL_GPIO_Init+0x308>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d01f      	beq.n	8001548 <HAL_GPIO_Init+0x208>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a50      	ldr	r2, [pc, #320]	; (800164c <HAL_GPIO_Init+0x30c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d019      	beq.n	8001544 <HAL_GPIO_Init+0x204>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a4f      	ldr	r2, [pc, #316]	; (8001650 <HAL_GPIO_Init+0x310>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d013      	beq.n	8001540 <HAL_GPIO_Init+0x200>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a4e      	ldr	r2, [pc, #312]	; (8001654 <HAL_GPIO_Init+0x314>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d00d      	beq.n	800153c <HAL_GPIO_Init+0x1fc>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a4d      	ldr	r2, [pc, #308]	; (8001658 <HAL_GPIO_Init+0x318>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d007      	beq.n	8001538 <HAL_GPIO_Init+0x1f8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a4c      	ldr	r2, [pc, #304]	; (800165c <HAL_GPIO_Init+0x31c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d101      	bne.n	8001534 <HAL_GPIO_Init+0x1f4>
 8001530:	2307      	movs	r3, #7
 8001532:	e00e      	b.n	8001552 <HAL_GPIO_Init+0x212>
 8001534:	2308      	movs	r3, #8
 8001536:	e00c      	b.n	8001552 <HAL_GPIO_Init+0x212>
 8001538:	2306      	movs	r3, #6
 800153a:	e00a      	b.n	8001552 <HAL_GPIO_Init+0x212>
 800153c:	2305      	movs	r3, #5
 800153e:	e008      	b.n	8001552 <HAL_GPIO_Init+0x212>
 8001540:	2304      	movs	r3, #4
 8001542:	e006      	b.n	8001552 <HAL_GPIO_Init+0x212>
 8001544:	2303      	movs	r3, #3
 8001546:	e004      	b.n	8001552 <HAL_GPIO_Init+0x212>
 8001548:	2302      	movs	r3, #2
 800154a:	e002      	b.n	8001552 <HAL_GPIO_Init+0x212>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_GPIO_Init+0x212>
 8001550:	2300      	movs	r3, #0
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	f002 0203 	and.w	r2, r2, #3
 8001558:	0092      	lsls	r2, r2, #2
 800155a:	4093      	lsls	r3, r2
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001562:	4937      	ldr	r1, [pc, #220]	; (8001640 <HAL_GPIO_Init+0x300>)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001570:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <HAL_GPIO_Init+0x320>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001594:	4a32      	ldr	r2, [pc, #200]	; (8001660 <HAL_GPIO_Init+0x320>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800159a:	4b31      	ldr	r3, [pc, #196]	; (8001660 <HAL_GPIO_Init+0x320>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015be:	4a28      	ldr	r2, [pc, #160]	; (8001660 <HAL_GPIO_Init+0x320>)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_GPIO_Init+0x320>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015e8:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <HAL_GPIO_Init+0x320>)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_GPIO_Init+0x320>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001612:	4a13      	ldr	r2, [pc, #76]	; (8001660 <HAL_GPIO_Init+0x320>)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3301      	adds	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	f47f ae91 	bne.w	8001350 <HAL_GPIO_Init+0x10>
  }
}
 800162e:	bf00      	nop
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800
 800164c:	48000c00 	.word	0x48000c00
 8001650:	48001000 	.word	0x48001000
 8001654:	48001400 	.word	0x48001400
 8001658:	48001800 	.word	0x48001800
 800165c:	48001c00 	.word	0x48001c00
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001680:	e002      	b.n	8001688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001696:	b08f      	sub	sp, #60	; 0x3c
 8001698:	af0a      	add	r7, sp, #40	; 0x28
 800169a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e116      	b.n	80018d4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d106      	bne.n	80016c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fbcb 	bl	8000e5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2203      	movs	r2, #3
 80016ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 fb7b 	bl	8004de0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	687e      	ldr	r6, [r7, #4]
 80016f2:	466d      	mov	r5, sp
 80016f4:	f106 0410 	add.w	r4, r6, #16
 80016f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001700:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001704:	e885 0003 	stmia.w	r5, {r0, r1}
 8001708:	1d33      	adds	r3, r6, #4
 800170a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	f003 fb15 	bl	8004d3c <USB_CoreInit>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0d7      	b.n	80018d4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f003 fb69 	bl	8004e02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	e04a      	b.n	80017cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001736:	7bfa      	ldrb	r2, [r7, #15]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	333d      	adds	r3, #61	; 0x3d
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	1a9b      	subs	r3, r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	333c      	adds	r3, #60	; 0x3c
 800175a:	7bfa      	ldrb	r2, [r7, #15]
 800175c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	b298      	uxth	r0, r3
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	1a9b      	subs	r3, r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	3342      	adds	r3, #66	; 0x42
 8001772:	4602      	mov	r2, r0
 8001774:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	333f      	adds	r3, #63	; 0x3f
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800178a:	7bfa      	ldrb	r2, [r7, #15]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	3344      	adds	r3, #68	; 0x44
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800179e:	7bfa      	ldrb	r2, [r7, #15]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	3348      	adds	r3, #72	; 0x48
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017b2:	7bfa      	ldrb	r2, [r7, #15]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	1a9b      	subs	r3, r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	3350      	adds	r3, #80	; 0x50
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	3301      	adds	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d3af      	bcc.n	8001736 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	e044      	b.n	8001866 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	3301      	adds	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	d3b5      	bcc.n	80017dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	687e      	ldr	r6, [r7, #4]
 8001878:	466d      	mov	r5, sp
 800187a:	f106 0410 	add.w	r4, r6, #16
 800187e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800188a:	e885 0003 	stmia.w	r5, {r0, r1}
 800188e:	1d33      	adds	r3, r6, #4
 8001890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001892:	6838      	ldr	r0, [r7, #0]
 8001894:	f003 fae0 	bl	8004e58 <USB_DevInit>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2202      	movs	r2, #2
 80018a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e014      	b.n	80018d4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d102      	bne.n	80018c8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f80a 	bl	80018dc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 fc70 	bl	80051b2 <USB_DevDisconnect>

  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190e:	f043 0303 	orr.w	r3, r3, #3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_PWREx_GetVoltageRange+0x3c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001934:	d102      	bne.n	800193c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800193a:	e00b      	b.n	8001954 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_PWREx_GetVoltageRange+0x3c>)
 800193e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800194a:	d102      	bne.n	8001952 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800194c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001950:	e000      	b.n	8001954 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001952:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40007000 	.word	0x40007000

08001964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d141      	bne.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001972:	4b4b      	ldr	r3, [pc, #300]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800197a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197e:	d131      	bne.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001980:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001986:	4a46      	ldr	r2, [pc, #280]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800198c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001990:	4b43      	ldr	r3, [pc, #268]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001998:	4a41      	ldr	r2, [pc, #260]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80019a0:	4b40      	ldr	r3, [pc, #256]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2232      	movs	r2, #50	; 0x32
 80019a6:	fb02 f303 	mul.w	r3, r2, r3
 80019aa:	4a3f      	ldr	r2, [pc, #252]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	0c9b      	lsrs	r3, r3, #18
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b6:	e002      	b.n	80019be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019be:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ca:	d102      	bne.n	80019d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f2      	bne.n	80019b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019de:	d158      	bne.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e057      	b.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019e4:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ea:	4a2d      	ldr	r2, [pc, #180]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019f4:	e04d      	b.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019fc:	d141      	bne.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019fe:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0a:	d131      	bne.n	8001a70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a12:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a1c:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a24:	4a1e      	ldr	r2, [pc, #120]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2232      	movs	r2, #50	; 0x32
 8001a32:	fb02 f303 	mul.w	r3, r2, r3
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	0c9b      	lsrs	r3, r3, #18
 8001a3e:	3301      	adds	r3, #1
 8001a40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a42:	e002      	b.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a56:	d102      	bne.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f2      	bne.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6a:	d112      	bne.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e011      	b.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a80:	e007      	b.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a90:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	431bde83 	.word	0x431bde83

08001aac <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aba:	6053      	str	r3, [r2, #4]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40007000 	.word	0x40007000

08001acc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ada:	6053      	str	r3, [r2, #4]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40007000 	.word	0x40007000

08001aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f000 bc16 	b.w	800232c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b00:	4ba0      	ldr	r3, [pc, #640]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0a:	4b9e      	ldr	r3, [pc, #632]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80e4 	beq.w	8001cea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4c>
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	f040 808b 	bne.w	8001c46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	f040 8087 	bne.w	8001c46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b38:	4b92      	ldr	r3, [pc, #584]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_OscConfig+0x64>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e3ed      	b.n	800232c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1a      	ldr	r2, [r3, #32]
 8001b54:	4b8b      	ldr	r3, [pc, #556]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <HAL_RCC_OscConfig+0x7e>
 8001b60:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b68:	e005      	b.n	8001b76 <HAL_RCC_OscConfig+0x8a>
 8001b6a:	4b86      	ldr	r3, [pc, #536]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d223      	bcs.n	8001bc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fdc8 	bl	8002714 <RCC_SetFlashLatencyFromMSIRange>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e3ce      	b.n	800232c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8e:	4b7d      	ldr	r3, [pc, #500]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a7c      	ldr	r2, [pc, #496]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b94:	f043 0308 	orr.w	r3, r3, #8
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b7a      	ldr	r3, [pc, #488]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4977      	ldr	r1, [pc, #476]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bac:	4b75      	ldr	r3, [pc, #468]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	4972      	ldr	r1, [pc, #456]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
 8001bc0:	e025      	b.n	8001c0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc2:	4b70      	ldr	r3, [pc, #448]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6f      	ldr	r2, [pc, #444]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b6d      	ldr	r3, [pc, #436]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	496a      	ldr	r1, [pc, #424]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be0:	4b68      	ldr	r3, [pc, #416]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	4965      	ldr	r1, [pc, #404]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fd88 	bl	8002714 <RCC_SetFlashLatencyFromMSIRange>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e38e      	b.n	800232c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c0e:	f000 fcbf 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 8001c12:	4601      	mov	r1, r0
 8001c14:	4b5b      	ldr	r3, [pc, #364]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	4a5a      	ldr	r2, [pc, #360]	; (8001d88 <HAL_RCC_OscConfig+0x29c>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	fa21 f303 	lsr.w	r3, r1, r3
 8001c2a:	4a58      	ldr	r2, [pc, #352]	; (8001d8c <HAL_RCC_OscConfig+0x2a0>)
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c2e:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <HAL_RCC_OscConfig+0x2a4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fa20 	bl	8001078 <HAL_InitTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d052      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	e372      	b.n	800232c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d032      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c4e:	4b4d      	ldr	r3, [pc, #308]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a4c      	ldr	r2, [pc, #304]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fa5d 	bl	8001118 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c62:	f7ff fa59 	bl	8001118 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e35b      	b.n	800232c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c74:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c80:	4b40      	ldr	r3, [pc, #256]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a3f      	ldr	r2, [pc, #252]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	493a      	ldr	r1, [pc, #232]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c9e:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	4935      	ldr	r1, [pc, #212]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]
 8001cb2:	e01a      	b.n	8001cea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cb4:	4b33      	ldr	r3, [pc, #204]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a32      	ldr	r2, [pc, #200]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fa2a 	bl	8001118 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cc8:	f7ff fa26 	bl	8001118 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e328      	b.n	800232c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x1dc>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d073      	beq.n	8001dde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_OscConfig+0x21c>
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d10e      	bne.n	8001d20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d10b      	bne.n	8001d20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d063      	beq.n	8001ddc <HAL_RCC_OscConfig+0x2f0>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d15f      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e305      	b.n	800232c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d28:	d106      	bne.n	8001d38 <HAL_RCC_OscConfig+0x24c>
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a15      	ldr	r2, [pc, #84]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e01d      	b.n	8001d74 <HAL_RCC_OscConfig+0x288>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x270>
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a0f      	ldr	r2, [pc, #60]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0x288>
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <HAL_RCC_OscConfig+0x298>)
 8001d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01b      	beq.n	8001db4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f9cc 	bl	8001118 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d82:	e010      	b.n	8001da6 <HAL_RCC_OscConfig+0x2ba>
 8001d84:	40021000 	.word	0x40021000
 8001d88:	0800535c 	.word	0x0800535c
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff f9c0 	bl	8001118 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e2c2      	b.n	800232c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da6:	4baf      	ldr	r3, [pc, #700]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x2a8>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f9b0 	bl	8001118 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff f9ac 	bl	8001118 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e2ae      	b.n	800232c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dce:	4ba5      	ldr	r3, [pc, #660]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x2d0>
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d060      	beq.n	8001eac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_OscConfig+0x310>
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	d119      	bne.n	8001e2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d116      	bne.n	8001e2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dfc:	4b99      	ldr	r3, [pc, #612]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_OscConfig+0x328>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e28b      	b.n	800232c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e14:	4b93      	ldr	r3, [pc, #588]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	4990      	ldr	r1, [pc, #576]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e28:	e040      	b.n	8001eac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d023      	beq.n	8001e7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e32:	4b8c      	ldr	r3, [pc, #560]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a8b      	ldr	r2, [pc, #556]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f96b 	bl	8001118 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e46:	f7ff f967 	bl	8001118 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e269      	b.n	800232c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e58:	4b82      	ldr	r3, [pc, #520]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	4b7f      	ldr	r3, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	497c      	ldr	r1, [pc, #496]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
 8001e78:	e018      	b.n	8001eac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7a:	4b7a      	ldr	r3, [pc, #488]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a79      	ldr	r2, [pc, #484]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7ff f947 	bl	8001118 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f943 	bl	8001118 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e245      	b.n	800232c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea0:	4b70      	ldr	r3, [pc, #448]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d03c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01c      	beq.n	8001efa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec0:	4b68      	ldr	r3, [pc, #416]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	4a67      	ldr	r2, [pc, #412]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff f922 	bl	8001118 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff f91e 	bl	8001118 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e220      	b.n	800232c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eea:	4b5e      	ldr	r3, [pc, #376]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ef      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x3ec>
 8001ef8:	e01b      	b.n	8001f32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efa:	4b5a      	ldr	r3, [pc, #360]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f00:	4a58      	ldr	r2, [pc, #352]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0a:	f7ff f905 	bl	8001118 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f12:	f7ff f901 	bl	8001118 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e203      	b.n	800232c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f24:	4b4f      	ldr	r3, [pc, #316]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1ef      	bne.n	8001f12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80a6 	beq.w	800208c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f44:	4b47      	ldr	r3, [pc, #284]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10d      	bne.n	8001f6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	4b44      	ldr	r3, [pc, #272]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	4a43      	ldr	r2, [pc, #268]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f5c:	4b41      	ldr	r3, [pc, #260]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <HAL_RCC_OscConfig+0x57c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d118      	bne.n	8001faa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f78:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_RCC_OscConfig+0x57c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a3a      	ldr	r2, [pc, #232]	; (8002068 <HAL_RCC_OscConfig+0x57c>)
 8001f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f84:	f7ff f8c8 	bl	8001118 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8c:	f7ff f8c4 	bl	8001118 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1c6      	b.n	800232c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f9e:	4b32      	ldr	r3, [pc, #200]	; (8002068 <HAL_RCC_OscConfig+0x57c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d108      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4d8>
 8001fb2:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	4a2a      	ldr	r2, [pc, #168]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc2:	e024      	b.n	800200e <HAL_RCC_OscConfig+0x522>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d110      	bne.n	8001fee <HAL_RCC_OscConfig+0x502>
 8001fcc:	4b25      	ldr	r3, [pc, #148]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	4a24      	ldr	r2, [pc, #144]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe2:	4a20      	ldr	r2, [pc, #128]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fec:	e00f      	b.n	800200e <HAL_RCC_OscConfig+0x522>
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	4a17      	ldr	r2, [pc, #92]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8002006:	f023 0304 	bic.w	r3, r3, #4
 800200a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d016      	beq.n	8002044 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7ff f87f 	bl	8001118 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff f87b 	bl	8001118 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e17b      	b.n	800232c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_OscConfig+0x578>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0ed      	beq.n	800201e <HAL_RCC_OscConfig+0x532>
 8002042:	e01a      	b.n	800207a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff f868 	bl	8001118 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800204a:	e00f      	b.n	800206c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7ff f864 	bl	8001118 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	; 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d906      	bls.n	800206c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e164      	b.n	800232c <HAL_RCC_OscConfig+0x840>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800206c:	4ba8      	ldr	r3, [pc, #672]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1e8      	bne.n	800204c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207a:	7ffb      	ldrb	r3, [r7, #31]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002080:	4ba3      	ldr	r3, [pc, #652]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	4aa2      	ldr	r2, [pc, #648]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 8002086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d03c      	beq.n	8002112 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01c      	beq.n	80020da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020a0:	4b9b      	ldr	r3, [pc, #620]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80020a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a6:	4a9a      	ldr	r2, [pc, #616]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff f832 	bl	8001118 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b8:	f7ff f82e 	bl	8001118 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e130      	b.n	800232c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ca:	4b91      	ldr	r3, [pc, #580]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80020cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ef      	beq.n	80020b8 <HAL_RCC_OscConfig+0x5cc>
 80020d8:	e01b      	b.n	8002112 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020da:	4b8d      	ldr	r3, [pc, #564]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80020dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e0:	4a8b      	ldr	r2, [pc, #556]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ea:	f7ff f815 	bl	8001118 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f2:	f7ff f811 	bl	8001118 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e113      	b.n	800232c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002104:	4b82      	ldr	r3, [pc, #520]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 8002106:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ef      	bne.n	80020f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8107 	beq.w	800232a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	2b02      	cmp	r3, #2
 8002122:	f040 80cb 	bne.w	80022bc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002126:	4b7a      	ldr	r3, [pc, #488]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 0203 	and.w	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	429a      	cmp	r2, r3
 8002138:	d12c      	bne.n	8002194 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	3b01      	subs	r3, #1
 8002146:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d123      	bne.n	8002194 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002156:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d11b      	bne.n	8002194 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d113      	bne.n	8002194 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	085b      	lsrs	r3, r3, #1
 8002178:	3b01      	subs	r3, #1
 800217a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d109      	bne.n	8002194 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	3b01      	subs	r3, #1
 800218e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d06d      	beq.n	8002270 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2b0c      	cmp	r3, #12
 8002198:	d068      	beq.n	800226c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800219a:	4b5d      	ldr	r3, [pc, #372]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d105      	bne.n	80021b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021a6:	4b5a      	ldr	r3, [pc, #360]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0ba      	b.n	800232c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021b6:	4b56      	ldr	r3, [pc, #344]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a55      	ldr	r2, [pc, #340]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80021bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021c2:	f7fe ffa9 	bl	8001118 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ca:	f7fe ffa5 	bl	8001118 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e0a7      	b.n	800232c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021dc:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f0      	bne.n	80021ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e8:	4b49      	ldr	r3, [pc, #292]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	4b49      	ldr	r3, [pc, #292]	; (8002314 <HAL_RCC_OscConfig+0x828>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021f8:	3a01      	subs	r2, #1
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	4311      	orrs	r1, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002202:	0212      	lsls	r2, r2, #8
 8002204:	4311      	orrs	r1, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800220a:	0852      	lsrs	r2, r2, #1
 800220c:	3a01      	subs	r2, #1
 800220e:	0552      	lsls	r2, r2, #21
 8002210:	4311      	orrs	r1, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002216:	0852      	lsrs	r2, r2, #1
 8002218:	3a01      	subs	r2, #1
 800221a:	0652      	lsls	r2, r2, #25
 800221c:	4311      	orrs	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002222:	06d2      	lsls	r2, r2, #27
 8002224:	430a      	orrs	r2, r1
 8002226:	493a      	ldr	r1, [pc, #232]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 8002228:	4313      	orrs	r3, r2
 800222a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800222c:	4b38      	ldr	r3, [pc, #224]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a37      	ldr	r2, [pc, #220]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002236:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002238:	4b35      	ldr	r3, [pc, #212]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a34      	ldr	r2, [pc, #208]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002242:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002244:	f7fe ff68 	bl	8001118 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7fe ff64 	bl	8001118 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e066      	b.n	800232c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800226a:	e05e      	b.n	800232a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e05d      	b.n	800232c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d156      	bne.n	800232a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a23      	ldr	r2, [pc, #140]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002286:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002288:	4b21      	ldr	r3, [pc, #132]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a20      	ldr	r2, [pc, #128]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 800228e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002292:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002294:	f7fe ff40 	bl	8001118 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229c:	f7fe ff3c 	bl	8001118 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e03e      	b.n	800232c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x7b0>
 80022ba:	e036      	b.n	800232a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d031      	beq.n	8002326 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a12      	ldr	r2, [pc, #72]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80022c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80022e0:	f023 0303 	bic.w	r3, r3, #3
 80022e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	4a09      	ldr	r2, [pc, #36]	; (8002310 <HAL_RCC_OscConfig+0x824>)
 80022ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fe ff0f 	bl	8001118 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fc:	e00c      	b.n	8002318 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7fe ff0b 	bl	8001118 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d905      	bls.n	8002318 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e00d      	b.n	800232c <HAL_RCC_OscConfig+0x840>
 8002310:	40021000 	.word	0x40021000
 8002314:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_RCC_OscConfig+0x848>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1ec      	bne.n	80022fe <HAL_RCC_OscConfig+0x812>
 8002324:	e001      	b.n	800232a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000

08002338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e10f      	b.n	8002570 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b89      	ldr	r3, [pc, #548]	; (8002578 <HAL_RCC_ClockConfig+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d910      	bls.n	8002380 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b86      	ldr	r3, [pc, #536]	; (8002578 <HAL_RCC_ClockConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 020f 	bic.w	r2, r3, #15
 8002366:	4984      	ldr	r1, [pc, #528]	; (8002578 <HAL_RCC_ClockConfig+0x240>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b82      	ldr	r3, [pc, #520]	; (8002578 <HAL_RCC_ClockConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0f7      	b.n	8002570 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 8089 	beq.w	80024a0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d133      	bne.n	80023fe <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002396:	4b79      	ldr	r3, [pc, #484]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e0e4      	b.n	8002570 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80023a6:	f000 fa0f 	bl	80027c8 <RCC_GetSysClockFreqFromPLLSource>
 80023aa:	4602      	mov	r2, r0
 80023ac:	4b74      	ldr	r3, [pc, #464]	; (8002580 <HAL_RCC_ClockConfig+0x248>)
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d955      	bls.n	800245e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80023b2:	4b72      	ldr	r3, [pc, #456]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023be:	4b6f      	ldr	r3, [pc, #444]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023c6:	4a6d      	ldr	r2, [pc, #436]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 80023c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	e044      	b.n	800245e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d03e      	beq.n	800245e <HAL_RCC_ClockConfig+0x126>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d13a      	bne.n	800245e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023e8:	4b64      	ldr	r3, [pc, #400]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f0:	4a62      	ldr	r2, [pc, #392]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 80023f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e02f      	b.n	800245e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002406:	4b5d      	ldr	r3, [pc, #372]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d115      	bne.n	800243e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0ac      	b.n	8002570 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800241e:	4b57      	ldr	r3, [pc, #348]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0a0      	b.n	8002570 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242e:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e098      	b.n	8002570 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800243e:	f000 f8a7 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 8002442:	4602      	mov	r2, r0
 8002444:	4b4e      	ldr	r3, [pc, #312]	; (8002580 <HAL_RCC_ClockConfig+0x248>)
 8002446:	429a      	cmp	r2, r3
 8002448:	d909      	bls.n	800245e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800244a:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002452:	4a4a      	ldr	r2, [pc, #296]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 8002454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002458:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f023 0203 	bic.w	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4944      	ldr	r1, [pc, #272]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002470:	f7fe fe52 	bl	8001118 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	e00a      	b.n	800248e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002478:	f7fe fe4e 	bl	8001118 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	; 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e070      	b.n	8002570 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 020c 	and.w	r2, r3, #12
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	429a      	cmp	r2, r3
 800249e:	d1eb      	bne.n	8002478 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d009      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b33      	ldr	r3, [pc, #204]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4930      	ldr	r1, [pc, #192]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
 80024be:	e008      	b.n	80024d2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b80      	cmp	r3, #128	; 0x80
 80024c4:	d105      	bne.n	80024d2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024c6:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	4a2c      	ldr	r2, [pc, #176]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 80024cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024d0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_RCC_ClockConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d210      	bcs.n	8002502 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e0:	4b25      	ldr	r3, [pc, #148]	; (8002578 <HAL_RCC_ClockConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 020f 	bic.w	r2, r3, #15
 80024e8:	4923      	ldr	r1, [pc, #140]	; (8002578 <HAL_RCC_ClockConfig+0x240>)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_RCC_ClockConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e036      	b.n	8002570 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	4918      	ldr	r1, [pc, #96]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 800251c:	4313      	orrs	r3, r2
 800251e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d009      	beq.n	8002540 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4910      	ldr	r1, [pc, #64]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002540:	f000 f826 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 8002544:	4601      	mov	r1, r0
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCC_ClockConfig+0x244>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	4a0c      	ldr	r2, [pc, #48]	; (8002584 <HAL_RCC_ClockConfig+0x24c>)
 8002552:	5cd3      	ldrb	r3, [r2, r3]
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	fa21 f303 	lsr.w	r3, r1, r3
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_RCC_ClockConfig+0x250>)
 800255e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_RCC_ClockConfig+0x254>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fd87 	bl	8001078 <HAL_InitTick>
 800256a:	4603      	mov	r3, r0
 800256c:	73fb      	strb	r3, [r7, #15]

  return status;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40022000 	.word	0x40022000
 800257c:	40021000 	.word	0x40021000
 8002580:	04c4b400 	.word	0x04c4b400
 8002584:	0800535c 	.word	0x0800535c
 8002588:	20000000 	.word	0x20000000
 800258c:	20000004 	.word	0x20000004

08002590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259e:	4b3d      	ldr	r3, [pc, #244]	; (8002694 <HAL_RCC_GetSysClockFreq+0x104>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a8:	4b3a      	ldr	r3, [pc, #232]	; (8002694 <HAL_RCC_GetSysClockFreq+0x104>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x34>
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d121      	bne.n	8002602 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d11e      	bne.n	8002602 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025c4:	4b33      	ldr	r3, [pc, #204]	; (8002694 <HAL_RCC_GetSysClockFreq+0x104>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d107      	bne.n	80025e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025d0:	4b30      	ldr	r3, [pc, #192]	; (8002694 <HAL_RCC_GetSysClockFreq+0x104>)
 80025d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e005      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025e0:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <HAL_RCC_GetSysClockFreq+0x104>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025ec:	4a2a      	ldr	r2, [pc, #168]	; (8002698 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10d      	bne.n	8002618 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b04      	cmp	r3, #4
 8002606:	d102      	bne.n	800260e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002608:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCC_GetSysClockFreq+0x10c>)
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	e004      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b08      	cmp	r3, #8
 8002612:	d101      	bne.n	8002618 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002614:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002616:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d133      	bne.n	8002686 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_RCC_GetSysClockFreq+0x104>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d002      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0xa4>
 800262e:	2b03      	cmp	r3, #3
 8002630:	d003      	beq.n	800263a <HAL_RCC_GetSysClockFreq+0xaa>
 8002632:	e005      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002636:	617b      	str	r3, [r7, #20]
      break;
 8002638:	e005      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800263a:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800263c:	617b      	str	r3, [r7, #20]
      break;
 800263e:	e002      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	617b      	str	r3, [r7, #20]
      break;
 8002644:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <HAL_RCC_GetSysClockFreq+0x104>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	3301      	adds	r3, #1
 8002652:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <HAL_RCC_GetSysClockFreq+0x104>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	fb02 f203 	mul.w	r2, r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCC_GetSysClockFreq+0x104>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	0e5b      	lsrs	r3, r3, #25
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	3301      	adds	r3, #1
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	fbb2 f3f3 	udiv	r3, r2, r3
 8002684:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002686:	69bb      	ldr	r3, [r7, #24]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3724      	adds	r7, #36	; 0x24
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40021000 	.word	0x40021000
 8002698:	08005374 	.word	0x08005374
 800269c:	00f42400 	.word	0x00f42400
 80026a0:	007a1200 	.word	0x007a1200

080026a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000

080026bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026c0:	f7ff fff0 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026c4:	4601      	mov	r1, r0
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	0800536c 	.word	0x0800536c

080026e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026ec:	f7ff ffda 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026f0:	4601      	mov	r1, r0
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0adb      	lsrs	r3, r3, #11
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4a04      	ldr	r2, [pc, #16]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026fe:	5cd3      	ldrb	r3, [r2, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	0800536c 	.word	0x0800536c

08002714 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800272c:	f7ff f8fa 	bl	8001924 <HAL_PWREx_GetVoltageRange>
 8002730:	6178      	str	r0, [r7, #20]
 8002732:	e014      	b.n	800275e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	4a21      	ldr	r2, [pc, #132]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800273a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273e:	6593      	str	r3, [r2, #88]	; 0x58
 8002740:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800274c:	f7ff f8ea 	bl	8001924 <HAL_PWREx_GetVoltageRange>
 8002750:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002764:	d10b      	bne.n	800277e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b80      	cmp	r3, #128	; 0x80
 800276a:	d913      	bls.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2ba0      	cmp	r3, #160	; 0xa0
 8002770:	d902      	bls.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002772:	2302      	movs	r3, #2
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	e00d      	b.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002778:	2301      	movs	r3, #1
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	e00a      	b.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b7f      	cmp	r3, #127	; 0x7f
 8002782:	d902      	bls.n	800278a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002784:	2302      	movs	r3, #2
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	e004      	b.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b70      	cmp	r3, #112	; 0x70
 800278e:	d101      	bne.n	8002794 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002790:	2301      	movs	r3, #1
 8002792:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 020f 	bic.w	r2, r3, #15
 800279c:	4909      	ldr	r1, [pc, #36]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d001      	beq.n	80027b6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40022000 	.word	0x40022000

080027c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80027d2:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d118      	bne.n	8002810 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027de:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027ea:	4b27      	ldr	r3, [pc, #156]	; (8002888 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80027ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	e005      	b.n	8002806 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027fa:	4b23      	ldr	r3, [pc, #140]	; (8002888 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002806:	4a21      	ldr	r2, [pc, #132]	; (800288c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d002      	beq.n	8002826 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002820:	2b03      	cmp	r3, #3
 8002822:	d003      	beq.n	800282c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002824:	e005      	b.n	8002832 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002828:	613b      	str	r3, [r7, #16]
    break;
 800282a:	e005      	b.n	8002838 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800282e:	613b      	str	r3, [r7, #16]
    break;
 8002830:	e002      	b.n	8002838 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	613b      	str	r3, [r7, #16]
    break;
 8002836:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	3301      	adds	r3, #1
 8002844:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	fb02 f203 	mul.w	r2, r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	0e5b      	lsrs	r3, r3, #25
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	3301      	adds	r3, #1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	fbb2 f3f3 	udiv	r3, r2, r3
 8002876:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002878:	683b      	ldr	r3, [r7, #0]
}
 800287a:	4618      	mov	r0, r3
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	08005374 	.word	0x08005374
 8002890:	00f42400 	.word	0x00f42400
 8002894:	007a1200 	.word	0x007a1200

08002898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028a0:	2300      	movs	r3, #0
 80028a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028a4:	2300      	movs	r3, #0
 80028a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d03d      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b8:	2b40      	cmp	r3, #64	; 0x40
 80028ba:	d00b      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d804      	bhi.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00e      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d015      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80028c8:	e01d      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80028ca:	2b60      	cmp	r3, #96	; 0x60
 80028cc:	d01e      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80028ce:	2b80      	cmp	r3, #128	; 0x80
 80028d0:	d01c      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80028d2:	e018      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028d4:	4b86      	ldr	r3, [pc, #536]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a85      	ldr	r2, [pc, #532]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028e0:	e015      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fafd 	bl	8002ee8 <RCCEx_PLLSAI1_Config>
 80028ee:	4603      	mov	r3, r0
 80028f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028f2:	e00c      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3320      	adds	r3, #32
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fbe4 	bl	80030c8 <RCCEx_PLLSAI2_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002904:	e003      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	74fb      	strb	r3, [r7, #19]
      break;
 800290a:	e000      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 800290c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002914:	4b76      	ldr	r3, [pc, #472]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002916:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800291a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002922:	4973      	ldr	r1, [pc, #460]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800292a:	e001      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d042      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002944:	d00f      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294a:	d805      	bhi.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d011      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002954:	d017      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002956:	e01f      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800295c:	d01f      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800295e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002962:	d01c      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002964:	e018      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002966:	4b62      	ldr	r3, [pc, #392]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	4a61      	ldr	r2, [pc, #388]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002972:	e015      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3304      	adds	r3, #4
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fab4 	bl	8002ee8 <RCCEx_PLLSAI1_Config>
 8002980:	4603      	mov	r3, r0
 8002982:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002984:	e00c      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3320      	adds	r3, #32
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fb9b 	bl	80030c8 <RCCEx_PLLSAI2_Config>
 8002992:	4603      	mov	r3, r0
 8002994:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002996:	e003      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	74fb      	strb	r3, [r7, #19]
      break;
 800299c:	e000      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800299e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10b      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029a6:	4b52      	ldr	r3, [pc, #328]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	494e      	ldr	r1, [pc, #312]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80029bc:	e001      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029be:	7cfb      	ldrb	r3, [r7, #19]
 80029c0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 809f 	beq.w	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d0:	2300      	movs	r3, #0
 80029d2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029d4:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80029e4:	2300      	movs	r3, #0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00d      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	4a40      	ldr	r2, [pc, #256]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f4:	6593      	str	r3, [r2, #88]	; 0x58
 80029f6:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a02:	2301      	movs	r3, #1
 8002a04:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a06:	4b3b      	ldr	r3, [pc, #236]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a3a      	ldr	r2, [pc, #232]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a12:	f7fe fb81 	bl	8001118 <HAL_GetTick>
 8002a16:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a18:	e009      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7fe fb7d 	bl	8001118 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d902      	bls.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	74fb      	strb	r3, [r7, #19]
        break;
 8002a2c:	e005      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a2e:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0ef      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8002a3a:	7cfb      	ldrb	r3, [r7, #19]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d15b      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a40:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01f      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d019      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a5e:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a6a:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a8a:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d016      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fb3c 	bl	8001118 <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa2:	e00b      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fb38 	bl	8001118 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d902      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	74fb      	strb	r3, [r7, #19]
            break;
 8002aba:	e006      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0ec      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10c      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	4903      	ldr	r1, [pc, #12]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ae8:	e008      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aea:	7cfb      	ldrb	r3, [r7, #19]
 8002aec:	74bb      	strb	r3, [r7, #18]
 8002aee:	e005      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002afc:	7c7b      	ldrb	r3, [r7, #17]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d105      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b02:	4ba0      	ldr	r3, [pc, #640]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b06:	4a9f      	ldr	r2, [pc, #636]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b1a:	4b9a      	ldr	r3, [pc, #616]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b20:	f023 0203 	bic.w	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	4996      	ldr	r1, [pc, #600]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b3c:	4b91      	ldr	r3, [pc, #580]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f023 020c 	bic.w	r2, r3, #12
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	498e      	ldr	r1, [pc, #568]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b5e:	4b89      	ldr	r3, [pc, #548]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	4985      	ldr	r1, [pc, #532]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b80:	4b80      	ldr	r3, [pc, #512]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8e:	497d      	ldr	r1, [pc, #500]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ba2:	4b78      	ldr	r3, [pc, #480]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb0:	4974      	ldr	r1, [pc, #464]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bc4:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd2:	496c      	ldr	r1, [pc, #432]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002be6:	4b67      	ldr	r3, [pc, #412]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf4:	4963      	ldr	r1, [pc, #396]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c08:	4b5e      	ldr	r3, [pc, #376]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c16:	495b      	ldr	r1, [pc, #364]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c2a:	4b56      	ldr	r3, [pc, #344]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	4952      	ldr	r1, [pc, #328]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c4c:	4b4d      	ldr	r3, [pc, #308]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	494a      	ldr	r1, [pc, #296]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c6e:	4b45      	ldr	r3, [pc, #276]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	4941      	ldr	r1, [pc, #260]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c90:	4b3c      	ldr	r3, [pc, #240]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c96:	f023 0203 	bic.w	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9e:	4939      	ldr	r1, [pc, #228]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d028      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cb2:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc0:	4930      	ldr	r1, [pc, #192]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ccc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	4a2b      	ldr	r2, [pc, #172]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cdc:	60d3      	str	r3, [r2, #12]
 8002cde:	e011      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3304      	adds	r3, #4
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 f8f9 	bl	8002ee8 <RCCEx_PLLSAI1_Config>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cfa:	7cfb      	ldrb	r3, [r7, #19]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d04d      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d18:	d108      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d20:	4a18      	ldr	r2, [pc, #96]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d26:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002d2a:	e012      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002d2c:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d32:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d38:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d4a:	490e      	ldr	r1, [pc, #56]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d66:	60d3      	str	r3, [r2, #12]
 8002d68:	e020      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d72:	d109      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a02      	ldr	r2, [pc, #8]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7e:	60d3      	str	r3, [r2, #12]
 8002d80:	e014      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d90:	d10c      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	2101      	movs	r1, #1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 f8a5 	bl	8002ee8 <RCCEx_PLLSAI1_Config>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002da2:	7cfb      	ldrb	r3, [r7, #19]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d028      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002db8:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc6:	4947      	ldr	r1, [pc, #284]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd8:	4b42      	ldr	r3, [pc, #264]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a41      	ldr	r2, [pc, #260]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de2:	60d3      	str	r3, [r2, #12]
 8002de4:	e011      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	2101      	movs	r1, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f876 	bl	8002ee8 <RCCEx_PLLSAI1_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8002e06:	7cfb      	ldrb	r3, [r7, #19]
 8002e08:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01e      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e16:	4b33      	ldr	r3, [pc, #204]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e26:	492f      	ldr	r1, [pc, #188]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	2102      	movs	r1, #2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 f851 	bl	8002ee8 <RCCEx_PLLSAI1_Config>
 8002e46:	4603      	mov	r3, r0
 8002e48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e4a:	7cfb      	ldrb	r3, [r7, #19]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e60:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e66:	f023 0204 	bic.w	r2, r3, #4
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e70:	491c      	ldr	r1, [pc, #112]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00b      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e84:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e8a:	f023 0218 	bic.w	r2, r3, #24
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e94:	4913      	ldr	r1, [pc, #76]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d017      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002ea8:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002eae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb8:	490a      	ldr	r1, [pc, #40]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ed8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000

08002ee8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ef6:	4b70      	ldr	r3, [pc, #448]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00e      	beq.n	8002f20 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f02:	4b6d      	ldr	r3, [pc, #436]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0203 	and.w	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d103      	bne.n	8002f1a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
       ||
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d13f      	bne.n	8002f9a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
 8002f1e:	e03c      	b.n	8002f9a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d00c      	beq.n	8002f42 <RCCEx_PLLSAI1_Config+0x5a>
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d013      	beq.n	8002f54 <RCCEx_PLLSAI1_Config+0x6c>
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d120      	bne.n	8002f72 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f30:	4b61      	ldr	r3, [pc, #388]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d11d      	bne.n	8002f78 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f40:	e01a      	b.n	8002f78 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f42:	4b5d      	ldr	r3, [pc, #372]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d116      	bne.n	8002f7c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f52:	e013      	b.n	8002f7c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f54:	4b58      	ldr	r3, [pc, #352]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10f      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f60:	4b55      	ldr	r3, [pc, #340]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f70:	e006      	b.n	8002f80 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
      break;
 8002f76:	e004      	b.n	8002f82 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002f78:	bf00      	nop
 8002f7a:	e002      	b.n	8002f82 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002f7c:	bf00      	nop
 8002f7e:	e000      	b.n	8002f82 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002f80:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d108      	bne.n	8002f9a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002f88:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f023 0203 	bic.w	r2, r3, #3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4948      	ldr	r1, [pc, #288]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f040 8086 	bne.w	80030ae <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fa2:	4b45      	ldr	r3, [pc, #276]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a44      	ldr	r2, [pc, #272]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002fa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fae:	f7fe f8b3 	bl	8001118 <HAL_GetTick>
 8002fb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fb4:	e009      	b.n	8002fca <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fb6:	f7fe f8af 	bl	8001118 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d902      	bls.n	8002fca <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	73fb      	strb	r3, [r7, #15]
        break;
 8002fc8:	e005      	b.n	8002fd6 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fca:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1ef      	bne.n	8002fb6 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d168      	bne.n	80030ae <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d113      	bne.n	800300a <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fe2:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	4b35      	ldr	r3, [pc, #212]	; (80030bc <RCCEx_PLLSAI1_Config+0x1d4>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6892      	ldr	r2, [r2, #8]
 8002fee:	0211      	lsls	r1, r2, #8
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	68d2      	ldr	r2, [r2, #12]
 8002ff4:	06d2      	lsls	r2, r2, #27
 8002ff6:	4311      	orrs	r1, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6852      	ldr	r2, [r2, #4]
 8002ffc:	3a01      	subs	r2, #1
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	430a      	orrs	r2, r1
 8003002:	492d      	ldr	r1, [pc, #180]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003004:	4313      	orrs	r3, r2
 8003006:	610b      	str	r3, [r1, #16]
 8003008:	e02d      	b.n	8003066 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d115      	bne.n	800303c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003010:	4b29      	ldr	r3, [pc, #164]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	4b2a      	ldr	r3, [pc, #168]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003016:	4013      	ands	r3, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6892      	ldr	r2, [r2, #8]
 800301c:	0211      	lsls	r1, r2, #8
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6912      	ldr	r2, [r2, #16]
 8003022:	0852      	lsrs	r2, r2, #1
 8003024:	3a01      	subs	r2, #1
 8003026:	0552      	lsls	r2, r2, #21
 8003028:	4311      	orrs	r1, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6852      	ldr	r2, [r2, #4]
 800302e:	3a01      	subs	r2, #1
 8003030:	0112      	lsls	r2, r2, #4
 8003032:	430a      	orrs	r2, r1
 8003034:	4920      	ldr	r1, [pc, #128]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003036:	4313      	orrs	r3, r2
 8003038:	610b      	str	r3, [r1, #16]
 800303a:	e014      	b.n	8003066 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003042:	4013      	ands	r3, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6892      	ldr	r2, [r2, #8]
 8003048:	0211      	lsls	r1, r2, #8
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6952      	ldr	r2, [r2, #20]
 800304e:	0852      	lsrs	r2, r2, #1
 8003050:	3a01      	subs	r2, #1
 8003052:	0652      	lsls	r2, r2, #25
 8003054:	4311      	orrs	r1, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6852      	ldr	r2, [r2, #4]
 800305a:	3a01      	subs	r2, #1
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	430a      	orrs	r2, r1
 8003060:	4915      	ldr	r1, [pc, #84]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003062:	4313      	orrs	r3, r2
 8003064:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003066:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 800306c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003070:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003072:	f7fe f851 	bl	8001118 <HAL_GetTick>
 8003076:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003078:	e009      	b.n	800308e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800307a:	f7fe f84d 	bl	8001118 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d902      	bls.n	800308e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	73fb      	strb	r3, [r7, #15]
          break;
 800308c:	e005      	b.n	800309a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0ef      	beq.n	800307a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	4903      	ldr	r1, [pc, #12]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	07ff800f 	.word	0x07ff800f
 80030c0:	ff9f800f 	.word	0xff9f800f
 80030c4:	f9ff800f 	.word	0xf9ff800f

080030c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030d6:	4b70      	ldr	r3, [pc, #448]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00e      	beq.n	8003100 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030e2:	4b6d      	ldr	r3, [pc, #436]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 0203 	and.w	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d103      	bne.n	80030fa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
       ||
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d13f      	bne.n	800317a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	e03c      	b.n	800317a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d00c      	beq.n	8003122 <RCCEx_PLLSAI2_Config+0x5a>
 8003108:	2b03      	cmp	r3, #3
 800310a:	d013      	beq.n	8003134 <RCCEx_PLLSAI2_Config+0x6c>
 800310c:	2b01      	cmp	r3, #1
 800310e:	d120      	bne.n	8003152 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003110:	4b61      	ldr	r3, [pc, #388]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d11d      	bne.n	8003158 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003120:	e01a      	b.n	8003158 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003122:	4b5d      	ldr	r3, [pc, #372]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003132:	e013      	b.n	800315c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003134:	4b58      	ldr	r3, [pc, #352]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10f      	bne.n	8003160 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003140:	4b55      	ldr	r3, [pc, #340]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003150:	e006      	b.n	8003160 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
      break;
 8003156:	e004      	b.n	8003162 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003158:	bf00      	nop
 800315a:	e002      	b.n	8003162 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800315c:	bf00      	nop
 800315e:	e000      	b.n	8003162 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003160:	bf00      	nop
    }

    if(status == HAL_OK)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003168:	4b4b      	ldr	r3, [pc, #300]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f023 0203 	bic.w	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4948      	ldr	r1, [pc, #288]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003176:	4313      	orrs	r3, r2
 8003178:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f040 8086 	bne.w	800328e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003182:	4b45      	ldr	r3, [pc, #276]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a44      	ldr	r2, [pc, #272]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800318e:	f7fd ffc3 	bl	8001118 <HAL_GetTick>
 8003192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003194:	e009      	b.n	80031aa <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003196:	f7fd ffbf 	bl	8001118 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d902      	bls.n	80031aa <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	73fb      	strb	r3, [r7, #15]
        break;
 80031a8:	e005      	b.n	80031b6 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031aa:	4b3b      	ldr	r3, [pc, #236]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1ef      	bne.n	8003196 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d168      	bne.n	800328e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d113      	bne.n	80031ea <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031c2:	4b35      	ldr	r3, [pc, #212]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	4b35      	ldr	r3, [pc, #212]	; (800329c <RCCEx_PLLSAI2_Config+0x1d4>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6892      	ldr	r2, [r2, #8]
 80031ce:	0211      	lsls	r1, r2, #8
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	68d2      	ldr	r2, [r2, #12]
 80031d4:	06d2      	lsls	r2, r2, #27
 80031d6:	4311      	orrs	r1, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6852      	ldr	r2, [r2, #4]
 80031dc:	3a01      	subs	r2, #1
 80031de:	0112      	lsls	r2, r2, #4
 80031e0:	430a      	orrs	r2, r1
 80031e2:	492d      	ldr	r1, [pc, #180]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	614b      	str	r3, [r1, #20]
 80031e8:	e02d      	b.n	8003246 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d115      	bne.n	800321c <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031f0:	4b29      	ldr	r3, [pc, #164]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6892      	ldr	r2, [r2, #8]
 80031fc:	0211      	lsls	r1, r2, #8
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6912      	ldr	r2, [r2, #16]
 8003202:	0852      	lsrs	r2, r2, #1
 8003204:	3a01      	subs	r2, #1
 8003206:	0552      	lsls	r2, r2, #21
 8003208:	4311      	orrs	r1, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6852      	ldr	r2, [r2, #4]
 800320e:	3a01      	subs	r2, #1
 8003210:	0112      	lsls	r2, r2, #4
 8003212:	430a      	orrs	r2, r1
 8003214:	4920      	ldr	r1, [pc, #128]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003216:	4313      	orrs	r3, r2
 8003218:	614b      	str	r3, [r1, #20]
 800321a:	e014      	b.n	8003246 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003222:	4013      	ands	r3, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6892      	ldr	r2, [r2, #8]
 8003228:	0211      	lsls	r1, r2, #8
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6952      	ldr	r2, [r2, #20]
 800322e:	0852      	lsrs	r2, r2, #1
 8003230:	3a01      	subs	r2, #1
 8003232:	0652      	lsls	r2, r2, #25
 8003234:	4311      	orrs	r1, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6852      	ldr	r2, [r2, #4]
 800323a:	3a01      	subs	r2, #1
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	430a      	orrs	r2, r1
 8003240:	4915      	ldr	r1, [pc, #84]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003242:	4313      	orrs	r3, r2
 8003244:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a13      	ldr	r2, [pc, #76]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003250:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fd ff61 	bl	8001118 <HAL_GetTick>
 8003256:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003258:	e009      	b.n	800326e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800325a:	f7fd ff5d 	bl	8001118 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d902      	bls.n	800326e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	73fb      	strb	r3, [r7, #15]
          break;
 800326c:	e005      	b.n	800327a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0ef      	beq.n	800325a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	4903      	ldr	r1, [pc, #12]	; (8003298 <RCCEx_PLLSAI2_Config+0x1d0>)
 800328a:	4313      	orrs	r3, r2
 800328c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800328e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021000 	.word	0x40021000
 800329c:	07ff800f 	.word	0x07ff800f
 80032a0:	ff9f800f 	.word	0xff9f800f
 80032a4:	f9ff800f 	.word	0xf9ff800f

080032a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e095      	b.n	80033e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d108      	bne.n	80032d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ca:	d009      	beq.n	80032e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	61da      	str	r2, [r3, #28]
 80032d2:	e005      	b.n	80032e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fd fd6c 	bl	8000dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003316:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003320:	d902      	bls.n	8003328 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	e002      	b.n	800332e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003336:	d007      	beq.n	8003348 <HAL_SPI_Init+0xa0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003340:	d002      	beq.n	8003348 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338a:	ea42 0103 	orr.w	r1, r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	0c1b      	lsrs	r3, r3, #16
 80033a4:	f003 0204 	and.w	r2, r3, #4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033c4:	ea42 0103 	orr.w	r1, r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b088      	sub	sp, #32
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_SPI_Transmit+0x22>
 800340c:	2302      	movs	r3, #2
 800340e:	e158      	b.n	80036c2 <HAL_SPI_Transmit+0x2d4>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003418:	f7fd fe7e 	bl	8001118 <HAL_GetTick>
 800341c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d002      	beq.n	8003434 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800342e:	2302      	movs	r3, #2
 8003430:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003432:	e13d      	b.n	80036b0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_SPI_Transmit+0x52>
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003444:	e134      	b.n	80036b0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2203      	movs	r2, #3
 800344a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	88fa      	ldrh	r2, [r7, #6]
 800345e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003490:	d10f      	bne.n	80034b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d007      	beq.n	80034d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034d8:	d94b      	bls.n	8003572 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_SPI_Transmit+0xfa>
 80034e2:	8afb      	ldrh	r3, [r7, #22]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d13e      	bne.n	8003566 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	881a      	ldrh	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	1c9a      	adds	r2, r3, #2
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800350c:	e02b      	b.n	8003566 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b02      	cmp	r3, #2
 800351a:	d112      	bne.n	8003542 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	881a      	ldrh	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	1c9a      	adds	r2, r3, #2
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003540:	e011      	b.n	8003566 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003542:	f7fd fde9 	bl	8001118 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d803      	bhi.n	800355a <HAL_SPI_Transmit+0x16c>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d102      	bne.n	8003560 <HAL_SPI_Transmit+0x172>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003564:	e0a4      	b.n	80036b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ce      	bne.n	800350e <HAL_SPI_Transmit+0x120>
 8003570:	e07c      	b.n	800366c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_SPI_Transmit+0x192>
 800357a:	8afb      	ldrh	r3, [r7, #22]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d170      	bne.n	8003662 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d912      	bls.n	80035b0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	881a      	ldrh	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	1c9a      	adds	r2, r3, #2
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b02      	subs	r3, #2
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035ae:	e058      	b.n	8003662 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	7812      	ldrb	r2, [r2, #0]
 80035bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80035d6:	e044      	b.n	8003662 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d12b      	bne.n	800363e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d912      	bls.n	8003616 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	881a      	ldrh	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	1c9a      	adds	r2, r3, #2
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b02      	subs	r3, #2
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003614:	e025      	b.n	8003662 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800363c:	e011      	b.n	8003662 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800363e:	f7fd fd6b 	bl	8001118 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d803      	bhi.n	8003656 <HAL_SPI_Transmit+0x268>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d102      	bne.n	800365c <HAL_SPI_Transmit+0x26e>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003660:	e026      	b.n	80036b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1b5      	bne.n	80035d8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fcdb 	bl	800402c <SPI_EndRxTxTransaction>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	77fb      	strb	r3, [r7, #31]
 80036ac:	e000      	b.n	80036b0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80036ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b088      	sub	sp, #32
 80036ce:	af02      	add	r7, sp, #8
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	4613      	mov	r3, r2
 80036d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e6:	d112      	bne.n	800370e <HAL_SPI_Receive+0x44>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10e      	bne.n	800370e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2204      	movs	r2, #4
 80036f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036f8:	88fa      	ldrh	r2, [r7, #6]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f910 	bl	800392a <HAL_SPI_TransmitReceive>
 800370a:	4603      	mov	r3, r0
 800370c:	e109      	b.n	8003922 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_SPI_Receive+0x52>
 8003718:	2302      	movs	r3, #2
 800371a:	e102      	b.n	8003922 <HAL_SPI_Receive+0x258>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003724:	f7fd fcf8 	bl	8001118 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d002      	beq.n	800373c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003736:	2302      	movs	r3, #2
 8003738:	75fb      	strb	r3, [r7, #23]
    goto error;
 800373a:	e0e9      	b.n	8003910 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_SPI_Receive+0x7e>
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800374c:	e0e0      	b.n	8003910 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2204      	movs	r2, #4
 8003752:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	88fa      	ldrh	r2, [r7, #6]
 8003766:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003798:	d908      	bls.n	80037ac <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	e007      	b.n	80037bc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c4:	d10f      	bne.n	80037e6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d007      	beq.n	8003804 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003802:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800380c:	d867      	bhi.n	80038de <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800380e:	e030      	b.n	8003872 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d117      	bne.n	800384e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f103 020c 	add.w	r2, r3, #12
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	7812      	ldrb	r2, [r2, #0]
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800384c:	e011      	b.n	8003872 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800384e:	f7fd fc63 	bl	8001118 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d803      	bhi.n	8003866 <HAL_SPI_Receive+0x19c>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d102      	bne.n	800386c <HAL_SPI_Receive+0x1a2>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003870:	e04e      	b.n	8003910 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1c8      	bne.n	8003810 <HAL_SPI_Receive+0x146>
 800387e:	e034      	b.n	80038ea <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d115      	bne.n	80038ba <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	b292      	uxth	r2, r2
 800389a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	1c9a      	adds	r2, r3, #2
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80038b8:	e011      	b.n	80038de <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ba:	f7fd fc2d 	bl	8001118 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d803      	bhi.n	80038d2 <HAL_SPI_Receive+0x208>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d102      	bne.n	80038d8 <HAL_SPI_Receive+0x20e>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d102      	bne.n	80038de <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038dc:	e018      	b.n	8003910 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ca      	bne.n	8003880 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	6839      	ldr	r1, [r7, #0]
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fb44 	bl	8003f7c <SPI_EndRxTransaction>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	75fb      	strb	r3, [r7, #23]
 800390c:	e000      	b.n	8003910 <HAL_SPI_Receive+0x246>
  }

error :
 800390e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003920:	7dfb      	ldrb	r3, [r7, #23]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b08a      	sub	sp, #40	; 0x28
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003938:	2301      	movs	r3, #1
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x26>
 800394c:	2302      	movs	r3, #2
 800394e:	e1fb      	b.n	8003d48 <HAL_SPI_TransmitReceive+0x41e>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003958:	f7fd fbde 	bl	8001118 <HAL_GetTick>
 800395c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003964:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800396c:	887b      	ldrh	r3, [r7, #2]
 800396e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003974:	7efb      	ldrb	r3, [r7, #27]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d00e      	beq.n	8003998 <HAL_SPI_TransmitReceive+0x6e>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003980:	d106      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x66>
 800398a:	7efb      	ldrb	r3, [r7, #27]
 800398c:	2b04      	cmp	r3, #4
 800398e:	d003      	beq.n	8003998 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003990:	2302      	movs	r3, #2
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003996:	e1cd      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_SPI_TransmitReceive+0x80>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_SPI_TransmitReceive+0x80>
 80039a4:	887b      	ldrh	r3, [r7, #2]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d103      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80039b0:	e1c0      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d003      	beq.n	80039c6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2205      	movs	r2, #5
 80039c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	887a      	ldrh	r2, [r7, #2]
 80039d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	887a      	ldrh	r2, [r7, #2]
 80039de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	887a      	ldrh	r2, [r7, #2]
 80039ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	887a      	ldrh	r2, [r7, #2]
 80039f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a08:	d802      	bhi.n	8003a10 <HAL_SPI_TransmitReceive+0xe6>
 8003a0a:	8a3b      	ldrh	r3, [r7, #16]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d908      	bls.n	8003a22 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	e007      	b.n	8003a32 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a30:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d007      	beq.n	8003a50 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a58:	d97c      	bls.n	8003b54 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_SPI_TransmitReceive+0x13e>
 8003a62:	8a7b      	ldrh	r3, [r7, #18]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d169      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	881a      	ldrh	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	1c9a      	adds	r2, r3, #2
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a8c:	e056      	b.n	8003b3c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_SPI_TransmitReceive+0x1aa>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_SPI_TransmitReceive+0x1aa>
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d113      	bne.n	8003ad4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	1c9a      	adds	r2, r3, #2
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d11c      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x1f2>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	b292      	uxth	r2, r2
 8003afa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	1c9a      	adds	r2, r3, #2
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b1c:	f7fd fafc 	bl	8001118 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d807      	bhi.n	8003b3c <HAL_SPI_TransmitReceive+0x212>
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d003      	beq.n	8003b3c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003b3a:	e0fb      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1a3      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x164>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d19d      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x164>
 8003b52:	e0df      	b.n	8003d14 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_SPI_TransmitReceive+0x23a>
 8003b5c:	8a7b      	ldrh	r3, [r7, #18]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	f040 80cb 	bne.w	8003cfa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d912      	bls.n	8003b94 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	1c9a      	adds	r2, r3, #2
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b02      	subs	r3, #2
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b92:	e0b2      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	7812      	ldrb	r2, [r2, #0]
 8003ba0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bba:	e09e      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d134      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x30a>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d02f      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x30a>
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d12c      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d912      	bls.n	8003c0a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	881a      	ldrh	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	1c9a      	adds	r2, r3, #2
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b02      	subs	r3, #2
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c08:	e012      	b.n	8003c30 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	7812      	ldrb	r2, [r2, #0]
 8003c16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d148      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x3aa>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d042      	beq.n	8003cd4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d923      	bls.n	8003ca2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	b292      	uxth	r2, r2
 8003c66:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	1c9a      	adds	r2, r3, #2
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b02      	subs	r3, #2
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d81f      	bhi.n	8003cd0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	e016      	b.n	8003cd0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f103 020c 	add.w	r2, r3, #12
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	7812      	ldrb	r2, [r2, #0]
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cd4:	f7fd fa20 	bl	8001118 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d803      	bhi.n	8003cec <HAL_SPI_TransmitReceive+0x3c2>
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	d102      	bne.n	8003cf2 <HAL_SPI_TransmitReceive+0x3c8>
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d103      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003cf8:	e01c      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f47f af5b 	bne.w	8003bbc <HAL_SPI_TransmitReceive+0x292>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f47f af54 	bne.w	8003bbc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f987 	bl	800402c <SPI_EndRxTxTransaction>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d006      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	661a      	str	r2, [r3, #96]	; 0x60
 8003d30:	e000      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3728      	adds	r7, #40	; 0x28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d60:	f7fd f9da 	bl	8001118 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d70:	f7fd f9d2 	bl	8001118 <HAL_GetTick>
 8003d74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d76:	4b39      	ldr	r3, [pc, #228]	; (8003e5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	015b      	lsls	r3, r3, #5
 8003d7c:	0d1b      	lsrs	r3, r3, #20
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	fb02 f303 	mul.w	r3, r2, r3
 8003d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d86:	e054      	b.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d050      	beq.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d90:	f7fd f9c2 	bl	8001118 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d902      	bls.n	8003da6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d13d      	bne.n	8003e22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003db4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dbe:	d111      	bne.n	8003de4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc8:	d004      	beq.n	8003dd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd2:	d107      	bne.n	8003de4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dec:	d10f      	bne.n	8003e0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e017      	b.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d19b      	bne.n	8003d88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000000 	.word	0x20000000

08003e60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e6e:	f7fd f953 	bl	8001118 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e7e:	f7fd f94b 	bl	8001118 <HAL_GetTick>
 8003e82:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e84:	4b3c      	ldr	r3, [pc, #240]	; (8003f78 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	00da      	lsls	r2, r3, #3
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	0d1b      	lsrs	r3, r3, #20
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e9c:	e05f      	b.n	8003f5e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ea4:	d106      	bne.n	8003eb4 <SPI_WaitFifoStateUntilTimeout+0x54>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eba:	d050      	beq.n	8003f5e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ebc:	f7fd f92c 	bl	8001118 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d902      	bls.n	8003ed2 <SPI_WaitFifoStateUntilTimeout+0x72>
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d13d      	bne.n	8003f4e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eea:	d111      	bne.n	8003f10 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef4:	d004      	beq.n	8003f00 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efe:	d107      	bne.n	8003f10 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f18:	d10f      	bne.n	8003f3a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e010      	b.n	8003f70 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d197      	bne.n	8003e9e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000000 	.word	0x20000000

08003f7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f90:	d111      	bne.n	8003fb6 <SPI_EndRxTransaction+0x3a>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9a:	d004      	beq.n	8003fa6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa4:	d107      	bne.n	8003fb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2180      	movs	r1, #128	; 0x80
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff fec5 	bl	8003d50 <SPI_WaitFlagStateUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd0:	f043 0220 	orr.w	r2, r3, #32
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e023      	b.n	8004024 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe4:	d11d      	bne.n	8004022 <SPI_EndRxTransaction+0xa6>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fee:	d004      	beq.n	8003ffa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff8:	d113      	bne.n	8004022 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2200      	movs	r2, #0
 8004002:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f7ff ff2a 	bl	8003e60 <SPI_WaitFifoStateUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004016:	f043 0220 	orr.w	r2, r3, #32
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e000      	b.n	8004024 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2200      	movs	r2, #0
 8004040:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff ff0b 	bl	8003e60 <SPI_WaitFifoStateUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004054:	f043 0220 	orr.w	r2, r3, #32
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e027      	b.n	80040b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2200      	movs	r2, #0
 8004068:	2180      	movs	r1, #128	; 0x80
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f7ff fe70 	bl	8003d50 <SPI_WaitFlagStateUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407a:	f043 0220 	orr.w	r2, r3, #32
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e014      	b.n	80040b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2200      	movs	r2, #0
 800408e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f7ff fee4 	bl	8003e60 <SPI_WaitFifoStateUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a2:	f043 0220 	orr.w	r2, r3, #32
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e000      	b.n	80040b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e042      	b.n	8004150 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fc fe01 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2224      	movs	r2, #36	; 0x24
 80040e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0201 	bic.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8c4 	bl	8004288 <UART_SetConfig>
 8004100:	4603      	mov	r3, r0
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e022      	b.n	8004150 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fb8a 	bl	800482c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fc11 	bl	8004970 <UART_CheckIdleState>
 800414e:	4603      	mov	r3, r0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	; 0x28
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800416e:	2b20      	cmp	r3, #32
 8004170:	f040 8084 	bne.w	800427c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_UART_Transmit+0x28>
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e07c      	b.n	800427e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_UART_Transmit+0x3a>
 800418e:	2302      	movs	r3, #2
 8004190:	e075      	b.n	800427e <HAL_UART_Transmit+0x126>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2221      	movs	r2, #33	; 0x21
 80041a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80041aa:	f7fc ffb5 	bl	8001118 <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	88fa      	ldrh	r2, [r7, #6]
 80041bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c8:	d108      	bne.n	80041dc <HAL_UART_Transmit+0x84>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e003      	b.n	80041e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80041ec:	e02d      	b.n	800424a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2200      	movs	r2, #0
 80041f6:	2180      	movs	r1, #128	; 0x80
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fc01 	bl	8004a00 <UART_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e03a      	b.n	800427e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	881a      	ldrh	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800421a:	b292      	uxth	r2, r2
 800421c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	3302      	adds	r3, #2
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	e008      	b.n	8004238 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	b292      	uxth	r2, r2
 8004230:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3301      	adds	r3, #1
 8004236:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1cb      	bne.n	80041ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2200      	movs	r2, #0
 800425e:	2140      	movs	r1, #64	; 0x40
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fbcd 	bl	8004a00 <UART_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e006      	b.n	800427e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
  }
}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004288:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800428c:	b088      	sub	sp, #32
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4bb1      	ldr	r3, [pc, #708]	; (8004584 <UART_SetConfig+0x2fc>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	69f9      	ldr	r1, [r7, #28]
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4aa6      	ldr	r2, [pc, #664]	; (8004588 <UART_SetConfig+0x300>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004306:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	69f9      	ldr	r1, [r7, #28]
 8004310:	430b      	orrs	r3, r1
 8004312:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	f023 010f 	bic.w	r1, r3, #15
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a97      	ldr	r2, [pc, #604]	; (800458c <UART_SetConfig+0x304>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d121      	bne.n	8004378 <UART_SetConfig+0xf0>
 8004334:	4b96      	ldr	r3, [pc, #600]	; (8004590 <UART_SetConfig+0x308>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	2b03      	cmp	r3, #3
 8004340:	d816      	bhi.n	8004370 <UART_SetConfig+0xe8>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <UART_SetConfig+0xc0>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	08004359 	.word	0x08004359
 800434c:	08004365 	.word	0x08004365
 8004350:	0800435f 	.word	0x0800435f
 8004354:	0800436b 	.word	0x0800436b
 8004358:	2301      	movs	r3, #1
 800435a:	76fb      	strb	r3, [r7, #27]
 800435c:	e0e8      	b.n	8004530 <UART_SetConfig+0x2a8>
 800435e:	2302      	movs	r3, #2
 8004360:	76fb      	strb	r3, [r7, #27]
 8004362:	e0e5      	b.n	8004530 <UART_SetConfig+0x2a8>
 8004364:	2304      	movs	r3, #4
 8004366:	76fb      	strb	r3, [r7, #27]
 8004368:	e0e2      	b.n	8004530 <UART_SetConfig+0x2a8>
 800436a:	2308      	movs	r3, #8
 800436c:	76fb      	strb	r3, [r7, #27]
 800436e:	e0df      	b.n	8004530 <UART_SetConfig+0x2a8>
 8004370:	2310      	movs	r3, #16
 8004372:	76fb      	strb	r3, [r7, #27]
 8004374:	bf00      	nop
 8004376:	e0db      	b.n	8004530 <UART_SetConfig+0x2a8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a85      	ldr	r2, [pc, #532]	; (8004594 <UART_SetConfig+0x30c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d134      	bne.n	80043ec <UART_SetConfig+0x164>
 8004382:	4b83      	ldr	r3, [pc, #524]	; (8004590 <UART_SetConfig+0x308>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	2b0c      	cmp	r3, #12
 800438e:	d829      	bhi.n	80043e4 <UART_SetConfig+0x15c>
 8004390:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <UART_SetConfig+0x110>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	080043cd 	.word	0x080043cd
 800439c:	080043e5 	.word	0x080043e5
 80043a0:	080043e5 	.word	0x080043e5
 80043a4:	080043e5 	.word	0x080043e5
 80043a8:	080043d9 	.word	0x080043d9
 80043ac:	080043e5 	.word	0x080043e5
 80043b0:	080043e5 	.word	0x080043e5
 80043b4:	080043e5 	.word	0x080043e5
 80043b8:	080043d3 	.word	0x080043d3
 80043bc:	080043e5 	.word	0x080043e5
 80043c0:	080043e5 	.word	0x080043e5
 80043c4:	080043e5 	.word	0x080043e5
 80043c8:	080043df 	.word	0x080043df
 80043cc:	2300      	movs	r3, #0
 80043ce:	76fb      	strb	r3, [r7, #27]
 80043d0:	e0ae      	b.n	8004530 <UART_SetConfig+0x2a8>
 80043d2:	2302      	movs	r3, #2
 80043d4:	76fb      	strb	r3, [r7, #27]
 80043d6:	e0ab      	b.n	8004530 <UART_SetConfig+0x2a8>
 80043d8:	2304      	movs	r3, #4
 80043da:	76fb      	strb	r3, [r7, #27]
 80043dc:	e0a8      	b.n	8004530 <UART_SetConfig+0x2a8>
 80043de:	2308      	movs	r3, #8
 80043e0:	76fb      	strb	r3, [r7, #27]
 80043e2:	e0a5      	b.n	8004530 <UART_SetConfig+0x2a8>
 80043e4:	2310      	movs	r3, #16
 80043e6:	76fb      	strb	r3, [r7, #27]
 80043e8:	bf00      	nop
 80043ea:	e0a1      	b.n	8004530 <UART_SetConfig+0x2a8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a69      	ldr	r2, [pc, #420]	; (8004598 <UART_SetConfig+0x310>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d120      	bne.n	8004438 <UART_SetConfig+0x1b0>
 80043f6:	4b66      	ldr	r3, [pc, #408]	; (8004590 <UART_SetConfig+0x308>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004400:	2b10      	cmp	r3, #16
 8004402:	d00f      	beq.n	8004424 <UART_SetConfig+0x19c>
 8004404:	2b10      	cmp	r3, #16
 8004406:	d802      	bhi.n	800440e <UART_SetConfig+0x186>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <UART_SetConfig+0x190>
 800440c:	e010      	b.n	8004430 <UART_SetConfig+0x1a8>
 800440e:	2b20      	cmp	r3, #32
 8004410:	d005      	beq.n	800441e <UART_SetConfig+0x196>
 8004412:	2b30      	cmp	r3, #48	; 0x30
 8004414:	d009      	beq.n	800442a <UART_SetConfig+0x1a2>
 8004416:	e00b      	b.n	8004430 <UART_SetConfig+0x1a8>
 8004418:	2300      	movs	r3, #0
 800441a:	76fb      	strb	r3, [r7, #27]
 800441c:	e088      	b.n	8004530 <UART_SetConfig+0x2a8>
 800441e:	2302      	movs	r3, #2
 8004420:	76fb      	strb	r3, [r7, #27]
 8004422:	e085      	b.n	8004530 <UART_SetConfig+0x2a8>
 8004424:	2304      	movs	r3, #4
 8004426:	76fb      	strb	r3, [r7, #27]
 8004428:	e082      	b.n	8004530 <UART_SetConfig+0x2a8>
 800442a:	2308      	movs	r3, #8
 800442c:	76fb      	strb	r3, [r7, #27]
 800442e:	e07f      	b.n	8004530 <UART_SetConfig+0x2a8>
 8004430:	2310      	movs	r3, #16
 8004432:	76fb      	strb	r3, [r7, #27]
 8004434:	bf00      	nop
 8004436:	e07b      	b.n	8004530 <UART_SetConfig+0x2a8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a57      	ldr	r2, [pc, #348]	; (800459c <UART_SetConfig+0x314>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d120      	bne.n	8004484 <UART_SetConfig+0x1fc>
 8004442:	4b53      	ldr	r3, [pc, #332]	; (8004590 <UART_SetConfig+0x308>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800444c:	2b40      	cmp	r3, #64	; 0x40
 800444e:	d00f      	beq.n	8004470 <UART_SetConfig+0x1e8>
 8004450:	2b40      	cmp	r3, #64	; 0x40
 8004452:	d802      	bhi.n	800445a <UART_SetConfig+0x1d2>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <UART_SetConfig+0x1dc>
 8004458:	e010      	b.n	800447c <UART_SetConfig+0x1f4>
 800445a:	2b80      	cmp	r3, #128	; 0x80
 800445c:	d005      	beq.n	800446a <UART_SetConfig+0x1e2>
 800445e:	2bc0      	cmp	r3, #192	; 0xc0
 8004460:	d009      	beq.n	8004476 <UART_SetConfig+0x1ee>
 8004462:	e00b      	b.n	800447c <UART_SetConfig+0x1f4>
 8004464:	2300      	movs	r3, #0
 8004466:	76fb      	strb	r3, [r7, #27]
 8004468:	e062      	b.n	8004530 <UART_SetConfig+0x2a8>
 800446a:	2302      	movs	r3, #2
 800446c:	76fb      	strb	r3, [r7, #27]
 800446e:	e05f      	b.n	8004530 <UART_SetConfig+0x2a8>
 8004470:	2304      	movs	r3, #4
 8004472:	76fb      	strb	r3, [r7, #27]
 8004474:	e05c      	b.n	8004530 <UART_SetConfig+0x2a8>
 8004476:	2308      	movs	r3, #8
 8004478:	76fb      	strb	r3, [r7, #27]
 800447a:	e059      	b.n	8004530 <UART_SetConfig+0x2a8>
 800447c:	2310      	movs	r3, #16
 800447e:	76fb      	strb	r3, [r7, #27]
 8004480:	bf00      	nop
 8004482:	e055      	b.n	8004530 <UART_SetConfig+0x2a8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a45      	ldr	r2, [pc, #276]	; (80045a0 <UART_SetConfig+0x318>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d124      	bne.n	80044d8 <UART_SetConfig+0x250>
 800448e:	4b40      	ldr	r3, [pc, #256]	; (8004590 <UART_SetConfig+0x308>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449c:	d012      	beq.n	80044c4 <UART_SetConfig+0x23c>
 800449e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a2:	d802      	bhi.n	80044aa <UART_SetConfig+0x222>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <UART_SetConfig+0x230>
 80044a8:	e012      	b.n	80044d0 <UART_SetConfig+0x248>
 80044aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ae:	d006      	beq.n	80044be <UART_SetConfig+0x236>
 80044b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b4:	d009      	beq.n	80044ca <UART_SetConfig+0x242>
 80044b6:	e00b      	b.n	80044d0 <UART_SetConfig+0x248>
 80044b8:	2300      	movs	r3, #0
 80044ba:	76fb      	strb	r3, [r7, #27]
 80044bc:	e038      	b.n	8004530 <UART_SetConfig+0x2a8>
 80044be:	2302      	movs	r3, #2
 80044c0:	76fb      	strb	r3, [r7, #27]
 80044c2:	e035      	b.n	8004530 <UART_SetConfig+0x2a8>
 80044c4:	2304      	movs	r3, #4
 80044c6:	76fb      	strb	r3, [r7, #27]
 80044c8:	e032      	b.n	8004530 <UART_SetConfig+0x2a8>
 80044ca:	2308      	movs	r3, #8
 80044cc:	76fb      	strb	r3, [r7, #27]
 80044ce:	e02f      	b.n	8004530 <UART_SetConfig+0x2a8>
 80044d0:	2310      	movs	r3, #16
 80044d2:	76fb      	strb	r3, [r7, #27]
 80044d4:	bf00      	nop
 80044d6:	e02b      	b.n	8004530 <UART_SetConfig+0x2a8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a2a      	ldr	r2, [pc, #168]	; (8004588 <UART_SetConfig+0x300>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d124      	bne.n	800452c <UART_SetConfig+0x2a4>
 80044e2:	4b2b      	ldr	r3, [pc, #172]	; (8004590 <UART_SetConfig+0x308>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f0:	d012      	beq.n	8004518 <UART_SetConfig+0x290>
 80044f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f6:	d802      	bhi.n	80044fe <UART_SetConfig+0x276>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d007      	beq.n	800450c <UART_SetConfig+0x284>
 80044fc:	e012      	b.n	8004524 <UART_SetConfig+0x29c>
 80044fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004502:	d006      	beq.n	8004512 <UART_SetConfig+0x28a>
 8004504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004508:	d009      	beq.n	800451e <UART_SetConfig+0x296>
 800450a:	e00b      	b.n	8004524 <UART_SetConfig+0x29c>
 800450c:	2300      	movs	r3, #0
 800450e:	76fb      	strb	r3, [r7, #27]
 8004510:	e00e      	b.n	8004530 <UART_SetConfig+0x2a8>
 8004512:	2302      	movs	r3, #2
 8004514:	76fb      	strb	r3, [r7, #27]
 8004516:	e00b      	b.n	8004530 <UART_SetConfig+0x2a8>
 8004518:	2304      	movs	r3, #4
 800451a:	76fb      	strb	r3, [r7, #27]
 800451c:	e008      	b.n	8004530 <UART_SetConfig+0x2a8>
 800451e:	2308      	movs	r3, #8
 8004520:	76fb      	strb	r3, [r7, #27]
 8004522:	e005      	b.n	8004530 <UART_SetConfig+0x2a8>
 8004524:	2310      	movs	r3, #16
 8004526:	76fb      	strb	r3, [r7, #27]
 8004528:	bf00      	nop
 800452a:	e001      	b.n	8004530 <UART_SetConfig+0x2a8>
 800452c:	2310      	movs	r3, #16
 800452e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a14      	ldr	r2, [pc, #80]	; (8004588 <UART_SetConfig+0x300>)
 8004536:	4293      	cmp	r3, r2
 8004538:	f040 80a1 	bne.w	800467e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800453c:	7efb      	ldrb	r3, [r7, #27]
 800453e:	2b08      	cmp	r3, #8
 8004540:	d836      	bhi.n	80045b0 <UART_SetConfig+0x328>
 8004542:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0x2c0>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	0800456d 	.word	0x0800456d
 800454c:	080045b1 	.word	0x080045b1
 8004550:	08004575 	.word	0x08004575
 8004554:	080045b1 	.word	0x080045b1
 8004558:	0800457b 	.word	0x0800457b
 800455c:	080045b1 	.word	0x080045b1
 8004560:	080045b1 	.word	0x080045b1
 8004564:	080045b1 	.word	0x080045b1
 8004568:	080045a9 	.word	0x080045a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800456c:	f7fe f8a6 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8004570:	6178      	str	r0, [r7, #20]
        break;
 8004572:	e022      	b.n	80045ba <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004574:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <UART_SetConfig+0x31c>)
 8004576:	617b      	str	r3, [r7, #20]
        break;
 8004578:	e01f      	b.n	80045ba <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800457a:	f7fe f809 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 800457e:	6178      	str	r0, [r7, #20]
        break;
 8004580:	e01b      	b.n	80045ba <UART_SetConfig+0x332>
 8004582:	bf00      	nop
 8004584:	cfff69f3 	.word	0xcfff69f3
 8004588:	40008000 	.word	0x40008000
 800458c:	40013800 	.word	0x40013800
 8004590:	40021000 	.word	0x40021000
 8004594:	40004400 	.word	0x40004400
 8004598:	40004800 	.word	0x40004800
 800459c:	40004c00 	.word	0x40004c00
 80045a0:	40005000 	.word	0x40005000
 80045a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ac:	617b      	str	r3, [r7, #20]
        break;
 80045ae:	e004      	b.n	80045ba <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	76bb      	strb	r3, [r7, #26]
        break;
 80045b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 811d 	beq.w	80047fc <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	4a97      	ldr	r2, [pc, #604]	; (8004824 <UART_SetConfig+0x59c>)
 80045c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045cc:	461a      	mov	r2, r3
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80045d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	4413      	add	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d305      	bcc.n	80045f2 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d902      	bls.n	80045f8 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	76bb      	strb	r3, [r7, #26]
 80045f6:	e101      	b.n	80047fc <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	4a87      	ldr	r2, [pc, #540]	; (8004824 <UART_SetConfig+0x59c>)
 8004606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800460a:	b29b      	uxth	r3, r3
 800460c:	f04f 0400 	mov.w	r4, #0
 8004610:	461a      	mov	r2, r3
 8004612:	4623      	mov	r3, r4
 8004614:	f7fb fdfa 	bl	800020c <__aeabi_uldivmod>
 8004618:	4603      	mov	r3, r0
 800461a:	460c      	mov	r4, r1
 800461c:	4619      	mov	r1, r3
 800461e:	4622      	mov	r2, r4
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	f04f 0400 	mov.w	r4, #0
 8004628:	0214      	lsls	r4, r2, #8
 800462a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800462e:	020b      	lsls	r3, r1, #8
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6852      	ldr	r2, [r2, #4]
 8004634:	0852      	lsrs	r2, r2, #1
 8004636:	4611      	mov	r1, r2
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	eb13 0b01 	adds.w	fp, r3, r1
 8004640:	eb44 0c02 	adc.w	ip, r4, r2
 8004644:	4658      	mov	r0, fp
 8004646:	4661      	mov	r1, ip
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f04f 0400 	mov.w	r4, #0
 8004650:	461a      	mov	r2, r3
 8004652:	4623      	mov	r3, r4
 8004654:	f7fb fdda 	bl	800020c <__aeabi_uldivmod>
 8004658:	4603      	mov	r3, r0
 800465a:	460c      	mov	r4, r1
 800465c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004664:	d308      	bcc.n	8004678 <UART_SetConfig+0x3f0>
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466c:	d204      	bcs.n	8004678 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	e0c1      	b.n	80047fc <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	76bb      	strb	r3, [r7, #26]
 800467c:	e0be      	b.n	80047fc <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004686:	d164      	bne.n	8004752 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004688:	7efb      	ldrb	r3, [r7, #27]
 800468a:	2b08      	cmp	r3, #8
 800468c:	d827      	bhi.n	80046de <UART_SetConfig+0x456>
 800468e:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <UART_SetConfig+0x40c>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	080046b9 	.word	0x080046b9
 8004698:	080046c1 	.word	0x080046c1
 800469c:	080046c9 	.word	0x080046c9
 80046a0:	080046df 	.word	0x080046df
 80046a4:	080046cf 	.word	0x080046cf
 80046a8:	080046df 	.word	0x080046df
 80046ac:	080046df 	.word	0x080046df
 80046b0:	080046df 	.word	0x080046df
 80046b4:	080046d7 	.word	0x080046d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b8:	f7fe f800 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 80046bc:	6178      	str	r0, [r7, #20]
        break;
 80046be:	e013      	b.n	80046e8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c0:	f7fe f812 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 80046c4:	6178      	str	r0, [r7, #20]
        break;
 80046c6:	e00f      	b.n	80046e8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c8:	4b57      	ldr	r3, [pc, #348]	; (8004828 <UART_SetConfig+0x5a0>)
 80046ca:	617b      	str	r3, [r7, #20]
        break;
 80046cc:	e00c      	b.n	80046e8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ce:	f7fd ff5f 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 80046d2:	6178      	str	r0, [r7, #20]
        break;
 80046d4:	e008      	b.n	80046e8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046da:	617b      	str	r3, [r7, #20]
        break;
 80046dc:	e004      	b.n	80046e8 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	76bb      	strb	r3, [r7, #26]
        break;
 80046e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8086 	beq.w	80047fc <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	4a4b      	ldr	r2, [pc, #300]	; (8004824 <UART_SetConfig+0x59c>)
 80046f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046fa:	461a      	mov	r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004702:	005a      	lsls	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	441a      	add	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	b29b      	uxth	r3, r3
 8004716:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b0f      	cmp	r3, #15
 800471c:	d916      	bls.n	800474c <UART_SetConfig+0x4c4>
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004724:	d212      	bcs.n	800474c <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	b29b      	uxth	r3, r3
 800472a:	f023 030f 	bic.w	r3, r3, #15
 800472e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	085b      	lsrs	r3, r3, #1
 8004734:	b29b      	uxth	r3, r3
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	b29a      	uxth	r2, r3
 800473c:	89fb      	ldrh	r3, [r7, #14]
 800473e:	4313      	orrs	r3, r2
 8004740:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	89fa      	ldrh	r2, [r7, #14]
 8004748:	60da      	str	r2, [r3, #12]
 800474a:	e057      	b.n	80047fc <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	76bb      	strb	r3, [r7, #26]
 8004750:	e054      	b.n	80047fc <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004752:	7efb      	ldrb	r3, [r7, #27]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d828      	bhi.n	80047aa <UART_SetConfig+0x522>
 8004758:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <UART_SetConfig+0x4d8>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	08004785 	.word	0x08004785
 8004764:	0800478d 	.word	0x0800478d
 8004768:	08004795 	.word	0x08004795
 800476c:	080047ab 	.word	0x080047ab
 8004770:	0800479b 	.word	0x0800479b
 8004774:	080047ab 	.word	0x080047ab
 8004778:	080047ab 	.word	0x080047ab
 800477c:	080047ab 	.word	0x080047ab
 8004780:	080047a3 	.word	0x080047a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004784:	f7fd ff9a 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8004788:	6178      	str	r0, [r7, #20]
        break;
 800478a:	e013      	b.n	80047b4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800478c:	f7fd ffac 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 8004790:	6178      	str	r0, [r7, #20]
        break;
 8004792:	e00f      	b.n	80047b4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004794:	4b24      	ldr	r3, [pc, #144]	; (8004828 <UART_SetConfig+0x5a0>)
 8004796:	617b      	str	r3, [r7, #20]
        break;
 8004798:	e00c      	b.n	80047b4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800479a:	f7fd fef9 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 800479e:	6178      	str	r0, [r7, #20]
        break;
 80047a0:	e008      	b.n	80047b4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a6:	617b      	str	r3, [r7, #20]
        break;
 80047a8:	e004      	b.n	80047b4 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	76bb      	strb	r3, [r7, #26]
        break;
 80047b2:	bf00      	nop
    }

    if (pclk != 0U)
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d020      	beq.n	80047fc <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	4a19      	ldr	r2, [pc, #100]	; (8004824 <UART_SetConfig+0x59c>)
 80047c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047c4:	461a      	mov	r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	085b      	lsrs	r3, r3, #1
 80047d2:	441a      	add	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	b29b      	uxth	r3, r3
 80047de:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b0f      	cmp	r3, #15
 80047e4:	d908      	bls.n	80047f8 <UART_SetConfig+0x570>
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ec:	d204      	bcs.n	80047f8 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	60da      	str	r2, [r3, #12]
 80047f6:	e001      	b.n	80047fc <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004818:	7ebb      	ldrb	r3, [r7, #26]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004824:	080053a4 	.word	0x080053a4
 8004828:	00f42400 	.word	0x00f42400

0800482c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01a      	beq.n	8004942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492a:	d10a      	bne.n	8004942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	605a      	str	r2, [r3, #4]
  }
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af02      	add	r7, sp, #8
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004980:	f7fc fbca 	bl	8001118 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b08      	cmp	r3, #8
 8004992:	d10e      	bne.n	80049b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004994:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f82c 	bl	8004a00 <UART_WaitOnFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e022      	b.n	80049f8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d10e      	bne.n	80049de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f816 	bl	8004a00 <UART_WaitOnFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e00c      	b.n	80049f8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a10:	e062      	b.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d05e      	beq.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7fc fb7d 	bl	8001118 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d11d      	bne.n	8004a6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a3e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e045      	b.n	8004af8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d02e      	beq.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a88:	d126      	bne.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a92:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004aa2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0201 	bic.w	r2, r2, #1
 8004ab2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e00f      	b.n	8004af8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69da      	ldr	r2, [r3, #28]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d08d      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_UARTEx_DisableFifoMode+0x16>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e027      	b.n	8004b66 <HAL_UARTEx_DisableFifoMode+0x66>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2224      	movs	r2, #36	; 0x24
 8004b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e02d      	b.n	8004be6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2224      	movs	r2, #36	; 0x24
 8004b96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0201 	bic.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f850 	bl	8004c6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e02d      	b.n	8004c62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2224      	movs	r2, #36	; 0x24
 8004c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0201 	bic.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f812 	bl	8004c6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b089      	sub	sp, #36	; 0x24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004c74:	4a2f      	ldr	r2, [pc, #188]	; (8004d34 <UARTEx_SetNbDataToProcess+0xc8>)
 8004c76:	f107 0314 	add.w	r3, r7, #20
 8004c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c7e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004c82:	4a2d      	ldr	r2, [pc, #180]	; (8004d38 <UARTEx_SetNbDataToProcess+0xcc>)
 8004c84:	f107 030c 	add.w	r3, r7, #12
 8004c88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c8c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d108      	bne.n	8004caa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ca8:	e03d      	b.n	8004d26 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004caa:	2308      	movs	r3, #8
 8004cac:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004cae:	2308      	movs	r3, #8
 8004cb0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	0e5b      	lsrs	r3, r3, #25
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	0f5b      	lsrs	r3, r3, #29
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004cd2:	7fbb      	ldrb	r3, [r7, #30]
 8004cd4:	7f3a      	ldrb	r2, [r7, #28]
 8004cd6:	f107 0120 	add.w	r1, r7, #32
 8004cda:	440a      	add	r2, r1
 8004cdc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004ce0:	fb02 f303 	mul.w	r3, r2, r3
 8004ce4:	7f3a      	ldrb	r2, [r7, #28]
 8004ce6:	f107 0120 	add.w	r1, r7, #32
 8004cea:	440a      	add	r2, r1
 8004cec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004cf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004cfc:	7ffb      	ldrb	r3, [r7, #31]
 8004cfe:	7f7a      	ldrb	r2, [r7, #29]
 8004d00:	f107 0120 	add.w	r1, r7, #32
 8004d04:	440a      	add	r2, r1
 8004d06:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	7f7a      	ldrb	r2, [r7, #29]
 8004d10:	f107 0120 	add.w	r1, r7, #32
 8004d14:	440a      	add	r2, r1
 8004d16:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004d1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004d26:	bf00      	nop
 8004d28:	3724      	adds	r7, #36	; 0x24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	08005344 	.word	0x08005344
 8004d38:	0800534c 	.word	0x0800534c

08004d3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	f107 001c 	add.w	r0, r7, #28
 8004d4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d122      	bne.n	8004d9a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d105      	bne.n	8004d8e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa30 	bl	80051f4 <USB_CoreReset>
 8004d94:	4603      	mov	r3, r0
 8004d96:	73fb      	strb	r3, [r7, #15]
 8004d98:	e01a      	b.n	8004dd0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fa24 	bl	80051f4 <USB_CoreReset>
 8004dac:	4603      	mov	r3, r0
 8004dae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d106      	bne.n	8004dc4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38
 8004dc2:	e005      	b.n	8004dd0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ddc:	b004      	add	sp, #16
 8004dde:	4770      	bx	lr

08004de0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f023 0201 	bic.w	r2, r3, #1
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d106      	bne.n	8004e2e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
 8004e2c:	e00b      	b.n	8004e46 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e2e:	78fb      	ldrb	r3, [r7, #3]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	60da      	str	r2, [r3, #12]
 8004e40:	e001      	b.n	8004e46 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e003      	b.n	8004e4e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004e46:	2032      	movs	r0, #50	; 0x32
 8004e48:	f7fc f972 	bl	8001130 <HAL_Delay>

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e58:	b084      	sub	sp, #16
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b086      	sub	sp, #24
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e72:	2300      	movs	r3, #0
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	e009      	b.n	8004e8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	3340      	adds	r3, #64	; 0x40
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	2200      	movs	r2, #0
 8004e84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b0e      	cmp	r3, #14
 8004e90:	d9f2      	bls.n	8004e78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d11c      	bne.n	8004ed2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ea6:	f043 0302 	orr.w	r3, r3, #2
 8004eaa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	e005      	b.n	8004ede <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef8:	461a      	mov	r2, r3
 8004efa:	680b      	ldr	r3, [r1, #0]
 8004efc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004efe:	2103      	movs	r1, #3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f93d 	bl	8005180 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f06:	2110      	movs	r1, #16
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f8f1 	bl	80050f0 <USB_FlushTxFifo>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f90f 	bl	800513c <USB_FlushRxFifo>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2300      	movs	r3, #0
 8004f32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f46:	461a      	mov	r2, r3
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	e043      	b.n	8004fda <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f68:	d118      	bne.n	8004f9c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	e013      	b.n	8004fae <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f92:	461a      	mov	r2, r3
 8004f94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	e008      	b.n	8004fae <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2300      	movs	r3, #0
 8004fac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d3b7      	bcc.n	8004f52 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	e043      	b.n	8005070 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ffe:	d118      	bne.n	8005032 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005012:	461a      	mov	r2, r3
 8005014:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	e013      	b.n	8005044 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005028:	461a      	mov	r2, r3
 800502a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	e008      	b.n	8005044 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503e:	461a      	mov	r2, r3
 8005040:	2300      	movs	r3, #0
 8005042:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005050:	461a      	mov	r2, r3
 8005052:	2300      	movs	r3, #0
 8005054:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005062:	461a      	mov	r2, r3
 8005064:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005068:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	3301      	adds	r3, #1
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	429a      	cmp	r2, r3
 8005076:	d3b7      	bcc.n	8004fe8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005086:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800508a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005098:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f043 0210 	orr.w	r2, r3, #16
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	4b10      	ldr	r3, [pc, #64]	; (80050ec <USB_DevInit+0x294>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f043 0208 	orr.w	r2, r3, #8
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d107      	bne.n	80050da <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050d2:	f043 0304 	orr.w	r3, r3, #4
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050da:	7dfb      	ldrb	r3, [r7, #23]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050e6:	b004      	add	sp, #16
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	803c3800 	.word	0x803c3800

080050f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	019b      	lsls	r3, r3, #6
 8005102:	f043 0220 	orr.w	r2, r3, #32
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3301      	adds	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a09      	ldr	r2, [pc, #36]	; (8005138 <USB_FlushTxFifo+0x48>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d901      	bls.n	800511c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e006      	b.n	800512a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b20      	cmp	r3, #32
 8005126:	d0f0      	beq.n	800510a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	00030d40 	.word	0x00030d40

0800513c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2210      	movs	r2, #16
 800514c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3301      	adds	r3, #1
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4a09      	ldr	r2, [pc, #36]	; (800517c <USB_FlushRxFifo+0x40>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e006      	b.n	800516e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b10      	cmp	r3, #16
 800516a:	d0f0      	beq.n	800514e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	00030d40 	.word	0x00030d40

08005180 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051a0:	4313      	orrs	r3, r2
 80051a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051cc:	f023 0303 	bic.w	r3, r3, #3
 80051d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e0:	f043 0302 	orr.w	r3, r3, #2
 80051e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4a13      	ldr	r2, [pc, #76]	; (8005258 <USB_CoreReset+0x64>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e01b      	b.n	800524a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	daf2      	bge.n	8005200 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f043 0201 	orr.w	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3301      	adds	r3, #1
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a09      	ldr	r2, [pc, #36]	; (8005258 <USB_CoreReset+0x64>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d901      	bls.n	800523c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e006      	b.n	800524a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b01      	cmp	r3, #1
 8005246:	d0f0      	beq.n	800522a <USB_CoreReset+0x36>

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	00030d40 	.word	0x00030d40

0800525c <__libc_init_array>:
 800525c:	b570      	push	{r4, r5, r6, lr}
 800525e:	4e0d      	ldr	r6, [pc, #52]	; (8005294 <__libc_init_array+0x38>)
 8005260:	4c0d      	ldr	r4, [pc, #52]	; (8005298 <__libc_init_array+0x3c>)
 8005262:	1ba4      	subs	r4, r4, r6
 8005264:	10a4      	asrs	r4, r4, #2
 8005266:	2500      	movs	r5, #0
 8005268:	42a5      	cmp	r5, r4
 800526a:	d109      	bne.n	8005280 <__libc_init_array+0x24>
 800526c:	4e0b      	ldr	r6, [pc, #44]	; (800529c <__libc_init_array+0x40>)
 800526e:	4c0c      	ldr	r4, [pc, #48]	; (80052a0 <__libc_init_array+0x44>)
 8005270:	f000 f82c 	bl	80052cc <_init>
 8005274:	1ba4      	subs	r4, r4, r6
 8005276:	10a4      	asrs	r4, r4, #2
 8005278:	2500      	movs	r5, #0
 800527a:	42a5      	cmp	r5, r4
 800527c:	d105      	bne.n	800528a <__libc_init_array+0x2e>
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005284:	4798      	blx	r3
 8005286:	3501      	adds	r5, #1
 8005288:	e7ee      	b.n	8005268 <__libc_init_array+0xc>
 800528a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800528e:	4798      	blx	r3
 8005290:	3501      	adds	r5, #1
 8005292:	e7f2      	b.n	800527a <__libc_init_array+0x1e>
 8005294:	080053c4 	.word	0x080053c4
 8005298:	080053c4 	.word	0x080053c4
 800529c:	080053c4 	.word	0x080053c4
 80052a0:	080053c8 	.word	0x080053c8

080052a4 <memcpy>:
 80052a4:	b510      	push	{r4, lr}
 80052a6:	1e43      	subs	r3, r0, #1
 80052a8:	440a      	add	r2, r1
 80052aa:	4291      	cmp	r1, r2
 80052ac:	d100      	bne.n	80052b0 <memcpy+0xc>
 80052ae:	bd10      	pop	{r4, pc}
 80052b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052b8:	e7f7      	b.n	80052aa <memcpy+0x6>

080052ba <memset>:
 80052ba:	4402      	add	r2, r0
 80052bc:	4603      	mov	r3, r0
 80052be:	4293      	cmp	r3, r2
 80052c0:	d100      	bne.n	80052c4 <memset+0xa>
 80052c2:	4770      	bx	lr
 80052c4:	f803 1b01 	strb.w	r1, [r3], #1
 80052c8:	e7f9      	b.n	80052be <memset+0x4>
	...

080052cc <_init>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	bf00      	nop
 80052d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d2:	bc08      	pop	{r3}
 80052d4:	469e      	mov	lr, r3
 80052d6:	4770      	bx	lr

080052d8 <_fini>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	bf00      	nop
 80052dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052de:	bc08      	pop	{r3}
 80052e0:	469e      	mov	lr, r3
 80052e2:	4770      	bx	lr
