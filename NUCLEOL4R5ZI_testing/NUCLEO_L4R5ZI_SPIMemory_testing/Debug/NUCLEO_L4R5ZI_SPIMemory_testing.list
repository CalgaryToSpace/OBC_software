
NUCLEO_L4R5ZI_SPIMemory_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800543c  0800543c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800543c  0800543c  0001543c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005444  08005444  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005448  08005448  00015448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800544c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  2000000c  08005458  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  08005458  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f1a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002117  00000000  00000000  00030f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  00033070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  00033f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a0bb  00000000  00000000  00034ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b76f  00000000  00000000  0005eda3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00101eeb  00000000  00000000  0006a512  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016c3fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dec  00000000  00000000  0016c478  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800534c 	.word	0x0800534c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800534c 	.word	0x0800534c

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295
 800021c:	f04f 30ff 	movne.w	r0, #4294967295
 8000220:	f000 b972 	b.w	8000508 <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9e08      	ldr	r6, [sp, #32]
 8000242:	4604      	mov	r4, r0
 8000244:	4688      	mov	r8, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d14b      	bne.n	80002e2 <__udivmoddi4+0xa6>
 800024a:	428a      	cmp	r2, r1
 800024c:	4615      	mov	r5, r2
 800024e:	d967      	bls.n	8000320 <__udivmoddi4+0xe4>
 8000250:	fab2 f282 	clz	r2, r2
 8000254:	b14a      	cbz	r2, 800026a <__udivmoddi4+0x2e>
 8000256:	f1c2 0720 	rsb	r7, r2, #32
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	fa20 f707 	lsr.w	r7, r0, r7
 8000262:	4095      	lsls	r5, r2
 8000264:	ea47 0803 	orr.w	r8, r7, r3
 8000268:	4094      	lsls	r4, r2
 800026a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026e:	0c23      	lsrs	r3, r4, #16
 8000270:	fbb8 f7fe 	udiv	r7, r8, lr
 8000274:	fa1f fc85 	uxth.w	ip, r5
 8000278:	fb0e 8817 	mls	r8, lr, r7, r8
 800027c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000280:	fb07 f10c 	mul.w	r1, r7, ip
 8000284:	4299      	cmp	r1, r3
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x60>
 8000288:	18eb      	adds	r3, r5, r3
 800028a:	f107 30ff 	add.w	r0, r7, #4294967295
 800028e:	f080 811b 	bcs.w	80004c8 <__udivmoddi4+0x28c>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 8118 	bls.w	80004c8 <__udivmoddi4+0x28c>
 8000298:	3f02      	subs	r7, #2
 800029a:	442b      	add	r3, r5
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b0:	45a4      	cmp	ip, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x8c>
 80002b4:	192c      	adds	r4, r5, r4
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x290>
 80002be:	45a4      	cmp	ip, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x290>
 80002c4:	3802      	subs	r0, #2
 80002c6:	442c      	add	r4, r5
 80002c8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002cc:	eba4 040c 	sub.w	r4, r4, ip
 80002d0:	2700      	movs	r7, #0
 80002d2:	b11e      	cbz	r6, 80002dc <__udivmoddi4+0xa0>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c6 4300 	strd	r4, r3, [r6]
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xbe>
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f000 80eb 	beq.w	80004c2 <__udivmoddi4+0x286>
 80002ec:	2700      	movs	r7, #0
 80002ee:	e9c6 0100 	strd	r0, r1, [r6]
 80002f2:	4638      	mov	r0, r7
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f783 	clz	r7, r3
 80002fe:	2f00      	cmp	r7, #0
 8000300:	d147      	bne.n	8000392 <__udivmoddi4+0x156>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd0>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2c4>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4698      	mov	r8, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa0>
 800031a:	e9c6 4800 	strd	r4, r8, [r6]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa0>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xe8>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 808f 	bne.w	800044c <__udivmoddi4+0x210>
 800032e:	1b49      	subs	r1, r1, r5
 8000330:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000334:	fa1f f885 	uxth.w	r8, r5
 8000338:	2701      	movs	r7, #1
 800033a:	fbb1 fcfe 	udiv	ip, r1, lr
 800033e:	0c23      	lsrs	r3, r4, #16
 8000340:	fb0e 111c 	mls	r1, lr, ip, r1
 8000344:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000348:	fb08 f10c 	mul.w	r1, r8, ip
 800034c:	4299      	cmp	r1, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x124>
 8000350:	18eb      	adds	r3, r5, r3
 8000352:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x122>
 8000358:	4299      	cmp	r1, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2bc>
 800035e:	4684      	mov	ip, r0
 8000360:	1a59      	subs	r1, r3, r1
 8000362:	b2a3      	uxth	r3, r4
 8000364:	fbb1 f0fe 	udiv	r0, r1, lr
 8000368:	fb0e 1410 	mls	r4, lr, r0, r1
 800036c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000370:	fb08 f800 	mul.w	r8, r8, r0
 8000374:	45a0      	cmp	r8, r4
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x14c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x14a>
 8000380:	45a0      	cmp	r8, r4
 8000382:	f200 80b6 	bhi.w	80004f2 <__udivmoddi4+0x2b6>
 8000386:	4618      	mov	r0, r3
 8000388:	eba4 0408 	sub.w	r4, r4, r8
 800038c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000390:	e79f      	b.n	80002d2 <__udivmoddi4+0x96>
 8000392:	f1c7 0c20 	rsb	ip, r7, #32
 8000396:	40bb      	lsls	r3, r7
 8000398:	fa22 fe0c 	lsr.w	lr, r2, ip
 800039c:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a0:	fa01 f407 	lsl.w	r4, r1, r7
 80003a4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003ac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b0:	4325      	orrs	r5, r4
 80003b2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b6:	0c2c      	lsrs	r4, r5, #16
 80003b8:	fb08 3319 	mls	r3, r8, r9, r3
 80003bc:	fa1f fa8e 	uxth.w	sl, lr
 80003c0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c4:	fb09 f40a 	mul.w	r4, r9, sl
 80003c8:	429c      	cmp	r4, r3
 80003ca:	fa02 f207 	lsl.w	r2, r2, r7
 80003ce:	fa00 f107 	lsl.w	r1, r0, r7
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b0>
 80003d4:	eb1e 0303 	adds.w	r3, lr, r3
 80003d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003dc:	f080 8087 	bcs.w	80004ee <__udivmoddi4+0x2b2>
 80003e0:	429c      	cmp	r4, r3
 80003e2:	f240 8084 	bls.w	80004ee <__udivmoddi4+0x2b2>
 80003e6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ea:	4473      	add	r3, lr
 80003ec:	1b1b      	subs	r3, r3, r4
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f4:	fb08 3310 	mls	r3, r8, r0, r3
 80003f8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003fc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000400:	45a2      	cmp	sl, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1da>
 8000404:	eb1e 0404 	adds.w	r4, lr, r4
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295
 800040c:	d26b      	bcs.n	80004e6 <__udivmoddi4+0x2aa>
 800040e:	45a2      	cmp	sl, r4
 8000410:	d969      	bls.n	80004e6 <__udivmoddi4+0x2aa>
 8000412:	3802      	subs	r0, #2
 8000414:	4474      	add	r4, lr
 8000416:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041a:	fba0 8902 	umull	r8, r9, r0, r2
 800041e:	eba4 040a 	sub.w	r4, r4, sl
 8000422:	454c      	cmp	r4, r9
 8000424:	46c2      	mov	sl, r8
 8000426:	464b      	mov	r3, r9
 8000428:	d354      	bcc.n	80004d4 <__udivmoddi4+0x298>
 800042a:	d051      	beq.n	80004d0 <__udivmoddi4+0x294>
 800042c:	2e00      	cmp	r6, #0
 800042e:	d069      	beq.n	8000504 <__udivmoddi4+0x2c8>
 8000430:	ebb1 050a 	subs.w	r5, r1, sl
 8000434:	eb64 0403 	sbc.w	r4, r4, r3
 8000438:	fa04 fc0c 	lsl.w	ip, r4, ip
 800043c:	40fd      	lsrs	r5, r7
 800043e:	40fc      	lsrs	r4, r7
 8000440:	ea4c 0505 	orr.w	r5, ip, r5
 8000444:	e9c6 5400 	strd	r5, r4, [r6]
 8000448:	2700      	movs	r7, #0
 800044a:	e747      	b.n	80002dc <__udivmoddi4+0xa0>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f703 	lsr.w	r7, r0, r3
 8000454:	4095      	lsls	r5, r2
 8000456:	fa01 f002 	lsl.w	r0, r1, r2
 800045a:	fa21 f303 	lsr.w	r3, r1, r3
 800045e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000462:	4338      	orrs	r0, r7
 8000464:	0c01      	lsrs	r1, r0, #16
 8000466:	fbb3 f7fe 	udiv	r7, r3, lr
 800046a:	fa1f f885 	uxth.w	r8, r5
 800046e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb07 f308 	mul.w	r3, r7, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x256>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f107 3cff 	add.w	ip, r7, #4294967295
 8000488:	d22f      	bcs.n	80004ea <__udivmoddi4+0x2ae>
 800048a:	428b      	cmp	r3, r1
 800048c:	d92d      	bls.n	80004ea <__udivmoddi4+0x2ae>
 800048e:	3f02      	subs	r7, #2
 8000490:	4429      	add	r1, r5
 8000492:	1acb      	subs	r3, r1, r3
 8000494:	b281      	uxth	r1, r0
 8000496:	fbb3 f0fe 	udiv	r0, r3, lr
 800049a:	fb0e 3310 	mls	r3, lr, r0, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb00 f308 	mul.w	r3, r0, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x27e>
 80004aa:	1869      	adds	r1, r5, r1
 80004ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b0:	d217      	bcs.n	80004e2 <__udivmoddi4+0x2a6>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d915      	bls.n	80004e2 <__udivmoddi4+0x2a6>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4429      	add	r1, r5
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c0:	e73b      	b.n	800033a <__udivmoddi4+0xfe>
 80004c2:	4637      	mov	r7, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e709      	b.n	80002dc <__udivmoddi4+0xa0>
 80004c8:	4607      	mov	r7, r0
 80004ca:	e6e7      	b.n	800029c <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x8c>
 80004d0:	4541      	cmp	r1, r8
 80004d2:	d2ab      	bcs.n	800042c <__udivmoddi4+0x1f0>
 80004d4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d8:	eb69 020e 	sbc.w	r2, r9, lr
 80004dc:	3801      	subs	r0, #1
 80004de:	4613      	mov	r3, r2
 80004e0:	e7a4      	b.n	800042c <__udivmoddi4+0x1f0>
 80004e2:	4660      	mov	r0, ip
 80004e4:	e7e9      	b.n	80004ba <__udivmoddi4+0x27e>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e795      	b.n	8000416 <__udivmoddi4+0x1da>
 80004ea:	4667      	mov	r7, ip
 80004ec:	e7d1      	b.n	8000492 <__udivmoddi4+0x256>
 80004ee:	4681      	mov	r9, r0
 80004f0:	e77c      	b.n	80003ec <__udivmoddi4+0x1b0>
 80004f2:	3802      	subs	r0, #2
 80004f4:	442c      	add	r4, r5
 80004f6:	e747      	b.n	8000388 <__udivmoddi4+0x14c>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	442b      	add	r3, r5
 80004fe:	e72f      	b.n	8000360 <__udivmoddi4+0x124>
 8000500:	4638      	mov	r0, r7
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xda>
 8000504:	4637      	mov	r7, r6
 8000506:	e6e9      	b.n	80002dc <__udivmoddi4+0xa0>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b0cf      	sub	sp, #316	; 0x13c
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	char uart_buf[100];
	char spiTX_buf[100] = {0};
 8000512:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000516:	2264      	movs	r2, #100	; 0x64
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 ff0d 	bl	800533a <memset>
	char spiRX_buf[100] = {0};
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	4618      	mov	r0, r3
 8000526:	2364      	movs	r3, #100	; 0x64
 8000528:	461a      	mov	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f004 ff05 	bl	800533a <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 fdc9 	bl	80010c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f9b4 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 fb30 	bl	8000b9c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800053c:	f000 fa2e 	bl	800099c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000540:	f000 fa78 	bl	8000a34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000544:	f000 fb00 	bl	8000b48 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000548:	f000 fac0 	bl	8000acc <MX_SPI1_Init>


  /* USER CODE BEGIN 2 */

  //flash blue led to indicate its running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	48c8      	ldr	r0, [pc, #800]	; (8000874 <main+0x368>)
 8000552:	f001 f8c7 	bl	80016e4 <HAL_GPIO_WritePin>

  //chip select high
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055c:	48c6      	ldr	r0, [pc, #792]	; (8000878 <main+0x36c>)
 800055e:	f001 f8c1 	bl	80016e4 <HAL_GPIO_WritePin>

  // Send something to UART
	strcpy((char*)uart_buf, "Testing SPI\r\n");
 8000562:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000566:	4ac5      	ldr	r2, [pc, #788]	; (800087c <main+0x370>)
 8000568:	461c      	mov	r4, r3
 800056a:	4613      	mov	r3, r2
 800056c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800056e:	c407      	stmia	r4!, {r0, r1, r2}
 8000570:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, strlen((char*)uart_buf), 100);
 8000572:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fe40 	bl	80001fc <strlen>
 800057c:	4603      	mov	r3, r0
 800057e:	b29a      	uxth	r2, r3
 8000580:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000584:	2364      	movs	r3, #100	; 0x64
 8000586:	48be      	ldr	r0, [pc, #760]	; (8000880 <main+0x374>)
 8000588:	f003 fe26 	bl	80041d8 <HAL_UART_Transmit>

   //check to see if status reg
   	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000592:	48b9      	ldr	r0, [pc, #740]	; (8000878 <main+0x36c>)
 8000594:	f001 f8a6 	bl	80016e4 <HAL_GPIO_WritePin>
   	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	2201      	movs	r2, #1
 800059c:	49b9      	ldr	r1, [pc, #740]	; (8000884 <main+0x378>)
 800059e:	48ba      	ldr	r0, [pc, #744]	; (8000888 <main+0x37c>)
 80005a0:	f002 ff65 	bl	800346e <HAL_SPI_Transmit>
   	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 80005a4:	f107 0108 	add.w	r1, r7, #8
 80005a8:	2364      	movs	r3, #100	; 0x64
 80005aa:	2201      	movs	r2, #1
 80005ac:	48b6      	ldr	r0, [pc, #728]	; (8000888 <main+0x37c>)
 80005ae:	f003 f8cc 	bl	800374a <HAL_SPI_Receive>
   	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b8:	48af      	ldr	r0, [pc, #700]	; (8000878 <main+0x36c>)
 80005ba:	f001 f893 	bl	80016e4 <HAL_GPIO_WritePin>

   //write enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c4:	48ac      	ldr	r0, [pc, #688]	; (8000878 <main+0x36c>)
 80005c6:	f001 f88d 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_WREN, 1, 100);
 80005ca:	2364      	movs	r3, #100	; 0x64
 80005cc:	2201      	movs	r2, #1
 80005ce:	49af      	ldr	r1, [pc, #700]	; (800088c <main+0x380>)
 80005d0:	48ad      	ldr	r0, [pc, #692]	; (8000888 <main+0x37c>)
 80005d2:	f002 ff4c 	bl	800346e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005dc:	48a6      	ldr	r0, [pc, #664]	; (8000878 <main+0x36c>)
 80005de:	f001 f881 	bl	80016e4 <HAL_GPIO_WritePin>

	//check to see if status reg
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e8:	48a3      	ldr	r0, [pc, #652]	; (8000878 <main+0x36c>)
 80005ea:	f001 f87b 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	2201      	movs	r2, #1
 80005f2:	49a4      	ldr	r1, [pc, #656]	; (8000884 <main+0x378>)
 80005f4:	48a4      	ldr	r0, [pc, #656]	; (8000888 <main+0x37c>)
 80005f6:	f002 ff3a 	bl	800346e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 80005fa:	f107 0108 	add.w	r1, r7, #8
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	2201      	movs	r2, #1
 8000602:	48a1      	ldr	r0, [pc, #644]	; (8000888 <main+0x37c>)
 8000604:	f003 f8a1 	bl	800374a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	489a      	ldr	r0, [pc, #616]	; (8000878 <main+0x36c>)
 8000610:	f001 f868 	bl	80016e4 <HAL_GPIO_WritePin>

	//address to save to
	addr[0] = 0x0f;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	220f      	movs	r2, #15
 8000618:	701a      	strb	r2, [r3, #0]
	addr[1] = 0xff;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	22ff      	movs	r2, #255	; 0xff
 800061e:	705a      	strb	r2, [r3, #1]
	addr[2] = 0x00;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	709a      	strb	r2, [r3, #2]


   //erase block
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062c:	4892      	ldr	r0, [pc, #584]	; (8000878 <main+0x36c>)
 800062e:	f001 f859 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_ER32, 1, 100);
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	2201      	movs	r2, #1
 8000636:	4996      	ldr	r1, [pc, #600]	; (8000890 <main+0x384>)
 8000638:	4893      	ldr	r0, [pc, #588]	; (8000888 <main+0x37c>)
 800063a:	f002 ff18 	bl	800346e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&addr, 3, 100);			//write address
 800063e:	1d39      	adds	r1, r7, #4
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	2203      	movs	r2, #3
 8000644:	4890      	ldr	r0, [pc, #576]	; (8000888 <main+0x37c>)
 8000646:	f002 ff12 	bl	800346e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000650:	4889      	ldr	r0, [pc, #548]	; (8000878 <main+0x36c>)
 8000652:	f001 f847 	bl	80016e4 <HAL_GPIO_WritePin>

	wip = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	while (wip)
 800065c:	e01f      	b.n	800069e <main+0x192>
	{
		// Read status register
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000664:	4884      	ldr	r0, [pc, #528]	; (8000878 <main+0x36c>)
 8000666:	f001 f83d 	bl	80016e4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2201      	movs	r2, #1
 800066e:	4985      	ldr	r1, [pc, #532]	; (8000884 <main+0x378>)
 8000670:	4885      	ldr	r0, [pc, #532]	; (8000888 <main+0x37c>)
 8000672:	f002 fefc 	bl	800346e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 8000676:	f107 0108 	add.w	r1, r7, #8
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	2201      	movs	r2, #1
 800067e:	4882      	ldr	r0, [pc, #520]	; (8000888 <main+0x37c>)
 8000680:	f003 f863 	bl	800374a <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068a:	487b      	ldr	r0, [pc, #492]	; (8000878 <main+0x36c>)
 800068c:	f001 f82a 	bl	80016e4 <HAL_GPIO_WritePin>

		// Mask out WIP bit
		wip = spiRX_buf[0] & 0b00000001;
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	while (wip)
 800069e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1db      	bne.n	800065e <main+0x152>
	}


	//check to see status reg
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ac:	4872      	ldr	r0, [pc, #456]	; (8000878 <main+0x36c>)
 80006ae:	f001 f819 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 80006b2:	2364      	movs	r3, #100	; 0x64
 80006b4:	2201      	movs	r2, #1
 80006b6:	4973      	ldr	r1, [pc, #460]	; (8000884 <main+0x378>)
 80006b8:	4873      	ldr	r0, [pc, #460]	; (8000888 <main+0x37c>)
 80006ba:	f002 fed8 	bl	800346e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 80006be:	f107 0108 	add.w	r1, r7, #8
 80006c2:	2364      	movs	r3, #100	; 0x64
 80006c4:	2201      	movs	r2, #1
 80006c6:	4870      	ldr	r0, [pc, #448]	; (8000888 <main+0x37c>)
 80006c8:	f003 f83f 	bl	800374a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d2:	4869      	ldr	r0, [pc, #420]	; (8000878 <main+0x36c>)
 80006d4:	f001 f806 	bl	80016e4 <HAL_GPIO_WritePin>

	//write enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006de:	4866      	ldr	r0, [pc, #408]	; (8000878 <main+0x36c>)
 80006e0:	f001 f800 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_WREN, 1, 100);
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	2201      	movs	r2, #1
 80006e8:	4968      	ldr	r1, [pc, #416]	; (800088c <main+0x380>)
 80006ea:	4867      	ldr	r0, [pc, #412]	; (8000888 <main+0x37c>)
 80006ec:	f002 febf 	bl	800346e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f6:	4860      	ldr	r0, [pc, #384]	; (8000878 <main+0x36c>)
 80006f8:	f000 fff4 	bl	80016e4 <HAL_GPIO_WritePin>

	//check to see status reg
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000702:	485d      	ldr	r0, [pc, #372]	; (8000878 <main+0x36c>)
 8000704:	f000 ffee 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	2201      	movs	r2, #1
 800070c:	495d      	ldr	r1, [pc, #372]	; (8000884 <main+0x378>)
 800070e:	485e      	ldr	r0, [pc, #376]	; (8000888 <main+0x37c>)
 8000710:	f002 fead 	bl	800346e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 8000714:	f107 0108 	add.w	r1, r7, #8
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	2201      	movs	r2, #1
 800071c:	485a      	ldr	r0, [pc, #360]	; (8000888 <main+0x37c>)
 800071e:	f003 f814 	bl	800374a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000728:	4853      	ldr	r0, [pc, #332]	; (8000878 <main+0x36c>)
 800072a:	f000 ffdb 	bl	80016e4 <HAL_GPIO_WritePin>

	//save message into tx buffer
	strcpy((char*)spiTX_buf, "I shall write this message into flash memory and then get it back! Please?\r\n");
 800072e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000732:	4a58      	ldr	r2, [pc, #352]	; (8000894 <main+0x388>)
 8000734:	4618      	mov	r0, r3
 8000736:	4611      	mov	r1, r2
 8000738:	234d      	movs	r3, #77	; 0x4d
 800073a:	461a      	mov	r2, r3
 800073c:	f004 fdf2 	bl	8005324 <memcpy>
	uint8_t buflen = strlen((char*)spiTX_buf);
 8000740:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd59 	bl	80001fc <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136


	//write data
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	//cs low
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000756:	4848      	ldr	r0, [pc, #288]	; (8000878 <main+0x36c>)
 8000758:	f000 ffc4 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_WRITE, 1, 100);	//write opcode
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	494d      	ldr	r1, [pc, #308]	; (8000898 <main+0x38c>)
 8000762:	4849      	ldr	r0, [pc, #292]	; (8000888 <main+0x37c>)
 8000764:	f002 fe83 	bl	800346e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&addr, 3, 100);			//write address
 8000768:	1d39      	adds	r1, r7, #4
 800076a:	2364      	movs	r3, #100	; 0x64
 800076c:	2203      	movs	r2, #3
 800076e:	4846      	ldr	r0, [pc, #280]	; (8000888 <main+0x37c>)
 8000770:	f002 fe7d 	bl	800346e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&spiTX_buf, 100, 100);//data
 8000774:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000778:	2364      	movs	r3, #100	; 0x64
 800077a:	2264      	movs	r2, #100	; 0x64
 800077c:	4842      	ldr	r0, [pc, #264]	; (8000888 <main+0x37c>)
 800077e:	f002 fe76 	bl	800346e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000788:	483b      	ldr	r0, [pc, #236]	; (8000878 <main+0x36c>)
 800078a:	f000 ffab 	bl	80016e4 <HAL_GPIO_WritePin>

	wip = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	while (wip)
 8000794:	e01f      	b.n	80007d6 <main+0x2ca>
	{
		// Read status register
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079c:	4836      	ldr	r0, [pc, #216]	; (8000878 <main+0x36c>)
 800079e:	f000 ffa1 	bl	80016e4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	4937      	ldr	r1, [pc, #220]	; (8000884 <main+0x378>)
 80007a8:	4837      	ldr	r0, [pc, #220]	; (8000888 <main+0x37c>)
 80007aa:	f002 fe60 	bl	800346e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 80007ae:	f107 0108 	add.w	r1, r7, #8
 80007b2:	2364      	movs	r3, #100	; 0x64
 80007b4:	2201      	movs	r2, #1
 80007b6:	4834      	ldr	r0, [pc, #208]	; (8000888 <main+0x37c>)
 80007b8:	f002 ffc7 	bl	800374a <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c2:	482d      	ldr	r0, [pc, #180]	; (8000878 <main+0x36c>)
 80007c4:	f000 ff8e 	bl	80016e4 <HAL_GPIO_WritePin>

		// Mask out WIP bit
		wip = spiRX_buf[0] & 0b00000001;
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	while (wip)
 80007d6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1db      	bne.n	8000796 <main+0x28a>
	}

	//check to see if status reg
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e4:	4824      	ldr	r0, [pc, #144]	; (8000878 <main+0x36c>)
 80007e6:	f000 ff7d 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 80007ea:	2364      	movs	r3, #100	; 0x64
 80007ec:	2201      	movs	r2, #1
 80007ee:	4925      	ldr	r1, [pc, #148]	; (8000884 <main+0x378>)
 80007f0:	4825      	ldr	r0, [pc, #148]	; (8000888 <main+0x37c>)
 80007f2:	f002 fe3c 	bl	800346e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 80007f6:	f107 0108 	add.w	r1, r7, #8
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	2201      	movs	r2, #1
 80007fe:	4822      	ldr	r0, [pc, #136]	; (8000888 <main+0x37c>)
 8000800:	f002 ffa3 	bl	800374a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080a:	481b      	ldr	r0, [pc, #108]	; (8000878 <main+0x36c>)
 800080c:	f000 ff6a 	bl	80016e4 <HAL_GPIO_WritePin>

	//read the data back
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	//cs low
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000816:	4818      	ldr	r0, [pc, #96]	; (8000878 <main+0x36c>)
 8000818:	f000 ff64 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_READ, 1, 100);	//opcode for read
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	2201      	movs	r2, #1
 8000820:	491e      	ldr	r1, [pc, #120]	; (800089c <main+0x390>)
 8000822:	4819      	ldr	r0, [pc, #100]	; (8000888 <main+0x37c>)
 8000824:	f002 fe23 	bl	800346e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&addr, 3, 100);			//address to read
 8000828:	1d39      	adds	r1, r7, #4
 800082a:	2364      	movs	r3, #100	; 0x64
 800082c:	2203      	movs	r2, #3
 800082e:	4816      	ldr	r0, [pc, #88]	; (8000888 <main+0x37c>)
 8000830:	f002 fe1d 	bl	800346e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 100, 100);	//Receive data
 8000834:	f107 0108 	add.w	r1, r7, #8
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	2264      	movs	r2, #100	; 0x64
 800083c:	4812      	ldr	r0, [pc, #72]	; (8000888 <main+0x37c>)
 800083e:	f002 ff84 	bl	800374a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <main+0x36c>)
 800084a:	f000 ff4b 	bl	80016e4 <HAL_GPIO_WritePin>

	//print the data to UART
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)spiRX_buf, strlen((char*)spiRX_buf), 100);
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fcd2 	bl	80001fc <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b29a      	uxth	r2, r3
 800085c:	f107 0108 	add.w	r1, r7, #8
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <main+0x374>)
 8000864:	f003 fcb8 	bl	80041d8 <HAL_UART_Transmit>

	//turn off blue led to indicate its done
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2180      	movs	r1, #128	; 0x80
 800086c:	4801      	ldr	r0, [pc, #4]	; (8000874 <main+0x368>)
 800086e:	f000 ff39 	bl	80016e4 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000872:	e7fe      	b.n	8000872 <main+0x366>
 8000874:	48000400 	.word	0x48000400
 8000878:	48000c00 	.word	0x48000c00
 800087c:	08005364 	.word	0x08005364
 8000880:	200004bc 	.word	0x200004bc
 8000884:	080053d8 	.word	0x080053d8
 8000888:	20000548 	.word	0x20000548
 800088c:	080053d6 	.word	0x080053d6
 8000890:	080053d7 	.word	0x080053d7
 8000894:	08005374 	.word	0x08005374
 8000898:	080053d5 	.word	0x080053d5
 800089c:	080053d4 	.word	0x080053d4

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0bc      	sub	sp, #240	; 0xf0
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008aa:	2244      	movs	r2, #68	; 0x44
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f004 fd43 	bl	800533a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2294      	movs	r2, #148	; 0x94
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 fd35 	bl	800533a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 f887 	bl	80019e4 <HAL_PWREx_ControlVoltageScaling>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80008dc:	f000 fa1a 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80008e0:	2322      	movs	r3, #34	; 0x22
 80008e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008ee:	2301      	movs	r3, #1
 80008f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2340      	movs	r3, #64	; 0x40
 80008f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 800090c:	231e      	movs	r3, #30
 800090e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000912:	2302      	movs	r3, #2
 8000914:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800091e:	2302      	movs	r3, #2
 8000920:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000928:	4618      	mov	r0, r3
 800092a:	f001 f91f 	bl	8001b6c <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000934:	f000 f9ee 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	230f      	movs	r3, #15
 800093a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2303      	movs	r3, #3
 8000940:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000958:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800095c:	2105      	movs	r1, #5
 800095e:	4618      	mov	r0, r3
 8000960:	f001 fd2a 	bl	80023b8 <HAL_RCC_ClockConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800096a:	f000 f9d3 	bl	8000d14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 800096e:	f242 0324 	movw	r3, #8228	; 0x2024
 8000972:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000974:	2300      	movs	r3, #0
 8000976:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000978:	2300      	movs	r3, #0
 800097a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800097c:	2300      	movs	r3, #0
 800097e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4618      	mov	r0, r3
 8000984:	f001 ffc8 	bl	8002918 <HAL_RCCEx_PeriphCLKConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800098e:	f000 f9c1 	bl	8000d14 <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	37f0      	adds	r7, #240	; 0xf0
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 80009a2:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <MX_LPUART1_UART_Init+0x94>)
 80009a4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009e4:	4811      	ldr	r0, [pc, #68]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 80009e6:	f003 fba7 	bl	8004138 <HAL_UART_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80009f0:	f000 f990 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f4:	2100      	movs	r1, #0
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 80009f8:	f004 f8fb 	bl	8004bf2 <HAL_UARTEx_SetTxFifoThreshold>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a02:	f000 f987 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a06:	2100      	movs	r1, #0
 8000a08:	4808      	ldr	r0, [pc, #32]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 8000a0a:	f004 f930 	bl	8004c6e <HAL_UARTEx_SetRxFifoThreshold>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a14:	f000 f97e 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_LPUART1_UART_Init+0x90>)
 8000a1a:	f004 f8b1 	bl	8004b80 <HAL_UARTEx_DisableFifoMode>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a24:	f000 f976 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200004bc 	.word	0x200004bc
 8000a30:	40008000 	.word	0x40008000

08000a34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000a3a:	4a23      	ldr	r2, [pc, #140]	; (8000ac8 <MX_USART3_UART_Init+0x94>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a7c:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000a7e:	f003 fb5b 	bl	8004138 <HAL_UART_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a88:	f000 f944 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000a90:	f004 f8af 	bl	8004bf2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a9a:	f000 f93b 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000aa2:	f004 f8e4 	bl	8004c6e <HAL_UARTEx_SetRxFifoThreshold>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aac:	f000 f932 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_USART3_UART_Init+0x90>)
 8000ab2:	f004 f865 	bl	8004b80 <HAL_UARTEx_DisableFifoMode>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000abc:	f000 f92a 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000028 	.word	0x20000028
 8000ac8:	40004800 	.word	0x40004800

08000acc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <MX_SPI1_Init+0x78>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000ae6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000aea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b02:	2228      	movs	r2, #40	; 0x28
 8000b04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b1a:	2207      	movs	r2, #7
 8000b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b2c:	f002 fbfc 	bl	8003328 <HAL_SPI_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b36:	f000 f8ed 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000548 	.word	0x20000548
 8000b44:	40013000 	.word	0x40013000

08000b48 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b56:	2206      	movs	r2, #6
 8000b58:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b86:	f000 fdc5 	bl	8001714 <HAL_PCD_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000b90:	f000 f8c0 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000b4 	.word	0x200000b4

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	4b52      	ldr	r3, [pc, #328]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a51      	ldr	r2, [pc, #324]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b4f      	ldr	r3, [pc, #316]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	61bb      	str	r3, [r7, #24]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	4b4c      	ldr	r3, [pc, #304]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a4b      	ldr	r2, [pc, #300]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b49      	ldr	r3, [pc, #292]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b46      	ldr	r3, [pc, #280]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	4a45      	ldr	r2, [pc, #276]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bee:	4b43      	ldr	r3, [pc, #268]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4b40      	ldr	r3, [pc, #256]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a3f      	ldr	r2, [pc, #252]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c12:	4b3a      	ldr	r3, [pc, #232]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a39      	ldr	r2, [pc, #228]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0308 	and.w	r3, r3, #8
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2a:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a33      	ldr	r2, [pc, #204]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <MX_GPIO_Init+0x160>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000c42:	f000 ff83 	bl	8001b4c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000c4c:	482c      	ldr	r0, [pc, #176]	; (8000d00 <MX_GPIO_Init+0x164>)
 8000c4e:	f000 fd49 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c58:	482a      	ldr	r0, [pc, #168]	; (8000d04 <MX_GPIO_Init+0x168>)
 8000c5a:	f000 fd43 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2120      	movs	r1, #32
 8000c62:	4829      	ldr	r0, [pc, #164]	; (8000d08 <MX_GPIO_Init+0x16c>)
 8000c64:	f000 fd3e 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6e:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <MX_GPIO_Init+0x170>)
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4824      	ldr	r0, [pc, #144]	; (8000d10 <MX_GPIO_Init+0x174>)
 8000c7e:	f000 fb9f 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c82:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4819      	ldr	r0, [pc, #100]	; (8000d00 <MX_GPIO_Init+0x164>)
 8000c9c:	f000 fb90 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ca0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4812      	ldr	r0, [pc, #72]	; (8000d04 <MX_GPIO_Init+0x168>)
 8000cba:	f000 fb81 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <MX_GPIO_Init+0x16c>)
 8000cd6:	f000 fb73 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cda:	2340      	movs	r3, #64	; 0x40
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	4806      	ldr	r0, [pc, #24]	; (8000d08 <MX_GPIO_Init+0x16c>)
 8000cee:	f000 fb67 	bl	80013c0 <HAL_GPIO_Init>

}
 8000cf2:	bf00      	nop
 8000cf4:	3730      	adds	r7, #48	; 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	48000400 	.word	0x48000400
 8000d04:	48000c00 	.word	0x48000c00
 8000d08:	48001800 	.word	0x48001800
 8000d0c:	10110000 	.word	0x10110000
 8000d10:	48000800 	.word	0x48000800

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <Error_Handler+0x6>

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_MspInit+0x44>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_MspInit+0x44>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x44>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x44>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a30      	ldr	r2, [pc, #192]	; (8000e44 <HAL_UART_MspInit+0xe0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d12b      	bne.n	8000dde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d86:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <HAL_UART_MspInit+0xe4>)
 8000d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d8a:	4a2f      	ldr	r2, [pc, #188]	; (8000e48 <HAL_UART_MspInit+0xe4>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d92:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <HAL_UART_MspInit+0xe4>)
 8000d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <HAL_UART_MspInit+0xe4>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <HAL_UART_MspInit+0xe4>)
 8000da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <HAL_UART_MspInit+0xe4>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000db6:	f000 fec9 	bl	8001b4c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000dba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481d      	ldr	r0, [pc, #116]	; (8000e4c <HAL_UART_MspInit+0xe8>)
 8000dd8:	f000 faf2 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ddc:	e02d      	b.n	8000e3a <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <HAL_UART_MspInit+0xec>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d128      	bne.n	8000e3a <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_UART_MspInit+0xe4>)
 8000dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dec:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <HAL_UART_MspInit+0xe4>)
 8000dee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df2:	6593      	str	r3, [r2, #88]	; 0x58
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_UART_MspInit+0xe4>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_UART_MspInit+0xe4>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e04:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_UART_MspInit+0xe4>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_UART_MspInit+0xe4>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	f003 0308 	and.w	r3, r3, #8
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	4807      	ldr	r0, [pc, #28]	; (8000e54 <HAL_UART_MspInit+0xf0>)
 8000e36:	f000 fac3 	bl	80013c0 <HAL_GPIO_Init>
}
 8000e3a:	bf00      	nop
 8000e3c:	3730      	adds	r7, #48	; 0x30
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40008000 	.word	0x40008000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48001800 	.word	0x48001800
 8000e50:	40004800 	.word	0x40004800
 8000e54:	48000c00 	.word	0x48000c00

08000e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_SPI_MspInit+0x7c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d128      	bne.n	8000ecc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_SPI_MspInit+0x80>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7e:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <HAL_SPI_MspInit+0x80>)
 8000e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e84:	6613      	str	r3, [r2, #96]	; 0x60
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_SPI_MspInit+0x80>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_SPI_MspInit+0x80>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <HAL_SPI_MspInit+0x80>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_SPI_MspInit+0x80>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eaa:	23e0      	movs	r3, #224	; 0xe0
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eba:	2305      	movs	r3, #5
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec8:	f000 fa7a 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40013000 	.word	0x40013000
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000efc:	d154      	bne.n	8000fa8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <HAL_PCD_MspInit+0xd4>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a2b      	ldr	r2, [pc, #172]	; (8000fb0 <HAL_PCD_MspInit+0xd4>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <HAL_PCD_MspInit+0xd4>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f16:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f28:	230a      	movs	r3, #10
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f000 fa43 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f52:	f000 fa35 	bl	80013c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_PCD_MspInit+0xd4>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <HAL_PCD_MspInit+0xd4>)
 8000f5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_PCD_MspInit+0xd4>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <HAL_PCD_MspInit+0xd4>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d114      	bne.n	8000fa4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_PCD_MspInit+0xd4>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <HAL_PCD_MspInit+0xd4>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6593      	str	r3, [r2, #88]	; 0x58
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_PCD_MspInit+0xd4>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000f92:	f000 fdcb 	bl	8001b2c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_PCD_MspInit+0xd4>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <HAL_PCD_MspInit+0xd4>)
 8000f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fa2:	e001      	b.n	8000fa8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000fa4:	f000 fdc2 	bl	8001b2c <HAL_PWREx_EnableVddUSB>
}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <NMI_Handler+0x4>

08000fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001000:	f000 f8b6 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <SystemInit+0x64>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001012:	4a16      	ldr	r2, [pc, #88]	; (800106c <SystemInit+0x64>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <SystemInit+0x68>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a13      	ldr	r2, [pc, #76]	; (8001070 <SystemInit+0x68>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <SystemInit+0x68>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <SystemInit+0x68>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <SystemInit+0x68>)
 8001034:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001038:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800103c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <SystemInit+0x68>)
 8001040:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001044:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <SystemInit+0x68>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <SystemInit+0x68>)
 800104c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001050:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <SystemInit+0x68>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <SystemInit+0x64>)
 800105a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800105e:	609a      	str	r2, [r3, #8]
#endif
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	40021000 	.word	0x40021000

08001074 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001078:	f7ff ffc6 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800107c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800107e:	e003      	b.n	8001088 <LoopCopyDataInit>

08001080 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001082:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001084:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001086:	3104      	adds	r1, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001088:	480a      	ldr	r0, [pc, #40]	; (80010b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800108c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800108e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001090:	d3f6      	bcc.n	8001080 <CopyDataInit>
	ldr	r2, =_sbss
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001094:	e002      	b.n	800109c <LoopFillZerobss>

08001096 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001096:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001098:	f842 3b04 	str.w	r3, [r2], #4

0800109c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <LoopForever+0x16>)
	cmp	r2, r3
 800109e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010a0:	d3f9      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f004 f91b 	bl	80052dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010a6:	f7ff fa31 	bl	800050c <main>

080010aa <LoopForever>:

LoopForever:
    b LoopForever
 80010aa:	e7fe      	b.n	80010aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010ac:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80010b0:	0800544c 	.word	0x0800544c
	ldr	r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010b8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80010bc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80010c0:	200005b0 	.word	0x200005b0

080010c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC1_IRQHandler>

080010c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f941 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f80e 	bl	80010f8 <HAL_InitTick>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	e001      	b.n	80010ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010e8:	f7ff fe18 	bl	8000d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <HAL_InitTick+0x6c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d023      	beq.n	8001154 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <HAL_InitTick+0x70>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <HAL_InitTick+0x6c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f93f 	bl	80013a6 <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10f      	bne.n	800114e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d809      	bhi.n	8001148 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 f917 	bl	800136e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_InitTick+0x74>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e007      	b.n	8001158 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e004      	b.n	8001158 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	e001      	b.n	8001158 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001158:	7bfb      	ldrb	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008
 8001168:	20000000 	.word	0x20000000
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	200005ac 	.word	0x200005ac

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200005ac 	.word	0x200005ac

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_Delay+0x40>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffde 	bl	8001198 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000008 	.word	0x20000008

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff8e 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff47 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff5c 	bl	800123c <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff8e 	bl	80012ac <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5d 	bl	8001258 <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffb0 	bl	8001314 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e166      	b.n	800169e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8158 	beq.w	8001698 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d00b      	beq.n	8001408 <HAL_GPIO_Init+0x48>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d007      	beq.n	8001408 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b12      	cmp	r3, #18
 8001406:	d130      	bne.n	800146a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800143e:	2201      	movs	r2, #1
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f003 0201 	and.w	r2, r3, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0xea>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d123      	bne.n	80014f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	08da      	lsrs	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3208      	adds	r2, #8
 80014b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3208      	adds	r2, #8
 80014ec:	6939      	ldr	r1, [r7, #16]
 80014ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0203 	and.w	r2, r3, #3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80b2 	beq.w	8001698 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001534:	4b61      	ldr	r3, [pc, #388]	; (80016bc <HAL_GPIO_Init+0x2fc>)
 8001536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001538:	4a60      	ldr	r2, [pc, #384]	; (80016bc <HAL_GPIO_Init+0x2fc>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6613      	str	r3, [r2, #96]	; 0x60
 8001540:	4b5e      	ldr	r3, [pc, #376]	; (80016bc <HAL_GPIO_Init+0x2fc>)
 8001542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800154c:	4a5c      	ldr	r2, [pc, #368]	; (80016c0 <HAL_GPIO_Init+0x300>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001576:	d02b      	beq.n	80015d0 <HAL_GPIO_Init+0x210>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a52      	ldr	r2, [pc, #328]	; (80016c4 <HAL_GPIO_Init+0x304>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d025      	beq.n	80015cc <HAL_GPIO_Init+0x20c>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a51      	ldr	r2, [pc, #324]	; (80016c8 <HAL_GPIO_Init+0x308>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d01f      	beq.n	80015c8 <HAL_GPIO_Init+0x208>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a50      	ldr	r2, [pc, #320]	; (80016cc <HAL_GPIO_Init+0x30c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d019      	beq.n	80015c4 <HAL_GPIO_Init+0x204>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a4f      	ldr	r2, [pc, #316]	; (80016d0 <HAL_GPIO_Init+0x310>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d013      	beq.n	80015c0 <HAL_GPIO_Init+0x200>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a4e      	ldr	r2, [pc, #312]	; (80016d4 <HAL_GPIO_Init+0x314>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00d      	beq.n	80015bc <HAL_GPIO_Init+0x1fc>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a4d      	ldr	r2, [pc, #308]	; (80016d8 <HAL_GPIO_Init+0x318>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d007      	beq.n	80015b8 <HAL_GPIO_Init+0x1f8>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a4c      	ldr	r2, [pc, #304]	; (80016dc <HAL_GPIO_Init+0x31c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d101      	bne.n	80015b4 <HAL_GPIO_Init+0x1f4>
 80015b0:	2307      	movs	r3, #7
 80015b2:	e00e      	b.n	80015d2 <HAL_GPIO_Init+0x212>
 80015b4:	2308      	movs	r3, #8
 80015b6:	e00c      	b.n	80015d2 <HAL_GPIO_Init+0x212>
 80015b8:	2306      	movs	r3, #6
 80015ba:	e00a      	b.n	80015d2 <HAL_GPIO_Init+0x212>
 80015bc:	2305      	movs	r3, #5
 80015be:	e008      	b.n	80015d2 <HAL_GPIO_Init+0x212>
 80015c0:	2304      	movs	r3, #4
 80015c2:	e006      	b.n	80015d2 <HAL_GPIO_Init+0x212>
 80015c4:	2303      	movs	r3, #3
 80015c6:	e004      	b.n	80015d2 <HAL_GPIO_Init+0x212>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e002      	b.n	80015d2 <HAL_GPIO_Init+0x212>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_GPIO_Init+0x212>
 80015d0:	2300      	movs	r3, #0
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	f002 0203 	and.w	r2, r2, #3
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	4093      	lsls	r3, r2
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015e2:	4937      	ldr	r1, [pc, #220]	; (80016c0 <HAL_GPIO_Init+0x300>)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015f0:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <HAL_GPIO_Init+0x320>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001614:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <HAL_GPIO_Init+0x320>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <HAL_GPIO_Init+0x320>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800163e:	4a28      	ldr	r2, [pc, #160]	; (80016e0 <HAL_GPIO_Init+0x320>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <HAL_GPIO_Init+0x320>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001668:	4a1d      	ldr	r2, [pc, #116]	; (80016e0 <HAL_GPIO_Init+0x320>)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HAL_GPIO_Init+0x320>)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <HAL_GPIO_Init+0x320>)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f47f ae91 	bne.w	80013d0 <HAL_GPIO_Init+0x10>
  }
}
 80016ae:	bf00      	nop
 80016b0:	371c      	adds	r7, #28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010000 	.word	0x40010000
 80016c4:	48000400 	.word	0x48000400
 80016c8:	48000800 	.word	0x48000800
 80016cc:	48000c00 	.word	0x48000c00
 80016d0:	48001000 	.word	0x48001000
 80016d4:	48001400 	.word	0x48001400
 80016d8:	48001800 	.word	0x48001800
 80016dc:	48001c00 	.word	0x48001c00
 80016e0:	40010400 	.word	0x40010400

080016e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
 80016f0:	4613      	mov	r3, r2
 80016f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001700:	e002      	b.n	8001708 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001716:	b08f      	sub	sp, #60	; 0x3c
 8001718:	af0a      	add	r7, sp, #40	; 0x28
 800171a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e116      	b.n	8001954 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d106      	bne.n	8001746 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fbcb 	bl	8000edc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2203      	movs	r2, #3
 800174a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f003 fb7b 	bl	8004e60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	687e      	ldr	r6, [r7, #4]
 8001772:	466d      	mov	r5, sp
 8001774:	f106 0410 	add.w	r4, r6, #16
 8001778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001780:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001784:	e885 0003 	stmia.w	r5, {r0, r1}
 8001788:	1d33      	adds	r3, r6, #4
 800178a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800178c:	6838      	ldr	r0, [r7, #0]
 800178e:	f003 fb15 	bl	8004dbc <USB_CoreInit>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2202      	movs	r2, #2
 800179c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0d7      	b.n	8001954 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 fb69 	bl	8004e82 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e04a      	b.n	800184c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	1a9b      	subs	r3, r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	333d      	adds	r3, #61	; 0x3d
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017ca:	7bfa      	ldrb	r2, [r7, #15]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	1a9b      	subs	r3, r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	333c      	adds	r3, #60	; 0x3c
 80017da:	7bfa      	ldrb	r2, [r7, #15]
 80017dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	b298      	uxth	r0, r3
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	3342      	adds	r3, #66	; 0x42
 80017f2:	4602      	mov	r2, r0
 80017f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	333f      	adds	r3, #63	; 0x3f
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800180a:	7bfa      	ldrb	r2, [r7, #15]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	1a9b      	subs	r3, r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	3344      	adds	r3, #68	; 0x44
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	3348      	adds	r3, #72	; 0x48
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	3350      	adds	r3, #80	; 0x50
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	3301      	adds	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	d3af      	bcc.n	80017b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	e044      	b.n	80018e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	1a9b      	subs	r3, r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	3301      	adds	r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d3b5      	bcc.n	800185c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	687e      	ldr	r6, [r7, #4]
 80018f8:	466d      	mov	r5, sp
 80018fa:	f106 0410 	add.w	r4, r6, #16
 80018fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001906:	e894 0003 	ldmia.w	r4, {r0, r1}
 800190a:	e885 0003 	stmia.w	r5, {r0, r1}
 800190e:	1d33      	adds	r3, r6, #4
 8001910:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001912:	6838      	ldr	r0, [r7, #0]
 8001914:	f003 fae0 	bl	8004ed8 <USB_DevInit>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2202      	movs	r2, #2
 8001922:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e014      	b.n	8001954 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	2b01      	cmp	r3, #1
 8001940:	d102      	bne.n	8001948 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f80a 	bl	800195c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fc70 	bl	8005232 <USB_DevDisconnect>

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800195c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198e:	f043 0303 	orr.w	r3, r3, #3
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b4:	d102      	bne.n	80019bc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80019b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ba:	e00b      	b.n	80019d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80019be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019ca:	d102      	bne.n	80019d2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80019cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d0:	e000      	b.n	80019d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80019d2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40007000 	.word	0x40007000

080019e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d141      	bne.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019f2:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fe:	d131      	bne.n	8001a64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a06:	4a46      	ldr	r2, [pc, #280]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a18:	4a41      	ldr	r2, [pc, #260]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a20:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2232      	movs	r2, #50	; 0x32
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	4a3f      	ldr	r2, [pc, #252]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	0c9b      	lsrs	r3, r3, #18
 8001a32:	3301      	adds	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a36:	e002      	b.n	8001a3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4a:	d102      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f2      	bne.n	8001a38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a52:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5e:	d158      	bne.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e057      	b.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a64:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a74:	e04d      	b.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a7c:	d141      	bne.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7e:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8a:	d131      	bne.n	8001af0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a8c:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a92:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2232      	movs	r2, #50	; 0x32
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
 8001ab6:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	0c9b      	lsrs	r3, r3, #18
 8001abe:	3301      	adds	r3, #1
 8001ac0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac2:	e002      	b.n	8001aca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad6:	d102      	bne.n	8001ade <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f2      	bne.n	8001ac4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aea:	d112      	bne.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e011      	b.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b00:	e007      	b.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b10:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40007000 	.word	0x40007000
 8001b24:	20000000 	.word	0x20000000
 8001b28:	431bde83 	.word	0x431bde83

08001b2c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3a:	6053      	str	r3, [r2, #4]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40007000 	.word	0x40007000

08001b4c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5a:	6053      	str	r3, [r2, #4]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40007000 	.word	0x40007000

08001b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f000 bc16 	b.w	80023ac <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b80:	4ba0      	ldr	r3, [pc, #640]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b8a:	4b9e      	ldr	r3, [pc, #632]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80e4 	beq.w	8001d6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x4c>
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	f040 808b 	bne.w	8001cc6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	f040 8087 	bne.w	8001cc6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bb8:	4b92      	ldr	r3, [pc, #584]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x64>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e3ed      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1a      	ldr	r2, [r3, #32]
 8001bd4:	4b8b      	ldr	r3, [pc, #556]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d004      	beq.n	8001bea <HAL_RCC_OscConfig+0x7e>
 8001be0:	4b88      	ldr	r3, [pc, #544]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be8:	e005      	b.n	8001bf6 <HAL_RCC_OscConfig+0x8a>
 8001bea:	4b86      	ldr	r3, [pc, #536]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d223      	bcs.n	8001c42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fdc8 	bl	8002794 <RCC_SetFlashLatencyFromMSIRange>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e3ce      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c0e:	4b7d      	ldr	r3, [pc, #500]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7c      	ldr	r2, [pc, #496]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c14:	f043 0308 	orr.w	r3, r3, #8
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b7a      	ldr	r3, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4977      	ldr	r1, [pc, #476]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c2c:	4b75      	ldr	r3, [pc, #468]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	4972      	ldr	r1, [pc, #456]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
 8001c40:	e025      	b.n	8001c8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c42:	4b70      	ldr	r3, [pc, #448]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6f      	ldr	r2, [pc, #444]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b6d      	ldr	r3, [pc, #436]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	496a      	ldr	r1, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c60:	4b68      	ldr	r3, [pc, #416]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	4965      	ldr	r1, [pc, #404]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fd88 	bl	8002794 <RCC_SetFlashLatencyFromMSIRange>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e38e      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c8e:	f000 fcbf 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 8001c92:	4601      	mov	r1, r0
 8001c94:	4b5b      	ldr	r3, [pc, #364]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	4a5a      	ldr	r2, [pc, #360]	; (8001e08 <HAL_RCC_OscConfig+0x29c>)
 8001ca0:	5cd3      	ldrb	r3, [r2, r3]
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8001caa:	4a58      	ldr	r2, [pc, #352]	; (8001e0c <HAL_RCC_OscConfig+0x2a0>)
 8001cac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cae:	4b58      	ldr	r3, [pc, #352]	; (8001e10 <HAL_RCC_OscConfig+0x2a4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fa20 	bl	80010f8 <HAL_InitTick>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d052      	beq.n	8001d68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	e372      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d032      	beq.n	8001d34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cce:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cda:	f7ff fa5d 	bl	8001198 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ce2:	f7ff fa59 	bl	8001198 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e35b      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cf4:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d00:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a3f      	ldr	r2, [pc, #252]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d06:	f043 0308 	orr.w	r3, r3, #8
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	493a      	ldr	r1, [pc, #232]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d1e:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	021b      	lsls	r3, r3, #8
 8001d2c:	4935      	ldr	r1, [pc, #212]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
 8001d32:	e01a      	b.n	8001d6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d34:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a32      	ldr	r2, [pc, #200]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d3a:	f023 0301 	bic.w	r3, r3, #1
 8001d3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d40:	f7ff fa2a 	bl	8001198 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d48:	f7ff fa26 	bl	8001198 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e328      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x1dc>
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d073      	beq.n	8001e5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_OscConfig+0x21c>
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d10e      	bne.n	8001da0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d10b      	bne.n	8001da0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d063      	beq.n	8001e5c <HAL_RCC_OscConfig+0x2f0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d15f      	bne.n	8001e5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e305      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da8:	d106      	bne.n	8001db8 <HAL_RCC_OscConfig+0x24c>
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e01d      	b.n	8001df4 <HAL_RCC_OscConfig+0x288>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x270>
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0x288>
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <HAL_RCC_OscConfig+0x298>)
 8001dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff f9cc 	bl	8001198 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e02:	e010      	b.n	8001e26 <HAL_RCC_OscConfig+0x2ba>
 8001e04:	40021000 	.word	0x40021000
 8001e08:	080053dc 	.word	0x080053dc
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff f9c0 	bl	8001198 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e2c2      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e26:	4baf      	ldr	r3, [pc, #700]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x2a8>
 8001e32:	e014      	b.n	8001e5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff f9b0 	bl	8001198 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff f9ac 	bl	8001198 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e2ae      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e4e:	4ba5      	ldr	r3, [pc, #660]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2d0>
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d060      	beq.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_OscConfig+0x310>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d119      	bne.n	8001eaa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d116      	bne.n	8001eaa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e7c:	4b99      	ldr	r3, [pc, #612]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_OscConfig+0x328>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e28b      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b93      	ldr	r3, [pc, #588]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	4990      	ldr	r1, [pc, #576]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea8:	e040      	b.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d023      	beq.n	8001efa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb2:	4b8c      	ldr	r3, [pc, #560]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a8b      	ldr	r2, [pc, #556]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7ff f96b 	bl	8001198 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec6:	f7ff f967 	bl	8001198 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e269      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed8:	4b82      	ldr	r3, [pc, #520]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b7f      	ldr	r3, [pc, #508]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	061b      	lsls	r3, r3, #24
 8001ef2:	497c      	ldr	r1, [pc, #496]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
 8001ef8:	e018      	b.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efa:	4b7a      	ldr	r3, [pc, #488]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a79      	ldr	r2, [pc, #484]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7ff f947 	bl	8001198 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0e:	f7ff f943 	bl	8001198 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e245      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f20:	4b70      	ldr	r3, [pc, #448]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d03c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f40:	4b68      	ldr	r3, [pc, #416]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f46:	4a67      	ldr	r2, [pc, #412]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff f922 	bl	8001198 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff f91e 	bl	8001198 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e220      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f6a:	4b5e      	ldr	r3, [pc, #376]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ef      	beq.n	8001f58 <HAL_RCC_OscConfig+0x3ec>
 8001f78:	e01b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7a:	4b5a      	ldr	r3, [pc, #360]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f80:	4a58      	ldr	r2, [pc, #352]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7ff f905 	bl	8001198 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f92:	f7ff f901 	bl	8001198 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e203      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa4:	4b4f      	ldr	r3, [pc, #316]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ef      	bne.n	8001f92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80a6 	beq.w	800210c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fc4:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10d      	bne.n	8001fec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd0:	4b44      	ldr	r3, [pc, #272]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	4a43      	ldr	r2, [pc, #268]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fda:	6593      	str	r3, [r2, #88]	; 0x58
 8001fdc:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fec:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <HAL_RCC_OscConfig+0x57c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d118      	bne.n	800202a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff8:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_OscConfig+0x57c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a3a      	ldr	r2, [pc, #232]	; (80020e8 <HAL_RCC_OscConfig+0x57c>)
 8001ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002002:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002004:	f7ff f8c8 	bl	8001198 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200c:	f7ff f8c4 	bl	8001198 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e1c6      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201e:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <HAL_RCC_OscConfig+0x57c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d108      	bne.n	8002044 <HAL_RCC_OscConfig+0x4d8>
 8002032:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002038:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002042:	e024      	b.n	800208e <HAL_RCC_OscConfig+0x522>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d110      	bne.n	800206e <HAL_RCC_OscConfig+0x502>
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	4a20      	ldr	r2, [pc, #128]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800206c:	e00f      	b.n	800208e <HAL_RCC_OscConfig+0x522>
 800206e:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002074:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002084:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 8002086:	f023 0304 	bic.w	r3, r3, #4
 800208a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d016      	beq.n	80020c4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002096:	f7ff f87f 	bl	8001198 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7ff f87b 	bl	8001198 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e17b      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x578>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0ed      	beq.n	800209e <HAL_RCC_OscConfig+0x532>
 80020c2:	e01a      	b.n	80020fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7ff f868 	bl	8001198 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ca:	e00f      	b.n	80020ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020cc:	f7ff f864 	bl	8001198 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d906      	bls.n	80020ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e164      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ec:	4ba8      	ldr	r3, [pc, #672]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1e8      	bne.n	80020cc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020fa:	7ffb      	ldrb	r3, [r7, #31]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002100:	4ba3      	ldr	r3, [pc, #652]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002104:	4aa2      	ldr	r2, [pc, #648]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d03c      	beq.n	8002192 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01c      	beq.n	800215a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002120:	4b9b      	ldr	r3, [pc, #620]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002122:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002126:	4a9a      	ldr	r2, [pc, #616]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7ff f832 	bl	8001198 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002138:	f7ff f82e 	bl	8001198 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e130      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800214a:	4b91      	ldr	r3, [pc, #580]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 800214c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ef      	beq.n	8002138 <HAL_RCC_OscConfig+0x5cc>
 8002158:	e01b      	b.n	8002192 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800215a:	4b8d      	ldr	r3, [pc, #564]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 800215c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002160:	4a8b      	ldr	r2, [pc, #556]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7ff f815 	bl	8001198 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002172:	f7ff f811 	bl	8001198 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e113      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002184:	4b82      	ldr	r3, [pc, #520]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ef      	bne.n	8002172 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8107 	beq.w	80023aa <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	f040 80cb 	bne.w	800233c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021a6:	4b7a      	ldr	r3, [pc, #488]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0203 	and.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d12c      	bne.n	8002214 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	3b01      	subs	r3, #1
 80021c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d123      	bne.n	8002214 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d11b      	bne.n	8002214 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d113      	bne.n	8002214 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	3b01      	subs	r3, #1
 80021fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d109      	bne.n	8002214 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	3b01      	subs	r3, #1
 800220e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d06d      	beq.n	80022f0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d068      	beq.n	80022ec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800221a:	4b5d      	ldr	r3, [pc, #372]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002226:	4b5a      	ldr	r3, [pc, #360]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0ba      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002236:	4b56      	ldr	r3, [pc, #344]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a55      	ldr	r2, [pc, #340]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 800223c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002240:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002242:	f7fe ffa9 	bl	8001198 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224a:	f7fe ffa5 	bl	8001198 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0a7      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225c:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002268:	4b49      	ldr	r3, [pc, #292]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	4b49      	ldr	r3, [pc, #292]	; (8002394 <HAL_RCC_OscConfig+0x828>)
 800226e:	4013      	ands	r3, r2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002278:	3a01      	subs	r2, #1
 800227a:	0112      	lsls	r2, r2, #4
 800227c:	4311      	orrs	r1, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002282:	0212      	lsls	r2, r2, #8
 8002284:	4311      	orrs	r1, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800228a:	0852      	lsrs	r2, r2, #1
 800228c:	3a01      	subs	r2, #1
 800228e:	0552      	lsls	r2, r2, #21
 8002290:	4311      	orrs	r1, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002296:	0852      	lsrs	r2, r2, #1
 8002298:	3a01      	subs	r2, #1
 800229a:	0652      	lsls	r2, r2, #25
 800229c:	4311      	orrs	r1, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022a2:	06d2      	lsls	r2, r2, #27
 80022a4:	430a      	orrs	r2, r1
 80022a6:	493a      	ldr	r1, [pc, #232]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022ac:	4b38      	ldr	r3, [pc, #224]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a37      	ldr	r2, [pc, #220]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 80022b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b8:	4b35      	ldr	r3, [pc, #212]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a34      	ldr	r2, [pc, #208]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 80022be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022c4:	f7fe ff68 	bl	8001198 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022cc:	f7fe ff64 	bl	8001198 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e066      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022de:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ea:	e05e      	b.n	80023aa <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e05d      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d156      	bne.n	80023aa <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022fc:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a23      	ldr	r2, [pc, #140]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002306:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a20      	ldr	r2, [pc, #128]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 800230e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002312:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002314:	f7fe ff40 	bl	8001198 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe ff3c 	bl	8001198 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e03e      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x7b0>
 800233a:	e036      	b.n	80023aa <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2b0c      	cmp	r3, #12
 8002340:	d031      	beq.n	80023a6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002348:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800234c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002360:	f023 0303 	bic.w	r3, r3, #3
 8002364:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4a09      	ldr	r2, [pc, #36]	; (8002390 <HAL_RCC_OscConfig+0x824>)
 800236c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002374:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002376:	f7fe ff0f 	bl	8001198 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237c:	e00c      	b.n	8002398 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7fe ff0b 	bl	8001198 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d905      	bls.n	8002398 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e00d      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
 8002390:	40021000 	.word	0x40021000
 8002394:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_RCC_OscConfig+0x848>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ec      	bne.n	800237e <HAL_RCC_OscConfig+0x812>
 80023a4:	e001      	b.n	80023aa <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3720      	adds	r7, #32
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000

080023b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e10f      	b.n	80025f0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <HAL_RCC_ClockConfig+0x240>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d910      	bls.n	8002400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b86      	ldr	r3, [pc, #536]	; (80025f8 <HAL_RCC_ClockConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 020f 	bic.w	r2, r3, #15
 80023e6:	4984      	ldr	r1, [pc, #528]	; (80025f8 <HAL_RCC_ClockConfig+0x240>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b82      	ldr	r3, [pc, #520]	; (80025f8 <HAL_RCC_ClockConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0f7      	b.n	80025f0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 8089 	beq.w	8002520 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d133      	bne.n	800247e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002416:	4b79      	ldr	r3, [pc, #484]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0e4      	b.n	80025f0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002426:	f000 fa0f 	bl	8002848 <RCC_GetSysClockFreqFromPLLSource>
 800242a:	4602      	mov	r2, r0
 800242c:	4b74      	ldr	r3, [pc, #464]	; (8002600 <HAL_RCC_ClockConfig+0x248>)
 800242e:	429a      	cmp	r2, r3
 8002430:	d955      	bls.n	80024de <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002432:	4b72      	ldr	r3, [pc, #456]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800243e:	4b6f      	ldr	r3, [pc, #444]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002446:	4a6d      	ldr	r2, [pc, #436]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800244c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	e044      	b.n	80024de <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d03e      	beq.n	80024de <HAL_RCC_ClockConfig+0x126>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d13a      	bne.n	80024de <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002468:	4b64      	ldr	r3, [pc, #400]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002470:	4a62      	ldr	r2, [pc, #392]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002476:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e02f      	b.n	80024de <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002486:	4b5d      	ldr	r3, [pc, #372]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d115      	bne.n	80024be <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0ac      	b.n	80025f0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800249e:	4b57      	ldr	r3, [pc, #348]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0a0      	b.n	80025f0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ae:	4b53      	ldr	r3, [pc, #332]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e098      	b.n	80025f0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80024be:	f000 f8a7 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80024c2:	4602      	mov	r2, r0
 80024c4:	4b4e      	ldr	r3, [pc, #312]	; (8002600 <HAL_RCC_ClockConfig+0x248>)
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d909      	bls.n	80024de <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024ca:	4b4c      	ldr	r3, [pc, #304]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024d2:	4a4a      	ldr	r2, [pc, #296]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 80024d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024de:	4b47      	ldr	r3, [pc, #284]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f023 0203 	bic.w	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4944      	ldr	r1, [pc, #272]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f0:	f7fe fe52 	bl	8001198 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	e00a      	b.n	800250e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f8:	f7fe fe4e 	bl	8001198 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e070      	b.n	80025f0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 020c 	and.w	r2, r3, #12
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	429a      	cmp	r2, r3
 800251e:	d1eb      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d009      	beq.n	8002540 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252c:	4b33      	ldr	r3, [pc, #204]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4930      	ldr	r1, [pc, #192]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
 800253e:	e008      	b.n	8002552 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b80      	cmp	r3, #128	; 0x80
 8002544:	d105      	bne.n	8002552 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	4a2c      	ldr	r2, [pc, #176]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 800254c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002550:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002552:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <HAL_RCC_ClockConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d210      	bcs.n	8002582 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_RCC_ClockConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 020f 	bic.w	r2, r3, #15
 8002568:	4923      	ldr	r1, [pc, #140]	; (80025f8 <HAL_RCC_ClockConfig+0x240>)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002570:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <HAL_RCC_ClockConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d001      	beq.n	8002582 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e036      	b.n	80025f0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800258e:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	4918      	ldr	r1, [pc, #96]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 800259c:	4313      	orrs	r3, r2
 800259e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4910      	ldr	r1, [pc, #64]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025c0:	f000 f826 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80025c4:	4601      	mov	r1, r0
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_RCC_ClockConfig+0x244>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	4a0c      	ldr	r2, [pc, #48]	; (8002604 <HAL_RCC_ClockConfig+0x24c>)
 80025d2:	5cd3      	ldrb	r3, [r2, r3]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	fa21 f303 	lsr.w	r3, r1, r3
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x250>)
 80025de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_RCC_ClockConfig+0x254>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fd87 	bl	80010f8 <HAL_InitTick>
 80025ea:	4603      	mov	r3, r0
 80025ec:	73fb      	strb	r3, [r7, #15]

  return status;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40022000 	.word	0x40022000
 80025fc:	40021000 	.word	0x40021000
 8002600:	04c4b400 	.word	0x04c4b400
 8002604:	080053dc 	.word	0x080053dc
 8002608:	20000000 	.word	0x20000000
 800260c:	20000004 	.word	0x20000004

08002610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002628:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x34>
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d121      	bne.n	8002682 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d11e      	bne.n	8002682 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002644:	4b33      	ldr	r3, [pc, #204]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d107      	bne.n	8002660 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002650:	4b30      	ldr	r3, [pc, #192]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 8002652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e005      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002660:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800266c:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <HAL_RCC_GetSysClockFreq+0x108>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002674:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10d      	bne.n	8002698 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d102      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002688:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_RCC_GetSysClockFreq+0x10c>)
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	e004      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d101      	bne.n	8002698 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002694:	4b22      	ldr	r3, [pc, #136]	; (8002720 <HAL_RCC_GetSysClockFreq+0x110>)
 8002696:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b0c      	cmp	r3, #12
 800269c:	d133      	bne.n	8002706 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d002      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0xa4>
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d003      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0xaa>
 80026b2:	e005      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_RCC_GetSysClockFreq+0x10c>)
 80026b6:	617b      	str	r3, [r7, #20]
      break;
 80026b8:	e005      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_RCC_GetSysClockFreq+0x110>)
 80026bc:	617b      	str	r3, [r7, #20]
      break;
 80026be:	e002      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	617b      	str	r3, [r7, #20]
      break;
 80026c4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	3301      	adds	r3, #1
 80026d2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	fb02 f203 	mul.w	r2, r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_GetSysClockFreq+0x104>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002706:	69bb      	ldr	r3, [r7, #24]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	080053f4 	.word	0x080053f4
 800271c:	00f42400 	.word	0x00f42400
 8002720:	007a1200 	.word	0x007a1200

08002724 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_RCC_GetHCLKFreq+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000000 	.word	0x20000000

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002740:	f7ff fff0 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002744:	4601      	mov	r1, r0
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	080053ec 	.word	0x080053ec

08002768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800276c:	f7ff ffda 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002770:	4601      	mov	r1, r0
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0adb      	lsrs	r3, r3, #11
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x28>)
 800277e:	5cd3      	ldrb	r3, [r2, r3]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	080053ec 	.word	0x080053ec

08002794 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027ac:	f7ff f8fa 	bl	80019a4 <HAL_PWREx_GetVoltageRange>
 80027b0:	6178      	str	r0, [r7, #20]
 80027b2:	e014      	b.n	80027de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	4a21      	ldr	r2, [pc, #132]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027be:	6593      	str	r3, [r2, #88]	; 0x58
 80027c0:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027cc:	f7ff f8ea 	bl	80019a4 <HAL_PWREx_GetVoltageRange>
 80027d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	4a1a      	ldr	r2, [pc, #104]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e4:	d10b      	bne.n	80027fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b80      	cmp	r3, #128	; 0x80
 80027ea:	d913      	bls.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2ba0      	cmp	r3, #160	; 0xa0
 80027f0:	d902      	bls.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027f2:	2302      	movs	r3, #2
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e00d      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027f8:	2301      	movs	r3, #1
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	e00a      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b7f      	cmp	r3, #127	; 0x7f
 8002802:	d902      	bls.n	800280a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002804:	2302      	movs	r3, #2
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	e004      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b70      	cmp	r3, #112	; 0x70
 800280e:	d101      	bne.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002810:	2301      	movs	r3, #1
 8002812:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 020f 	bic.w	r2, r3, #15
 800281c:	4909      	ldr	r1, [pc, #36]	; (8002844 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	429a      	cmp	r2, r3
 8002830:	d001      	beq.n	8002836 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	40022000 	.word	0x40022000

08002848 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002852:	4b2d      	ldr	r3, [pc, #180]	; (8002908 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d118      	bne.n	8002890 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800285e:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800286c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e005      	b.n	8002886 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800287a:	4b23      	ldr	r3, [pc, #140]	; (8002908 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002886:	4a21      	ldr	r2, [pc, #132]	; (800290c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d002      	beq.n	80028a6 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d003      	beq.n	80028ac <RCC_GetSysClockFreqFromPLLSource+0x64>
 80028a4:	e005      	b.n	80028b2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80028a8:	613b      	str	r3, [r7, #16]
    break;
 80028aa:	e005      	b.n	80028b8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80028ae:	613b      	str	r3, [r7, #16]
    break;
 80028b0:	e002      	b.n	80028b8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	613b      	str	r3, [r7, #16]
    break;
 80028b6:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3301      	adds	r3, #1
 80028c4:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	fb02 f203 	mul.w	r2, r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	0e5b      	lsrs	r3, r3, #25
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	3301      	adds	r3, #1
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80028f8:	683b      	ldr	r3, [r7, #0]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	080053f4 	.word	0x080053f4
 8002910:	00f42400 	.word	0x00f42400
 8002914:	007a1200 	.word	0x007a1200

08002918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002920:	2300      	movs	r3, #0
 8002922:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002924:	2300      	movs	r3, #0
 8002926:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002930:	2b00      	cmp	r3, #0
 8002932:	d03d      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d00b      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800293c:	2b40      	cmp	r3, #64	; 0x40
 800293e:	d804      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00e      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002944:	2b20      	cmp	r3, #32
 8002946:	d015      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002948:	e01d      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800294a:	2b60      	cmp	r3, #96	; 0x60
 800294c:	d01e      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800294e:	2b80      	cmp	r3, #128	; 0x80
 8002950:	d01c      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002952:	e018      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002954:	4b86      	ldr	r3, [pc, #536]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a85      	ldr	r2, [pc, #532]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800295a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002960:	e015      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3304      	adds	r3, #4
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fafd 	bl	8002f68 <RCCEx_PLLSAI1_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002972:	e00c      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3320      	adds	r3, #32
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fbe4 	bl	8003148 <RCCEx_PLLSAI2_Config>
 8002980:	4603      	mov	r3, r0
 8002982:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002984:	e003      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	74fb      	strb	r3, [r7, #19]
      break;
 800298a:	e000      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 800298c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800298e:	7cfb      	ldrb	r3, [r7, #19]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002994:	4b76      	ldr	r3, [pc, #472]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002996:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800299a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a2:	4973      	ldr	r1, [pc, #460]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80029aa:	e001      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d042      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c4:	d00f      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80029c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ca:	d805      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d011      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80029d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d4:	d017      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80029d6:	e01f      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80029d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029dc:	d01f      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e2:	d01c      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029e4:	e018      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029e6:	4b62      	ldr	r3, [pc, #392]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	4a61      	ldr	r2, [pc, #388]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029f2:	e015      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fab4 	bl	8002f68 <RCCEx_PLLSAI1_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a04:	e00c      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3320      	adds	r3, #32
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fb9b 	bl	8003148 <RCCEx_PLLSAI2_Config>
 8002a12:	4603      	mov	r3, r0
 8002a14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a16:	e003      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	74fb      	strb	r3, [r7, #19]
      break;
 8002a1c:	e000      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8002a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10b      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a26:	4b52      	ldr	r3, [pc, #328]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	494e      	ldr	r1, [pc, #312]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a3c:	e001      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3e:	7cfb      	ldrb	r3, [r7, #19]
 8002a40:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 809f 	beq.w	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a50:	2300      	movs	r3, #0
 8002a52:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a54:	4b46      	ldr	r3, [pc, #280]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a64:	2300      	movs	r3, #0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00d      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	4a40      	ldr	r2, [pc, #256]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6593      	str	r3, [r2, #88]	; 0x58
 8002a76:	4b3e      	ldr	r3, [pc, #248]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a82:	2301      	movs	r3, #1
 8002a84:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a86:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a3a      	ldr	r2, [pc, #232]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a92:	f7fe fb81 	bl	8001198 <HAL_GetTick>
 8002a96:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a98:	e009      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9a:	f7fe fb7d 	bl	8001198 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d902      	bls.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	74fb      	strb	r3, [r7, #19]
        break;
 8002aac:	e005      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aae:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0ef      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d15b      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aca:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01f      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d019      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ade:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aea:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af0:	4a1f      	ldr	r2, [pc, #124]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b0a:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d016      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fb3c 	bl	8001198 <HAL_GetTick>
 8002b20:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b22:	e00b      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe fb38 	bl	8001198 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d902      	bls.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	74fb      	strb	r3, [r7, #19]
            break;
 8002b3a:	e006      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0ec      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10c      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	4903      	ldr	r1, [pc, #12]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b68:	e008      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	74bb      	strb	r3, [r7, #18]
 8002b6e:	e005      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b78:	7cfb      	ldrb	r3, [r7, #19]
 8002b7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7c:	7c7b      	ldrb	r3, [r7, #17]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b82:	4ba0      	ldr	r3, [pc, #640]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	4a9f      	ldr	r2, [pc, #636]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b9a:	4b9a      	ldr	r3, [pc, #616]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba0:	f023 0203 	bic.w	r2, r3, #3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	4996      	ldr	r1, [pc, #600]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bbc:	4b91      	ldr	r3, [pc, #580]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	f023 020c 	bic.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	498e      	ldr	r1, [pc, #568]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bde:	4b89      	ldr	r3, [pc, #548]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bec:	4985      	ldr	r1, [pc, #532]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c00:	4b80      	ldr	r3, [pc, #512]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0e:	497d      	ldr	r1, [pc, #500]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c22:	4b78      	ldr	r3, [pc, #480]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c30:	4974      	ldr	r1, [pc, #464]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c44:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c52:	496c      	ldr	r1, [pc, #432]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c66:	4b67      	ldr	r3, [pc, #412]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c74:	4963      	ldr	r1, [pc, #396]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c88:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c96:	495b      	ldr	r1, [pc, #364]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002caa:	4b56      	ldr	r3, [pc, #344]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	4952      	ldr	r1, [pc, #328]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ccc:	4b4d      	ldr	r3, [pc, #308]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	494a      	ldr	r1, [pc, #296]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cee:	4b45      	ldr	r3, [pc, #276]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	4941      	ldr	r1, [pc, #260]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d10:	4b3c      	ldr	r3, [pc, #240]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1e:	4939      	ldr	r1, [pc, #228]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d028      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d32:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d40:	4930      	ldr	r1, [pc, #192]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d50:	d106      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d52:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	4a2b      	ldr	r2, [pc, #172]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d5c:	60d3      	str	r3, [r2, #12]
 8002d5e:	e011      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f8f9 	bl	8002f68 <RCCEx_PLLSAI1_Config>
 8002d76:	4603      	mov	r3, r0
 8002d78:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d7a:	7cfb      	ldrb	r3, [r7, #19]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d04d      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d98:	d108      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002da0:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002daa:	e012      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002dac:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002db2:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002db8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dca:	490e      	ldr	r1, [pc, #56]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dda:	d106      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4a08      	ldr	r2, [pc, #32]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de6:	60d3      	str	r3, [r2, #12]
 8002de8:	e020      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002df2:	d109      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a02      	ldr	r2, [pc, #8]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfe:	60d3      	str	r3, [r2, #12]
 8002e00:	e014      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2101      	movs	r1, #1
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 f8a5 	bl	8002f68 <RCCEx_PLLSAI1_Config>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d028      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e38:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e46:	4947      	ldr	r1, [pc, #284]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e56:	d106      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e58:	4b42      	ldr	r3, [pc, #264]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4a41      	ldr	r2, [pc, #260]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e62:	60d3      	str	r3, [r2, #12]
 8002e64:	e011      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e6e:	d10c      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	2101      	movs	r1, #1
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f876 	bl	8002f68 <RCCEx_PLLSAI1_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8002e86:	7cfb      	ldrb	r3, [r7, #19]
 8002e88:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d01e      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e96:	4b33      	ldr	r3, [pc, #204]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea6:	492f      	ldr	r1, [pc, #188]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2102      	movs	r1, #2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 f851 	bl	8002f68 <RCCEx_PLLSAI1_Config>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eca:	7cfb      	ldrb	r3, [r7, #19]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00b      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ee0:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ee6:	f023 0204 	bic.w	r2, r3, #4
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef0:	491c      	ldr	r1, [pc, #112]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f04:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f0a:	f023 0218 	bic.w	r2, r3, #24
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	4913      	ldr	r1, [pc, #76]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d017      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f38:	490a      	ldr	r1, [pc, #40]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f58:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000

08002f68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f76:	4b70      	ldr	r3, [pc, #448]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00e      	beq.n	8002fa0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f82:	4b6d      	ldr	r3, [pc, #436]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0203 	and.w	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d103      	bne.n	8002f9a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
       ||
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d13f      	bne.n	800301a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
 8002f9e:	e03c      	b.n	800301a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d00c      	beq.n	8002fc2 <RCCEx_PLLSAI1_Config+0x5a>
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d013      	beq.n	8002fd4 <RCCEx_PLLSAI1_Config+0x6c>
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d120      	bne.n	8002ff2 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fb0:	4b61      	ldr	r3, [pc, #388]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d11d      	bne.n	8002ff8 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc0:	e01a      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fc2:	4b5d      	ldr	r3, [pc, #372]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d116      	bne.n	8002ffc <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd2:	e013      	b.n	8002ffc <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fd4:	4b58      	ldr	r3, [pc, #352]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10f      	bne.n	8003000 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fe0:	4b55      	ldr	r3, [pc, #340]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d109      	bne.n	8003000 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ff0:	e006      	b.n	8003000 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff6:	e004      	b.n	8003002 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002ff8:	bf00      	nop
 8002ffa:	e002      	b.n	8003002 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002ffc:	bf00      	nop
 8002ffe:	e000      	b.n	8003002 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003000:	bf00      	nop
    }

    if(status == HAL_OK)
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d108      	bne.n	800301a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003008:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f023 0203 	bic.w	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4948      	ldr	r1, [pc, #288]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003016:	4313      	orrs	r3, r2
 8003018:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f040 8086 	bne.w	800312e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003022:	4b45      	ldr	r3, [pc, #276]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a44      	ldr	r2, [pc, #272]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003028:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800302c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302e:	f7fe f8b3 	bl	8001198 <HAL_GetTick>
 8003032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003034:	e009      	b.n	800304a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003036:	f7fe f8af 	bl	8001198 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d902      	bls.n	800304a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	73fb      	strb	r3, [r7, #15]
        break;
 8003048:	e005      	b.n	8003056 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800304a:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1ef      	bne.n	8003036 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d168      	bne.n	800312e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d113      	bne.n	800308a <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003062:	4b35      	ldr	r3, [pc, #212]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	4b35      	ldr	r3, [pc, #212]	; (800313c <RCCEx_PLLSAI1_Config+0x1d4>)
 8003068:	4013      	ands	r3, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6892      	ldr	r2, [r2, #8]
 800306e:	0211      	lsls	r1, r2, #8
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68d2      	ldr	r2, [r2, #12]
 8003074:	06d2      	lsls	r2, r2, #27
 8003076:	4311      	orrs	r1, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6852      	ldr	r2, [r2, #4]
 800307c:	3a01      	subs	r2, #1
 800307e:	0112      	lsls	r2, r2, #4
 8003080:	430a      	orrs	r2, r1
 8003082:	492d      	ldr	r1, [pc, #180]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003084:	4313      	orrs	r3, r2
 8003086:	610b      	str	r3, [r1, #16]
 8003088:	e02d      	b.n	80030e6 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d115      	bne.n	80030bc <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003090:	4b29      	ldr	r3, [pc, #164]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003096:	4013      	ands	r3, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6892      	ldr	r2, [r2, #8]
 800309c:	0211      	lsls	r1, r2, #8
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6912      	ldr	r2, [r2, #16]
 80030a2:	0852      	lsrs	r2, r2, #1
 80030a4:	3a01      	subs	r2, #1
 80030a6:	0552      	lsls	r2, r2, #21
 80030a8:	4311      	orrs	r1, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6852      	ldr	r2, [r2, #4]
 80030ae:	3a01      	subs	r2, #1
 80030b0:	0112      	lsls	r2, r2, #4
 80030b2:	430a      	orrs	r2, r1
 80030b4:	4920      	ldr	r1, [pc, #128]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	610b      	str	r3, [r1, #16]
 80030ba:	e014      	b.n	80030e6 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030bc:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	4b20      	ldr	r3, [pc, #128]	; (8003144 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6892      	ldr	r2, [r2, #8]
 80030c8:	0211      	lsls	r1, r2, #8
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6952      	ldr	r2, [r2, #20]
 80030ce:	0852      	lsrs	r2, r2, #1
 80030d0:	3a01      	subs	r2, #1
 80030d2:	0652      	lsls	r2, r2, #25
 80030d4:	4311      	orrs	r1, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6852      	ldr	r2, [r2, #4]
 80030da:	3a01      	subs	r2, #1
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	430a      	orrs	r2, r1
 80030e0:	4915      	ldr	r1, [pc, #84]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030e6:	4b14      	ldr	r3, [pc, #80]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a13      	ldr	r2, [pc, #76]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7fe f851 	bl	8001198 <HAL_GetTick>
 80030f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030f8:	e009      	b.n	800310e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030fa:	f7fe f84d 	bl	8001198 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d902      	bls.n	800310e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	73fb      	strb	r3, [r7, #15]
          break;
 800310c:	e005      	b.n	800311a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0ef      	beq.n	80030fa <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d106      	bne.n	800312e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	4903      	ldr	r1, [pc, #12]	; (8003138 <RCCEx_PLLSAI1_Config+0x1d0>)
 800312a:	4313      	orrs	r3, r2
 800312c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40021000 	.word	0x40021000
 800313c:	07ff800f 	.word	0x07ff800f
 8003140:	ff9f800f 	.word	0xff9f800f
 8003144:	f9ff800f 	.word	0xf9ff800f

08003148 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003156:	4b70      	ldr	r3, [pc, #448]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00e      	beq.n	8003180 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003162:	4b6d      	ldr	r3, [pc, #436]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f003 0203 	and.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d103      	bne.n	800317a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
       ||
 8003176:	2b00      	cmp	r3, #0
 8003178:	d13f      	bne.n	80031fa <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
 800317e:	e03c      	b.n	80031fa <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d00c      	beq.n	80031a2 <RCCEx_PLLSAI2_Config+0x5a>
 8003188:	2b03      	cmp	r3, #3
 800318a:	d013      	beq.n	80031b4 <RCCEx_PLLSAI2_Config+0x6c>
 800318c:	2b01      	cmp	r3, #1
 800318e:	d120      	bne.n	80031d2 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003190:	4b61      	ldr	r3, [pc, #388]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d11d      	bne.n	80031d8 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a0:	e01a      	b.n	80031d8 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031a2:	4b5d      	ldr	r3, [pc, #372]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d116      	bne.n	80031dc <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b2:	e013      	b.n	80031dc <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031b4:	4b58      	ldr	r3, [pc, #352]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10f      	bne.n	80031e0 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031c0:	4b55      	ldr	r3, [pc, #340]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031d0:	e006      	b.n	80031e0 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	73fb      	strb	r3, [r7, #15]
      break;
 80031d6:	e004      	b.n	80031e2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80031d8:	bf00      	nop
 80031da:	e002      	b.n	80031e2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80031dc:	bf00      	nop
 80031de:	e000      	b.n	80031e2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80031e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d108      	bne.n	80031fa <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80031e8:	4b4b      	ldr	r3, [pc, #300]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f023 0203 	bic.w	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4948      	ldr	r1, [pc, #288]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f040 8086 	bne.w	800330e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003202:	4b45      	ldr	r3, [pc, #276]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a44      	ldr	r2, [pc, #272]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800320e:	f7fd ffc3 	bl	8001198 <HAL_GetTick>
 8003212:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003214:	e009      	b.n	800322a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003216:	f7fd ffbf 	bl	8001198 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d902      	bls.n	800322a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	73fb      	strb	r3, [r7, #15]
        break;
 8003228:	e005      	b.n	8003236 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800322a:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1ef      	bne.n	8003216 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d168      	bne.n	800330e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d113      	bne.n	800326a <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003242:	4b35      	ldr	r3, [pc, #212]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	4b35      	ldr	r3, [pc, #212]	; (800331c <RCCEx_PLLSAI2_Config+0x1d4>)
 8003248:	4013      	ands	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6892      	ldr	r2, [r2, #8]
 800324e:	0211      	lsls	r1, r2, #8
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	68d2      	ldr	r2, [r2, #12]
 8003254:	06d2      	lsls	r2, r2, #27
 8003256:	4311      	orrs	r1, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6852      	ldr	r2, [r2, #4]
 800325c:	3a01      	subs	r2, #1
 800325e:	0112      	lsls	r2, r2, #4
 8003260:	430a      	orrs	r2, r1
 8003262:	492d      	ldr	r1, [pc, #180]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003264:	4313      	orrs	r3, r2
 8003266:	614b      	str	r3, [r1, #20]
 8003268:	e02d      	b.n	80032c6 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d115      	bne.n	800329c <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003270:	4b29      	ldr	r3, [pc, #164]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003276:	4013      	ands	r3, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6892      	ldr	r2, [r2, #8]
 800327c:	0211      	lsls	r1, r2, #8
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6912      	ldr	r2, [r2, #16]
 8003282:	0852      	lsrs	r2, r2, #1
 8003284:	3a01      	subs	r2, #1
 8003286:	0552      	lsls	r2, r2, #21
 8003288:	4311      	orrs	r1, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6852      	ldr	r2, [r2, #4]
 800328e:	3a01      	subs	r2, #1
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	430a      	orrs	r2, r1
 8003294:	4920      	ldr	r1, [pc, #128]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003296:	4313      	orrs	r3, r2
 8003298:	614b      	str	r3, [r1, #20]
 800329a:	e014      	b.n	80032c6 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800329c:	4b1e      	ldr	r3, [pc, #120]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	4b20      	ldr	r3, [pc, #128]	; (8003324 <RCCEx_PLLSAI2_Config+0x1dc>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6892      	ldr	r2, [r2, #8]
 80032a8:	0211      	lsls	r1, r2, #8
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6952      	ldr	r2, [r2, #20]
 80032ae:	0852      	lsrs	r2, r2, #1
 80032b0:	3a01      	subs	r2, #1
 80032b2:	0652      	lsls	r2, r2, #25
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6852      	ldr	r2, [r2, #4]
 80032ba:	3a01      	subs	r2, #1
 80032bc:	0112      	lsls	r2, r2, #4
 80032be:	430a      	orrs	r2, r1
 80032c0:	4915      	ldr	r1, [pc, #84]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a13      	ldr	r2, [pc, #76]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fd ff61 	bl	8001198 <HAL_GetTick>
 80032d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032d8:	e009      	b.n	80032ee <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032da:	f7fd ff5d 	bl	8001198 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d902      	bls.n	80032ee <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	73fb      	strb	r3, [r7, #15]
          break;
 80032ec:	e005      	b.n	80032fa <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0ef      	beq.n	80032da <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	4903      	ldr	r1, [pc, #12]	; (8003318 <RCCEx_PLLSAI2_Config+0x1d0>)
 800330a:	4313      	orrs	r3, r2
 800330c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	07ff800f 	.word	0x07ff800f
 8003320:	ff9f800f 	.word	0xff9f800f
 8003324:	f9ff800f 	.word	0xf9ff800f

08003328 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e095      	b.n	8003466 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	2b00      	cmp	r3, #0
 8003340:	d108      	bne.n	8003354 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800334a:	d009      	beq.n	8003360 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	61da      	str	r2, [r3, #28]
 8003352:	e005      	b.n	8003360 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fd fd6c 	bl	8000e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003396:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033a0:	d902      	bls.n	80033a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	e002      	b.n	80033ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80033a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80033b6:	d007      	beq.n	80033c8 <HAL_SPI_Init+0xa0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033c0:	d002      	beq.n	80033c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340a:	ea42 0103 	orr.w	r1, r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	0c1b      	lsrs	r3, r3, #16
 8003424:	f003 0204 	and.w	r2, r3, #4
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003444:	ea42 0103 	orr.w	r1, r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b088      	sub	sp, #32
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	603b      	str	r3, [r7, #0]
 800347a:	4613      	mov	r3, r2
 800347c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_SPI_Transmit+0x22>
 800348c:	2302      	movs	r3, #2
 800348e:	e158      	b.n	8003742 <HAL_SPI_Transmit+0x2d4>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003498:	f7fd fe7e 	bl	8001198 <HAL_GetTick>
 800349c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d002      	beq.n	80034b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034ae:	2302      	movs	r3, #2
 80034b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034b2:	e13d      	b.n	8003730 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_SPI_Transmit+0x52>
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034c4:	e134      	b.n	8003730 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2203      	movs	r2, #3
 80034ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	88fa      	ldrh	r2, [r7, #6]
 80034de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003510:	d10f      	bne.n	8003532 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003520:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003530:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d007      	beq.n	8003550 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003558:	d94b      	bls.n	80035f2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_SPI_Transmit+0xfa>
 8003562:	8afb      	ldrh	r3, [r7, #22]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d13e      	bne.n	80035e6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	1c9a      	adds	r2, r3, #2
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800358c:	e02b      	b.n	80035e6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b02      	cmp	r3, #2
 800359a:	d112      	bne.n	80035c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	881a      	ldrh	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	1c9a      	adds	r2, r3, #2
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035c0:	e011      	b.n	80035e6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035c2:	f7fd fde9 	bl	8001198 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d803      	bhi.n	80035da <HAL_SPI_Transmit+0x16c>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d102      	bne.n	80035e0 <HAL_SPI_Transmit+0x172>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d102      	bne.n	80035e6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035e4:	e0a4      	b.n	8003730 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ce      	bne.n	800358e <HAL_SPI_Transmit+0x120>
 80035f0:	e07c      	b.n	80036ec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_SPI_Transmit+0x192>
 80035fa:	8afb      	ldrh	r3, [r7, #22]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d170      	bne.n	80036e2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b01      	cmp	r3, #1
 8003608:	d912      	bls.n	8003630 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	881a      	ldrh	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	1c9a      	adds	r2, r3, #2
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b02      	subs	r3, #2
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800362e:	e058      	b.n	80036e2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	7812      	ldrb	r2, [r2, #0]
 800363c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003656:	e044      	b.n	80036e2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d12b      	bne.n	80036be <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d912      	bls.n	8003696 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	881a      	ldrh	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	1c9a      	adds	r2, r3, #2
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b02      	subs	r3, #2
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003694:	e025      	b.n	80036e2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	7812      	ldrb	r2, [r2, #0]
 80036a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036bc:	e011      	b.n	80036e2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036be:	f7fd fd6b 	bl	8001198 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d803      	bhi.n	80036d6 <HAL_SPI_Transmit+0x268>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d102      	bne.n	80036dc <HAL_SPI_Transmit+0x26e>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036e0:	e026      	b.n	8003730 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1b5      	bne.n	8003658 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	6839      	ldr	r1, [r7, #0]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fcdb 	bl	80040ac <SPI_EndRxTxTransaction>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	77fb      	strb	r3, [r7, #31]
 800372c:	e000      	b.n	8003730 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800372e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003740:	7ffb      	ldrb	r3, [r7, #31]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b088      	sub	sp, #32
 800374e:	af02      	add	r7, sp, #8
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003766:	d112      	bne.n	800378e <HAL_SPI_Receive+0x44>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10e      	bne.n	800378e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2204      	movs	r2, #4
 8003774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003778:	88fa      	ldrh	r2, [r7, #6]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f910 	bl	80039aa <HAL_SPI_TransmitReceive>
 800378a:	4603      	mov	r3, r0
 800378c:	e109      	b.n	80039a2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_SPI_Receive+0x52>
 8003798:	2302      	movs	r3, #2
 800379a:	e102      	b.n	80039a2 <HAL_SPI_Receive+0x258>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037a4:	f7fd fcf8 	bl	8001198 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d002      	beq.n	80037bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
 80037b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037ba:	e0e9      	b.n	8003990 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_SPI_Receive+0x7e>
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037cc:	e0e0      	b.n	8003990 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2204      	movs	r2, #4
 80037d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	88fa      	ldrh	r2, [r7, #6]
 80037ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003818:	d908      	bls.n	800382c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	e007      	b.n	800383c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800383a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003844:	d10f      	bne.n	8003866 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003854:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003864:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b40      	cmp	r3, #64	; 0x40
 8003872:	d007      	beq.n	8003884 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003882:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800388c:	d867      	bhi.n	800395e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800388e:	e030      	b.n	80038f2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d117      	bne.n	80038ce <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f103 020c 	add.w	r2, r3, #12
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80038cc:	e011      	b.n	80038f2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ce:	f7fd fc63 	bl	8001198 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d803      	bhi.n	80038e6 <HAL_SPI_Receive+0x19c>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d102      	bne.n	80038ec <HAL_SPI_Receive+0x1a2>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d102      	bne.n	80038f2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038f0:	e04e      	b.n	8003990 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1c8      	bne.n	8003890 <HAL_SPI_Receive+0x146>
 80038fe:	e034      	b.n	800396a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b01      	cmp	r3, #1
 800390c:	d115      	bne.n	800393a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	b292      	uxth	r2, r2
 800391a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	1c9a      	adds	r2, r3, #2
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003938:	e011      	b.n	800395e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800393a:	f7fd fc2d 	bl	8001198 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d803      	bhi.n	8003952 <HAL_SPI_Receive+0x208>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d102      	bne.n	8003958 <HAL_SPI_Receive+0x20e>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d102      	bne.n	800395e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800395c:	e018      	b.n	8003990 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ca      	bne.n	8003900 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	6839      	ldr	r1, [r7, #0]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fb44 	bl	8003ffc <SPI_EndRxTransaction>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	75fb      	strb	r3, [r7, #23]
 800398c:	e000      	b.n	8003990 <HAL_SPI_Receive+0x246>
  }

error :
 800398e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b08a      	sub	sp, #40	; 0x28
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039b8:	2301      	movs	r3, #1
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_SPI_TransmitReceive+0x26>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e1fb      	b.n	8003dc8 <HAL_SPI_TransmitReceive+0x41e>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039d8:	f7fd fbde 	bl	8001198 <HAL_GetTick>
 80039dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80039ec:	887b      	ldrh	r3, [r7, #2]
 80039ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80039f0:	887b      	ldrh	r3, [r7, #2]
 80039f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039f4:	7efb      	ldrb	r3, [r7, #27]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d00e      	beq.n	8003a18 <HAL_SPI_TransmitReceive+0x6e>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a00:	d106      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x66>
 8003a0a:	7efb      	ldrb	r3, [r7, #27]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d003      	beq.n	8003a18 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003a16:	e1cd      	b.n	8003db4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_SPI_TransmitReceive+0x80>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_SPI_TransmitReceive+0x80>
 8003a24:	887b      	ldrh	r3, [r7, #2]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003a30:	e1c0      	b.n	8003db4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d003      	beq.n	8003a46 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2205      	movs	r2, #5
 8003a42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	887a      	ldrh	r2, [r7, #2]
 8003a56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	887a      	ldrh	r2, [r7, #2]
 8003a5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	887a      	ldrh	r2, [r7, #2]
 8003a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	887a      	ldrh	r2, [r7, #2]
 8003a72:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a88:	d802      	bhi.n	8003a90 <HAL_SPI_TransmitReceive+0xe6>
 8003a8a:	8a3b      	ldrh	r3, [r7, #16]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d908      	bls.n	8003aa2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a9e:	605a      	str	r2, [r3, #4]
 8003aa0:	e007      	b.n	8003ab2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ab0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d007      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ace:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ad8:	d97c      	bls.n	8003bd4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_SPI_TransmitReceive+0x13e>
 8003ae2:	8a7b      	ldrh	r3, [r7, #18]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d169      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	881a      	ldrh	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b0c:	e056      	b.n	8003bbc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d11b      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x1aa>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d016      	beq.n	8003b54 <HAL_SPI_TransmitReceive+0x1aa>
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d113      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	881a      	ldrh	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d11c      	bne.n	8003b9c <HAL_SPI_TransmitReceive+0x1f2>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d016      	beq.n	8003b9c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	b292      	uxth	r2, r2
 8003b7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	1c9a      	adds	r2, r3, #2
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b9c:	f7fd fafc 	bl	8001198 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d807      	bhi.n	8003bbc <HAL_SPI_TransmitReceive+0x212>
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d003      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003bba:	e0fb      	b.n	8003db4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1a3      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x164>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d19d      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x164>
 8003bd2:	e0df      	b.n	8003d94 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_SPI_TransmitReceive+0x23a>
 8003bdc:	8a7b      	ldrh	r3, [r7, #18]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	f040 80cb 	bne.w	8003d7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d912      	bls.n	8003c14 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	881a      	ldrh	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	1c9a      	adds	r2, r3, #2
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b02      	subs	r3, #2
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c12:	e0b2      	b.n	8003d7a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c3a:	e09e      	b.n	8003d7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d134      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x30a>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d02f      	beq.n	8003cb4 <HAL_SPI_TransmitReceive+0x30a>
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d12c      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d912      	bls.n	8003c8a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	881a      	ldrh	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	1c9a      	adds	r2, r3, #2
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b02      	subs	r3, #2
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c88:	e012      	b.n	8003cb0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	330c      	adds	r3, #12
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d148      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x3aa>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d042      	beq.n	8003d54 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d923      	bls.n	8003d22 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	b292      	uxth	r2, r2
 8003ce6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	1c9a      	adds	r2, r3, #2
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b02      	subs	r3, #2
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d81f      	bhi.n	8003d50 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d1e:	605a      	str	r2, [r3, #4]
 8003d20:	e016      	b.n	8003d50 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f103 020c 	add.w	r2, r3, #12
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	7812      	ldrb	r2, [r2, #0]
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d50:	2301      	movs	r3, #1
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d54:	f7fd fa20 	bl	8001198 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d803      	bhi.n	8003d6c <HAL_SPI_TransmitReceive+0x3c2>
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6a:	d102      	bne.n	8003d72 <HAL_SPI_TransmitReceive+0x3c8>
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d78:	e01c      	b.n	8003db4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f47f af5b 	bne.w	8003c3c <HAL_SPI_TransmitReceive+0x292>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f47f af54 	bne.w	8003c3c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f987 	bl	80040ac <SPI_EndRxTxTransaction>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d006      	beq.n	8003db2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	661a      	str	r2, [r3, #96]	; 0x60
 8003db0:	e000      	b.n	8003db4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003db2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3728      	adds	r7, #40	; 0x28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003de0:	f7fd f9da 	bl	8001198 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	4413      	add	r3, r2
 8003dee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003df0:	f7fd f9d2 	bl	8001198 <HAL_GetTick>
 8003df4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003df6:	4b39      	ldr	r3, [pc, #228]	; (8003edc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	015b      	lsls	r3, r3, #5
 8003dfc:	0d1b      	lsrs	r3, r3, #20
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	fb02 f303 	mul.w	r3, r2, r3
 8003e04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e06:	e054      	b.n	8003eb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d050      	beq.n	8003eb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e10:	f7fd f9c2 	bl	8001198 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d902      	bls.n	8003e26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d13d      	bne.n	8003ea2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3e:	d111      	bne.n	8003e64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e48:	d004      	beq.n	8003e54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e52:	d107      	bne.n	8003e64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6c:	d10f      	bne.n	8003e8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e017      	b.n	8003ed2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	bf0c      	ite	eq
 8003ec2:	2301      	moveq	r3, #1
 8003ec4:	2300      	movne	r3, #0
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d19b      	bne.n	8003e08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000000 	.word	0x20000000

08003ee0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003eee:	f7fd f953 	bl	8001198 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	4413      	add	r3, r2
 8003efc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003efe:	f7fd f94b 	bl	8001198 <HAL_GetTick>
 8003f02:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f04:	4b3c      	ldr	r3, [pc, #240]	; (8003ff8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	00da      	lsls	r2, r3, #3
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	0d1b      	lsrs	r3, r3, #20
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	fb02 f303 	mul.w	r3, r2, r3
 8003f1a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f1c:	e05f      	b.n	8003fde <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f24:	d106      	bne.n	8003f34 <SPI_WaitFifoStateUntilTimeout+0x54>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d103      	bne.n	8003f34 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	d050      	beq.n	8003fde <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f3c:	f7fd f92c 	bl	8001198 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d902      	bls.n	8003f52 <SPI_WaitFifoStateUntilTimeout+0x72>
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d13d      	bne.n	8003fce <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f6a:	d111      	bne.n	8003f90 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f74:	d004      	beq.n	8003f80 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7e:	d107      	bne.n	8003f90 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f98:	d10f      	bne.n	8003fba <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e010      	b.n	8003ff0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d197      	bne.n	8003f1e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000000 	.word	0x20000000

08003ffc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004010:	d111      	bne.n	8004036 <SPI_EndRxTransaction+0x3a>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401a:	d004      	beq.n	8004026 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004024:	d107      	bne.n	8004036 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004034:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2200      	movs	r2, #0
 800403e:	2180      	movs	r1, #128	; 0x80
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff fec5 	bl	8003dd0 <SPI_WaitFlagStateUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e023      	b.n	80040a4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004064:	d11d      	bne.n	80040a2 <SPI_EndRxTransaction+0xa6>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406e:	d004      	beq.n	800407a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004078:	d113      	bne.n	80040a2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2200      	movs	r2, #0
 8004082:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f7ff ff2a 	bl	8003ee0 <SPI_WaitFifoStateUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004096:	f043 0220 	orr.w	r2, r3, #32
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e000      	b.n	80040a4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2200      	movs	r2, #0
 80040c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7ff ff0b 	bl	8003ee0 <SPI_WaitFifoStateUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e027      	b.n	8004130 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2200      	movs	r2, #0
 80040e8:	2180      	movs	r1, #128	; 0x80
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff fe70 	bl	8003dd0 <SPI_WaitFlagStateUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fa:	f043 0220 	orr.w	r2, r3, #32
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e014      	b.n	8004130 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f7ff fee4 	bl	8003ee0 <SPI_WaitFifoStateUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004122:	f043 0220 	orr.w	r2, r3, #32
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e000      	b.n	8004130 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e042      	b.n	80041d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004150:	2b00      	cmp	r3, #0
 8004152:	d106      	bne.n	8004162 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7fc fe01 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2224      	movs	r2, #36	; 0x24
 8004166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f8c4 	bl	8004308 <UART_SetConfig>
 8004180:	4603      	mov	r3, r0
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e022      	b.n	80041d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fb8a 	bl	80048ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fc11 	bl	80049f0 <UART_CheckIdleState>
 80041ce:	4603      	mov	r3, r0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	; 0x28
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	f040 8084 	bne.w	80042fc <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_UART_Transmit+0x28>
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e07c      	b.n	80042fe <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_UART_Transmit+0x3a>
 800420e:	2302      	movs	r3, #2
 8004210:	e075      	b.n	80042fe <HAL_UART_Transmit+0x126>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2221      	movs	r2, #33	; 0x21
 8004226:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800422a:	f7fc ffb5 	bl	8001198 <HAL_GetTick>
 800422e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	88fa      	ldrh	r2, [r7, #6]
 8004234:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	88fa      	ldrh	r2, [r7, #6]
 800423c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004248:	d108      	bne.n	800425c <HAL_UART_Transmit+0x84>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	e003      	b.n	8004264 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004260:	2300      	movs	r3, #0
 8004262:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800426c:	e02d      	b.n	80042ca <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2200      	movs	r2, #0
 8004276:	2180      	movs	r1, #128	; 0x80
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 fc01 	bl	8004a80 <UART_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e03a      	b.n	80042fe <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10b      	bne.n	80042a6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	881a      	ldrh	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800429a:	b292      	uxth	r2, r2
 800429c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	3302      	adds	r3, #2
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	e008      	b.n	80042b8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	b292      	uxth	r2, r2
 80042b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3301      	adds	r3, #1
 80042b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1cb      	bne.n	800426e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2200      	movs	r2, #0
 80042de:	2140      	movs	r1, #64	; 0x40
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fbcd 	bl	8004a80 <UART_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e006      	b.n	80042fe <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e000      	b.n	80042fe <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80042fc:	2302      	movs	r3, #2
  }
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3720      	adds	r7, #32
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004308:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800430c:	b088      	sub	sp, #32
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4313      	orrs	r3, r2
 800432c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	4313      	orrs	r3, r2
 8004336:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4bb1      	ldr	r3, [pc, #708]	; (8004604 <UART_SetConfig+0x2fc>)
 8004340:	4013      	ands	r3, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	69f9      	ldr	r1, [r7, #28]
 8004348:	430b      	orrs	r3, r1
 800434a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4aa6      	ldr	r2, [pc, #664]	; (8004608 <UART_SetConfig+0x300>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	4313      	orrs	r3, r2
 800437a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004386:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	69f9      	ldr	r1, [r7, #28]
 8004390:	430b      	orrs	r3, r1
 8004392:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	f023 010f 	bic.w	r1, r3, #15
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a97      	ldr	r2, [pc, #604]	; (800460c <UART_SetConfig+0x304>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d121      	bne.n	80043f8 <UART_SetConfig+0xf0>
 80043b4:	4b96      	ldr	r3, [pc, #600]	; (8004610 <UART_SetConfig+0x308>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d816      	bhi.n	80043f0 <UART_SetConfig+0xe8>
 80043c2:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <UART_SetConfig+0xc0>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	080043d9 	.word	0x080043d9
 80043cc:	080043e5 	.word	0x080043e5
 80043d0:	080043df 	.word	0x080043df
 80043d4:	080043eb 	.word	0x080043eb
 80043d8:	2301      	movs	r3, #1
 80043da:	76fb      	strb	r3, [r7, #27]
 80043dc:	e0e8      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80043de:	2302      	movs	r3, #2
 80043e0:	76fb      	strb	r3, [r7, #27]
 80043e2:	e0e5      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80043e4:	2304      	movs	r3, #4
 80043e6:	76fb      	strb	r3, [r7, #27]
 80043e8:	e0e2      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80043ea:	2308      	movs	r3, #8
 80043ec:	76fb      	strb	r3, [r7, #27]
 80043ee:	e0df      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80043f0:	2310      	movs	r3, #16
 80043f2:	76fb      	strb	r3, [r7, #27]
 80043f4:	bf00      	nop
 80043f6:	e0db      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a85      	ldr	r2, [pc, #532]	; (8004614 <UART_SetConfig+0x30c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d134      	bne.n	800446c <UART_SetConfig+0x164>
 8004402:	4b83      	ldr	r3, [pc, #524]	; (8004610 <UART_SetConfig+0x308>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f003 030c 	and.w	r3, r3, #12
 800440c:	2b0c      	cmp	r3, #12
 800440e:	d829      	bhi.n	8004464 <UART_SetConfig+0x15c>
 8004410:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <UART_SetConfig+0x110>)
 8004412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004416:	bf00      	nop
 8004418:	0800444d 	.word	0x0800444d
 800441c:	08004465 	.word	0x08004465
 8004420:	08004465 	.word	0x08004465
 8004424:	08004465 	.word	0x08004465
 8004428:	08004459 	.word	0x08004459
 800442c:	08004465 	.word	0x08004465
 8004430:	08004465 	.word	0x08004465
 8004434:	08004465 	.word	0x08004465
 8004438:	08004453 	.word	0x08004453
 800443c:	08004465 	.word	0x08004465
 8004440:	08004465 	.word	0x08004465
 8004444:	08004465 	.word	0x08004465
 8004448:	0800445f 	.word	0x0800445f
 800444c:	2300      	movs	r3, #0
 800444e:	76fb      	strb	r3, [r7, #27]
 8004450:	e0ae      	b.n	80045b0 <UART_SetConfig+0x2a8>
 8004452:	2302      	movs	r3, #2
 8004454:	76fb      	strb	r3, [r7, #27]
 8004456:	e0ab      	b.n	80045b0 <UART_SetConfig+0x2a8>
 8004458:	2304      	movs	r3, #4
 800445a:	76fb      	strb	r3, [r7, #27]
 800445c:	e0a8      	b.n	80045b0 <UART_SetConfig+0x2a8>
 800445e:	2308      	movs	r3, #8
 8004460:	76fb      	strb	r3, [r7, #27]
 8004462:	e0a5      	b.n	80045b0 <UART_SetConfig+0x2a8>
 8004464:	2310      	movs	r3, #16
 8004466:	76fb      	strb	r3, [r7, #27]
 8004468:	bf00      	nop
 800446a:	e0a1      	b.n	80045b0 <UART_SetConfig+0x2a8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a69      	ldr	r2, [pc, #420]	; (8004618 <UART_SetConfig+0x310>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d120      	bne.n	80044b8 <UART_SetConfig+0x1b0>
 8004476:	4b66      	ldr	r3, [pc, #408]	; (8004610 <UART_SetConfig+0x308>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004480:	2b10      	cmp	r3, #16
 8004482:	d00f      	beq.n	80044a4 <UART_SetConfig+0x19c>
 8004484:	2b10      	cmp	r3, #16
 8004486:	d802      	bhi.n	800448e <UART_SetConfig+0x186>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <UART_SetConfig+0x190>
 800448c:	e010      	b.n	80044b0 <UART_SetConfig+0x1a8>
 800448e:	2b20      	cmp	r3, #32
 8004490:	d005      	beq.n	800449e <UART_SetConfig+0x196>
 8004492:	2b30      	cmp	r3, #48	; 0x30
 8004494:	d009      	beq.n	80044aa <UART_SetConfig+0x1a2>
 8004496:	e00b      	b.n	80044b0 <UART_SetConfig+0x1a8>
 8004498:	2300      	movs	r3, #0
 800449a:	76fb      	strb	r3, [r7, #27]
 800449c:	e088      	b.n	80045b0 <UART_SetConfig+0x2a8>
 800449e:	2302      	movs	r3, #2
 80044a0:	76fb      	strb	r3, [r7, #27]
 80044a2:	e085      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80044a4:	2304      	movs	r3, #4
 80044a6:	76fb      	strb	r3, [r7, #27]
 80044a8:	e082      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80044aa:	2308      	movs	r3, #8
 80044ac:	76fb      	strb	r3, [r7, #27]
 80044ae:	e07f      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80044b0:	2310      	movs	r3, #16
 80044b2:	76fb      	strb	r3, [r7, #27]
 80044b4:	bf00      	nop
 80044b6:	e07b      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a57      	ldr	r2, [pc, #348]	; (800461c <UART_SetConfig+0x314>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d120      	bne.n	8004504 <UART_SetConfig+0x1fc>
 80044c2:	4b53      	ldr	r3, [pc, #332]	; (8004610 <UART_SetConfig+0x308>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044cc:	2b40      	cmp	r3, #64	; 0x40
 80044ce:	d00f      	beq.n	80044f0 <UART_SetConfig+0x1e8>
 80044d0:	2b40      	cmp	r3, #64	; 0x40
 80044d2:	d802      	bhi.n	80044da <UART_SetConfig+0x1d2>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <UART_SetConfig+0x1dc>
 80044d8:	e010      	b.n	80044fc <UART_SetConfig+0x1f4>
 80044da:	2b80      	cmp	r3, #128	; 0x80
 80044dc:	d005      	beq.n	80044ea <UART_SetConfig+0x1e2>
 80044de:	2bc0      	cmp	r3, #192	; 0xc0
 80044e0:	d009      	beq.n	80044f6 <UART_SetConfig+0x1ee>
 80044e2:	e00b      	b.n	80044fc <UART_SetConfig+0x1f4>
 80044e4:	2300      	movs	r3, #0
 80044e6:	76fb      	strb	r3, [r7, #27]
 80044e8:	e062      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80044ea:	2302      	movs	r3, #2
 80044ec:	76fb      	strb	r3, [r7, #27]
 80044ee:	e05f      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80044f0:	2304      	movs	r3, #4
 80044f2:	76fb      	strb	r3, [r7, #27]
 80044f4:	e05c      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80044f6:	2308      	movs	r3, #8
 80044f8:	76fb      	strb	r3, [r7, #27]
 80044fa:	e059      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80044fc:	2310      	movs	r3, #16
 80044fe:	76fb      	strb	r3, [r7, #27]
 8004500:	bf00      	nop
 8004502:	e055      	b.n	80045b0 <UART_SetConfig+0x2a8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a45      	ldr	r2, [pc, #276]	; (8004620 <UART_SetConfig+0x318>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d124      	bne.n	8004558 <UART_SetConfig+0x250>
 800450e:	4b40      	ldr	r3, [pc, #256]	; (8004610 <UART_SetConfig+0x308>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451c:	d012      	beq.n	8004544 <UART_SetConfig+0x23c>
 800451e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004522:	d802      	bhi.n	800452a <UART_SetConfig+0x222>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <UART_SetConfig+0x230>
 8004528:	e012      	b.n	8004550 <UART_SetConfig+0x248>
 800452a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800452e:	d006      	beq.n	800453e <UART_SetConfig+0x236>
 8004530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004534:	d009      	beq.n	800454a <UART_SetConfig+0x242>
 8004536:	e00b      	b.n	8004550 <UART_SetConfig+0x248>
 8004538:	2300      	movs	r3, #0
 800453a:	76fb      	strb	r3, [r7, #27]
 800453c:	e038      	b.n	80045b0 <UART_SetConfig+0x2a8>
 800453e:	2302      	movs	r3, #2
 8004540:	76fb      	strb	r3, [r7, #27]
 8004542:	e035      	b.n	80045b0 <UART_SetConfig+0x2a8>
 8004544:	2304      	movs	r3, #4
 8004546:	76fb      	strb	r3, [r7, #27]
 8004548:	e032      	b.n	80045b0 <UART_SetConfig+0x2a8>
 800454a:	2308      	movs	r3, #8
 800454c:	76fb      	strb	r3, [r7, #27]
 800454e:	e02f      	b.n	80045b0 <UART_SetConfig+0x2a8>
 8004550:	2310      	movs	r3, #16
 8004552:	76fb      	strb	r3, [r7, #27]
 8004554:	bf00      	nop
 8004556:	e02b      	b.n	80045b0 <UART_SetConfig+0x2a8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2a      	ldr	r2, [pc, #168]	; (8004608 <UART_SetConfig+0x300>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d124      	bne.n	80045ac <UART_SetConfig+0x2a4>
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <UART_SetConfig+0x308>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004568:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800456c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004570:	d012      	beq.n	8004598 <UART_SetConfig+0x290>
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004576:	d802      	bhi.n	800457e <UART_SetConfig+0x276>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <UART_SetConfig+0x284>
 800457c:	e012      	b.n	80045a4 <UART_SetConfig+0x29c>
 800457e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004582:	d006      	beq.n	8004592 <UART_SetConfig+0x28a>
 8004584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004588:	d009      	beq.n	800459e <UART_SetConfig+0x296>
 800458a:	e00b      	b.n	80045a4 <UART_SetConfig+0x29c>
 800458c:	2300      	movs	r3, #0
 800458e:	76fb      	strb	r3, [r7, #27]
 8004590:	e00e      	b.n	80045b0 <UART_SetConfig+0x2a8>
 8004592:	2302      	movs	r3, #2
 8004594:	76fb      	strb	r3, [r7, #27]
 8004596:	e00b      	b.n	80045b0 <UART_SetConfig+0x2a8>
 8004598:	2304      	movs	r3, #4
 800459a:	76fb      	strb	r3, [r7, #27]
 800459c:	e008      	b.n	80045b0 <UART_SetConfig+0x2a8>
 800459e:	2308      	movs	r3, #8
 80045a0:	76fb      	strb	r3, [r7, #27]
 80045a2:	e005      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80045a4:	2310      	movs	r3, #16
 80045a6:	76fb      	strb	r3, [r7, #27]
 80045a8:	bf00      	nop
 80045aa:	e001      	b.n	80045b0 <UART_SetConfig+0x2a8>
 80045ac:	2310      	movs	r3, #16
 80045ae:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a14      	ldr	r2, [pc, #80]	; (8004608 <UART_SetConfig+0x300>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	f040 80a1 	bne.w	80046fe <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045bc:	7efb      	ldrb	r3, [r7, #27]
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d836      	bhi.n	8004630 <UART_SetConfig+0x328>
 80045c2:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <UART_SetConfig+0x2c0>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	08004631 	.word	0x08004631
 80045d0:	080045f5 	.word	0x080045f5
 80045d4:	08004631 	.word	0x08004631
 80045d8:	080045fb 	.word	0x080045fb
 80045dc:	08004631 	.word	0x08004631
 80045e0:	08004631 	.word	0x08004631
 80045e4:	08004631 	.word	0x08004631
 80045e8:	08004629 	.word	0x08004629
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ec:	f7fe f8a6 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 80045f0:	6178      	str	r0, [r7, #20]
        break;
 80045f2:	e022      	b.n	800463a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <UART_SetConfig+0x31c>)
 80045f6:	617b      	str	r3, [r7, #20]
        break;
 80045f8:	e01f      	b.n	800463a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fa:	f7fe f809 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80045fe:	6178      	str	r0, [r7, #20]
        break;
 8004600:	e01b      	b.n	800463a <UART_SetConfig+0x332>
 8004602:	bf00      	nop
 8004604:	cfff69f3 	.word	0xcfff69f3
 8004608:	40008000 	.word	0x40008000
 800460c:	40013800 	.word	0x40013800
 8004610:	40021000 	.word	0x40021000
 8004614:	40004400 	.word	0x40004400
 8004618:	40004800 	.word	0x40004800
 800461c:	40004c00 	.word	0x40004c00
 8004620:	40005000 	.word	0x40005000
 8004624:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462c:	617b      	str	r3, [r7, #20]
        break;
 800462e:	e004      	b.n	800463a <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	76bb      	strb	r3, [r7, #26]
        break;
 8004638:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 811d 	beq.w	800487c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	4a97      	ldr	r2, [pc, #604]	; (80048a4 <UART_SetConfig+0x59c>)
 8004648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800464c:	461a      	mov	r2, r3
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	fbb3 f3f2 	udiv	r3, r3, r2
 8004654:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	429a      	cmp	r2, r3
 8004664:	d305      	bcc.n	8004672 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	d902      	bls.n	8004678 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	76bb      	strb	r3, [r7, #26]
 8004676:	e101      	b.n	800487c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4618      	mov	r0, r3
 800467c:	f04f 0100 	mov.w	r1, #0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	4a87      	ldr	r2, [pc, #540]	; (80048a4 <UART_SetConfig+0x59c>)
 8004686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800468a:	b29b      	uxth	r3, r3
 800468c:	f04f 0400 	mov.w	r4, #0
 8004690:	461a      	mov	r2, r3
 8004692:	4623      	mov	r3, r4
 8004694:	f7fb fdba 	bl	800020c <__aeabi_uldivmod>
 8004698:	4603      	mov	r3, r0
 800469a:	460c      	mov	r4, r1
 800469c:	4619      	mov	r1, r3
 800469e:	4622      	mov	r2, r4
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	f04f 0400 	mov.w	r4, #0
 80046a8:	0214      	lsls	r4, r2, #8
 80046aa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80046ae:	020b      	lsls	r3, r1, #8
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6852      	ldr	r2, [r2, #4]
 80046b4:	0852      	lsrs	r2, r2, #1
 80046b6:	4611      	mov	r1, r2
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	eb13 0b01 	adds.w	fp, r3, r1
 80046c0:	eb44 0c02 	adc.w	ip, r4, r2
 80046c4:	4658      	mov	r0, fp
 80046c6:	4661      	mov	r1, ip
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f04f 0400 	mov.w	r4, #0
 80046d0:	461a      	mov	r2, r3
 80046d2:	4623      	mov	r3, r4
 80046d4:	f7fb fd9a 	bl	800020c <__aeabi_uldivmod>
 80046d8:	4603      	mov	r3, r0
 80046da:	460c      	mov	r4, r1
 80046dc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046e4:	d308      	bcc.n	80046f8 <UART_SetConfig+0x3f0>
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ec:	d204      	bcs.n	80046f8 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	e0c1      	b.n	800487c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	76bb      	strb	r3, [r7, #26]
 80046fc:	e0be      	b.n	800487c <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004706:	d164      	bne.n	80047d2 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004708:	7efb      	ldrb	r3, [r7, #27]
 800470a:	2b08      	cmp	r3, #8
 800470c:	d827      	bhi.n	800475e <UART_SetConfig+0x456>
 800470e:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <UART_SetConfig+0x40c>)
 8004710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004714:	08004739 	.word	0x08004739
 8004718:	08004741 	.word	0x08004741
 800471c:	08004749 	.word	0x08004749
 8004720:	0800475f 	.word	0x0800475f
 8004724:	0800474f 	.word	0x0800474f
 8004728:	0800475f 	.word	0x0800475f
 800472c:	0800475f 	.word	0x0800475f
 8004730:	0800475f 	.word	0x0800475f
 8004734:	08004757 	.word	0x08004757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004738:	f7fe f800 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 800473c:	6178      	str	r0, [r7, #20]
        break;
 800473e:	e013      	b.n	8004768 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004740:	f7fe f812 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8004744:	6178      	str	r0, [r7, #20]
        break;
 8004746:	e00f      	b.n	8004768 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004748:	4b57      	ldr	r3, [pc, #348]	; (80048a8 <UART_SetConfig+0x5a0>)
 800474a:	617b      	str	r3, [r7, #20]
        break;
 800474c:	e00c      	b.n	8004768 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800474e:	f7fd ff5f 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 8004752:	6178      	str	r0, [r7, #20]
        break;
 8004754:	e008      	b.n	8004768 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475a:	617b      	str	r3, [r7, #20]
        break;
 800475c:	e004      	b.n	8004768 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	76bb      	strb	r3, [r7, #26]
        break;
 8004766:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 8086 	beq.w	800487c <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	4a4b      	ldr	r2, [pc, #300]	; (80048a4 <UART_SetConfig+0x59c>)
 8004776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800477a:	461a      	mov	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004782:	005a      	lsls	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	441a      	add	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	b29b      	uxth	r3, r3
 8004796:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b0f      	cmp	r3, #15
 800479c:	d916      	bls.n	80047cc <UART_SetConfig+0x4c4>
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a4:	d212      	bcs.n	80047cc <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f023 030f 	bic.w	r3, r3, #15
 80047ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	89fb      	ldrh	r3, [r7, #14]
 80047be:	4313      	orrs	r3, r2
 80047c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	89fa      	ldrh	r2, [r7, #14]
 80047c8:	60da      	str	r2, [r3, #12]
 80047ca:	e057      	b.n	800487c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	76bb      	strb	r3, [r7, #26]
 80047d0:	e054      	b.n	800487c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047d2:	7efb      	ldrb	r3, [r7, #27]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d828      	bhi.n	800482a <UART_SetConfig+0x522>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <UART_SetConfig+0x4d8>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	08004805 	.word	0x08004805
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	08004815 	.word	0x08004815
 80047ec:	0800482b 	.word	0x0800482b
 80047f0:	0800481b 	.word	0x0800481b
 80047f4:	0800482b 	.word	0x0800482b
 80047f8:	0800482b 	.word	0x0800482b
 80047fc:	0800482b 	.word	0x0800482b
 8004800:	08004823 	.word	0x08004823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004804:	f7fd ff9a 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8004808:	6178      	str	r0, [r7, #20]
        break;
 800480a:	e013      	b.n	8004834 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800480c:	f7fd ffac 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8004810:	6178      	str	r0, [r7, #20]
        break;
 8004812:	e00f      	b.n	8004834 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004814:	4b24      	ldr	r3, [pc, #144]	; (80048a8 <UART_SetConfig+0x5a0>)
 8004816:	617b      	str	r3, [r7, #20]
        break;
 8004818:	e00c      	b.n	8004834 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800481a:	f7fd fef9 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 800481e:	6178      	str	r0, [r7, #20]
        break;
 8004820:	e008      	b.n	8004834 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004826:	617b      	str	r3, [r7, #20]
        break;
 8004828:	e004      	b.n	8004834 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	76bb      	strb	r3, [r7, #26]
        break;
 8004832:	bf00      	nop
    }

    if (pclk != 0U)
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d020      	beq.n	800487c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <UART_SetConfig+0x59c>)
 8004840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004844:	461a      	mov	r2, r3
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	fbb3 f2f2 	udiv	r2, r3, r2
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	441a      	add	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	b29b      	uxth	r3, r3
 800485e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b0f      	cmp	r3, #15
 8004864:	d908      	bls.n	8004878 <UART_SetConfig+0x570>
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486c:	d204      	bcs.n	8004878 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	60da      	str	r2, [r3, #12]
 8004876:	e001      	b.n	800487c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004898:	7ebb      	ldrb	r3, [r7, #26]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80048a4:	08005424 	.word	0x08005424
 80048a8:	00f42400 	.word	0x00f42400

080048ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01a      	beq.n	80049c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049aa:	d10a      	bne.n	80049c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  }
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a00:	f7fc fbca 	bl	8001198 <HAL_GetTick>
 8004a04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d10e      	bne.n	8004a32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f82c 	bl	8004a80 <UART_WaitOnFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e022      	b.n	8004a78 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d10e      	bne.n	8004a5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f816 	bl	8004a80 <UART_WaitOnFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e00c      	b.n	8004a78 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a90:	e062      	b.n	8004b58 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d05e      	beq.n	8004b58 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a9a:	f7fc fb7d 	bl	8001198 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d302      	bcc.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d11d      	bne.n	8004aec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004abe:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e045      	b.n	8004b78 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d02e      	beq.n	8004b58 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b08:	d126      	bne.n	8004b58 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b12:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b22:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0201 	bic.w	r2, r2, #1
 8004b32:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e00f      	b.n	8004b78 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69da      	ldr	r2, [r3, #28]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4013      	ands	r3, r2
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	bf0c      	ite	eq
 8004b68:	2301      	moveq	r3, #1
 8004b6a:	2300      	movne	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d08d      	beq.n	8004a92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_UARTEx_DisableFifoMode+0x16>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e027      	b.n	8004be6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2224      	movs	r2, #36	; 0x24
 8004ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0201 	bic.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004bc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e02d      	b.n	8004c66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2224      	movs	r2, #36	; 0x24
 8004c16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f850 	bl	8004cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2220      	movs	r2, #32
 8004c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e02d      	b.n	8004ce2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2224      	movs	r2, #36	; 0x24
 8004c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f812 	bl	8004cec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b089      	sub	sp, #36	; 0x24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004cf4:	4a2f      	ldr	r2, [pc, #188]	; (8004db4 <UARTEx_SetNbDataToProcess+0xc8>)
 8004cf6:	f107 0314 	add.w	r3, r7, #20
 8004cfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cfe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004d02:	4a2d      	ldr	r2, [pc, #180]	; (8004db8 <UARTEx_SetNbDataToProcess+0xcc>)
 8004d04:	f107 030c 	add.w	r3, r7, #12
 8004d08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d0c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d108      	bne.n	8004d2a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d28:	e03d      	b.n	8004da6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d2e:	2308      	movs	r3, #8
 8004d30:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	0e5b      	lsrs	r3, r3, #25
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	0f5b      	lsrs	r3, r3, #29
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004d52:	7fbb      	ldrb	r3, [r7, #30]
 8004d54:	7f3a      	ldrb	r2, [r7, #28]
 8004d56:	f107 0120 	add.w	r1, r7, #32
 8004d5a:	440a      	add	r2, r1
 8004d5c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004d60:	fb02 f303 	mul.w	r3, r2, r3
 8004d64:	7f3a      	ldrb	r2, [r7, #28]
 8004d66:	f107 0120 	add.w	r1, r7, #32
 8004d6a:	440a      	add	r2, r1
 8004d6c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004d70:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004d7c:	7ffb      	ldrb	r3, [r7, #31]
 8004d7e:	7f7a      	ldrb	r2, [r7, #29]
 8004d80:	f107 0120 	add.w	r1, r7, #32
 8004d84:	440a      	add	r2, r1
 8004d86:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	7f7a      	ldrb	r2, [r7, #29]
 8004d90:	f107 0120 	add.w	r1, r7, #32
 8004d94:	440a      	add	r2, r1
 8004d96:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004d9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004da6:	bf00      	nop
 8004da8:	3724      	adds	r7, #36	; 0x24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	080053c4 	.word	0x080053c4
 8004db8:	080053cc 	.word	0x080053cc

08004dbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	f107 001c 	add.w	r0, r7, #28
 8004dca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d122      	bne.n	8004e1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d105      	bne.n	8004e0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fa30 	bl	8005274 <USB_CoreReset>
 8004e14:	4603      	mov	r3, r0
 8004e16:	73fb      	strb	r3, [r7, #15]
 8004e18:	e01a      	b.n	8004e50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fa24 	bl	8005274 <USB_CoreReset>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38
 8004e42:	e005      	b.n	8004e50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e5c:	b004      	add	sp, #16
 8004e5e:	4770      	bx	lr

08004e60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f023 0201 	bic.w	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d106      	bne.n	8004eae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	60da      	str	r2, [r3, #12]
 8004eac:	e00b      	b.n	8004ec6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d106      	bne.n	8004ec2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	60da      	str	r2, [r3, #12]
 8004ec0:	e001      	b.n	8004ec6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e003      	b.n	8004ece <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004ec6:	2032      	movs	r0, #50	; 0x32
 8004ec8:	f7fc f972 	bl	80011b0 <HAL_Delay>

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ed8:	b084      	sub	sp, #16
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	e009      	b.n	8004f0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	3340      	adds	r3, #64	; 0x40
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	2200      	movs	r2, #0
 8004f04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b0e      	cmp	r3, #14
 8004f10:	d9f2      	bls.n	8004ef8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d11c      	bne.n	8004f52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f26:	f043 0302 	orr.w	r3, r3, #2
 8004f2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	e005      	b.n	8004f5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f64:	461a      	mov	r2, r3
 8004f66:	2300      	movs	r3, #0
 8004f68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f70:	4619      	mov	r1, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f78:	461a      	mov	r2, r3
 8004f7a:	680b      	ldr	r3, [r1, #0]
 8004f7c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f7e:	2103      	movs	r1, #3
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f93d 	bl	8005200 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f86:	2110      	movs	r1, #16
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f8f1 	bl	8005170 <USB_FlushTxFifo>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f90f 	bl	80051bc <USB_FlushRxFifo>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	e043      	b.n	800505a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fe8:	d118      	bne.n	800501c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	e013      	b.n	800502e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	461a      	mov	r2, r3
 8005014:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	e008      	b.n	800502e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005028:	461a      	mov	r2, r3
 800502a:	2300      	movs	r3, #0
 800502c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503a:	461a      	mov	r2, r3
 800503c:	2300      	movs	r3, #0
 800503e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504c:	461a      	mov	r2, r3
 800504e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005052:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	3301      	adds	r3, #1
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	429a      	cmp	r2, r3
 8005060:	d3b7      	bcc.n	8004fd2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	e043      	b.n	80050f0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800507a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800507e:	d118      	bne.n	80050b2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005092:	461a      	mov	r2, r3
 8005094:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e013      	b.n	80050c4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a8:	461a      	mov	r2, r3
 80050aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	e008      	b.n	80050c4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	461a      	mov	r2, r3
 80050c0:	2300      	movs	r3, #0
 80050c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	461a      	mov	r2, r3
 80050d2:	2300      	movs	r3, #0
 80050d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	461a      	mov	r2, r3
 80050e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	3301      	adds	r3, #1
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d3b7      	bcc.n	8005068 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800510a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005118:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f043 0210 	orr.w	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	4b10      	ldr	r3, [pc, #64]	; (800516c <USB_DevInit+0x294>)
 800512c:	4313      	orrs	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	f043 0208 	orr.w	r2, r3, #8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005146:	2b01      	cmp	r3, #1
 8005148:	d107      	bne.n	800515a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005152:	f043 0304 	orr.w	r3, r3, #4
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800515a:	7dfb      	ldrb	r3, [r7, #23]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005166:	b004      	add	sp, #16
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	803c3800 	.word	0x803c3800

08005170 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	019b      	lsls	r3, r3, #6
 8005182:	f043 0220 	orr.w	r2, r3, #32
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3301      	adds	r3, #1
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <USB_FlushTxFifo+0x48>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d901      	bls.n	800519c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e006      	b.n	80051aa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d0f0      	beq.n	800518a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	00030d40 	.word	0x00030d40

080051bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2210      	movs	r2, #16
 80051cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3301      	adds	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a09      	ldr	r2, [pc, #36]	; (80051fc <USB_FlushRxFifo+0x40>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d901      	bls.n	80051e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e006      	b.n	80051ee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d0f0      	beq.n	80051ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	00030d40 	.word	0x00030d40

08005200 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	68f9      	ldr	r1, [r7, #12]
 800521c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005220:	4313      	orrs	r3, r2
 8005222:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800524c:	f023 0303 	bic.w	r3, r3, #3
 8005250:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005260:	f043 0302 	orr.w	r3, r3, #2
 8005264:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3301      	adds	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4a13      	ldr	r2, [pc, #76]	; (80052d8 <USB_CoreReset+0x64>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e01b      	b.n	80052ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	daf2      	bge.n	8005280 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f043 0201 	orr.w	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3301      	adds	r3, #1
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4a09      	ldr	r2, [pc, #36]	; (80052d8 <USB_CoreReset+0x64>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d901      	bls.n	80052bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e006      	b.n	80052ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d0f0      	beq.n	80052aa <USB_CoreReset+0x36>

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	00030d40 	.word	0x00030d40

080052dc <__libc_init_array>:
 80052dc:	b570      	push	{r4, r5, r6, lr}
 80052de:	4e0d      	ldr	r6, [pc, #52]	; (8005314 <__libc_init_array+0x38>)
 80052e0:	4c0d      	ldr	r4, [pc, #52]	; (8005318 <__libc_init_array+0x3c>)
 80052e2:	1ba4      	subs	r4, r4, r6
 80052e4:	10a4      	asrs	r4, r4, #2
 80052e6:	2500      	movs	r5, #0
 80052e8:	42a5      	cmp	r5, r4
 80052ea:	d109      	bne.n	8005300 <__libc_init_array+0x24>
 80052ec:	4e0b      	ldr	r6, [pc, #44]	; (800531c <__libc_init_array+0x40>)
 80052ee:	4c0c      	ldr	r4, [pc, #48]	; (8005320 <__libc_init_array+0x44>)
 80052f0:	f000 f82c 	bl	800534c <_init>
 80052f4:	1ba4      	subs	r4, r4, r6
 80052f6:	10a4      	asrs	r4, r4, #2
 80052f8:	2500      	movs	r5, #0
 80052fa:	42a5      	cmp	r5, r4
 80052fc:	d105      	bne.n	800530a <__libc_init_array+0x2e>
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005304:	4798      	blx	r3
 8005306:	3501      	adds	r5, #1
 8005308:	e7ee      	b.n	80052e8 <__libc_init_array+0xc>
 800530a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800530e:	4798      	blx	r3
 8005310:	3501      	adds	r5, #1
 8005312:	e7f2      	b.n	80052fa <__libc_init_array+0x1e>
 8005314:	08005444 	.word	0x08005444
 8005318:	08005444 	.word	0x08005444
 800531c:	08005444 	.word	0x08005444
 8005320:	08005448 	.word	0x08005448

08005324 <memcpy>:
 8005324:	b510      	push	{r4, lr}
 8005326:	1e43      	subs	r3, r0, #1
 8005328:	440a      	add	r2, r1
 800532a:	4291      	cmp	r1, r2
 800532c:	d100      	bne.n	8005330 <memcpy+0xc>
 800532e:	bd10      	pop	{r4, pc}
 8005330:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005338:	e7f7      	b.n	800532a <memcpy+0x6>

0800533a <memset>:
 800533a:	4402      	add	r2, r0
 800533c:	4603      	mov	r3, r0
 800533e:	4293      	cmp	r3, r2
 8005340:	d100      	bne.n	8005344 <memset+0xa>
 8005342:	4770      	bx	lr
 8005344:	f803 1b01 	strb.w	r1, [r3], #1
 8005348:	e7f9      	b.n	800533e <memset+0x4>
	...

0800534c <_init>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr

08005358 <_fini>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr
