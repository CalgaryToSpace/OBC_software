
PCB_planning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aec  08004aec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004af4  08004af4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000000c  08004b08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08004b08  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013225  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000225f  00000000  00000000  00033261  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e0  00000000  00000000  000354c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc8  00000000  00000000  000365a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029e86  00000000  00000000  00037568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf80  00000000  00000000  000613ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102dda  00000000  00000000  0006e36e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00171148  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004758  00000000  00000000  001711c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004a64 	.word	0x08004a64

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004a64 	.word	0x08004a64

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fdf5 	bl	80010ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f810 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fa18 	bl	800093c <MX_GPIO_Init>
  MX_DCMI_Init();
 800050c:	f000 f87a 	bl	8000604 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000510:	f000 f8ac 	bl	800066c <MX_I2C1_Init>
  MX_OCTOSPI1_Init();
 8000514:	f000 f8e8 	bl	80006e8 <MX_OCTOSPI1_Init>
  MX_SPI2_Init();
 8000518:	f000 f93a 	bl	8000790 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800051c:	f000 f976 	bl	800080c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000520:	f000 f9c0 	bl	80008a4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x28>
	...

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b0bc      	sub	sp, #240	; 0xf0
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f004 fa8c 	bl	8004a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2294      	movs	r2, #148	; 0x94
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f004 fa7e 	bl	8004a54 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000558:	f44f 7000 	mov.w	r0, #512	; 0x200
 800055c:	f001 ff76 	bl	800244c <HAL_PWREx_ControlVoltageScaling>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000566:	f000 fa49 	bl	80009fc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800056a:	2310      	movs	r3, #16
 800056c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800057c:	2360      	movs	r3, #96	; 0x60
 800057e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000582:	2300      	movs	r3, #0
 8000584:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800058c:	4618      	mov	r0, r3
 800058e:	f002 f811 	bl	80025b4 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000598:	f000 fa30 	bl	80009fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fc1d 	bl	8002e00 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005cc:	f000 fa16 	bl	80009fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <SystemClock_Config+0xd8>)
 80005d2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_OSPI;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005d4:	2300      	movs	r3, #0
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005d8:	2300      	movs	r3, #0
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005dc:	2300      	movs	r3, #0
 80005de:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 feb9 	bl	8003360 <HAL_RCCEx_PeriphCLKConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005f4:	f000 fa02 	bl	80009fc <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	37f0      	adds	r7, #240	; 0xf0
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	01000043 	.word	0x01000043

08000604 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_DCMI_Init+0x60>)
 800060a:	4a17      	ldr	r2, [pc, #92]	; (8000668 <MX_DCMI_Init+0x64>)
 800060c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_DCMI_Init+0x60>)
 8000610:	2200      	movs	r2, #0
 8000612:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <MX_DCMI_Init+0x60>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_DCMI_Init+0x60>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_DCMI_Init+0x60>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_DCMI_Init+0x60>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <MX_DCMI_Init+0x60>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_DCMI_Init+0x60>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MX_DCMI_Init+0x60>)
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_DCMI_Init+0x60>)
 8000640:	2200      	movs	r2, #0
 8000642:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <MX_DCMI_Init+0x60>)
 8000646:	2200      	movs	r2, #0
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_DCMI_Init+0x60>)
 800064c:	2200      	movs	r2, #0
 800064e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_DCMI_Init+0x60>)
 8000652:	f000 fea7 	bl	80013a4 <HAL_DCMI_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800065c:	f000 f9ce 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000128 	.word	0x20000128
 8000668:	50050000 	.word	0x50050000

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000672:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <MX_I2C1_Init+0x78>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000678:	f640 6214 	movw	r2, #3604	; 0xe14
 800067c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000686:	2201      	movs	r2, #1
 8000688:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_I2C1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006aa:	f001 f893 	bl	80017d4 <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f9a2 	bl	80009fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b8:	2100      	movs	r1, #0
 80006ba:	4809      	ldr	r0, [pc, #36]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006bc:	f001 f919 	bl	80018f2 <HAL_I2CEx_ConfigAnalogFilter>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006c6:	f000 f999 	bl	80009fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ca:	2100      	movs	r1, #0
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006ce:	f001 f95b 	bl	8001988 <HAL_I2CEx_ConfigDigitalFilter>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006d8:	f000 f990 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	40005400 	.word	0x40005400

080006e8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 80006fe:	4a23      	ldr	r2, [pc, #140]	; (800078c <MX_OCTOSPI1_Init+0xa4>)
 8000700:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000702:	4b21      	ldr	r3, [pc, #132]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 8000704:	2201      	movs	r2, #1
 8000706:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 8000716:	2220      	movs	r2, #32
 8000718:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 800071c:	2201      	movs	r2, #1
 800071e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 800072e:	2201      	movs	r2, #1
 8000730:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 8000740:	2200      	movs	r2, #0
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 8000746:	2208      	movs	r2, #8
 8000748:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800074a:	480f      	ldr	r0, [pc, #60]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 800074c:	f001 f968 	bl	8001a20 <HAL_OSPI_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_OCTOSPI1_Init+0x72>
  {
    Error_Handler();
 8000756:	f000 f951 	bl	80009fc <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000762:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000766:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	f241 3288 	movw	r2, #5000	; 0x1388
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_OCTOSPI1_Init+0xa0>)
 8000772:	f001 fa0f 	bl	8001b94 <HAL_OSPIM_Config>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_OCTOSPI1_Init+0x98>
  {
    Error_Handler();
 800077c:	f000 f93e 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000d8 	.word	0x200000d8
 800078c:	a0001000 	.word	0xa0001000

08000790 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_SPI2_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <MX_SPI2_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_SPI2_Init+0x74>)
 800079c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_SPI2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_SPI2_Init+0x74>)
 80007aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_SPI2_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_SPI2_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_SPI2_Init+0x74>)
 80007be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_SPI2_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_SPI2_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_SPI2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_SPI2_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_SPI2_Init+0x74>)
 80007de:	2207      	movs	r2, #7
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_SPI2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_SPI2_Init+0x74>)
 80007ea:	2208      	movs	r2, #8
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_SPI2_Init+0x74>)
 80007f0:	f003 fabe 	bl	8003d70 <HAL_SPI_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 f8ff 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000028 	.word	0x20000028
 8000808:	40003800 	.word	0x40003800

0800080c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <MX_USART1_UART_Init+0x90>)
 8000812:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <MX_USART1_UART_Init+0x94>)
 8000814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000816:	4b21      	ldr	r3, [pc, #132]	; (800089c <MX_USART1_UART_Init+0x90>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_USART1_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_USART1_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_USART1_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_USART1_UART_Init+0x90>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_USART1_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_USART1_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_USART1_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_USART1_UART_Init+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_USART1_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000854:	4811      	ldr	r0, [pc, #68]	; (800089c <MX_USART1_UART_Init+0x90>)
 8000856:	f003 fb2e 	bl	8003eb6 <HAL_UART_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000860:	f000 f8cc 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000864:	2100      	movs	r1, #0
 8000866:	480d      	ldr	r0, [pc, #52]	; (800089c <MX_USART1_UART_Init+0x90>)
 8000868:	f003 ffeb 	bl	8004842 <HAL_UARTEx_SetTxFifoThreshold>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000872:	f000 f8c3 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000876:	2100      	movs	r1, #0
 8000878:	4808      	ldr	r0, [pc, #32]	; (800089c <MX_USART1_UART_Init+0x90>)
 800087a:	f004 f820 	bl	80048be <HAL_UARTEx_SetRxFifoThreshold>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000884:	f000 f8ba 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_USART1_UART_Init+0x90>)
 800088a:	f003 ffa1 	bl	80047d0 <HAL_UARTEx_DisableFifoMode>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000894:	f000 f8b2 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000018c 	.word	0x2000018c
 80008a0:	40013800 	.word	0x40013800

080008a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <MX_USART2_UART_Init+0x90>)
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <MX_USART2_UART_Init+0x94>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_USART2_UART_Init+0x90>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_USART2_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_USART2_UART_Init+0x90>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_USART2_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_USART2_UART_Init+0x90>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_USART2_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_USART2_UART_Init+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_USART2_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_USART2_UART_Init+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_USART2_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ec:	4811      	ldr	r0, [pc, #68]	; (8000934 <MX_USART2_UART_Init+0x90>)
 80008ee:	f003 fae2 	bl	8003eb6 <HAL_UART_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008f8:	f000 f880 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_USART2_UART_Init+0x90>)
 8000900:	f003 ff9f 	bl	8004842 <HAL_UARTEx_SetTxFifoThreshold>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800090a:	f000 f877 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	4808      	ldr	r0, [pc, #32]	; (8000934 <MX_USART2_UART_Init+0x90>)
 8000912:	f003 ffd4 	bl	80048be <HAL_UARTEx_SetRxFifoThreshold>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800091c:	f000 f86e 	bl	80009fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_USART2_UART_Init+0x90>)
 8000922:	f003 ff55 	bl	80047d0 <HAL_UARTEx_DisableFifoMode>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800092c:	f000 f866 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000218 	.word	0x20000218
 8000938:	40004400 	.word	0x40004400

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <MX_GPIO_Init+0xbc>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a2c      	ldr	r2, [pc, #176]	; (80009f8 <MX_GPIO_Init+0xbc>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <MX_GPIO_Init+0xbc>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	61fb      	str	r3, [r7, #28]
 8000958:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <MX_GPIO_Init+0xbc>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a26      	ldr	r2, [pc, #152]	; (80009f8 <MX_GPIO_Init+0xbc>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <MX_GPIO_Init+0xbc>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	61bb      	str	r3, [r7, #24]
 8000970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_GPIO_Init+0xbc>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a20      	ldr	r2, [pc, #128]	; (80009f8 <MX_GPIO_Init+0xbc>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_GPIO_Init+0xbc>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0320 	and.w	r3, r3, #32
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_GPIO_Init+0xbc>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a1a      	ldr	r2, [pc, #104]	; (80009f8 <MX_GPIO_Init+0xbc>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_GPIO_Init+0xbc>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_GPIO_Init+0xbc>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <MX_GPIO_Init+0xbc>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_GPIO_Init+0xbc>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_GPIO_Init+0xbc>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <MX_GPIO_Init+0xbc>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_GPIO_Init+0xbc>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_GPIO_Init+0xbc>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <MX_GPIO_Init+0xbc>)
 80009d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_GPIO_Init+0xbc>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80009ea:	f001 fdd3 	bl	8002594 <HAL_PWREx_EnableVddIO2>

}
 80009ee:	bf00      	nop
 80009f0:	3720      	adds	r7, #32
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <Error_Handler+0x6>

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_MspInit+0x44>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <HAL_MspInit+0x44>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6613      	str	r3, [r2, #96]	; 0x60
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_MspInit+0x44>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <HAL_MspInit+0x44>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_MspInit+0x44>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a61      	ldr	r2, [pc, #388]	; (8000bf0 <HAL_DCMI_MspInit+0x1a4>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	f040 80bc 	bne.w	8000be8 <HAL_DCMI_MspInit+0x19c>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000a70:	4b60      	ldr	r3, [pc, #384]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a74:	4a5f      	ldr	r2, [pc, #380]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7c:	4b5d      	ldr	r3, [pc, #372]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a84:	623b      	str	r3, [r7, #32]
 8000a86:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a88:	4b5a      	ldr	r3, [pc, #360]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8c:	4a59      	ldr	r2, [pc, #356]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a94:	4b57      	ldr	r3, [pc, #348]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a98:	f003 0310 	and.w	r3, r3, #16
 8000a9c:	61fb      	str	r3, [r7, #28]
 8000a9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b54      	ldr	r3, [pc, #336]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa4:	4a53      	ldr	r2, [pc, #332]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aac:	4b51      	ldr	r3, [pc, #324]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	61bb      	str	r3, [r7, #24]
 8000ab6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab8:	4b4e      	ldr	r3, [pc, #312]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	4a4d      	ldr	r2, [pc, #308]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac4:	4b4b      	ldr	r3, [pc, #300]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad0:	4b48      	ldr	r3, [pc, #288]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	4a47      	ldr	r2, [pc, #284]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000adc:	4b45      	ldr	r3, [pc, #276]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	f003 0308 	and.w	r3, r3, #8
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	4b42      	ldr	r3, [pc, #264]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	4a41      	ldr	r2, [pc, #260]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af4:	4b3f      	ldr	r3, [pc, #252]	; (8000bf4 <HAL_DCMI_MspInit+0x1a8>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b00:	2370      	movs	r3, #112	; 0x70
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000b10:	230a      	movs	r3, #10
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4837      	ldr	r0, [pc, #220]	; (8000bf8 <HAL_DCMI_MspInit+0x1ac>)
 8000b1c:	f000 fcc8 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b20:	2310      	movs	r3, #16
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000b30:	230a      	movs	r3, #10
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f000 fcb7 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8000b52:	2304      	movs	r3, #4
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b60:	f000 fca6 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000b64:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000b76:	230a      	movs	r3, #10
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	481e      	ldr	r0, [pc, #120]	; (8000bfc <HAL_DCMI_MspInit+0x1b0>)
 8000b82:	f000 fc95 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4816      	ldr	r0, [pc, #88]	; (8000bfc <HAL_DCMI_MspInit+0x1b0>)
 8000ba4:	f000 fc84 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480f      	ldr	r0, [pc, #60]	; (8000c00 <HAL_DCMI_MspInit+0x1b4>)
 8000bc4:	f000 fc74 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000bd8:	230a      	movs	r3, #10
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4808      	ldr	r0, [pc, #32]	; (8000c04 <HAL_DCMI_MspInit+0x1b8>)
 8000be4:	f000 fc64 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000be8:	bf00      	nop
 8000bea:	3738      	adds	r7, #56	; 0x38
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	50050000 	.word	0x50050000
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48001000 	.word	0x48001000
 8000bfc:	48000800 	.word	0x48000800
 8000c00:	48000c00 	.word	0x48000c00
 8000c04:	48000400 	.word	0x48000400

08000c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <HAL_I2C_MspInit+0x80>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d12a      	bne.n	8000c80 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000c42:	f001 fca7 	bl	8002594 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000c46:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4c:	2312      	movs	r3, #18
 8000c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	480b      	ldr	r0, [pc, #44]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c64:	f000 fc24 	bl	80014b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c72:	6593      	str	r3, [r2, #88]	; 0x58
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	48001800 	.word	0x48001800

08000c94 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	; 0x30
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a44      	ldr	r2, [pc, #272]	; (8000dc4 <HAL_OSPI_MspInit+0x130>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	f040 8082 	bne.w	8000dbc <HAL_OSPI_MspInit+0x128>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8000cb8:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbc:	4a42      	ldr	r2, [pc, #264]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc4:	4b40      	ldr	r3, [pc, #256]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ccc:	61bb      	str	r3, [r7, #24]
 8000cce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000cd0:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cd4:	4a3c      	ldr	r2, [pc, #240]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cda:	6513      	str	r3, [r2, #80]	; 0x50
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce8:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	4a36      	ldr	r2, [pc, #216]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000cee:	f043 0320 	orr.w	r3, r3, #32
 8000cf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf4:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf8:	f003 0320 	and.w	r3, r3, #32
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	4a30      	ldr	r2, [pc, #192]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	4a2a      	ldr	r2, [pc, #168]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <HAL_OSPI_MspInit+0x134>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000d30:	f001 fc30 	bl	8002594 <HAL_PWREx_EnableVddIO2>
    PF9     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PA2     ------> OCTOSPIM_P1_NCS
    PG12     ------> OCTOSPIM_P2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d34:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000d46:	230a      	movs	r3, #10
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481e      	ldr	r0, [pc, #120]	; (8000dcc <HAL_OSPI_MspInit+0x138>)
 8000d52:	f000 fbad 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	4816      	ldr	r0, [pc, #88]	; (8000dcc <HAL_OSPI_MspInit+0x138>)
 8000d74:	f000 fb9c 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f000 fb8b 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000dac:	2305      	movs	r3, #5
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <HAL_OSPI_MspInit+0x13c>)
 8000db8:	f000 fb7a 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3730      	adds	r7, #48	; 0x30
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	a0001000 	.word	0xa0001000
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	48001400 	.word	0x48001400
 8000dd0:	48001800 	.word	0x48001800

08000dd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <HAL_SPI_MspInit+0xd4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d154      	bne.n	8000ea0 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <HAL_SPI_MspInit+0xd8>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	4a2c      	ldr	r2, [pc, #176]	; (8000eac <HAL_SPI_MspInit+0xd8>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6593      	str	r3, [r2, #88]	; 0x58
 8000e02:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <HAL_SPI_MspInit+0xd8>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	4b27      	ldr	r3, [pc, #156]	; (8000eac <HAL_SPI_MspInit+0xd8>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a26      	ldr	r2, [pc, #152]	; (8000eac <HAL_SPI_MspInit+0xd8>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b24      	ldr	r3, [pc, #144]	; (8000eac <HAL_SPI_MspInit+0xd8>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <HAL_SPI_MspInit+0xd8>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a20      	ldr	r2, [pc, #128]	; (8000eac <HAL_SPI_MspInit+0xd8>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <HAL_SPI_MspInit+0xd8>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4815      	ldr	r0, [pc, #84]	; (8000eb0 <HAL_SPI_MspInit+0xdc>)
 8000e5a:	f000 fb29 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e6e:	2305      	movs	r3, #5
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <HAL_SPI_MspInit+0xdc>)
 8000e7a:	f000 fb19 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e90:	2305      	movs	r3, #5
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <HAL_SPI_MspInit+0xe0>)
 8000e9c:	f000 fb08 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40003800 	.word	0x40003800
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000800 	.word	0x48000800
 8000eb4:	48000400 	.word	0x48000400

08000eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	; 0x30
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a3d      	ldr	r2, [pc, #244]	; (8000fcc <HAL_UART_MspInit+0x114>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d12a      	bne.n	8000f30 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eda:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	4a3c      	ldr	r2, [pc, #240]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee6:	4b3a      	ldr	r3, [pc, #232]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b37      	ldr	r3, [pc, #220]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a36      	ldr	r2, [pc, #216]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f000 fac1 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f2e:	e049      	b.n	8000fc4 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <HAL_UART_MspInit+0x11c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d144      	bne.n	8000fc4 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	6593      	str	r3, [r2, #88]	; 0x58
 8000f46:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	4a1e      	ldr	r2, [pc, #120]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_UART_MspInit+0x118>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f82:	2308      	movs	r3, #8
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f92:	2307      	movs	r3, #7
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f000 fa86 	bl	80014b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fa4:	2320      	movs	r3, #32
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <HAL_UART_MspInit+0x120>)
 8000fc0:	f000 fa76 	bl	80014b0 <HAL_GPIO_Init>
}
 8000fc4:	bf00      	nop
 8000fc6:	3730      	adds	r7, #48	; 0x30
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40013800 	.word	0x40013800
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40004400 	.word	0x40004400
 8000fd8:	48000c00 	.word	0x48000c00

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <MemManage_Handler+0x4>

08000fee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 f8b6 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <SystemInit+0x64>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103a:	4a16      	ldr	r2, [pc, #88]	; (8001094 <SystemInit+0x64>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <SystemInit+0x68>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a13      	ldr	r2, [pc, #76]	; (8001098 <SystemInit+0x68>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <SystemInit+0x68>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <SystemInit+0x68>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <SystemInit+0x68>)
 800105c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001060:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001064:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <SystemInit+0x68>)
 8001068:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800106c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <SystemInit+0x68>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <SystemInit+0x68>)
 8001074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <SystemInit+0x68>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SystemInit+0x64>)
 8001082:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001086:	609a      	str	r2, [r3, #8]
#endif
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00
 8001098:	40021000 	.word	0x40021000

0800109c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800109c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a0:	f7ff ffc6 	bl	8001030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010a6:	e003      	b.n	80010b0 <LoopCopyDataInit>

080010a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010ae:	3104      	adds	r1, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010b0:	480a      	ldr	r0, [pc, #40]	; (80010dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010b8:	d3f6      	bcc.n	80010a8 <CopyDataInit>
	ldr	r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010bc:	e002      	b.n	80010c4 <LoopFillZerobss>

080010be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010c0:	f842 3b04 	str.w	r3, [r2], #4

080010c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <LoopForever+0x16>)
	cmp	r2, r3
 80010c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010c8:	d3f9      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ca:	f003 fc9f 	bl	8004a0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ce:	f7ff fa15 	bl	80004fc <main>

080010d2 <LoopForever>:

LoopForever:
    b LoopForever
 80010d2:	e7fe      	b.n	80010d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010d4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80010d8:	08004afc 	.word	0x08004afc
	ldr	r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010e0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80010e4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80010e8:	200002a8 	.word	0x200002a8

080010ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_IRQHandler>

080010ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f91f 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f80e 	bl	8001120 <HAL_InitTick>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	e001      	b.n	8001114 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001110:	f7ff fc78 	bl	8000a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001114:	79fb      	ldrb	r3, [r7, #7]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_InitTick+0x6c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d023      	beq.n	800117c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_InitTick+0x70>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_InitTick+0x6c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f91d 	bl	800138a <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10f      	bne.n	8001176 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d809      	bhi.n	8001170 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115c:	2200      	movs	r2, #0
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f000 f8f5 	bl	8001352 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_InitTick+0x74>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e007      	b.n	8001180 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e004      	b.n	8001180 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e001      	b.n	8001180 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	20000000 	.word	0x20000000
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008
 80011bc:	200002a4 	.word	0x200002a4

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200002a4 	.word	0x200002a4

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120a:	4a04      	ldr	r2, [pc, #16]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	60d3      	str	r3, [r2, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f7ff ff8e 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff47 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001364:	f7ff ff5c 	bl	8001220 <__NVIC_GetPriorityGrouping>
 8001368:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ff8e 	bl	8001290 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff5d 	bl	800123c <__NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffb0 	bl	80012f8 <SysTick_Config>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e075      	b.n	80014a2 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d106      	bne.n	80013d0 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fb3e 	bl	8000a4c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013e6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <HAL_DCMI_Init+0x108>)
 8001402:	400b      	ands	r3, r1
 8001404:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6819      	ldr	r1, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800141a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001426:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001432:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800143e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800144a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b10      	cmp	r3, #16
 800145a:	d112      	bne.n	8001482 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7f1b      	ldrb	r3, [r3, #28]
 8001460:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7f5b      	ldrb	r3, [r3, #29]
 8001466:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001468:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7f9b      	ldrb	r3, [r3, #30]
 800146e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001470:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7fdb      	ldrb	r3, [r3, #31]
 8001478:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800147e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001480:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 021f 	orr.w	r2, r2, #31
 8001490:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	ffe0f007 	.word	0xffe0f007

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014be:	e166      	b.n	800178e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2101      	movs	r1, #1
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8158 	beq.w	8001788 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d00b      	beq.n	80014f8 <HAL_GPIO_Init+0x48>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d007      	beq.n	80014f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ec:	2b11      	cmp	r3, #17
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b12      	cmp	r3, #18
 80014f6:	d130      	bne.n	800155a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800152e:	2201      	movs	r2, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 0201 	and.w	r2, r3, #1
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0xea>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b12      	cmp	r3, #18
 8001598:	d123      	bne.n	80015e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	08da      	lsrs	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3208      	adds	r2, #8
 80015a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	08da      	lsrs	r2, r3, #3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3208      	adds	r2, #8
 80015dc:	6939      	ldr	r1, [r7, #16]
 80015de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0203 	and.w	r2, r3, #3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80b2 	beq.w	8001788 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001624:	4b61      	ldr	r3, [pc, #388]	; (80017ac <HAL_GPIO_Init+0x2fc>)
 8001626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001628:	4a60      	ldr	r2, [pc, #384]	; (80017ac <HAL_GPIO_Init+0x2fc>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6613      	str	r3, [r2, #96]	; 0x60
 8001630:	4b5e      	ldr	r3, [pc, #376]	; (80017ac <HAL_GPIO_Init+0x2fc>)
 8001632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800163c:	4a5c      	ldr	r2, [pc, #368]	; (80017b0 <HAL_GPIO_Init+0x300>)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001666:	d02b      	beq.n	80016c0 <HAL_GPIO_Init+0x210>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a52      	ldr	r2, [pc, #328]	; (80017b4 <HAL_GPIO_Init+0x304>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d025      	beq.n	80016bc <HAL_GPIO_Init+0x20c>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a51      	ldr	r2, [pc, #324]	; (80017b8 <HAL_GPIO_Init+0x308>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d01f      	beq.n	80016b8 <HAL_GPIO_Init+0x208>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a50      	ldr	r2, [pc, #320]	; (80017bc <HAL_GPIO_Init+0x30c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d019      	beq.n	80016b4 <HAL_GPIO_Init+0x204>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a4f      	ldr	r2, [pc, #316]	; (80017c0 <HAL_GPIO_Init+0x310>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d013      	beq.n	80016b0 <HAL_GPIO_Init+0x200>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a4e      	ldr	r2, [pc, #312]	; (80017c4 <HAL_GPIO_Init+0x314>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d00d      	beq.n	80016ac <HAL_GPIO_Init+0x1fc>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a4d      	ldr	r2, [pc, #308]	; (80017c8 <HAL_GPIO_Init+0x318>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d007      	beq.n	80016a8 <HAL_GPIO_Init+0x1f8>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <HAL_GPIO_Init+0x31c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d101      	bne.n	80016a4 <HAL_GPIO_Init+0x1f4>
 80016a0:	2307      	movs	r3, #7
 80016a2:	e00e      	b.n	80016c2 <HAL_GPIO_Init+0x212>
 80016a4:	2308      	movs	r3, #8
 80016a6:	e00c      	b.n	80016c2 <HAL_GPIO_Init+0x212>
 80016a8:	2306      	movs	r3, #6
 80016aa:	e00a      	b.n	80016c2 <HAL_GPIO_Init+0x212>
 80016ac:	2305      	movs	r3, #5
 80016ae:	e008      	b.n	80016c2 <HAL_GPIO_Init+0x212>
 80016b0:	2304      	movs	r3, #4
 80016b2:	e006      	b.n	80016c2 <HAL_GPIO_Init+0x212>
 80016b4:	2303      	movs	r3, #3
 80016b6:	e004      	b.n	80016c2 <HAL_GPIO_Init+0x212>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e002      	b.n	80016c2 <HAL_GPIO_Init+0x212>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_GPIO_Init+0x212>
 80016c0:	2300      	movs	r3, #0
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	f002 0203 	and.w	r2, r2, #3
 80016c8:	0092      	lsls	r2, r2, #2
 80016ca:	4093      	lsls	r3, r2
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016d2:	4937      	ldr	r1, [pc, #220]	; (80017b0 <HAL_GPIO_Init+0x300>)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3302      	adds	r3, #2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016e0:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <HAL_GPIO_Init+0x320>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001704:	4a32      	ldr	r2, [pc, #200]	; (80017d0 <HAL_GPIO_Init+0x320>)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_GPIO_Init+0x320>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800172e:	4a28      	ldr	r2, [pc, #160]	; (80017d0 <HAL_GPIO_Init+0x320>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001734:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <HAL_GPIO_Init+0x320>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001758:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <HAL_GPIO_Init+0x320>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <HAL_GPIO_Init+0x320>)
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001782:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <HAL_GPIO_Init+0x320>)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f ae91 	bne.w	80014c0 <HAL_GPIO_Init+0x10>
  }
}
 800179e:	bf00      	nop
 80017a0:	371c      	adds	r7, #28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000
 80017b4:	48000400 	.word	0x48000400
 80017b8:	48000800 	.word	0x48000800
 80017bc:	48000c00 	.word	0x48000c00
 80017c0:	48001000 	.word	0x48001000
 80017c4:	48001400 	.word	0x48001400
 80017c8:	48001800 	.word	0x48001800
 80017cc:	48001c00 	.word	0x48001c00
 80017d0:	40010400 	.word	0x40010400

080017d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e081      	b.n	80018ea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d106      	bne.n	8001800 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fa04 	bl	8000c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2224      	movs	r2, #36	; 0x24
 8001804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0201 	bic.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001824:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001834:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d107      	bne.n	800184e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	e006      	b.n	800185c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800185a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d104      	bne.n	800186e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800186c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800187c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001880:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001890:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	ea42 0103 	orr.w	r1, r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	021a      	lsls	r2, r3, #8
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69d9      	ldr	r1, [r3, #28]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1a      	ldr	r2, [r3, #32]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2220      	movs	r2, #32
 80018d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b20      	cmp	r3, #32
 8001906:	d138      	bne.n	800197a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001912:	2302      	movs	r3, #2
 8001914:	e032      	b.n	800197c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2224      	movs	r2, #36	; 0x24
 8001922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0201 	bic.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001944:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6819      	ldr	r1, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0201 	orr.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800197a:	2302      	movs	r3, #2
  }
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b20      	cmp	r3, #32
 800199c:	d139      	bne.n	8001a12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e033      	b.n	8001a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2224      	movs	r2, #36	; 0x24
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0201 	orr.w	r2, r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a12:	2302      	movs	r3, #2
  }
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff fbc8 	bl	80011c0 <HAL_GetTick>
 8001a30:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e092      	b.n	8001b64 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f040 808b 	bne.w	8001b64 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff f920 	bl	8000c94 <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8001a54:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f88b 	bl	8001b74 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <HAL_OSPI_Init+0x150>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68d1      	ldr	r1, [r2, #12]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6912      	ldr	r2, [r2, #16]
 8001a70:	3a01      	subs	r2, #1
 8001a72:	0412      	lsls	r2, r2, #16
 8001a74:	4311      	orrs	r1, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6952      	ldr	r2, [r2, #20]
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	0212      	lsls	r2, r2, #8
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a84:	4311      	orrs	r1, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	69d2      	ldr	r2, [r2, #28]
 8001a8a:	4311      	orrs	r1, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6093      	str	r3, [r2, #8]
#if   defined (OCTOSPI_DCR3_MAXTRAN)
      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0412      	lsls	r2, r2, #16
 8001a9e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	021a      	lsls	r2, r3, #8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fbb8 	bl	800223c <OSPI_WaitFlagStateUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d146      	bne.n	8001b64 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	1e5a      	subs	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b0c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d107      	bne.n	8001b4c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0202 	orr.w	r2, r2, #2
 8001b4a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b54:	d103      	bne.n	8001b5e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	645a      	str	r2, [r3, #68]	; 0x44
 8001b5c:	e002      	b.n	8001b64 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2202      	movs	r2, #2
 8001b62:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	f8e0f8f4 	.word	0xf8e0f8f4

08001b74 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b092      	sub	sp, #72	; 0x48
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <HAL_OSPIM_Config+0x40>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d105      	bne.n	8001bc2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001bc0:	e004      	b.n	8001bcc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001bd2:	e01f      	b.n	8001c14 <HAL_OSPIM_Config+0x80>
 8001bd4:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8001bd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bdc:	3301      	adds	r3, #1
 8001bde:	b2d8      	uxtb	r0, r3
 8001be0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001be4:	f107 0114 	add.w	r1, r7, #20
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f000 fb5a 	bl	80022ac <OSPIM_GetConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2208      	movs	r2, #8
 8001c08:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8001c0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d9dd      	bls.n	8001bd8 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8001c1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 82fe 	bne.w	8002222 <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8001c26:	4bcd      	ldr	r3, [pc, #820]	; (8001f5c <HAL_OSPIM_Config+0x3c8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8001c32:	4bca      	ldr	r3, [pc, #808]	; (8001f5c <HAL_OSPIM_Config+0x3c8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4ac9      	ldr	r2, [pc, #804]	; (8001f5c <HAL_OSPIM_Config+0x3c8>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8001c3e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8001c4a:	4bc5      	ldr	r3, [pc, #788]	; (8001f60 <HAL_OSPIM_Config+0x3cc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8001c56:	4bc2      	ldr	r3, [pc, #776]	; (8001f60 <HAL_OSPIM_Config+0x3cc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4ac1      	ldr	r2, [pc, #772]	; (8001f60 <HAL_OSPIM_Config+0x3cc>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8001c62:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c66:	f043 0302 	orr.w	r3, r3, #2
 8001c6a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8001c6e:	49bd      	ldr	r1, [pc, #756]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001c7e:	4413      	add	r3, r2
 8001c80:	3b2c      	subs	r3, #44	; 0x2c
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	48b5      	ldr	r0, [pc, #724]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001c8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b2c      	subs	r3, #44	; 0x2c
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4403      	add	r3, r0
 8001cac:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8001cae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3b34      	subs	r3, #52	; 0x34
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80ac 	beq.w	8001e20 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8001cc8:	49a6      	ldr	r1, [pc, #664]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b34      	subs	r3, #52	; 0x34
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	6859      	ldr	r1, [r3, #4]
 8001ce6:	489f      	ldr	r0, [pc, #636]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001ce8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b34      	subs	r3, #52	; 0x34
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	f021 0201 	bic.w	r2, r1, #1
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4403      	add	r3, r0
 8001d06:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8001d08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001d16:	4413      	add	r3, r2
 8001d18:	3b30      	subs	r3, #48	; 0x30
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01f      	beq.n	8001d60 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8001d20:	4990      	ldr	r1, [pc, #576]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001d30:	4413      	add	r3, r2
 8001d32:	3b30      	subs	r3, #48	; 0x30
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	4889      	ldr	r0, [pc, #548]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b30      	subs	r3, #48	; 0x30
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	f021 0210 	bic.w	r2, r1, #16
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4403      	add	r3, r0
 8001d5e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b28      	subs	r3, #40	; 0x28
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d023      	beq.n	8001dc0 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8001d78:	497a      	ldr	r1, [pc, #488]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001d7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b28      	subs	r3, #40	; 0x28
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	6859      	ldr	r1, [r3, #4]
 8001d9a:	4872      	ldr	r0, [pc, #456]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001d9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001daa:	4413      	add	r3, r2
 8001dac:	3b28      	subs	r3, #40	; 0x28
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4403      	add	r3, r0
 8001dbe:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001dc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b24      	subs	r3, #36	; 0x24
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d023      	beq.n	8001e20 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8001dd8:	4962      	ldr	r1, [pc, #392]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001dda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001de8:	4413      	add	r3, r2
 8001dea:	3b24      	subs	r3, #36	; 0x24
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	6859      	ldr	r1, [r3, #4]
 8001dfa:	485a      	ldr	r0, [pc, #360]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001dfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b24      	subs	r3, #36	; 0x24
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4403      	add	r3, r0
 8001e1e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	6819      	ldr	r1, [r3, #0]
 8001e24:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e34:	4413      	add	r3, r2
 8001e36:	3b34      	subs	r3, #52	; 0x34
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4299      	cmp	r1, r3
 8001e3c:	d03c      	beq.n	8001eb8 <HAL_OSPIM_Config+0x324>
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	6859      	ldr	r1, [r3, #4]
 8001e42:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e52:	4413      	add	r3, r2
 8001e54:	3b30      	subs	r3, #48	; 0x30
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4299      	cmp	r1, r3
 8001e5a:	d02d      	beq.n	8001eb8 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	6899      	ldr	r1, [r3, #8]
 8001e60:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e70:	4413      	add	r3, r2
 8001e72:	3b2c      	subs	r3, #44	; 0x2c
 8001e74:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001e76:	4299      	cmp	r1, r3
 8001e78:	d01e      	beq.n	8001eb8 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	68d9      	ldr	r1, [r3, #12]
 8001e7e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b28      	subs	r3, #40	; 0x28
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4299      	cmp	r1, r3
 8001e96:	d00f      	beq.n	8001eb8 <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	6919      	ldr	r1, [r3, #16]
 8001e9c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001eac:	4413      	add	r3, r2
 8001eae:	3b24      	subs	r3, #36	; 0x24
 8001eb0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001eb2:	4299      	cmp	r1, r3
 8001eb4:	f040 80e0 	bne.w	8002078 <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8001eb8:	492a      	ldr	r1, [pc, #168]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001eba:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b34      	subs	r3, #52	; 0x34
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	4822      	ldr	r0, [pc, #136]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001eda:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001eea:	4413      	add	r3, r2
 8001eec:	3b34      	subs	r3, #52	; 0x34
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	f021 0201 	bic.w	r2, r1, #1
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4403      	add	r3, r0
 8001efa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8001efc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b30      	subs	r3, #48	; 0x30
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d028      	beq.n	8001f68 <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8001f16:	4913      	ldr	r1, [pc, #76]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001f18:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f28:	4413      	add	r3, r2
 8001f2a:	3b30      	subs	r3, #48	; 0x30
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	6859      	ldr	r1, [r3, #4]
 8001f36:	480b      	ldr	r0, [pc, #44]	; (8001f64 <HAL_OSPIM_Config+0x3d0>)
 8001f38:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f48:	4413      	add	r3, r2
 8001f4a:	3b30      	subs	r3, #48	; 0x30
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f021 0210 	bic.w	r2, r1, #16
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4403      	add	r3, r0
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	e005      	b.n	8001f68 <HAL_OSPIM_Config+0x3d4>
 8001f5c:	a0001000 	.word	0xa0001000
 8001f60:	a0001400 	.word	0xa0001400
 8001f64:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8001f68:	49b1      	ldr	r1, [pc, #708]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 8001f6a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b2c      	subs	r3, #44	; 0x2c
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	48a9      	ldr	r0, [pc, #676]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 8001f8a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b2c      	subs	r3, #44	; 0x2c
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4403      	add	r3, r0
 8001faa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001fac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3b28      	subs	r3, #40	; 0x28
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d025      	beq.n	8002012 <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8001fc6:	499a      	ldr	r1, [pc, #616]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 8001fc8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b28      	subs	r3, #40	; 0x28
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	6859      	ldr	r1, [r3, #4]
 8001fea:	4891      	ldr	r0, [pc, #580]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 8001fec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3b28      	subs	r3, #40	; 0x28
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3b01      	subs	r3, #1
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4403      	add	r3, r0
 8002010:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002012:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002022:	4413      	add	r3, r2
 8002024:	3b24      	subs	r3, #36	; 0x24
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d025      	beq.n	8002078 <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800202c:	4980      	ldr	r1, [pc, #512]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 800202e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800203e:	4413      	add	r3, r2
 8002040:	3b24      	subs	r3, #36	; 0x24
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3b01      	subs	r3, #1
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	4877      	ldr	r0, [pc, #476]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 8002052:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002062:	4413      	add	r3, r2
 8002064:	3b24      	subs	r3, #36	; 0x24
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3b01      	subs	r3, #1
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4403      	add	r3, r0
 8002076:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 8002078:	4a6d      	ldr	r2, [pc, #436]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	3b01      	subs	r3, #1
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800208a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800208c:	025b      	lsls	r3, r3, #9
 800208e:	431a      	orrs	r2, r3
 8002090:	4967      	ldr	r1, [pc, #412]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	3b01      	subs	r3, #1
 8002098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 80020a2:	4a63      	ldr	r2, [pc, #396]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f023 0203 	bic.w	r2, r3, #3
 80020b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	431a      	orrs	r2, r3
 80020ba:	495d      	ldr	r1, [pc, #372]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d014      	beq.n	80020fe <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 80020d4:	4a56      	ldr	r2, [pc, #344]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e8:	015b      	lsls	r3, r3, #5
 80020ea:	431a      	orrs	r2, r3
 80020ec:	4950      	ldr	r1, [pc, #320]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	f042 0210 	orr.w	r2, r2, #16
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d019      	beq.n	800213e <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 800210a:	4a49      	ldr	r2, [pc, #292]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	3b01      	subs	r3, #1
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002122:	049b      	lsls	r3, r3, #18
 8002124:	431a      	orrs	r2, r3
 8002126:	4942      	ldr	r1, [pc, #264]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	3b01      	subs	r3, #1
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	e01c      	b.n	8002178 <HAL_OSPIM_Config+0x5e4>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d018      	beq.n	8002178 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8002146:	4a3a      	ldr	r2, [pc, #232]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	3b01      	subs	r3, #1
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800215c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215e:	069b      	lsls	r3, r3, #26
 8002160:	431a      	orrs	r2, r3
 8002162:	4933      	ldr	r1, [pc, #204]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	3b01      	subs	r3, #1
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d019      	beq.n	80021b8 <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8002184:	4a2a      	ldr	r2, [pc, #168]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	3b01      	subs	r3, #1
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800219a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800219c:	049b      	lsls	r3, r3, #18
 800219e:	431a      	orrs	r2, r3
 80021a0:	4923      	ldr	r1, [pc, #140]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	e01c      	b.n	80021f2 <HAL_OSPIM_Config+0x65e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d018      	beq.n	80021f2 <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 80021c0:	4a1b      	ldr	r2, [pc, #108]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80021d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d8:	069b      	lsls	r3, r3, #26
 80021da:	431a      	orrs	r2, r3
 80021dc:	4914      	ldr	r1, [pc, #80]	; (8002230 <HAL_OSPIM_Config+0x69c>)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80021f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_OSPIM_Config+0x6a0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <HAL_OSPIM_Config+0x6a0>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800220a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <HAL_OSPIM_Config+0x6a4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a07      	ldr	r2, [pc, #28]	; (8002238 <HAL_OSPIM_Config+0x6a4>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002222:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8002226:	4618      	mov	r0, r3
 8002228:	3748      	adds	r7, #72	; 0x48
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	50061c00 	.word	0x50061c00
 8002234:	a0001000 	.word	0xa0001000
 8002238:	a0001400 	.word	0xa0001400

0800223c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800224c:	e01a      	b.n	8002284 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002254:	d016      	beq.n	8002284 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002256:	f7fe ffb3 	bl	80011c0 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	429a      	cmp	r2, r3
 8002264:	d302      	bcc.n	800226c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002272:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e00e      	b.n	80022a2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6a1a      	ldr	r2, [r3, #32]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	bf14      	ite	ne
 8002292:	2301      	movne	r3, #1
 8002294:	2300      	moveq	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	429a      	cmp	r2, r3
 800229e:	d1d6      	bne.n	800224e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <OSPIM_GetConfig+0x26>
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d802      	bhi.n	80022d2 <OSPIM_GetConfig+0x26>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	75fb      	strb	r3, [r7, #23]
 80022d6:	e08e      	b.n	80023f6 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2200      	movs	r2, #0
 80022e2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2200      	movs	r2, #0
 80022ee:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d101      	bne.n	8002300 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 80022fc:	4b41      	ldr	r3, [pc, #260]	; (8002404 <OSPIM_GetConfig+0x158>)
 80022fe:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e074      	b.n	80023f0 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8002306:	4a40      	ldr	r2, [pc, #256]	; (8002408 <OSPIM_GetConfig+0x15c>)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4053      	eors	r3, r2
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d103      	bne.n	8002332 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4053      	eors	r3, r2
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	d103      	bne.n	8002352 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4053      	eors	r3, r2
 8002362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002366:	2b00      	cmp	r3, #0
 8002368:	d103      	bne.n	8002372 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d018      	beq.n	80023ae <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4053      	eors	r3, r2
 8002382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d111      	bne.n	80023ae <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d106      	bne.n	80023a2 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3301      	adds	r3, #1
 8002398:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	e005      	b.n	80023ae <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	3301      	adds	r3, #1
 80023a6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d018      	beq.n	80023ea <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4053      	eors	r3, r2
 80023be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d111      	bne.n	80023ea <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d106      	bne.n	80023de <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3301      	adds	r3, #1
 80023d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	611a      	str	r2, [r3, #16]
 80023dc:	e005      	b.n	80023ea <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3301      	adds	r3, #1
 80023e2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3301      	adds	r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d987      	bls.n	8002306 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80023f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	371c      	adds	r7, #28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	04040222 	.word	0x04040222
 8002408:	50061c00 	.word	0x50061c00

0800240c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241c:	d102      	bne.n	8002424 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800241e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002422:	e00b      	b.n	800243c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002432:	d102      	bne.n	800243a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002438:	e000      	b.n	800243c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800243a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40007000 	.word	0x40007000

0800244c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d141      	bne.n	80024de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800245a:	4b4b      	ldr	r3, [pc, #300]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002466:	d131      	bne.n	80024cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002468:	4b47      	ldr	r3, [pc, #284]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800246e:	4a46      	ldr	r2, [pc, #280]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002478:	4b43      	ldr	r3, [pc, #268]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002480:	4a41      	ldr	r2, [pc, #260]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002486:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002488:	4b40      	ldr	r3, [pc, #256]	; (800258c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2232      	movs	r2, #50	; 0x32
 800248e:	fb02 f303 	mul.w	r3, r2, r3
 8002492:	4a3f      	ldr	r2, [pc, #252]	; (8002590 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	0c9b      	lsrs	r3, r3, #18
 800249a:	3301      	adds	r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800249e:	e002      	b.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a6:	4b38      	ldr	r3, [pc, #224]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b2:	d102      	bne.n	80024ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f2      	bne.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ba:	4b33      	ldr	r3, [pc, #204]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c6:	d158      	bne.n	800257a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e057      	b.n	800257c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024cc:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024d2:	4a2d      	ldr	r2, [pc, #180]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80024dc:	e04d      	b.n	800257a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e4:	d141      	bne.n	800256a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80024e6:	4b28      	ldr	r3, [pc, #160]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f2:	d131      	bne.n	8002558 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024f4:	4b24      	ldr	r3, [pc, #144]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024fa:	4a23      	ldr	r2, [pc, #140]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002500:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800250c:	4a1e      	ldr	r2, [pc, #120]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002512:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2232      	movs	r2, #50	; 0x32
 800251a:	fb02 f303 	mul.w	r3, r2, r3
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	0c9b      	lsrs	r3, r3, #18
 8002526:	3301      	adds	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800252a:	e002      	b.n	8002532 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3b01      	subs	r3, #1
 8002530:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253e:	d102      	bne.n	8002546 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f2      	bne.n	800252c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002552:	d112      	bne.n	800257a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e011      	b.n	800257c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002564:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002568:	e007      	b.n	800257a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002574:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002578:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40007000 	.word	0x40007000
 800258c:	20000000 	.word	0x20000000
 8002590:	431bde83 	.word	0x431bde83

08002594 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800259e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a2:	6053      	str	r3, [r2, #4]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40007000 	.word	0x40007000

080025b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	f000 bc16 	b.w	8002df4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c8:	4ba0      	ldr	r3, [pc, #640]	; (800284c <HAL_RCC_OscConfig+0x298>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025d2:	4b9e      	ldr	r3, [pc, #632]	; (800284c <HAL_RCC_OscConfig+0x298>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80e4 	beq.w	80027b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_RCC_OscConfig+0x4c>
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b0c      	cmp	r3, #12
 80025f4:	f040 808b 	bne.w	800270e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	f040 8087 	bne.w	800270e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002600:	4b92      	ldr	r3, [pc, #584]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_OscConfig+0x64>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e3ed      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1a      	ldr	r2, [r3, #32]
 800261c:	4b8b      	ldr	r3, [pc, #556]	; (800284c <HAL_RCC_OscConfig+0x298>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d004      	beq.n	8002632 <HAL_RCC_OscConfig+0x7e>
 8002628:	4b88      	ldr	r3, [pc, #544]	; (800284c <HAL_RCC_OscConfig+0x298>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002630:	e005      	b.n	800263e <HAL_RCC_OscConfig+0x8a>
 8002632:	4b86      	ldr	r3, [pc, #536]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800263e:	4293      	cmp	r3, r2
 8002640:	d223      	bcs.n	800268a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fdc8 	bl	80031dc <RCC_SetFlashLatencyFromMSIRange>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e3ce      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002656:	4b7d      	ldr	r3, [pc, #500]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a7c      	ldr	r2, [pc, #496]	; (800284c <HAL_RCC_OscConfig+0x298>)
 800265c:	f043 0308 	orr.w	r3, r3, #8
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b7a      	ldr	r3, [pc, #488]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4977      	ldr	r1, [pc, #476]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002670:	4313      	orrs	r3, r2
 8002672:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002674:	4b75      	ldr	r3, [pc, #468]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	4972      	ldr	r1, [pc, #456]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
 8002688:	e025      	b.n	80026d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800268a:	4b70      	ldr	r3, [pc, #448]	; (800284c <HAL_RCC_OscConfig+0x298>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a6f      	ldr	r2, [pc, #444]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002690:	f043 0308 	orr.w	r3, r3, #8
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b6d      	ldr	r3, [pc, #436]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	496a      	ldr	r1, [pc, #424]	; (800284c <HAL_RCC_OscConfig+0x298>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a8:	4b68      	ldr	r3, [pc, #416]	; (800284c <HAL_RCC_OscConfig+0x298>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	4965      	ldr	r1, [pc, #404]	; (800284c <HAL_RCC_OscConfig+0x298>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fd88 	bl	80031dc <RCC_SetFlashLatencyFromMSIRange>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e38e      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026d6:	f000 fcbf 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 80026da:	4601      	mov	r1, r0
 80026dc:	4b5b      	ldr	r3, [pc, #364]	; (800284c <HAL_RCC_OscConfig+0x298>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	4a5a      	ldr	r2, [pc, #360]	; (8002850 <HAL_RCC_OscConfig+0x29c>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	fa21 f303 	lsr.w	r3, r1, r3
 80026f2:	4a58      	ldr	r2, [pc, #352]	; (8002854 <HAL_RCC_OscConfig+0x2a0>)
 80026f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026f6:	4b58      	ldr	r3, [pc, #352]	; (8002858 <HAL_RCC_OscConfig+0x2a4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fd10 	bl	8001120 <HAL_InitTick>
 8002700:	4603      	mov	r3, r0
 8002702:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d052      	beq.n	80027b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	e372      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d032      	beq.n	800277c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002716:	4b4d      	ldr	r3, [pc, #308]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a4c      	ldr	r2, [pc, #304]	; (800284c <HAL_RCC_OscConfig+0x298>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002722:	f7fe fd4d 	bl	80011c0 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800272a:	f7fe fd49 	bl	80011c0 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e35b      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800273c:	4b43      	ldr	r3, [pc, #268]	; (800284c <HAL_RCC_OscConfig+0x298>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002748:	4b40      	ldr	r3, [pc, #256]	; (800284c <HAL_RCC_OscConfig+0x298>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3f      	ldr	r2, [pc, #252]	; (800284c <HAL_RCC_OscConfig+0x298>)
 800274e:	f043 0308 	orr.w	r3, r3, #8
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	493a      	ldr	r1, [pc, #232]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	4935      	ldr	r1, [pc, #212]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
 800277a:	e01a      	b.n	80027b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800277c:	4b33      	ldr	r3, [pc, #204]	; (800284c <HAL_RCC_OscConfig+0x298>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a32      	ldr	r2, [pc, #200]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002788:	f7fe fd1a 	bl	80011c0 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002790:	f7fe fd16 	bl	80011c0 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e328      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_RCC_OscConfig+0x298>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x1dc>
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d073      	beq.n	80028a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_OscConfig+0x21c>
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	d10e      	bne.n	80027e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d10b      	bne.n	80027e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	4b1e      	ldr	r3, [pc, #120]	; (800284c <HAL_RCC_OscConfig+0x298>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d063      	beq.n	80028a4 <HAL_RCC_OscConfig+0x2f0>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d15f      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e305      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x24c>
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_RCC_OscConfig+0x298>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a15      	ldr	r2, [pc, #84]	; (800284c <HAL_RCC_OscConfig+0x298>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0x288>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x270>
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_RCC_OscConfig+0x298>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a0f      	ldr	r2, [pc, #60]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a0c      	ldr	r2, [pc, #48]	; (800284c <HAL_RCC_OscConfig+0x298>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0x288>
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a08      	ldr	r2, [pc, #32]	; (800284c <HAL_RCC_OscConfig+0x298>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a05      	ldr	r2, [pc, #20]	; (800284c <HAL_RCC_OscConfig+0x298>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe fcbc 	bl	80011c0 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800284a:	e010      	b.n	800286e <HAL_RCC_OscConfig+0x2ba>
 800284c:	40021000 	.word	0x40021000
 8002850:	08004a8c 	.word	0x08004a8c
 8002854:	20000000 	.word	0x20000000
 8002858:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800285c:	f7fe fcb0 	bl	80011c0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e2c2      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800286e:	4baf      	ldr	r3, [pc, #700]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x2a8>
 800287a:	e014      	b.n	80028a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fca0 	bl	80011c0 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7fe fc9c 	bl	80011c0 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e2ae      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002896:	4ba5      	ldr	r3, [pc, #660]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x2d0>
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d060      	beq.n	8002974 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_OscConfig+0x310>
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d119      	bne.n	80028f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d116      	bne.n	80028f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c4:	4b99      	ldr	r3, [pc, #612]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_OscConfig+0x328>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e28b      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b93      	ldr	r3, [pc, #588]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	4990      	ldr	r1, [pc, #576]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f0:	e040      	b.n	8002974 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d023      	beq.n	8002942 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fa:	4b8c      	ldr	r3, [pc, #560]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a8b      	ldr	r2, [pc, #556]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002906:	f7fe fc5b 	bl	80011c0 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800290e:	f7fe fc57 	bl	80011c0 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e269      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002920:	4b82      	ldr	r3, [pc, #520]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b7f      	ldr	r3, [pc, #508]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	497c      	ldr	r1, [pc, #496]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
 8002940:	e018      	b.n	8002974 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002942:	4b7a      	ldr	r3, [pc, #488]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a79      	ldr	r2, [pc, #484]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800294c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe fc37 	bl	80011c0 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002956:	f7fe fc33 	bl	80011c0 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e245      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002968:	4b70      	ldr	r3, [pc, #448]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d03c      	beq.n	80029fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01c      	beq.n	80029c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002988:	4b68      	ldr	r3, [pc, #416]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 800298a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800298e:	4a67      	ldr	r2, [pc, #412]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7fe fc12 	bl	80011c0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a0:	f7fe fc0e 	bl	80011c0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e220      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b2:	4b5e      	ldr	r3, [pc, #376]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 80029b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0ef      	beq.n	80029a0 <HAL_RCC_OscConfig+0x3ec>
 80029c0:	e01b      	b.n	80029fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c2:	4b5a      	ldr	r3, [pc, #360]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 80029c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c8:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7fe fbf5 	bl	80011c0 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029da:	f7fe fbf1 	bl	80011c0 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e203      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ec:	4b4f      	ldr	r3, [pc, #316]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 80029ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1ef      	bne.n	80029da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80a6 	beq.w	8002b54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a0c:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10d      	bne.n	8002a34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a18:	4b44      	ldr	r3, [pc, #272]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	4a43      	ldr	r2, [pc, #268]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a22:	6593      	str	r3, [r2, #88]	; 0x58
 8002a24:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a30:	2301      	movs	r3, #1
 8002a32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a34:	4b3e      	ldr	r3, [pc, #248]	; (8002b30 <HAL_RCC_OscConfig+0x57c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d118      	bne.n	8002a72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a40:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <HAL_RCC_OscConfig+0x57c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a3a      	ldr	r2, [pc, #232]	; (8002b30 <HAL_RCC_OscConfig+0x57c>)
 8002a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fbb8 	bl	80011c0 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a54:	f7fe fbb4 	bl	80011c0 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1c6      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a66:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <HAL_RCC_OscConfig+0x57c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d108      	bne.n	8002a8c <HAL_RCC_OscConfig+0x4d8>
 8002a7a:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	4a2a      	ldr	r2, [pc, #168]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a8a:	e024      	b.n	8002ad6 <HAL_RCC_OscConfig+0x522>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b05      	cmp	r3, #5
 8002a92:	d110      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x502>
 8002a94:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	4a24      	ldr	r2, [pc, #144]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aa4:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aaa:	4a20      	ldr	r2, [pc, #128]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab4:	e00f      	b.n	8002ad6 <HAL_RCC_OscConfig+0x522>
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002abe:	f023 0301 	bic.w	r3, r3, #1
 8002ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac6:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002acc:	4a17      	ldr	r2, [pc, #92]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002ace:	f023 0304 	bic.w	r3, r3, #4
 8002ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d016      	beq.n	8002b0c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fe fb6f 	bl	80011c0 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7fe fb6b 	bl	80011c0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e17b      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_OscConfig+0x578>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ed      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x532>
 8002b0a:	e01a      	b.n	8002b42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0c:	f7fe fb58 	bl	80011c0 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b12:	e00f      	b.n	8002b34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7fe fb54 	bl	80011c0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d906      	bls.n	8002b34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e164      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b34:	4ba8      	ldr	r3, [pc, #672]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e8      	bne.n	8002b14 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b42:	7ffb      	ldrb	r3, [r7, #31]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b48:	4ba3      	ldr	r3, [pc, #652]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	4aa2      	ldr	r2, [pc, #648]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d03c      	beq.n	8002bda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01c      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b68:	4b9b      	ldr	r3, [pc, #620]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b6e:	4a9a      	ldr	r2, [pc, #616]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe fb22 	bl	80011c0 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b80:	f7fe fb1e 	bl	80011c0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e130      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b92:	4b91      	ldr	r3, [pc, #580]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ef      	beq.n	8002b80 <HAL_RCC_OscConfig+0x5cc>
 8002ba0:	e01b      	b.n	8002bda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ba2:	4b8d      	ldr	r3, [pc, #564]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ba8:	4a8b      	ldr	r2, [pc, #556]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fb05 	bl	80011c0 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bba:	f7fe fb01 	bl	80011c0 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e113      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bcc:	4b82      	ldr	r3, [pc, #520]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002bce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1ef      	bne.n	8002bba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8107 	beq.w	8002df2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	f040 80cb 	bne.w	8002d84 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bee:	4b7a      	ldr	r3, [pc, #488]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f003 0203 	and.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d12c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d123      	bne.n	8002c5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d11b      	bne.n	8002c5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d113      	bne.n	8002c5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	3b01      	subs	r3, #1
 8002c42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d109      	bne.n	8002c5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	085b      	lsrs	r3, r3, #1
 8002c54:	3b01      	subs	r3, #1
 8002c56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d06d      	beq.n	8002d38 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d068      	beq.n	8002d34 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c62:	4b5d      	ldr	r3, [pc, #372]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d105      	bne.n	8002c7a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c6e:	4b5a      	ldr	r3, [pc, #360]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0ba      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b56      	ldr	r3, [pc, #344]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a55      	ldr	r2, [pc, #340]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c8a:	f7fe fa99 	bl	80011c0 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c92:	f7fe fa95 	bl	80011c0 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e0a7      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca4:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f0      	bne.n	8002c92 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb0:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	4b49      	ldr	r3, [pc, #292]	; (8002ddc <HAL_RCC_OscConfig+0x828>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	4311      	orrs	r1, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cd2:	0852      	lsrs	r2, r2, #1
 8002cd4:	3a01      	subs	r2, #1
 8002cd6:	0552      	lsls	r2, r2, #21
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cde:	0852      	lsrs	r2, r2, #1
 8002ce0:	3a01      	subs	r2, #1
 8002ce2:	0652      	lsls	r2, r2, #25
 8002ce4:	4311      	orrs	r1, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cea:	06d2      	lsls	r2, r2, #27
 8002cec:	430a      	orrs	r2, r1
 8002cee:	493a      	ldr	r1, [pc, #232]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cf4:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a37      	ldr	r2, [pc, #220]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d00:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a34      	ldr	r2, [pc, #208]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d0c:	f7fe fa58 	bl	80011c0 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d14:	f7fe fa54 	bl	80011c0 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e066      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d26:	4b2c      	ldr	r3, [pc, #176]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d32:	e05e      	b.n	8002df2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e05d      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d156      	bne.n	8002df2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d5c:	f7fe fa30 	bl	80011c0 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe fa2c 	bl	80011c0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e03e      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x7b0>
 8002d82:	e036      	b.n	8002df2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b0c      	cmp	r3, #12
 8002d88:	d031      	beq.n	8002dee <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8a:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002d90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d94:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4a0c      	ldr	r2, [pc, #48]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002da8:	f023 0303 	bic.w	r3, r3, #3
 8002dac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <HAL_RCC_OscConfig+0x824>)
 8002db4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dbc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7fe f9ff 	bl	80011c0 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc4:	e00c      	b.n	8002de0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fe f9fb 	bl	80011c0 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d905      	bls.n	8002de0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e00d      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_RCC_OscConfig+0x848>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ec      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x812>
 8002dec:	e001      	b.n	8002df2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000

08002e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e10f      	b.n	8003038 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b89      	ldr	r3, [pc, #548]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d910      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b86      	ldr	r3, [pc, #536]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 020f 	bic.w	r2, r3, #15
 8002e2e:	4984      	ldr	r1, [pc, #528]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b82      	ldr	r3, [pc, #520]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0f7      	b.n	8003038 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 8089 	beq.w	8002f68 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d133      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5e:	4b79      	ldr	r3, [pc, #484]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e0e4      	b.n	8003038 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002e6e:	f000 fa0f 	bl	8003290 <RCC_GetSysClockFreqFromPLLSource>
 8002e72:	4602      	mov	r2, r0
 8002e74:	4b74      	ldr	r3, [pc, #464]	; (8003048 <HAL_RCC_ClockConfig+0x248>)
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d955      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e7a:	4b72      	ldr	r3, [pc, #456]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e86:	4b6f      	ldr	r3, [pc, #444]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e8e:	4a6d      	ldr	r2, [pc, #436]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e044      	b.n	8002f26 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d03e      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x126>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d13a      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eb0:	4b64      	ldr	r3, [pc, #400]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb8:	4a62      	ldr	r2, [pc, #392]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	e02f      	b.n	8002f26 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ece:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d115      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0ac      	b.n	8003038 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee6:	4b57      	ldr	r3, [pc, #348]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0a0      	b.n	8003038 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef6:	4b53      	ldr	r3, [pc, #332]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e098      	b.n	8003038 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002f06:	f000 f8a7 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	4b4e      	ldr	r3, [pc, #312]	; (8003048 <HAL_RCC_ClockConfig+0x248>)
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d909      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f12:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f1a:	4a4a      	ldr	r2, [pc, #296]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4944      	ldr	r1, [pc, #272]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f38:	f7fe f942 	bl	80011c0 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7fe f93e 	bl	80011c0 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e070      	b.n	8003038 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 020c 	and.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1eb      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d009      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f74:	4b33      	ldr	r3, [pc, #204]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4930      	ldr	r1, [pc, #192]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b80      	cmp	r3, #128	; 0x80
 8002f8c:	d105      	bne.n	8002f9a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f8e:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	4a2c      	ldr	r2, [pc, #176]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f98:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9a:	4b29      	ldr	r3, [pc, #164]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d210      	bcs.n	8002fca <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 020f 	bic.w	r2, r3, #15
 8002fb0:	4923      	ldr	r1, [pc, #140]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb8:	4b21      	ldr	r3, [pc, #132]	; (8003040 <HAL_RCC_ClockConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e036      	b.n	8003038 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	4918      	ldr	r1, [pc, #96]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d009      	beq.n	8003008 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4910      	ldr	r1, [pc, #64]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003008:	f000 f826 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 800300c:	4601      	mov	r1, r0
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <HAL_RCC_ClockConfig+0x244>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	4a0c      	ldr	r2, [pc, #48]	; (800304c <HAL_RCC_ClockConfig+0x24c>)
 800301a:	5cd3      	ldrb	r3, [r2, r3]
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	fa21 f303 	lsr.w	r3, r1, r3
 8003024:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <HAL_RCC_ClockConfig+0x250>)
 8003026:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_RCC_ClockConfig+0x254>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe f877 	bl	8001120 <HAL_InitTick>
 8003032:	4603      	mov	r3, r0
 8003034:	73fb      	strb	r3, [r7, #15]

  return status;
 8003036:	7bfb      	ldrb	r3, [r7, #15]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40022000 	.word	0x40022000
 8003044:	40021000 	.word	0x40021000
 8003048:	04c4b400 	.word	0x04c4b400
 800304c:	08004a8c 	.word	0x08004a8c
 8003050:	20000000 	.word	0x20000000
 8003054:	20000004 	.word	0x20000004

08003058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003058:	b480      	push	{r7}
 800305a:	b089      	sub	sp, #36	; 0x24
 800305c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003066:	4b3d      	ldr	r3, [pc, #244]	; (800315c <HAL_RCC_GetSysClockFreq+0x104>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003070:	4b3a      	ldr	r3, [pc, #232]	; (800315c <HAL_RCC_GetSysClockFreq+0x104>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x34>
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	2b0c      	cmp	r3, #12
 8003084:	d121      	bne.n	80030ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d11e      	bne.n	80030ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800308c:	4b33      	ldr	r3, [pc, #204]	; (800315c <HAL_RCC_GetSysClockFreq+0x104>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003098:	4b30      	ldr	r3, [pc, #192]	; (800315c <HAL_RCC_GetSysClockFreq+0x104>)
 800309a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800309e:	0a1b      	lsrs	r3, r3, #8
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	e005      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030a8:	4b2c      	ldr	r3, [pc, #176]	; (800315c <HAL_RCC_GetSysClockFreq+0x104>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030b4:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10d      	bne.n	80030e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d102      	bne.n	80030d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030d0:	4b24      	ldr	r3, [pc, #144]	; (8003164 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	e004      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_RCC_GetSysClockFreq+0x110>)
 80030de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d133      	bne.n	800314e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_RCC_GetSysClockFreq+0x104>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d002      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0xa4>
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0xaa>
 80030fa:	e005      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030fe:	617b      	str	r3, [r7, #20]
      break;
 8003100:	e005      	b.n	800310e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003102:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_RCC_GetSysClockFreq+0x110>)
 8003104:	617b      	str	r3, [r7, #20]
      break;
 8003106:	e002      	b.n	800310e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	617b      	str	r3, [r7, #20]
      break;
 800310c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800310e:	4b13      	ldr	r3, [pc, #76]	; (800315c <HAL_RCC_GetSysClockFreq+0x104>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	3301      	adds	r3, #1
 800311a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <HAL_RCC_GetSysClockFreq+0x104>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	fb02 f203 	mul.w	r2, r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003134:	4b09      	ldr	r3, [pc, #36]	; (800315c <HAL_RCC_GetSysClockFreq+0x104>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	0e5b      	lsrs	r3, r3, #25
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	3301      	adds	r3, #1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800314e:	69bb      	ldr	r3, [r7, #24]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3724      	adds	r7, #36	; 0x24
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40021000 	.word	0x40021000
 8003160:	08004aa4 	.word	0x08004aa4
 8003164:	00f42400 	.word	0x00f42400
 8003168:	007a1200 	.word	0x007a1200

0800316c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <HAL_RCC_GetHCLKFreq+0x14>)
 8003172:	681b      	ldr	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000000 	.word	0x20000000

08003184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003188:	f7ff fff0 	bl	800316c <HAL_RCC_GetHCLKFreq>
 800318c:	4601      	mov	r1, r0
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	4a04      	ldr	r2, [pc, #16]	; (80031ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800319a:	5cd3      	ldrb	r3, [r2, r3]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40021000 	.word	0x40021000
 80031ac:	08004a9c 	.word	0x08004a9c

080031b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031b4:	f7ff ffda 	bl	800316c <HAL_RCC_GetHCLKFreq>
 80031b8:	4601      	mov	r1, r0
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	0adb      	lsrs	r3, r3, #11
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031c6:	5cd3      	ldrb	r3, [r2, r3]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	08004a9c 	.word	0x08004a9c

080031dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031e8:	4b27      	ldr	r3, [pc, #156]	; (8003288 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031f4:	f7ff f90a 	bl	800240c <HAL_PWREx_GetVoltageRange>
 80031f8:	6178      	str	r0, [r7, #20]
 80031fa:	e014      	b.n	8003226 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031fc:	4b22      	ldr	r3, [pc, #136]	; (8003288 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	4a21      	ldr	r2, [pc, #132]	; (8003288 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003206:	6593      	str	r3, [r2, #88]	; 0x58
 8003208:	4b1f      	ldr	r3, [pc, #124]	; (8003288 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003214:	f7ff f8fa 	bl	800240c <HAL_PWREx_GetVoltageRange>
 8003218:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800321a:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	4a1a      	ldr	r2, [pc, #104]	; (8003288 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003224:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800322c:	d10b      	bne.n	8003246 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b80      	cmp	r3, #128	; 0x80
 8003232:	d913      	bls.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2ba0      	cmp	r3, #160	; 0xa0
 8003238:	d902      	bls.n	8003240 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800323a:	2302      	movs	r3, #2
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	e00d      	b.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003240:	2301      	movs	r3, #1
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	e00a      	b.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b7f      	cmp	r3, #127	; 0x7f
 800324a:	d902      	bls.n	8003252 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800324c:	2302      	movs	r3, #2
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	e004      	b.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b70      	cmp	r3, #112	; 0x70
 8003256:	d101      	bne.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003258:	2301      	movs	r3, #1
 800325a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f023 020f 	bic.w	r2, r3, #15
 8003264:	4909      	ldr	r1, [pc, #36]	; (800328c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	429a      	cmp	r2, r3
 8003278:	d001      	beq.n	800327e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40021000 	.word	0x40021000
 800328c:	40022000 	.word	0x40022000

08003290 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800329a:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d118      	bne.n	80032d8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032a6:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d107      	bne.n	80032c2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032b2:	4b27      	ldr	r3, [pc, #156]	; (8003350 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b8:	0a1b      	lsrs	r3, r3, #8
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	e005      	b.n	80032ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032c2:	4b23      	ldr	r3, [pc, #140]	; (8003350 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032ce:	4a21      	ldr	r2, [pc, #132]	; (8003354 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032d8:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d002      	beq.n	80032ee <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d003      	beq.n	80032f4 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80032ec:	e005      	b.n	80032fa <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80032f0:	613b      	str	r3, [r7, #16]
    break;
 80032f2:	e005      	b.n	8003300 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80032f4:	4b19      	ldr	r3, [pc, #100]	; (800335c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80032f6:	613b      	str	r3, [r7, #16]
    break;
 80032f8:	e002      	b.n	8003300 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	613b      	str	r3, [r7, #16]
    break;
 80032fe:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003300:	4b13      	ldr	r3, [pc, #76]	; (8003350 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	3301      	adds	r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	0a1b      	lsrs	r3, r3, #8
 8003314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	fb02 f203 	mul.w	r2, r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	0e5b      	lsrs	r3, r3, #25
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	3301      	adds	r3, #1
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003340:	683b      	ldr	r3, [r7, #0]
}
 8003342:	4618      	mov	r0, r3
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	08004aa4 	.word	0x08004aa4
 8003358:	00f42400 	.word	0x00f42400
 800335c:	007a1200 	.word	0x007a1200

08003360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003368:	2300      	movs	r3, #0
 800336a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800336c:	2300      	movs	r3, #0
 800336e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003378:	2b00      	cmp	r3, #0
 800337a:	d03d      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	d00b      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d804      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00e      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800338c:	2b20      	cmp	r3, #32
 800338e:	d015      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003390:	e01d      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003392:	2b60      	cmp	r3, #96	; 0x60
 8003394:	d01e      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003396:	2b80      	cmp	r3, #128	; 0x80
 8003398:	d01c      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800339a:	e018      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800339c:	4b86      	ldr	r3, [pc, #536]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a85      	ldr	r2, [pc, #532]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033a8:	e015      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3304      	adds	r3, #4
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fafd 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ba:	e00c      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3320      	adds	r3, #32
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fbe4 	bl	8003b90 <RCCEx_PLLSAI2_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033cc:	e003      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	74fb      	strb	r3, [r7, #19]
      break;
 80033d2:	e000      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80033d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10b      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033dc:	4b76      	ldr	r3, [pc, #472]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033e2:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ea:	4973      	ldr	r1, [pc, #460]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80033f2:	e001      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	7cfb      	ldrb	r3, [r7, #19]
 80033f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d042      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800340c:	d00f      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800340e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003412:	d805      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003414:	2b00      	cmp	r3, #0
 8003416:	d011      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341c:	d017      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xee>
 800341e:	e01f      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003424:	d01f      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342a:	d01c      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800342c:	e018      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800342e:	4b62      	ldr	r3, [pc, #392]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	4a61      	ldr	r2, [pc, #388]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003438:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800343a:	e015      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3304      	adds	r3, #4
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fab4 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800344c:	e00c      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3320      	adds	r3, #32
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fb9b 	bl	8003b90 <RCCEx_PLLSAI2_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800345e:	e003      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	74fb      	strb	r3, [r7, #19]
      break;
 8003464:	e000      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10b      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800346e:	4b52      	ldr	r3, [pc, #328]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003470:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	494e      	ldr	r1, [pc, #312]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003484:	e001      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 809f 	beq.w	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003498:	2300      	movs	r3, #0
 800349a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800349c:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80034ac:	2300      	movs	r3, #0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00d      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	4a40      	ldr	r2, [pc, #256]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6593      	str	r3, [r2, #88]	; 0x58
 80034be:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ca:	2301      	movs	r3, #1
 80034cc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ce:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a3a      	ldr	r2, [pc, #232]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034da:	f7fd fe71 	bl	80011c0 <HAL_GetTick>
 80034de:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034e0:	e009      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e2:	f7fd fe6d 	bl	80011c0 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d902      	bls.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	74fb      	strb	r3, [r7, #19]
        break;
 80034f4:	e005      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034f6:	4b31      	ldr	r3, [pc, #196]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0ef      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d15b      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003508:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003512:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d01f      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	429a      	cmp	r2, r3
 8003524:	d019      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003526:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003530:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003532:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003538:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800353a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800354a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003552:	4a19      	ldr	r2, [pc, #100]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d016      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fd fe2c 	bl	80011c0 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356a:	e00b      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fd fe28 	bl	80011c0 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d902      	bls.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	74fb      	strb	r3, [r7, #19]
            break;
 8003582:	e006      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0ec      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10c      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003598:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a8:	4903      	ldr	r1, [pc, #12]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035b0:	e008      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	74bb      	strb	r3, [r7, #18]
 80035b6:	e005      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c0:	7cfb      	ldrb	r3, [r7, #19]
 80035c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035c4:	7c7b      	ldrb	r3, [r7, #17]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d105      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ca:	4ba0      	ldr	r3, [pc, #640]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ce:	4a9f      	ldr	r2, [pc, #636]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e2:	4b9a      	ldr	r3, [pc, #616]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f023 0203 	bic.w	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	4996      	ldr	r1, [pc, #600]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003604:	4b91      	ldr	r3, [pc, #580]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f023 020c 	bic.w	r2, r3, #12
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	498e      	ldr	r1, [pc, #568]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003626:	4b89      	ldr	r3, [pc, #548]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	4985      	ldr	r1, [pc, #532]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003648:	4b80      	ldr	r3, [pc, #512]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003656:	497d      	ldr	r1, [pc, #500]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800366a:	4b78      	ldr	r3, [pc, #480]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003678:	4974      	ldr	r1, [pc, #464]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800368c:	4b6f      	ldr	r3, [pc, #444]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369a:	496c      	ldr	r1, [pc, #432]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036ae:	4b67      	ldr	r3, [pc, #412]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036bc:	4963      	ldr	r1, [pc, #396]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036d0:	4b5e      	ldr	r3, [pc, #376]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036de:	495b      	ldr	r1, [pc, #364]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036f2:	4b56      	ldr	r3, [pc, #344]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	4952      	ldr	r1, [pc, #328]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003714:	4b4d      	ldr	r3, [pc, #308]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	494a      	ldr	r1, [pc, #296]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003736:	4b45      	ldr	r3, [pc, #276]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	4941      	ldr	r1, [pc, #260]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003758:	4b3c      	ldr	r3, [pc, #240]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003766:	4939      	ldr	r1, [pc, #228]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d028      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800377a:	4b34      	ldr	r3, [pc, #208]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003780:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003788:	4930      	ldr	r1, [pc, #192]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003798:	d106      	bne.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800379a:	4b2c      	ldr	r3, [pc, #176]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	4a2b      	ldr	r2, [pc, #172]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037a4:	60d3      	str	r3, [r2, #12]
 80037a6:	e011      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037b0:	d10c      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	2101      	movs	r1, #1
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 f8f9 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80037c8:	7cfb      	ldrb	r3, [r7, #19]
 80037ca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d04d      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037e0:	d108      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80037e2:	4b1a      	ldr	r3, [pc, #104]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037e8:	4a18      	ldr	r2, [pc, #96]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80037f2:	e012      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80037f4:	4b15      	ldr	r3, [pc, #84]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037fa:	4a14      	ldr	r2, [pc, #80]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003800:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003812:	490e      	ldr	r1, [pc, #56]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003822:	d106      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a08      	ldr	r2, [pc, #32]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800382e:	60d3      	str	r3, [r2, #12]
 8003830:	e020      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003836:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800383a:	d109      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a02      	ldr	r2, [pc, #8]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003846:	60d3      	str	r3, [r2, #12]
 8003848:	e014      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003858:	d10c      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	2101      	movs	r1, #1
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f8a5 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800386a:	7cfb      	ldrb	r3, [r7, #19]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d028      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003880:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800388e:	4947      	ldr	r1, [pc, #284]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800389a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800389e:	d106      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a0:	4b42      	ldr	r3, [pc, #264]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a41      	ldr	r2, [pc, #260]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038aa:	60d3      	str	r3, [r2, #12]
 80038ac:	e011      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038b6:	d10c      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	2101      	movs	r1, #1
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f876 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80038ce:	7cfb      	ldrb	r3, [r7, #19]
 80038d0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01e      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038de:	4b33      	ldr	r3, [pc, #204]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ee:	492f      	ldr	r1, [pc, #188]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003900:	d10c      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3304      	adds	r3, #4
 8003906:	2102      	movs	r1, #2
 8003908:	4618      	mov	r0, r3
 800390a:	f000 f851 	bl	80039b0 <RCCEx_PLLSAI1_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003912:	7cfb      	ldrb	r3, [r7, #19]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00b      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003928:	4b20      	ldr	r3, [pc, #128]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800392a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800392e:	f023 0204 	bic.w	r2, r3, #4
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003938:	491c      	ldr	r1, [pc, #112]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00b      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800394c:	4b17      	ldr	r3, [pc, #92]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800394e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003952:	f023 0218 	bic.w	r2, r3, #24
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	4913      	ldr	r1, [pc, #76]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d017      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003970:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003972:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003976:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003980:	490a      	ldr	r1, [pc, #40]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800398e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003992:	d105      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a04      	ldr	r2, [pc, #16]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800399a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800399e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000

080039b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039be:	4b70      	ldr	r3, [pc, #448]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00e      	beq.n	80039e8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039ca:	4b6d      	ldr	r3, [pc, #436]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0203 	and.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d103      	bne.n	80039e2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
       ||
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d13f      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	73fb      	strb	r3, [r7, #15]
 80039e6:	e03c      	b.n	8003a62 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d00c      	beq.n	8003a0a <RCCEx_PLLSAI1_Config+0x5a>
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d013      	beq.n	8003a1c <RCCEx_PLLSAI1_Config+0x6c>
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d120      	bne.n	8003a3a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039f8:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d11d      	bne.n	8003a40 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a08:	e01a      	b.n	8003a40 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a0a:	4b5d      	ldr	r3, [pc, #372]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d116      	bne.n	8003a44 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1a:	e013      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a1c:	4b58      	ldr	r3, [pc, #352]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10f      	bne.n	8003a48 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a28:	4b55      	ldr	r3, [pc, #340]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a38:	e006      	b.n	8003a48 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a3e:	e004      	b.n	8003a4a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003a40:	bf00      	nop
 8003a42:	e002      	b.n	8003a4a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003a44:	bf00      	nop
 8003a46:	e000      	b.n	8003a4a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003a48:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d108      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003a50:	4b4b      	ldr	r3, [pc, #300]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f023 0203 	bic.w	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4948      	ldr	r1, [pc, #288]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f040 8086 	bne.w	8003b76 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a6a:	4b45      	ldr	r3, [pc, #276]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a44      	ldr	r2, [pc, #272]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a76:	f7fd fba3 	bl	80011c0 <HAL_GetTick>
 8003a7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a7c:	e009      	b.n	8003a92 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a7e:	f7fd fb9f 	bl	80011c0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d902      	bls.n	8003a92 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	73fb      	strb	r3, [r7, #15]
        break;
 8003a90:	e005      	b.n	8003a9e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a92:	4b3b      	ldr	r3, [pc, #236]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1ef      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d168      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d113      	bne.n	8003ad2 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aaa:	4b35      	ldr	r3, [pc, #212]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	4b35      	ldr	r3, [pc, #212]	; (8003b84 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6892      	ldr	r2, [r2, #8]
 8003ab6:	0211      	lsls	r1, r2, #8
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	68d2      	ldr	r2, [r2, #12]
 8003abc:	06d2      	lsls	r2, r2, #27
 8003abe:	4311      	orrs	r1, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6852      	ldr	r2, [r2, #4]
 8003ac4:	3a01      	subs	r2, #1
 8003ac6:	0112      	lsls	r2, r2, #4
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	492d      	ldr	r1, [pc, #180]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	610b      	str	r3, [r1, #16]
 8003ad0:	e02d      	b.n	8003b2e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d115      	bne.n	8003b04 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ad8:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6892      	ldr	r2, [r2, #8]
 8003ae4:	0211      	lsls	r1, r2, #8
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6912      	ldr	r2, [r2, #16]
 8003aea:	0852      	lsrs	r2, r2, #1
 8003aec:	3a01      	subs	r2, #1
 8003aee:	0552      	lsls	r2, r2, #21
 8003af0:	4311      	orrs	r1, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6852      	ldr	r2, [r2, #4]
 8003af6:	3a01      	subs	r2, #1
 8003af8:	0112      	lsls	r2, r2, #4
 8003afa:	430a      	orrs	r2, r1
 8003afc:	4920      	ldr	r1, [pc, #128]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	610b      	str	r3, [r1, #16]
 8003b02:	e014      	b.n	8003b2e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b04:	4b1e      	ldr	r3, [pc, #120]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	0211      	lsls	r1, r2, #8
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6952      	ldr	r2, [r2, #20]
 8003b16:	0852      	lsrs	r2, r2, #1
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	0652      	lsls	r2, r2, #25
 8003b1c:	4311      	orrs	r1, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6852      	ldr	r2, [r2, #4]
 8003b22:	3a01      	subs	r2, #1
 8003b24:	0112      	lsls	r2, r2, #4
 8003b26:	430a      	orrs	r2, r1
 8003b28:	4915      	ldr	r1, [pc, #84]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3a:	f7fd fb41 	bl	80011c0 <HAL_GetTick>
 8003b3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b40:	e009      	b.n	8003b56 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b42:	f7fd fb3d 	bl	80011c0 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d902      	bls.n	8003b56 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	73fb      	strb	r3, [r7, #15]
          break;
 8003b54:	e005      	b.n	8003b62 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ef      	beq.n	8003b42 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d106      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	4903      	ldr	r1, [pc, #12]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	07ff800f 	.word	0x07ff800f
 8003b88:	ff9f800f 	.word	0xff9f800f
 8003b8c:	f9ff800f 	.word	0xf9ff800f

08003b90 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b9e:	4b70      	ldr	r3, [pc, #448]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00e      	beq.n	8003bc8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003baa:	4b6d      	ldr	r3, [pc, #436]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0203 	and.w	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d103      	bne.n	8003bc2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
       ||
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d13f      	bne.n	8003c42 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
 8003bc6:	e03c      	b.n	8003c42 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d00c      	beq.n	8003bea <RCCEx_PLLSAI2_Config+0x5a>
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d013      	beq.n	8003bfc <RCCEx_PLLSAI2_Config+0x6c>
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d120      	bne.n	8003c1a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bd8:	4b61      	ldr	r3, [pc, #388]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d11d      	bne.n	8003c20 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be8:	e01a      	b.n	8003c20 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bea:	4b5d      	ldr	r3, [pc, #372]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d116      	bne.n	8003c24 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfa:	e013      	b.n	8003c24 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bfc:	4b58      	ldr	r3, [pc, #352]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10f      	bne.n	8003c28 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c08:	4b55      	ldr	r3, [pc, #340]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c18:	e006      	b.n	8003c28 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c1e:	e004      	b.n	8003c2a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003c20:	bf00      	nop
 8003c22:	e002      	b.n	8003c2a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003c24:	bf00      	nop
 8003c26:	e000      	b.n	8003c2a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003c28:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d108      	bne.n	8003c42 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003c30:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f023 0203 	bic.w	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4948      	ldr	r1, [pc, #288]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f040 8086 	bne.w	8003d56 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c4a:	4b45      	ldr	r3, [pc, #276]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a44      	ldr	r2, [pc, #272]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c56:	f7fd fab3 	bl	80011c0 <HAL_GetTick>
 8003c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c5c:	e009      	b.n	8003c72 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c5e:	f7fd faaf 	bl	80011c0 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d902      	bls.n	8003c72 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	73fb      	strb	r3, [r7, #15]
        break;
 8003c70:	e005      	b.n	8003c7e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c72:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1ef      	bne.n	8003c5e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d168      	bne.n	8003d56 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d113      	bne.n	8003cb2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c8a:	4b35      	ldr	r3, [pc, #212]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	4b35      	ldr	r3, [pc, #212]	; (8003d64 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6892      	ldr	r2, [r2, #8]
 8003c96:	0211      	lsls	r1, r2, #8
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	68d2      	ldr	r2, [r2, #12]
 8003c9c:	06d2      	lsls	r2, r2, #27
 8003c9e:	4311      	orrs	r1, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6852      	ldr	r2, [r2, #4]
 8003ca4:	3a01      	subs	r2, #1
 8003ca6:	0112      	lsls	r2, r2, #4
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	492d      	ldr	r1, [pc, #180]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	614b      	str	r3, [r1, #20]
 8003cb0:	e02d      	b.n	8003d0e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d115      	bne.n	8003ce4 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cb8:	4b29      	ldr	r3, [pc, #164]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	4b2a      	ldr	r3, [pc, #168]	; (8003d68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6892      	ldr	r2, [r2, #8]
 8003cc4:	0211      	lsls	r1, r2, #8
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6912      	ldr	r2, [r2, #16]
 8003cca:	0852      	lsrs	r2, r2, #1
 8003ccc:	3a01      	subs	r2, #1
 8003cce:	0552      	lsls	r2, r2, #21
 8003cd0:	4311      	orrs	r1, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6852      	ldr	r2, [r2, #4]
 8003cd6:	3a01      	subs	r2, #1
 8003cd8:	0112      	lsls	r2, r2, #4
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	4920      	ldr	r1, [pc, #128]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	614b      	str	r3, [r1, #20]
 8003ce2:	e014      	b.n	8003d0e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ce4:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6892      	ldr	r2, [r2, #8]
 8003cf0:	0211      	lsls	r1, r2, #8
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6952      	ldr	r2, [r2, #20]
 8003cf6:	0852      	lsrs	r2, r2, #1
 8003cf8:	3a01      	subs	r2, #1
 8003cfa:	0652      	lsls	r2, r2, #25
 8003cfc:	4311      	orrs	r1, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6852      	ldr	r2, [r2, #4]
 8003d02:	3a01      	subs	r2, #1
 8003d04:	0112      	lsls	r2, r2, #4
 8003d06:	430a      	orrs	r2, r1
 8003d08:	4915      	ldr	r1, [pc, #84]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d0e:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fd fa51 	bl	80011c0 <HAL_GetTick>
 8003d1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d20:	e009      	b.n	8003d36 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d22:	f7fd fa4d 	bl	80011c0 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d902      	bls.n	8003d36 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	73fb      	strb	r3, [r7, #15]
          break;
 8003d34:	e005      	b.n	8003d42 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0ef      	beq.n	8003d22 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	4903      	ldr	r1, [pc, #12]	; (8003d60 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000
 8003d64:	07ff800f 	.word	0x07ff800f
 8003d68:	ff9f800f 	.word	0xff9f800f
 8003d6c:	f9ff800f 	.word	0xf9ff800f

08003d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e095      	b.n	8003eae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d108      	bne.n	8003d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d92:	d009      	beq.n	8003da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	61da      	str	r2, [r3, #28]
 8003d9a:	e005      	b.n	8003da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd f806 	bl	8000dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003de8:	d902      	bls.n	8003df0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	e002      	b.n	8003df6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003df4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003dfe:	d007      	beq.n	8003e10 <HAL_SPI_Init+0xa0>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e08:	d002      	beq.n	8003e10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	ea42 0103 	orr.w	r1, r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	0c1b      	lsrs	r3, r3, #16
 8003e6c:	f003 0204 	and.w	r2, r3, #4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e8c:	ea42 0103 	orr.w	r1, r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e042      	b.n	8003f4e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fc ffec 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2224      	movs	r2, #36	; 0x24
 8003ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f82d 	bl	8003f58 <UART_SetConfig>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e022      	b.n	8003f4e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 faf3 	bl	80044fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fb7a 	bl	8004640 <UART_CheckIdleState>
 8003f4c:	4603      	mov	r3, r0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f58:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003f5c:	b088      	sub	sp, #32
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4bb1      	ldr	r3, [pc, #708]	; (8004254 <UART_SetConfig+0x2fc>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	69f9      	ldr	r1, [r7, #28]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4aa6      	ldr	r2, [pc, #664]	; (8004258 <UART_SetConfig+0x300>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d004      	beq.n	8003fcc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003fd6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	69f9      	ldr	r1, [r7, #28]
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	f023 010f 	bic.w	r1, r3, #15
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a97      	ldr	r2, [pc, #604]	; (800425c <UART_SetConfig+0x304>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d121      	bne.n	8004048 <UART_SetConfig+0xf0>
 8004004:	4b96      	ldr	r3, [pc, #600]	; (8004260 <UART_SetConfig+0x308>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b03      	cmp	r3, #3
 8004010:	d816      	bhi.n	8004040 <UART_SetConfig+0xe8>
 8004012:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <UART_SetConfig+0xc0>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	08004029 	.word	0x08004029
 800401c:	08004035 	.word	0x08004035
 8004020:	0800402f 	.word	0x0800402f
 8004024:	0800403b 	.word	0x0800403b
 8004028:	2301      	movs	r3, #1
 800402a:	76fb      	strb	r3, [r7, #27]
 800402c:	e0e8      	b.n	8004200 <UART_SetConfig+0x2a8>
 800402e:	2302      	movs	r3, #2
 8004030:	76fb      	strb	r3, [r7, #27]
 8004032:	e0e5      	b.n	8004200 <UART_SetConfig+0x2a8>
 8004034:	2304      	movs	r3, #4
 8004036:	76fb      	strb	r3, [r7, #27]
 8004038:	e0e2      	b.n	8004200 <UART_SetConfig+0x2a8>
 800403a:	2308      	movs	r3, #8
 800403c:	76fb      	strb	r3, [r7, #27]
 800403e:	e0df      	b.n	8004200 <UART_SetConfig+0x2a8>
 8004040:	2310      	movs	r3, #16
 8004042:	76fb      	strb	r3, [r7, #27]
 8004044:	bf00      	nop
 8004046:	e0db      	b.n	8004200 <UART_SetConfig+0x2a8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a85      	ldr	r2, [pc, #532]	; (8004264 <UART_SetConfig+0x30c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d134      	bne.n	80040bc <UART_SetConfig+0x164>
 8004052:	4b83      	ldr	r3, [pc, #524]	; (8004260 <UART_SetConfig+0x308>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b0c      	cmp	r3, #12
 800405e:	d829      	bhi.n	80040b4 <UART_SetConfig+0x15c>
 8004060:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <UART_SetConfig+0x110>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	0800409d 	.word	0x0800409d
 800406c:	080040b5 	.word	0x080040b5
 8004070:	080040b5 	.word	0x080040b5
 8004074:	080040b5 	.word	0x080040b5
 8004078:	080040a9 	.word	0x080040a9
 800407c:	080040b5 	.word	0x080040b5
 8004080:	080040b5 	.word	0x080040b5
 8004084:	080040b5 	.word	0x080040b5
 8004088:	080040a3 	.word	0x080040a3
 800408c:	080040b5 	.word	0x080040b5
 8004090:	080040b5 	.word	0x080040b5
 8004094:	080040b5 	.word	0x080040b5
 8004098:	080040af 	.word	0x080040af
 800409c:	2300      	movs	r3, #0
 800409e:	76fb      	strb	r3, [r7, #27]
 80040a0:	e0ae      	b.n	8004200 <UART_SetConfig+0x2a8>
 80040a2:	2302      	movs	r3, #2
 80040a4:	76fb      	strb	r3, [r7, #27]
 80040a6:	e0ab      	b.n	8004200 <UART_SetConfig+0x2a8>
 80040a8:	2304      	movs	r3, #4
 80040aa:	76fb      	strb	r3, [r7, #27]
 80040ac:	e0a8      	b.n	8004200 <UART_SetConfig+0x2a8>
 80040ae:	2308      	movs	r3, #8
 80040b0:	76fb      	strb	r3, [r7, #27]
 80040b2:	e0a5      	b.n	8004200 <UART_SetConfig+0x2a8>
 80040b4:	2310      	movs	r3, #16
 80040b6:	76fb      	strb	r3, [r7, #27]
 80040b8:	bf00      	nop
 80040ba:	e0a1      	b.n	8004200 <UART_SetConfig+0x2a8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a69      	ldr	r2, [pc, #420]	; (8004268 <UART_SetConfig+0x310>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d120      	bne.n	8004108 <UART_SetConfig+0x1b0>
 80040c6:	4b66      	ldr	r3, [pc, #408]	; (8004260 <UART_SetConfig+0x308>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	d00f      	beq.n	80040f4 <UART_SetConfig+0x19c>
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d802      	bhi.n	80040de <UART_SetConfig+0x186>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <UART_SetConfig+0x190>
 80040dc:	e010      	b.n	8004100 <UART_SetConfig+0x1a8>
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d005      	beq.n	80040ee <UART_SetConfig+0x196>
 80040e2:	2b30      	cmp	r3, #48	; 0x30
 80040e4:	d009      	beq.n	80040fa <UART_SetConfig+0x1a2>
 80040e6:	e00b      	b.n	8004100 <UART_SetConfig+0x1a8>
 80040e8:	2300      	movs	r3, #0
 80040ea:	76fb      	strb	r3, [r7, #27]
 80040ec:	e088      	b.n	8004200 <UART_SetConfig+0x2a8>
 80040ee:	2302      	movs	r3, #2
 80040f0:	76fb      	strb	r3, [r7, #27]
 80040f2:	e085      	b.n	8004200 <UART_SetConfig+0x2a8>
 80040f4:	2304      	movs	r3, #4
 80040f6:	76fb      	strb	r3, [r7, #27]
 80040f8:	e082      	b.n	8004200 <UART_SetConfig+0x2a8>
 80040fa:	2308      	movs	r3, #8
 80040fc:	76fb      	strb	r3, [r7, #27]
 80040fe:	e07f      	b.n	8004200 <UART_SetConfig+0x2a8>
 8004100:	2310      	movs	r3, #16
 8004102:	76fb      	strb	r3, [r7, #27]
 8004104:	bf00      	nop
 8004106:	e07b      	b.n	8004200 <UART_SetConfig+0x2a8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a57      	ldr	r2, [pc, #348]	; (800426c <UART_SetConfig+0x314>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d120      	bne.n	8004154 <UART_SetConfig+0x1fc>
 8004112:	4b53      	ldr	r3, [pc, #332]	; (8004260 <UART_SetConfig+0x308>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d00f      	beq.n	8004140 <UART_SetConfig+0x1e8>
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	d802      	bhi.n	800412a <UART_SetConfig+0x1d2>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <UART_SetConfig+0x1dc>
 8004128:	e010      	b.n	800414c <UART_SetConfig+0x1f4>
 800412a:	2b80      	cmp	r3, #128	; 0x80
 800412c:	d005      	beq.n	800413a <UART_SetConfig+0x1e2>
 800412e:	2bc0      	cmp	r3, #192	; 0xc0
 8004130:	d009      	beq.n	8004146 <UART_SetConfig+0x1ee>
 8004132:	e00b      	b.n	800414c <UART_SetConfig+0x1f4>
 8004134:	2300      	movs	r3, #0
 8004136:	76fb      	strb	r3, [r7, #27]
 8004138:	e062      	b.n	8004200 <UART_SetConfig+0x2a8>
 800413a:	2302      	movs	r3, #2
 800413c:	76fb      	strb	r3, [r7, #27]
 800413e:	e05f      	b.n	8004200 <UART_SetConfig+0x2a8>
 8004140:	2304      	movs	r3, #4
 8004142:	76fb      	strb	r3, [r7, #27]
 8004144:	e05c      	b.n	8004200 <UART_SetConfig+0x2a8>
 8004146:	2308      	movs	r3, #8
 8004148:	76fb      	strb	r3, [r7, #27]
 800414a:	e059      	b.n	8004200 <UART_SetConfig+0x2a8>
 800414c:	2310      	movs	r3, #16
 800414e:	76fb      	strb	r3, [r7, #27]
 8004150:	bf00      	nop
 8004152:	e055      	b.n	8004200 <UART_SetConfig+0x2a8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a45      	ldr	r2, [pc, #276]	; (8004270 <UART_SetConfig+0x318>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d124      	bne.n	80041a8 <UART_SetConfig+0x250>
 800415e:	4b40      	ldr	r3, [pc, #256]	; (8004260 <UART_SetConfig+0x308>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800416c:	d012      	beq.n	8004194 <UART_SetConfig+0x23c>
 800416e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004172:	d802      	bhi.n	800417a <UART_SetConfig+0x222>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d007      	beq.n	8004188 <UART_SetConfig+0x230>
 8004178:	e012      	b.n	80041a0 <UART_SetConfig+0x248>
 800417a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800417e:	d006      	beq.n	800418e <UART_SetConfig+0x236>
 8004180:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004184:	d009      	beq.n	800419a <UART_SetConfig+0x242>
 8004186:	e00b      	b.n	80041a0 <UART_SetConfig+0x248>
 8004188:	2300      	movs	r3, #0
 800418a:	76fb      	strb	r3, [r7, #27]
 800418c:	e038      	b.n	8004200 <UART_SetConfig+0x2a8>
 800418e:	2302      	movs	r3, #2
 8004190:	76fb      	strb	r3, [r7, #27]
 8004192:	e035      	b.n	8004200 <UART_SetConfig+0x2a8>
 8004194:	2304      	movs	r3, #4
 8004196:	76fb      	strb	r3, [r7, #27]
 8004198:	e032      	b.n	8004200 <UART_SetConfig+0x2a8>
 800419a:	2308      	movs	r3, #8
 800419c:	76fb      	strb	r3, [r7, #27]
 800419e:	e02f      	b.n	8004200 <UART_SetConfig+0x2a8>
 80041a0:	2310      	movs	r3, #16
 80041a2:	76fb      	strb	r3, [r7, #27]
 80041a4:	bf00      	nop
 80041a6:	e02b      	b.n	8004200 <UART_SetConfig+0x2a8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a2a      	ldr	r2, [pc, #168]	; (8004258 <UART_SetConfig+0x300>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d124      	bne.n	80041fc <UART_SetConfig+0x2a4>
 80041b2:	4b2b      	ldr	r3, [pc, #172]	; (8004260 <UART_SetConfig+0x308>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c0:	d012      	beq.n	80041e8 <UART_SetConfig+0x290>
 80041c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c6:	d802      	bhi.n	80041ce <UART_SetConfig+0x276>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <UART_SetConfig+0x284>
 80041cc:	e012      	b.n	80041f4 <UART_SetConfig+0x29c>
 80041ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d2:	d006      	beq.n	80041e2 <UART_SetConfig+0x28a>
 80041d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041d8:	d009      	beq.n	80041ee <UART_SetConfig+0x296>
 80041da:	e00b      	b.n	80041f4 <UART_SetConfig+0x29c>
 80041dc:	2300      	movs	r3, #0
 80041de:	76fb      	strb	r3, [r7, #27]
 80041e0:	e00e      	b.n	8004200 <UART_SetConfig+0x2a8>
 80041e2:	2302      	movs	r3, #2
 80041e4:	76fb      	strb	r3, [r7, #27]
 80041e6:	e00b      	b.n	8004200 <UART_SetConfig+0x2a8>
 80041e8:	2304      	movs	r3, #4
 80041ea:	76fb      	strb	r3, [r7, #27]
 80041ec:	e008      	b.n	8004200 <UART_SetConfig+0x2a8>
 80041ee:	2308      	movs	r3, #8
 80041f0:	76fb      	strb	r3, [r7, #27]
 80041f2:	e005      	b.n	8004200 <UART_SetConfig+0x2a8>
 80041f4:	2310      	movs	r3, #16
 80041f6:	76fb      	strb	r3, [r7, #27]
 80041f8:	bf00      	nop
 80041fa:	e001      	b.n	8004200 <UART_SetConfig+0x2a8>
 80041fc:	2310      	movs	r3, #16
 80041fe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a14      	ldr	r2, [pc, #80]	; (8004258 <UART_SetConfig+0x300>)
 8004206:	4293      	cmp	r3, r2
 8004208:	f040 80a1 	bne.w	800434e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800420c:	7efb      	ldrb	r3, [r7, #27]
 800420e:	2b08      	cmp	r3, #8
 8004210:	d836      	bhi.n	8004280 <UART_SetConfig+0x328>
 8004212:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <UART_SetConfig+0x2c0>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	0800423d 	.word	0x0800423d
 800421c:	08004281 	.word	0x08004281
 8004220:	08004245 	.word	0x08004245
 8004224:	08004281 	.word	0x08004281
 8004228:	0800424b 	.word	0x0800424b
 800422c:	08004281 	.word	0x08004281
 8004230:	08004281 	.word	0x08004281
 8004234:	08004281 	.word	0x08004281
 8004238:	08004279 	.word	0x08004279
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800423c:	f7fe ffa2 	bl	8003184 <HAL_RCC_GetPCLK1Freq>
 8004240:	6178      	str	r0, [r7, #20]
        break;
 8004242:	e022      	b.n	800428a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <UART_SetConfig+0x31c>)
 8004246:	617b      	str	r3, [r7, #20]
        break;
 8004248:	e01f      	b.n	800428a <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424a:	f7fe ff05 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 800424e:	6178      	str	r0, [r7, #20]
        break;
 8004250:	e01b      	b.n	800428a <UART_SetConfig+0x332>
 8004252:	bf00      	nop
 8004254:	cfff69f3 	.word	0xcfff69f3
 8004258:	40008000 	.word	0x40008000
 800425c:	40013800 	.word	0x40013800
 8004260:	40021000 	.word	0x40021000
 8004264:	40004400 	.word	0x40004400
 8004268:	40004800 	.word	0x40004800
 800426c:	40004c00 	.word	0x40004c00
 8004270:	40005000 	.word	0x40005000
 8004274:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427c:	617b      	str	r3, [r7, #20]
        break;
 800427e:	e004      	b.n	800428a <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	76bb      	strb	r3, [r7, #26]
        break;
 8004288:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 811d 	beq.w	80044cc <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	4a97      	ldr	r2, [pc, #604]	; (80044f4 <UART_SetConfig+0x59c>)
 8004298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800429c:	461a      	mov	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042a4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4413      	add	r3, r2
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d305      	bcc.n	80042c2 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d902      	bls.n	80042c8 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	76bb      	strb	r3, [r7, #26]
 80042c6:	e101      	b.n	80044cc <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f04f 0100 	mov.w	r1, #0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	4a87      	ldr	r2, [pc, #540]	; (80044f4 <UART_SetConfig+0x59c>)
 80042d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f04f 0400 	mov.w	r4, #0
 80042e0:	461a      	mov	r2, r3
 80042e2:	4623      	mov	r3, r4
 80042e4:	f7fb ff8a 	bl	80001fc <__aeabi_uldivmod>
 80042e8:	4603      	mov	r3, r0
 80042ea:	460c      	mov	r4, r1
 80042ec:	4619      	mov	r1, r3
 80042ee:	4622      	mov	r2, r4
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	f04f 0400 	mov.w	r4, #0
 80042f8:	0214      	lsls	r4, r2, #8
 80042fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80042fe:	020b      	lsls	r3, r1, #8
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6852      	ldr	r2, [r2, #4]
 8004304:	0852      	lsrs	r2, r2, #1
 8004306:	4611      	mov	r1, r2
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	eb13 0b01 	adds.w	fp, r3, r1
 8004310:	eb44 0c02 	adc.w	ip, r4, r2
 8004314:	4658      	mov	r0, fp
 8004316:	4661      	mov	r1, ip
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f04f 0400 	mov.w	r4, #0
 8004320:	461a      	mov	r2, r3
 8004322:	4623      	mov	r3, r4
 8004324:	f7fb ff6a 	bl	80001fc <__aeabi_uldivmod>
 8004328:	4603      	mov	r3, r0
 800432a:	460c      	mov	r4, r1
 800432c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004334:	d308      	bcc.n	8004348 <UART_SetConfig+0x3f0>
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800433c:	d204      	bcs.n	8004348 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	60da      	str	r2, [r3, #12]
 8004346:	e0c1      	b.n	80044cc <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	76bb      	strb	r3, [r7, #26]
 800434c:	e0be      	b.n	80044cc <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004356:	d164      	bne.n	8004422 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004358:	7efb      	ldrb	r3, [r7, #27]
 800435a:	2b08      	cmp	r3, #8
 800435c:	d827      	bhi.n	80043ae <UART_SetConfig+0x456>
 800435e:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <UART_SetConfig+0x40c>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	08004389 	.word	0x08004389
 8004368:	08004391 	.word	0x08004391
 800436c:	08004399 	.word	0x08004399
 8004370:	080043af 	.word	0x080043af
 8004374:	0800439f 	.word	0x0800439f
 8004378:	080043af 	.word	0x080043af
 800437c:	080043af 	.word	0x080043af
 8004380:	080043af 	.word	0x080043af
 8004384:	080043a7 	.word	0x080043a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004388:	f7fe fefc 	bl	8003184 <HAL_RCC_GetPCLK1Freq>
 800438c:	6178      	str	r0, [r7, #20]
        break;
 800438e:	e013      	b.n	80043b8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004390:	f7fe ff0e 	bl	80031b0 <HAL_RCC_GetPCLK2Freq>
 8004394:	6178      	str	r0, [r7, #20]
        break;
 8004396:	e00f      	b.n	80043b8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004398:	4b57      	ldr	r3, [pc, #348]	; (80044f8 <UART_SetConfig+0x5a0>)
 800439a:	617b      	str	r3, [r7, #20]
        break;
 800439c:	e00c      	b.n	80043b8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439e:	f7fe fe5b 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 80043a2:	6178      	str	r0, [r7, #20]
        break;
 80043a4:	e008      	b.n	80043b8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043aa:	617b      	str	r3, [r7, #20]
        break;
 80043ac:	e004      	b.n	80043b8 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	76bb      	strb	r3, [r7, #26]
        break;
 80043b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8086 	beq.w	80044cc <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	4a4b      	ldr	r2, [pc, #300]	; (80044f4 <UART_SetConfig+0x59c>)
 80043c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043ca:	461a      	mov	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80043d2:	005a      	lsls	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	441a      	add	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b0f      	cmp	r3, #15
 80043ec:	d916      	bls.n	800441c <UART_SetConfig+0x4c4>
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f4:	d212      	bcs.n	800441c <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f023 030f 	bic.w	r3, r3, #15
 80043fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	085b      	lsrs	r3, r3, #1
 8004404:	b29b      	uxth	r3, r3
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	b29a      	uxth	r2, r3
 800440c:	89fb      	ldrh	r3, [r7, #14]
 800440e:	4313      	orrs	r3, r2
 8004410:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	89fa      	ldrh	r2, [r7, #14]
 8004418:	60da      	str	r2, [r3, #12]
 800441a:	e057      	b.n	80044cc <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	76bb      	strb	r3, [r7, #26]
 8004420:	e054      	b.n	80044cc <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004422:	7efb      	ldrb	r3, [r7, #27]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d828      	bhi.n	800447a <UART_SetConfig+0x522>
 8004428:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <UART_SetConfig+0x4d8>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	08004455 	.word	0x08004455
 8004434:	0800445d 	.word	0x0800445d
 8004438:	08004465 	.word	0x08004465
 800443c:	0800447b 	.word	0x0800447b
 8004440:	0800446b 	.word	0x0800446b
 8004444:	0800447b 	.word	0x0800447b
 8004448:	0800447b 	.word	0x0800447b
 800444c:	0800447b 	.word	0x0800447b
 8004450:	08004473 	.word	0x08004473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004454:	f7fe fe96 	bl	8003184 <HAL_RCC_GetPCLK1Freq>
 8004458:	6178      	str	r0, [r7, #20]
        break;
 800445a:	e013      	b.n	8004484 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800445c:	f7fe fea8 	bl	80031b0 <HAL_RCC_GetPCLK2Freq>
 8004460:	6178      	str	r0, [r7, #20]
        break;
 8004462:	e00f      	b.n	8004484 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004464:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <UART_SetConfig+0x5a0>)
 8004466:	617b      	str	r3, [r7, #20]
        break;
 8004468:	e00c      	b.n	8004484 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800446a:	f7fe fdf5 	bl	8003058 <HAL_RCC_GetSysClockFreq>
 800446e:	6178      	str	r0, [r7, #20]
        break;
 8004470:	e008      	b.n	8004484 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004476:	617b      	str	r3, [r7, #20]
        break;
 8004478:	e004      	b.n	8004484 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	76bb      	strb	r3, [r7, #26]
        break;
 8004482:	bf00      	nop
    }

    if (pclk != 0U)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d020      	beq.n	80044cc <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <UART_SetConfig+0x59c>)
 8004490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004494:	461a      	mov	r2, r3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	fbb3 f2f2 	udiv	r2, r3, r2
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	441a      	add	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	2b0f      	cmp	r3, #15
 80044b4:	d908      	bls.n	80044c8 <UART_SetConfig+0x570>
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044bc:	d204      	bcs.n	80044c8 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	e001      	b.n	80044cc <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80044e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80044f4:	08004ad4 	.word	0x08004ad4
 80044f8:	00f42400 	.word	0x00f42400

080044fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01a      	beq.n	8004612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045fa:	d10a      	bne.n	8004612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
  }
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af02      	add	r7, sp, #8
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004650:	f7fc fdb6 	bl	80011c0 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b08      	cmp	r3, #8
 8004662:	d10e      	bne.n	8004682 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f82c 	bl	80046d0 <UART_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e022      	b.n	80046c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b04      	cmp	r3, #4
 800468e:	d10e      	bne.n	80046ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f816 	bl	80046d0 <UART_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e00c      	b.n	80046c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e0:	e062      	b.n	80047a8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d05e      	beq.n	80047a8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ea:	f7fc fd69 	bl	80011c0 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <UART_WaitOnFlagUntilTimeout+0x30>
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d11d      	bne.n	800473c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800470e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e045      	b.n	80047c8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d02e      	beq.n	80047a8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004758:	d126      	bne.n	80047a8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004762:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004772:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e00f      	b.n	80047c8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69da      	ldr	r2, [r3, #28]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4013      	ands	r3, r2
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d08d      	beq.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e027      	b.n	8004836 <HAL_UARTEx_DisableFifoMode+0x66>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2224      	movs	r2, #36	; 0x24
 80047f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004814:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004856:	2302      	movs	r3, #2
 8004858:	e02d      	b.n	80048b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2224      	movs	r2, #36	; 0x24
 8004866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f850 	bl	800493c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e02d      	b.n	8004932 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2224      	movs	r2, #36	; 0x24
 80048e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f812 	bl	800493c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800493c:	b480      	push	{r7}
 800493e:	b089      	sub	sp, #36	; 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004944:	4a2f      	ldr	r2, [pc, #188]	; (8004a04 <UARTEx_SetNbDataToProcess+0xc8>)
 8004946:	f107 0314 	add.w	r3, r7, #20
 800494a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800494e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004952:	4a2d      	ldr	r2, [pc, #180]	; (8004a08 <UARTEx_SetNbDataToProcess+0xcc>)
 8004954:	f107 030c 	add.w	r3, r7, #12
 8004958:	e892 0003 	ldmia.w	r2, {r0, r1}
 800495c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004964:	2b00      	cmp	r3, #0
 8004966:	d108      	bne.n	800497a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004978:	e03d      	b.n	80049f6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800497a:	2308      	movs	r3, #8
 800497c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800497e:	2308      	movs	r3, #8
 8004980:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	0e5b      	lsrs	r3, r3, #25
 800498a:	b2db      	uxtb	r3, r3
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	0f5b      	lsrs	r3, r3, #29
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80049a2:	7fbb      	ldrb	r3, [r7, #30]
 80049a4:	7f3a      	ldrb	r2, [r7, #28]
 80049a6:	f107 0120 	add.w	r1, r7, #32
 80049aa:	440a      	add	r2, r1
 80049ac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80049b0:	fb02 f303 	mul.w	r3, r2, r3
 80049b4:	7f3a      	ldrb	r2, [r7, #28]
 80049b6:	f107 0120 	add.w	r1, r7, #32
 80049ba:	440a      	add	r2, r1
 80049bc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80049c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80049cc:	7ffb      	ldrb	r3, [r7, #31]
 80049ce:	7f7a      	ldrb	r2, [r7, #29]
 80049d0:	f107 0120 	add.w	r1, r7, #32
 80049d4:	440a      	add	r2, r1
 80049d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80049da:	fb02 f303 	mul.w	r3, r2, r3
 80049de:	7f7a      	ldrb	r2, [r7, #29]
 80049e0:	f107 0120 	add.w	r1, r7, #32
 80049e4:	440a      	add	r2, r1
 80049e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80049ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80049f6:	bf00      	nop
 80049f8:	3724      	adds	r7, #36	; 0x24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	08004a7c 	.word	0x08004a7c
 8004a08:	08004a84 	.word	0x08004a84

08004a0c <__libc_init_array>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4e0d      	ldr	r6, [pc, #52]	; (8004a44 <__libc_init_array+0x38>)
 8004a10:	4c0d      	ldr	r4, [pc, #52]	; (8004a48 <__libc_init_array+0x3c>)
 8004a12:	1ba4      	subs	r4, r4, r6
 8004a14:	10a4      	asrs	r4, r4, #2
 8004a16:	2500      	movs	r5, #0
 8004a18:	42a5      	cmp	r5, r4
 8004a1a:	d109      	bne.n	8004a30 <__libc_init_array+0x24>
 8004a1c:	4e0b      	ldr	r6, [pc, #44]	; (8004a4c <__libc_init_array+0x40>)
 8004a1e:	4c0c      	ldr	r4, [pc, #48]	; (8004a50 <__libc_init_array+0x44>)
 8004a20:	f000 f820 	bl	8004a64 <_init>
 8004a24:	1ba4      	subs	r4, r4, r6
 8004a26:	10a4      	asrs	r4, r4, #2
 8004a28:	2500      	movs	r5, #0
 8004a2a:	42a5      	cmp	r5, r4
 8004a2c:	d105      	bne.n	8004a3a <__libc_init_array+0x2e>
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a34:	4798      	blx	r3
 8004a36:	3501      	adds	r5, #1
 8004a38:	e7ee      	b.n	8004a18 <__libc_init_array+0xc>
 8004a3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a3e:	4798      	blx	r3
 8004a40:	3501      	adds	r5, #1
 8004a42:	e7f2      	b.n	8004a2a <__libc_init_array+0x1e>
 8004a44:	08004af4 	.word	0x08004af4
 8004a48:	08004af4 	.word	0x08004af4
 8004a4c:	08004af4 	.word	0x08004af4
 8004a50:	08004af8 	.word	0x08004af8

08004a54 <memset>:
 8004a54:	4402      	add	r2, r0
 8004a56:	4603      	mov	r3, r0
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d100      	bne.n	8004a5e <memset+0xa>
 8004a5c:	4770      	bx	lr
 8004a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a62:	e7f9      	b.n	8004a58 <memset+0x4>

08004a64 <_init>:
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a66:	bf00      	nop
 8004a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6a:	bc08      	pop	{r3}
 8004a6c:	469e      	mov	lr, r3
 8004a6e:	4770      	bx	lr

08004a70 <_fini>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	bf00      	nop
 8004a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a76:	bc08      	pop	{r3}
 8004a78:	469e      	mov	lr, r3
 8004a7a:	4770      	bx	lr
