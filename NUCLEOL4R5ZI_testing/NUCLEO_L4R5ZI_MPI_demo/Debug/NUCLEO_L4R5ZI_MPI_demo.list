
NUCLEO_L4R5ZI_MPI_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f80  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b0  080051b0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b8  080051b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080051c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  20000010  080051d0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  080051d0  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de6e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c07  00000000  00000000  0002deae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  0002fab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  000306d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029815  00000000  00000000  00031210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a30  00000000  00000000  0005aa25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010020b  00000000  00000000  00064455  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164660  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a8  00000000  00000000  001646dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005124 	.word	0x08005124

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	08005124 	.word	0x08005124

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295
 800021c:	f04f 30ff 	movne.w	r0, #4294967295
 8000220:	f000 b972 	b.w	8000508 <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9e08      	ldr	r6, [sp, #32]
 8000242:	4604      	mov	r4, r0
 8000244:	4688      	mov	r8, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d14b      	bne.n	80002e2 <__udivmoddi4+0xa6>
 800024a:	428a      	cmp	r2, r1
 800024c:	4615      	mov	r5, r2
 800024e:	d967      	bls.n	8000320 <__udivmoddi4+0xe4>
 8000250:	fab2 f282 	clz	r2, r2
 8000254:	b14a      	cbz	r2, 800026a <__udivmoddi4+0x2e>
 8000256:	f1c2 0720 	rsb	r7, r2, #32
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	fa20 f707 	lsr.w	r7, r0, r7
 8000262:	4095      	lsls	r5, r2
 8000264:	ea47 0803 	orr.w	r8, r7, r3
 8000268:	4094      	lsls	r4, r2
 800026a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026e:	0c23      	lsrs	r3, r4, #16
 8000270:	fbb8 f7fe 	udiv	r7, r8, lr
 8000274:	fa1f fc85 	uxth.w	ip, r5
 8000278:	fb0e 8817 	mls	r8, lr, r7, r8
 800027c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000280:	fb07 f10c 	mul.w	r1, r7, ip
 8000284:	4299      	cmp	r1, r3
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x60>
 8000288:	18eb      	adds	r3, r5, r3
 800028a:	f107 30ff 	add.w	r0, r7, #4294967295
 800028e:	f080 811b 	bcs.w	80004c8 <__udivmoddi4+0x28c>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 8118 	bls.w	80004c8 <__udivmoddi4+0x28c>
 8000298:	3f02      	subs	r7, #2
 800029a:	442b      	add	r3, r5
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b0:	45a4      	cmp	ip, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x8c>
 80002b4:	192c      	adds	r4, r5, r4
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x290>
 80002be:	45a4      	cmp	ip, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x290>
 80002c4:	3802      	subs	r0, #2
 80002c6:	442c      	add	r4, r5
 80002c8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002cc:	eba4 040c 	sub.w	r4, r4, ip
 80002d0:	2700      	movs	r7, #0
 80002d2:	b11e      	cbz	r6, 80002dc <__udivmoddi4+0xa0>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c6 4300 	strd	r4, r3, [r6]
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xbe>
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f000 80eb 	beq.w	80004c2 <__udivmoddi4+0x286>
 80002ec:	2700      	movs	r7, #0
 80002ee:	e9c6 0100 	strd	r0, r1, [r6]
 80002f2:	4638      	mov	r0, r7
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f783 	clz	r7, r3
 80002fe:	2f00      	cmp	r7, #0
 8000300:	d147      	bne.n	8000392 <__udivmoddi4+0x156>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd0>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2c4>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4698      	mov	r8, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa0>
 800031a:	e9c6 4800 	strd	r4, r8, [r6]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa0>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xe8>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 808f 	bne.w	800044c <__udivmoddi4+0x210>
 800032e:	1b49      	subs	r1, r1, r5
 8000330:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000334:	fa1f f885 	uxth.w	r8, r5
 8000338:	2701      	movs	r7, #1
 800033a:	fbb1 fcfe 	udiv	ip, r1, lr
 800033e:	0c23      	lsrs	r3, r4, #16
 8000340:	fb0e 111c 	mls	r1, lr, ip, r1
 8000344:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000348:	fb08 f10c 	mul.w	r1, r8, ip
 800034c:	4299      	cmp	r1, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x124>
 8000350:	18eb      	adds	r3, r5, r3
 8000352:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x122>
 8000358:	4299      	cmp	r1, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2bc>
 800035e:	4684      	mov	ip, r0
 8000360:	1a59      	subs	r1, r3, r1
 8000362:	b2a3      	uxth	r3, r4
 8000364:	fbb1 f0fe 	udiv	r0, r1, lr
 8000368:	fb0e 1410 	mls	r4, lr, r0, r1
 800036c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000370:	fb08 f800 	mul.w	r8, r8, r0
 8000374:	45a0      	cmp	r8, r4
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x14c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x14a>
 8000380:	45a0      	cmp	r8, r4
 8000382:	f200 80b6 	bhi.w	80004f2 <__udivmoddi4+0x2b6>
 8000386:	4618      	mov	r0, r3
 8000388:	eba4 0408 	sub.w	r4, r4, r8
 800038c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000390:	e79f      	b.n	80002d2 <__udivmoddi4+0x96>
 8000392:	f1c7 0c20 	rsb	ip, r7, #32
 8000396:	40bb      	lsls	r3, r7
 8000398:	fa22 fe0c 	lsr.w	lr, r2, ip
 800039c:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a0:	fa01 f407 	lsl.w	r4, r1, r7
 80003a4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003ac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b0:	4325      	orrs	r5, r4
 80003b2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b6:	0c2c      	lsrs	r4, r5, #16
 80003b8:	fb08 3319 	mls	r3, r8, r9, r3
 80003bc:	fa1f fa8e 	uxth.w	sl, lr
 80003c0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c4:	fb09 f40a 	mul.w	r4, r9, sl
 80003c8:	429c      	cmp	r4, r3
 80003ca:	fa02 f207 	lsl.w	r2, r2, r7
 80003ce:	fa00 f107 	lsl.w	r1, r0, r7
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b0>
 80003d4:	eb1e 0303 	adds.w	r3, lr, r3
 80003d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003dc:	f080 8087 	bcs.w	80004ee <__udivmoddi4+0x2b2>
 80003e0:	429c      	cmp	r4, r3
 80003e2:	f240 8084 	bls.w	80004ee <__udivmoddi4+0x2b2>
 80003e6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ea:	4473      	add	r3, lr
 80003ec:	1b1b      	subs	r3, r3, r4
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f4:	fb08 3310 	mls	r3, r8, r0, r3
 80003f8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003fc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000400:	45a2      	cmp	sl, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1da>
 8000404:	eb1e 0404 	adds.w	r4, lr, r4
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295
 800040c:	d26b      	bcs.n	80004e6 <__udivmoddi4+0x2aa>
 800040e:	45a2      	cmp	sl, r4
 8000410:	d969      	bls.n	80004e6 <__udivmoddi4+0x2aa>
 8000412:	3802      	subs	r0, #2
 8000414:	4474      	add	r4, lr
 8000416:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041a:	fba0 8902 	umull	r8, r9, r0, r2
 800041e:	eba4 040a 	sub.w	r4, r4, sl
 8000422:	454c      	cmp	r4, r9
 8000424:	46c2      	mov	sl, r8
 8000426:	464b      	mov	r3, r9
 8000428:	d354      	bcc.n	80004d4 <__udivmoddi4+0x298>
 800042a:	d051      	beq.n	80004d0 <__udivmoddi4+0x294>
 800042c:	2e00      	cmp	r6, #0
 800042e:	d069      	beq.n	8000504 <__udivmoddi4+0x2c8>
 8000430:	ebb1 050a 	subs.w	r5, r1, sl
 8000434:	eb64 0403 	sbc.w	r4, r4, r3
 8000438:	fa04 fc0c 	lsl.w	ip, r4, ip
 800043c:	40fd      	lsrs	r5, r7
 800043e:	40fc      	lsrs	r4, r7
 8000440:	ea4c 0505 	orr.w	r5, ip, r5
 8000444:	e9c6 5400 	strd	r5, r4, [r6]
 8000448:	2700      	movs	r7, #0
 800044a:	e747      	b.n	80002dc <__udivmoddi4+0xa0>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f703 	lsr.w	r7, r0, r3
 8000454:	4095      	lsls	r5, r2
 8000456:	fa01 f002 	lsl.w	r0, r1, r2
 800045a:	fa21 f303 	lsr.w	r3, r1, r3
 800045e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000462:	4338      	orrs	r0, r7
 8000464:	0c01      	lsrs	r1, r0, #16
 8000466:	fbb3 f7fe 	udiv	r7, r3, lr
 800046a:	fa1f f885 	uxth.w	r8, r5
 800046e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb07 f308 	mul.w	r3, r7, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x256>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f107 3cff 	add.w	ip, r7, #4294967295
 8000488:	d22f      	bcs.n	80004ea <__udivmoddi4+0x2ae>
 800048a:	428b      	cmp	r3, r1
 800048c:	d92d      	bls.n	80004ea <__udivmoddi4+0x2ae>
 800048e:	3f02      	subs	r7, #2
 8000490:	4429      	add	r1, r5
 8000492:	1acb      	subs	r3, r1, r3
 8000494:	b281      	uxth	r1, r0
 8000496:	fbb3 f0fe 	udiv	r0, r3, lr
 800049a:	fb0e 3310 	mls	r3, lr, r0, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb00 f308 	mul.w	r3, r0, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x27e>
 80004aa:	1869      	adds	r1, r5, r1
 80004ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b0:	d217      	bcs.n	80004e2 <__udivmoddi4+0x2a6>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d915      	bls.n	80004e2 <__udivmoddi4+0x2a6>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4429      	add	r1, r5
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c0:	e73b      	b.n	800033a <__udivmoddi4+0xfe>
 80004c2:	4637      	mov	r7, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e709      	b.n	80002dc <__udivmoddi4+0xa0>
 80004c8:	4607      	mov	r7, r0
 80004ca:	e6e7      	b.n	800029c <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x8c>
 80004d0:	4541      	cmp	r1, r8
 80004d2:	d2ab      	bcs.n	800042c <__udivmoddi4+0x1f0>
 80004d4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d8:	eb69 020e 	sbc.w	r2, r9, lr
 80004dc:	3801      	subs	r0, #1
 80004de:	4613      	mov	r3, r2
 80004e0:	e7a4      	b.n	800042c <__udivmoddi4+0x1f0>
 80004e2:	4660      	mov	r0, ip
 80004e4:	e7e9      	b.n	80004ba <__udivmoddi4+0x27e>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e795      	b.n	8000416 <__udivmoddi4+0x1da>
 80004ea:	4667      	mov	r7, ip
 80004ec:	e7d1      	b.n	8000492 <__udivmoddi4+0x256>
 80004ee:	4681      	mov	r9, r0
 80004f0:	e77c      	b.n	80003ec <__udivmoddi4+0x1b0>
 80004f2:	3802      	subs	r0, #2
 80004f4:	442c      	add	r4, r5
 80004f6:	e747      	b.n	8000388 <__udivmoddi4+0x14c>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	442b      	add	r3, r5
 80004fe:	e72f      	b.n	8000360 <__udivmoddi4+0x124>
 8000500:	4638      	mov	r0, r7
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xda>
 8000504:	4637      	mov	r7, r6
 8000506:	e6e9      	b.n	80002dc <__udivmoddi4+0xa0>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fcdd 	bl	8000ece <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f828 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f950 	bl	80007bc <MX_GPIO_Init>
  MX_DMA_Init();
 800051c:	f000 f924 	bl	8000768 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000520:	f000 f898 	bl	8000654 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000524:	f000 f8e2 	bl	80006ec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //turn on frame transmitting TC
  UART1_txBuffer[0] = 0x54;
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <main+0x50>)
 800052a:	2254      	movs	r2, #84	; 0x54
 800052c:	701a      	strb	r2, [r3, #0]
  UART1_txBuffer[1] = 0x43;
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <main+0x50>)
 8000530:	2243      	movs	r2, #67	; 0x43
 8000532:	705a      	strb	r2, [r3, #1]
  UART1_txBuffer[2] = 0x9;
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <main+0x50>)
 8000536:	2209      	movs	r2, #9
 8000538:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)UART1_txBuffer, strlen((char*)UART1_txBuffer), 100);
 800053a:	4808      	ldr	r0, [pc, #32]	; (800055c <main+0x50>)
 800053c:	f7ff fe5e 	bl	80001fc <strlen>
 8000540:	4603      	mov	r3, r0
 8000542:	b29a      	uxth	r2, r3
 8000544:	2364      	movs	r3, #100	; 0x64
 8000546:	4905      	ldr	r1, [pc, #20]	; (800055c <main+0x50>)
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <main+0x54>)
 800054a:	f003 fe6d 	bl	8004228 <HAL_UART_Transmit>

  HAL_UART_Receive_DMA(&hlpuart1, UART1_rxBuffer, 160);
 800054e:	22a0      	movs	r2, #160	; 0xa0
 8000550:	4904      	ldr	r1, [pc, #16]	; (8000564 <main+0x58>)
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <main+0x54>)
 8000554:	f003 ff00 	bl	8004358 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x4c>
 800055a:	bf00      	nop
 800055c:	200000cc 	.word	0x200000cc
 8000560:	20000378 	.word	0x20000378
 8000564:	2000002c 	.word	0x2000002c

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b0bc      	sub	sp, #240	; 0xf0
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000572:	2244      	movs	r2, #68	; 0x44
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 fdcc 	bl	8005114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2294      	movs	r2, #148	; 0x94
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fdbe 	bl	8005114 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000598:	2000      	movs	r0, #0
 800059a:	f001 fa5b 	bl	8001a54 <HAL_PWREx_ControlVoltageScaling>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80005a4:	f000 fb22 	bl	8000bec <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b6:	2340      	movs	r3, #64	; 0x40
 80005b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005ce:	231e      	movs	r3, #30
 80005d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fae6 	bl	8001bbc <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005f6:	f000 faf9 	bl	8000bec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2303      	movs	r3, #3
 8000602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000610:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800061e:	2105      	movs	r1, #5
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fef1 	bl	8002408 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800062c:	f000 fade 	bl	8000bec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000630:	2320      	movs	r3, #32
 8000632:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000634:	2300      	movs	r3, #0
 8000636:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f002 f994 	bl	8002968 <HAL_RCCEx_PeriphCLKConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000646:	f000 fad1 	bl	8000bec <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	37f0      	adds	r7, #240	; 0xf0
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800065a:	4a23      	ldr	r2, [pc, #140]	; (80006e8 <MX_LPUART1_UART_Init+0x94>)
 800065c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000660:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000664:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800069c:	4811      	ldr	r0, [pc, #68]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800069e:	f003 fd73 	bl	8004188 <HAL_UART_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80006a8:	f000 faa0 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	480d      	ldr	r0, [pc, #52]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 80006b0:	f004 fc27 	bl	8004f02 <HAL_UARTEx_SetTxFifoThreshold>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006ba:	f000 fa97 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 80006c2:	f004 fc5c 	bl	8004f7e <HAL_UARTEx_SetRxFifoThreshold>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006cc:	f000 fa8e 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 80006d2:	f004 fbdd 	bl	8004e90 <HAL_UARTEx_DisableFifoMode>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006dc:	f000 fa86 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000378 	.word	0x20000378
 80006e8:	40008000 	.word	0x40008000

080006ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_SPI1_Init+0x74>)
 80006f2:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <MX_SPI1_Init+0x78>)
 80006f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_SPI1_Init+0x74>)
 80006f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_SPI1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI1_Init+0x74>)
 8000706:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800070a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_SPI1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI1_Init+0x74>)
 800071a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI1_Init+0x74>)
 8000722:	2208      	movs	r2, #8
 8000724:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_SPI1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI1_Init+0x74>)
 800073a:	2207      	movs	r2, #7
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI1_Init+0x74>)
 8000746:	2208      	movs	r2, #8
 8000748:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_SPI1_Init+0x74>)
 800074c:	f002 fe14 	bl	8003378 <HAL_SPI_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000756:	f000 fa49 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000464 	.word	0x20000464
 8000764:	40013000 	.word	0x40013000

08000768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_DMA_Init+0x50>)
 8000770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000772:	4a11      	ldr	r2, [pc, #68]	; (80007b8 <MX_DMA_Init+0x50>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6493      	str	r3, [r2, #72]	; 0x48
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_DMA_Init+0x50>)
 800077c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_DMA_Init+0x50>)
 8000788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <MX_DMA_Init+0x50>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6493      	str	r3, [r2, #72]	; 0x48
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_DMA_Init+0x50>)
 8000794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	200b      	movs	r0, #11
 80007a4:	f000 fce3 	bl	800116e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a8:	200b      	movs	r0, #11
 80007aa:	f000 fcfc 	bl	80011a6 <HAL_NVIC_EnableIRQ>

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	; 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b6a      	ldr	r3, [pc, #424]	; (800097c <MX_GPIO_Init+0x1c0>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a69      	ldr	r2, [pc, #420]	; (800097c <MX_GPIO_Init+0x1c0>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b67      	ldr	r3, [pc, #412]	; (800097c <MX_GPIO_Init+0x1c0>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b64      	ldr	r3, [pc, #400]	; (800097c <MX_GPIO_Init+0x1c0>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a63      	ldr	r2, [pc, #396]	; (800097c <MX_GPIO_Init+0x1c0>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b61      	ldr	r3, [pc, #388]	; (800097c <MX_GPIO_Init+0x1c0>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b5e      	ldr	r3, [pc, #376]	; (800097c <MX_GPIO_Init+0x1c0>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a5d      	ldr	r2, [pc, #372]	; (800097c <MX_GPIO_Init+0x1c0>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b5b      	ldr	r3, [pc, #364]	; (800097c <MX_GPIO_Init+0x1c0>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b58      	ldr	r3, [pc, #352]	; (800097c <MX_GPIO_Init+0x1c0>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a57      	ldr	r2, [pc, #348]	; (800097c <MX_GPIO_Init+0x1c0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b55      	ldr	r3, [pc, #340]	; (800097c <MX_GPIO_Init+0x1c0>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	4b52      	ldr	r3, [pc, #328]	; (800097c <MX_GPIO_Init+0x1c0>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a51      	ldr	r2, [pc, #324]	; (800097c <MX_GPIO_Init+0x1c0>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b4f      	ldr	r3, [pc, #316]	; (800097c <MX_GPIO_Init+0x1c0>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084a:	4b4c      	ldr	r3, [pc, #304]	; (800097c <MX_GPIO_Init+0x1c0>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a4b      	ldr	r2, [pc, #300]	; (800097c <MX_GPIO_Init+0x1c0>)
 8000850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b49      	ldr	r3, [pc, #292]	; (800097c <MX_GPIO_Init+0x1c0>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000862:	f001 f99b 	bl	8001b9c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800086c:	4844      	ldr	r0, [pc, #272]	; (8000980 <MX_GPIO_Init+0x1c4>)
 800086e:	f001 f8b9 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000878:	4842      	ldr	r0, [pc, #264]	; (8000984 <MX_GPIO_Init+0x1c8>)
 800087a:	f001 f8b3 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	4841      	ldr	r0, [pc, #260]	; (8000988 <MX_GPIO_Init+0x1cc>)
 8000884:	f001 f8ae 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	4b3f      	ldr	r3, [pc, #252]	; (800098c <MX_GPIO_Init+0x1d0>)
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	483c      	ldr	r0, [pc, #240]	; (8000990 <MX_GPIO_Init+0x1d4>)
 800089e:	f000 ff0f 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008a2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4831      	ldr	r0, [pc, #196]	; (8000980 <MX_GPIO_Init+0x1c4>)
 80008bc:	f000 ff00 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008d2:	2307      	movs	r3, #7
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4829      	ldr	r0, [pc, #164]	; (8000984 <MX_GPIO_Init+0x1c8>)
 80008de:	f000 feef 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4822      	ldr	r0, [pc, #136]	; (8000984 <MX_GPIO_Init+0x1c8>)
 80008fc:	f000 fee0 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	481c      	ldr	r0, [pc, #112]	; (8000988 <MX_GPIO_Init+0x1cc>)
 8000918:	f000 fed2 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091c:	2340      	movs	r3, #64	; 0x40
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4816      	ldr	r0, [pc, #88]	; (8000988 <MX_GPIO_Init+0x1cc>)
 8000930:	f000 fec6 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000934:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000946:	230a      	movs	r3, #10
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f000 feb4 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f000 fea6 	bl	80016c0 <HAL_GPIO_Init>

}
 8000974:	bf00      	nop
 8000976:	3730      	adds	r7, #48	; 0x30
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40021000 	.word	0x40021000
 8000980:	48000400 	.word	0x48000400
 8000984:	48000c00 	.word	0x48000c00
 8000988:	48001800 	.word	0x48001800
 800098c:	10110000 	.word	0x10110000
 8000990:	48000800 	.word	0x48000800

08000994 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	//if its a data frame
	if(UART1_rxBuffer[0] == MPI_sync_bytes[0] && UART1_rxBuffer[1] == MPI_sync_bytes[1] && UART1_rxBuffer[2] == MPI_sync_bytes[2] && UART1_rxBuffer[3] == MPI_sync_bytes[3]){
 800099c:	4b86      	ldr	r3, [pc, #536]	; (8000bb8 <HAL_UART_RxCpltCallback+0x224>)
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	4b86      	ldr	r3, [pc, #536]	; (8000bbc <HAL_UART_RxCpltCallback+0x228>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	f040 80fe 	bne.w	8000ba6 <HAL_UART_RxCpltCallback+0x212>
 80009aa:	4b83      	ldr	r3, [pc, #524]	; (8000bb8 <HAL_UART_RxCpltCallback+0x224>)
 80009ac:	785a      	ldrb	r2, [r3, #1]
 80009ae:	4b83      	ldr	r3, [pc, #524]	; (8000bbc <HAL_UART_RxCpltCallback+0x228>)
 80009b0:	785b      	ldrb	r3, [r3, #1]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	f040 80f7 	bne.w	8000ba6 <HAL_UART_RxCpltCallback+0x212>
 80009b8:	4b7f      	ldr	r3, [pc, #508]	; (8000bb8 <HAL_UART_RxCpltCallback+0x224>)
 80009ba:	789a      	ldrb	r2, [r3, #2]
 80009bc:	4b7f      	ldr	r3, [pc, #508]	; (8000bbc <HAL_UART_RxCpltCallback+0x228>)
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	f040 80f0 	bne.w	8000ba6 <HAL_UART_RxCpltCallback+0x212>
 80009c6:	4b7c      	ldr	r3, [pc, #496]	; (8000bb8 <HAL_UART_RxCpltCallback+0x224>)
 80009c8:	78da      	ldrb	r2, [r3, #3]
 80009ca:	4b7c      	ldr	r3, [pc, #496]	; (8000bbc <HAL_UART_RxCpltCallback+0x228>)
 80009cc:	78db      	ldrb	r3, [r3, #3]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	f040 80e6 	bne.w	8000ba0 <HAL_UART_RxCpltCallback+0x20c>

		//calculate address array from page number
		address[0] = (page_number*0xff)& 0x000000ff;
 80009d4:	4b7a      	ldr	r3, [pc, #488]	; (8000bc0 <HAL_UART_RxCpltCallback+0x22c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	425b      	negs	r3, r3
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b79      	ldr	r3, [pc, #484]	; (8000bc4 <HAL_UART_RxCpltCallback+0x230>)
 80009e0:	701a      	strb	r2, [r3, #0]
		address[1] = (page_number*0xff)& 0x0000ff00;
 80009e2:	4b78      	ldr	r3, [pc, #480]	; (8000bc4 <HAL_UART_RxCpltCallback+0x230>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	705a      	strb	r2, [r3, #1]
		address[2] = (page_number*0xff)& 0x00ff0000;
 80009e8:	4b76      	ldr	r3, [pc, #472]	; (8000bc4 <HAL_UART_RxCpltCallback+0x230>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	709a      	strb	r2, [r3, #2]
//		for(int i = 0; i < 18; i++){
//			MPI_housekeeping[i] = UART1_rxBuffer[4+i];
//		}
		
		//store into MPI buffer
		for(int i = 0; i<160; i++){
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e0d0      	b.n	8000b96 <HAL_UART_RxCpltCallback+0x202>
			//if buffer if full (time to write a full page)
			if(flash_buffer_capacity == 255){
 80009f4:	4b74      	ldr	r3, [pc, #464]	; (8000bc8 <HAL_UART_RxCpltCallback+0x234>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2bff      	cmp	r3, #255	; 0xff
 80009fa:	f040 80b6 	bne.w	8000b6a <HAL_UART_RxCpltCallback+0x1d6>
			//add stored bytes
				
				//erase sector if needed
				if(page_number % 16 == 0){//if onto new sector erase that sector so it can be properly written to
 80009fe:	4b70      	ldr	r3, [pc, #448]	; (8000bc0 <HAL_UART_RxCpltCallback+0x22c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d14c      	bne.n	8000aa4 <HAL_UART_RxCpltCallback+0x110>
				   //write enable
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a10:	486e      	ldr	r0, [pc, #440]	; (8000bcc <HAL_UART_RxCpltCallback+0x238>)
 8000a12:	f000 ffe7 	bl	80019e4 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_WREN, 1, 100);
 8000a16:	2364      	movs	r3, #100	; 0x64
 8000a18:	2201      	movs	r2, #1
 8000a1a:	496d      	ldr	r1, [pc, #436]	; (8000bd0 <HAL_UART_RxCpltCallback+0x23c>)
 8000a1c:	486d      	ldr	r0, [pc, #436]	; (8000bd4 <HAL_UART_RxCpltCallback+0x240>)
 8000a1e:	f002 fd4e 	bl	80034be <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a28:	4868      	ldr	r0, [pc, #416]	; (8000bcc <HAL_UART_RxCpltCallback+0x238>)
 8000a2a:	f000 ffdb 	bl	80019e4 <HAL_GPIO_WritePin>
					
					//erase sector (16 pages)
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a34:	4865      	ldr	r0, [pc, #404]	; (8000bcc <HAL_UART_RxCpltCallback+0x238>)
 8000a36:	f000 ffd5 	bl	80019e4 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_ER4, 1, 100);
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4966      	ldr	r1, [pc, #408]	; (8000bd8 <HAL_UART_RxCpltCallback+0x244>)
 8000a40:	4864      	ldr	r0, [pc, #400]	; (8000bd4 <HAL_UART_RxCpltCallback+0x240>)
 8000a42:	f002 fd3c 	bl	80034be <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi1, (uint8_t*)&address, 3, 100);			//write address
 8000a46:	2364      	movs	r3, #100	; 0x64
 8000a48:	2203      	movs	r2, #3
 8000a4a:	495e      	ldr	r1, [pc, #376]	; (8000bc4 <HAL_UART_RxCpltCallback+0x230>)
 8000a4c:	4861      	ldr	r0, [pc, #388]	; (8000bd4 <HAL_UART_RxCpltCallback+0x240>)
 8000a4e:	f002 fd36 	bl	80034be <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a58:	485c      	ldr	r0, [pc, #368]	; (8000bcc <HAL_UART_RxCpltCallback+0x238>)
 8000a5a:	f000 ffc3 	bl	80019e4 <HAL_GPIO_WritePin>

					uint8_t wip = 1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	72fb      	strb	r3, [r7, #11]
					while (wip)	//wait will erase is done
 8000a62:	e01c      	b.n	8000a9e <HAL_UART_RxCpltCallback+0x10a>
					{
						// Read status register
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a6a:	4858      	ldr	r0, [pc, #352]	; (8000bcc <HAL_UART_RxCpltCallback+0x238>)
 8000a6c:	f000 ffba 	bl	80019e4 <HAL_GPIO_WritePin>
						HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 8000a70:	2364      	movs	r3, #100	; 0x64
 8000a72:	2201      	movs	r2, #1
 8000a74:	4959      	ldr	r1, [pc, #356]	; (8000bdc <HAL_UART_RxCpltCallback+0x248>)
 8000a76:	4857      	ldr	r0, [pc, #348]	; (8000bd4 <HAL_UART_RxCpltCallback+0x240>)
 8000a78:	f002 fd21 	bl	80034be <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 8000a7c:	2364      	movs	r3, #100	; 0x64
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4957      	ldr	r1, [pc, #348]	; (8000be0 <HAL_UART_RxCpltCallback+0x24c>)
 8000a82:	4854      	ldr	r0, [pc, #336]	; (8000bd4 <HAL_UART_RxCpltCallback+0x240>)
 8000a84:	f002 fe89 	bl	800379a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8e:	484f      	ldr	r0, [pc, #316]	; (8000bcc <HAL_UART_RxCpltCallback+0x238>)
 8000a90:	f000 ffa8 	bl	80019e4 <HAL_GPIO_WritePin>

						// Mask out WIP bit
						wip = spiRX_buf[0] & 0b00000001;
 8000a94:	4b52      	ldr	r3, [pc, #328]	; (8000be0 <HAL_UART_RxCpltCallback+0x24c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	72fb      	strb	r3, [r7, #11]
					while (wip)	//wait will erase is done
 8000a9e:	7afb      	ldrb	r3, [r7, #11]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1df      	bne.n	8000a64 <HAL_UART_RxCpltCallback+0xd0>
					}
				}
				
			//write new data
				//write enable
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aaa:	4848      	ldr	r0, [pc, #288]	; (8000bcc <HAL_UART_RxCpltCallback+0x238>)
 8000aac:	f000 ff9a 	bl	80019e4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_WREN, 1, 100);
 8000ab0:	2364      	movs	r3, #100	; 0x64
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4946      	ldr	r1, [pc, #280]	; (8000bd0 <HAL_UART_RxCpltCallback+0x23c>)
 8000ab6:	4847      	ldr	r0, [pc, #284]	; (8000bd4 <HAL_UART_RxCpltCallback+0x240>)
 8000ab8:	f002 fd01 	bl	80034be <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac2:	4842      	ldr	r0, [pc, #264]	; (8000bcc <HAL_UART_RxCpltCallback+0x238>)
 8000ac4:	f000 ff8e 	bl	80019e4 <HAL_GPIO_WritePin>

				//write data
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	//cs low
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ace:	483f      	ldr	r0, [pc, #252]	; (8000bcc <HAL_UART_RxCpltCallback+0x238>)
 8000ad0:	f000 ff88 	bl	80019e4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_WRITE, 1, 100);	//write opcode
 8000ad4:	2364      	movs	r3, #100	; 0x64
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4942      	ldr	r1, [pc, #264]	; (8000be4 <HAL_UART_RxCpltCallback+0x250>)
 8000ada:	483e      	ldr	r0, [pc, #248]	; (8000bd4 <HAL_UART_RxCpltCallback+0x240>)
 8000adc:	f002 fcef 	bl	80034be <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi1, (uint8_t*)&address, 3, 100);			//write address
 8000ae0:	2364      	movs	r3, #100	; 0x64
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	4937      	ldr	r1, [pc, #220]	; (8000bc4 <HAL_UART_RxCpltCallback+0x230>)
 8000ae6:	483b      	ldr	r0, [pc, #236]	; (8000bd4 <HAL_UART_RxCpltCallback+0x240>)
 8000ae8:	f002 fce9 	bl	80034be <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi1, (uint8_t*)&flash_buffer, 256, 100);//data
 8000aec:	2364      	movs	r3, #100	; 0x64
 8000aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af2:	493d      	ldr	r1, [pc, #244]	; (8000be8 <HAL_UART_RxCpltCallback+0x254>)
 8000af4:	4837      	ldr	r0, [pc, #220]	; (8000bd4 <HAL_UART_RxCpltCallback+0x240>)
 8000af6:	f002 fce2 	bl	80034be <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b00:	4832      	ldr	r0, [pc, #200]	; (8000bcc <HAL_UART_RxCpltCallback+0x238>)
 8000b02:	f000 ff6f 	bl	80019e4 <HAL_GPIO_WritePin>

				//wait till write is done
				uint8_t wip = 1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	72bb      	strb	r3, [r7, #10]
				while (wip)
 8000b0a:	e01c      	b.n	8000b46 <HAL_UART_RxCpltCallback+0x1b2>
				{
					// Read status register
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b12:	482e      	ldr	r0, [pc, #184]	; (8000bcc <HAL_UART_RxCpltCallback+0x238>)
 8000b14:	f000 ff66 	bl	80019e4 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 8000b18:	2364      	movs	r3, #100	; 0x64
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	492f      	ldr	r1, [pc, #188]	; (8000bdc <HAL_UART_RxCpltCallback+0x248>)
 8000b1e:	482d      	ldr	r0, [pc, #180]	; (8000bd4 <HAL_UART_RxCpltCallback+0x240>)
 8000b20:	f002 fccd 	bl	80034be <HAL_SPI_Transmit>
					HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 8000b24:	2364      	movs	r3, #100	; 0x64
 8000b26:	2201      	movs	r2, #1
 8000b28:	492d      	ldr	r1, [pc, #180]	; (8000be0 <HAL_UART_RxCpltCallback+0x24c>)
 8000b2a:	482a      	ldr	r0, [pc, #168]	; (8000bd4 <HAL_UART_RxCpltCallback+0x240>)
 8000b2c:	f002 fe35 	bl	800379a <HAL_SPI_Receive>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b36:	4825      	ldr	r0, [pc, #148]	; (8000bcc <HAL_UART_RxCpltCallback+0x238>)
 8000b38:	f000 ff54 	bl	80019e4 <HAL_GPIO_WritePin>

					// Mask out WIP bit
					wip = spiRX_buf[0] & 0b00000001;
 8000b3c:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <HAL_UART_RxCpltCallback+0x24c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	72bb      	strb	r3, [r7, #10]
				while (wip)
 8000b46:	7abb      	ldrb	r3, [r7, #10]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1df      	bne.n	8000b0c <HAL_UART_RxCpltCallback+0x178>
				}
				
				page_number+=1;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <HAL_UART_RxCpltCallback+0x22c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a1b      	ldr	r2, [pc, #108]	; (8000bc0 <HAL_UART_RxCpltCallback+0x22c>)
 8000b54:	6013      	str	r3, [r2, #0]
				
				//TODO: determine if need to clear flash_buffer? (is it safe?)
				flash_buffer_capacity = 1;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_UART_RxCpltCallback+0x234>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
				flash_buffer[0] = UART1_rxBuffer[i];
 8000b5c:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <HAL_UART_RxCpltCallback+0x224>)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4413      	add	r3, r2
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <HAL_UART_RxCpltCallback+0x254>)
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	e012      	b.n	8000b90 <HAL_UART_RxCpltCallback+0x1fc>
			}
			
			else if(flash_buffer_capacity < 255){	//buffer not full yet...
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_UART_RxCpltCallback+0x234>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2bff      	cmp	r3, #255	; 0xff
 8000b70:	d00e      	beq.n	8000b90 <HAL_UART_RxCpltCallback+0x1fc>
				flash_buffer[flash_buffer_capacity] = UART1_rxBuffer[i];
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_UART_RxCpltCallback+0x234>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	4619      	mov	r1, r3
 8000b78:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <HAL_UART_RxCpltCallback+0x224>)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <HAL_UART_RxCpltCallback+0x254>)
 8000b82:	545a      	strb	r2, [r3, r1]
				flash_buffer_capacity++;
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_UART_RxCpltCallback+0x234>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_UART_RxCpltCallback+0x234>)
 8000b8e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i<160; i++){
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	3301      	adds	r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2b9f      	cmp	r3, #159	; 0x9f
 8000b9a:	f77f af2b 	ble.w	80009f4 <HAL_UART_RxCpltCallback+0x60>
 8000b9e:	e002      	b.n	8000ba6 <HAL_UART_RxCpltCallback+0x212>
		
	}
	
	
	
	else if(UART1_rxBuffer[0] == 0x54 && UART1_rxBuffer[1] == 0x43){
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_UART_RxCpltCallback+0x224>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b54      	cmp	r3, #84	; 0x54
			//HAL_UART_Transmit(&hlpuart1, UART1_txBuffer, strlen((char*)UART1_txBuffer), 100);
		}
	}


    HAL_UART_Receive_DMA(hlpuart1, UART1_rxBuffer, 100);
 8000ba6:	2264      	movs	r2, #100	; 0x64
 8000ba8:	4903      	ldr	r1, [pc, #12]	; (8000bb8 <HAL_UART_RxCpltCallback+0x224>)
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f003 fbd4 	bl	8004358 <HAL_UART_Receive_DMA>
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000002c 	.word	0x2000002c
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000270 	.word	0x20000270
 8000bc4:	20000274 	.word	0x20000274
 8000bc8:	2000026c 	.word	0x2000026c
 8000bcc:	48000c00 	.word	0x48000c00
 8000bd0:	0800514d 	.word	0x0800514d
 8000bd4:	20000464 	.word	0x20000464
 8000bd8:	0800514e 	.word	0x0800514e
 8000bdc:	0800514f 	.word	0x0800514f
 8000be0:	20000278 	.word	0x20000278
 8000be4:	0800514c 	.word	0x0800514c
 8000be8:	2000016c 	.word	0x2000016c

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <Error_Handler+0x6>

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_MspInit+0x44>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_MspInit+0x44>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6613      	str	r3, [r2, #96]	; 0x60
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_MspInit+0x44>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x44>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x44>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x44>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a2d      	ldr	r2, [pc, #180]	; (8000d10 <HAL_UART_MspInit+0xd4>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d153      	bne.n	8000d06 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <HAL_UART_MspInit+0xd8>)
 8000c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c62:	4a2c      	ldr	r2, [pc, #176]	; (8000d14 <HAL_UART_MspInit+0xd8>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <HAL_UART_MspInit+0xd8>)
 8000c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c76:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <HAL_UART_MspInit+0xd8>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a26      	ldr	r2, [pc, #152]	; (8000d14 <HAL_UART_MspInit+0xd8>)
 8000c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <HAL_UART_MspInit+0xd8>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000c8e:	f000 ff85 	bl	8001b9c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000c92:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	481a      	ldr	r0, [pc, #104]	; (8000d18 <HAL_UART_MspInit+0xdc>)
 8000cb0:	f000 fd06 	bl	80016c0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0xe0>)
 8000cb6:	4a1a      	ldr	r2, [pc, #104]	; (8000d20 <HAL_UART_MspInit+0xe4>)
 8000cb8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_UART_MspInit+0xe0>)
 8000cbc:	2222      	movs	r2, #34	; 0x22
 8000cbe:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_UART_MspInit+0xe0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_UART_MspInit+0xe0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <HAL_UART_MspInit+0xe0>)
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_UART_MspInit+0xe0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_UART_MspInit+0xe0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_UART_MspInit+0xe0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_UART_MspInit+0xe0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <HAL_UART_MspInit+0xe0>)
 8000cec:	f000 fa76 	bl	80011dc <HAL_DMA_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000cf6:	f7ff ff79 	bl	8000bec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_UART_MspInit+0xe0>)
 8000cfe:	679a      	str	r2, [r3, #120]	; 0x78
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_UART_MspInit+0xe0>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	; 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40008000 	.word	0x40008000
 8000d14:	40021000 	.word	0x40021000
 8000d18:	48001800 	.word	0x48001800
 8000d1c:	20000404 	.word	0x20000404
 8000d20:	40020008 	.word	0x40020008

08000d24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_SPI_MspInit+0x7c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d128      	bne.n	8000d98 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4a:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d50:	6613      	str	r3, [r2, #96]	; 0x60
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d76:	23e0      	movs	r3, #224	; 0xe0
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d86:	2305      	movs	r3, #5
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f000 fc94 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40013000 	.word	0x40013000
 8000da4:	40021000 	.word	0x40021000

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f8c0 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <DMA1_Channel1_IRQHandler+0x10>)
 8000e02:	f000 fb0e 	bl	8001422 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000404 	.word	0x20000404

08000e10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <SystemInit+0x64>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <SystemInit+0x64>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <SystemInit+0x68>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <SystemInit+0x68>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <SystemInit+0x68>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <SystemInit+0x68>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <SystemInit+0x68>)
 8000e3c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e40:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <SystemInit+0x68>)
 8000e48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e4c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <SystemInit+0x68>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <SystemInit+0x68>)
 8000e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <SystemInit+0x68>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SystemInit+0x64>)
 8000e62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e66:	609a      	str	r2, [r3, #8]
#endif
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	40021000 	.word	0x40021000

08000e7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e80:	f7ff ffc6 	bl	8000e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e86:	e003      	b.n	8000e90 <LoopCopyDataInit>

08000e88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e8e:	3104      	adds	r1, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e90:	480a      	ldr	r0, [pc, #40]	; (8000ebc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e98:	d3f6      	bcc.n	8000e88 <CopyDataInit>
	ldr	r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e9c:	e002      	b.n	8000ea4 <LoopFillZerobss>

08000e9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ea0:	f842 3b04 	str.w	r3, [r2], #4

08000ea4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <LoopForever+0x16>)
	cmp	r2, r3
 8000ea6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ea8:	d3f9      	bcc.n	8000e9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f004 f90f 	bl	80050cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eae:	f7ff fb2d 	bl	800050c <main>

08000eb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb2:	e7fe      	b.n	8000eb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000eb8:	080051c0 	.word	0x080051c0
	ldr	r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ec0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000ec4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000ec8:	200004cc 	.word	0x200004cc

08000ecc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC1_IRQHandler>

08000ece <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f93d 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f000 f80e 	bl	8000f00 <HAL_InitTick>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	e001      	b.n	8000ef4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef0:	f7ff fe80 	bl	8000bf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_InitTick+0x6c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d023      	beq.n	8000f5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_InitTick+0x70>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_InitTick+0x6c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f949 	bl	80011c2 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10f      	bne.n	8000f56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d809      	bhi.n	8000f50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f913 	bl	800116e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_InitTick+0x74>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e007      	b.n	8000f60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e004      	b.n	8000f60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e001      	b.n	8000f60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000000c 	.word	0x2000000c
 8000f70:	20000004 	.word	0x20000004
 8000f74:	20000008 	.word	0x20000008

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	2000000c 	.word	0x2000000c
 8000f9c:	200004c8 	.word	0x200004c8

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200004c8 	.word	0x200004c8

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db0b      	blt.n	8001046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <__NVIC_EnableIRQ+0x38>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001124:	d301      	bcc.n	800112a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001126:	2301      	movs	r3, #1
 8001128:	e00f      	b.n	800114a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <SysTick_Config+0x40>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001132:	210f      	movs	r1, #15
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f7ff ff8e 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SysTick_Config+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SysTick_Config+0x40>)
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff29 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001180:	f7ff ff3e 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff8e 	bl	80010ac <NVIC_EncodePriority>
 8001190:	4602      	mov	r2, r0
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5d 	bl	8001058 <__NVIC_SetPriority>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff31 	bl	800101c <__NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffa2 	bl	8001114 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e08d      	b.n	800130a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_DMA_Init+0x138>)
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d80f      	bhi.n	800121a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	4b45      	ldr	r3, [pc, #276]	; (8001318 <HAL_DMA_Init+0x13c>)
 8001202:	4413      	add	r3, r2
 8001204:	4a45      	ldr	r2, [pc, #276]	; (800131c <HAL_DMA_Init+0x140>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	009a      	lsls	r2, r3, #2
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a42      	ldr	r2, [pc, #264]	; (8001320 <HAL_DMA_Init+0x144>)
 8001216:	641a      	str	r2, [r3, #64]	; 0x40
 8001218:	e00e      	b.n	8001238 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	4b40      	ldr	r3, [pc, #256]	; (8001324 <HAL_DMA_Init+0x148>)
 8001222:	4413      	add	r3, r2
 8001224:	4a3d      	ldr	r2, [pc, #244]	; (800131c <HAL_DMA_Init+0x140>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	009a      	lsls	r2, r3, #2
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a3c      	ldr	r2, [pc, #240]	; (8001328 <HAL_DMA_Init+0x14c>)
 8001236:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2202      	movs	r2, #2
 800123c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800124e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001252:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800125c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f9b6 	bl	80015fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001298:	d102      	bne.n	80012a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012b4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d010      	beq.n	80012e0 <HAL_DMA_Init+0x104>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d80c      	bhi.n	80012e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f9d6 	bl	8001678 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	e008      	b.n	80012f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40020407 	.word	0x40020407
 8001318:	bffdfff8 	.word	0xbffdfff8
 800131c:	cccccccd 	.word	0xcccccccd
 8001320:	40020000 	.word	0x40020000
 8001324:	bffdfbf8 	.word	0xbffdfbf8
 8001328:	40020400 	.word	0x40020400

0800132c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_DMA_Start_IT+0x20>
 8001348:	2302      	movs	r3, #2
 800134a:	e066      	b.n	800141a <HAL_DMA_Start_IT+0xee>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d155      	bne.n	800140c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2202      	movs	r2, #2
 8001364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0201 	bic.w	r2, r2, #1
 800137c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	68b9      	ldr	r1, [r7, #8]
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 f8fb 	bl	8001580 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	2b00      	cmp	r3, #0
 8001390:	d008      	beq.n	80013a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 020e 	orr.w	r2, r2, #14
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e00f      	b.n	80013c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0204 	bic.w	r2, r2, #4
 80013b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 020a 	orr.w	r2, r2, #10
 80013c2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013e0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013f8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0201 	orr.w	r2, r2, #1
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e005      	b.n	8001418 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001414:	2302      	movs	r3, #2
 8001416:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001418:	7dfb      	ldrb	r3, [r7, #23]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f003 031c 	and.w	r3, r3, #28
 8001442:	2204      	movs	r2, #4
 8001444:	409a      	lsls	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d026      	beq.n	800149c <HAL_DMA_IRQHandler+0x7a>
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d021      	beq.n	800149c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0320 	and.w	r3, r3, #32
 8001462:	2b00      	cmp	r3, #0
 8001464:	d107      	bne.n	8001476 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0204 	bic.w	r2, r2, #4
 8001474:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f003 021c 	and.w	r2, r3, #28
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	2104      	movs	r1, #4
 8001484:	fa01 f202 	lsl.w	r2, r1, r2
 8001488:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	2b00      	cmp	r3, #0
 8001490:	d071      	beq.n	8001576 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800149a:	e06c      	b.n	8001576 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	f003 031c 	and.w	r3, r3, #28
 80014a4:	2202      	movs	r2, #2
 80014a6:	409a      	lsls	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d02e      	beq.n	800150e <HAL_DMA_IRQHandler+0xec>
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d029      	beq.n	800150e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d10b      	bne.n	80014e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 020a 	bic.w	r2, r2, #10
 80014d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	f003 021c 	and.w	r2, r3, #28
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	2102      	movs	r1, #2
 80014ee:	fa01 f202 	lsl.w	r2, r1, r2
 80014f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	2b00      	cmp	r3, #0
 8001502:	d038      	beq.n	8001576 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800150c:	e033      	b.n	8001576 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f003 031c 	and.w	r3, r3, #28
 8001516:	2208      	movs	r2, #8
 8001518:	409a      	lsls	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d02a      	beq.n	8001578 <HAL_DMA_IRQHandler+0x156>
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	2b00      	cmp	r3, #0
 800152a:	d025      	beq.n	8001578 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 020e 	bic.w	r2, r2, #14
 800153a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	f003 021c 	and.w	r2, r3, #28
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f202 	lsl.w	r2, r1, r2
 800154e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001576:	bf00      	nop
 8001578:	bf00      	nop
}
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001596:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015a8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f003 021c 	and.w	r2, r3, #28
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b10      	cmp	r3, #16
 80015cc:	d108      	bne.n	80015e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015de:	e007      	b.n	80015f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	60da      	str	r2, [r3, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800160c:	429a      	cmp	r2, r3
 800160e:	d80a      	bhi.n	8001626 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800161c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6493      	str	r3, [r2, #72]	; 0x48
 8001624:	e007      	b.n	8001636 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	009a      	lsls	r2, r3, #2
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001630:	4413      	add	r3, r2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	3b08      	subs	r3, #8
 800163e:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800164c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f003 031f 	and.w	r3, r3, #31
 8001654:	2201      	movs	r2, #1
 8001656:	409a      	lsls	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40020407 	.word	0x40020407
 800166c:	4002081c 	.word	0x4002081c
 8001670:	cccccccd 	.word	0xcccccccd
 8001674:	40020880 	.word	0x40020880

08001678 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a08      	ldr	r2, [pc, #32]	; (80016bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800169a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2201      	movs	r2, #1
 80016a6:	409a      	lsls	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	1000823f 	.word	0x1000823f
 80016bc:	40020940 	.word	0x40020940

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ce:	e166      	b.n	800199e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8158 	beq.w	8001998 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d00b      	beq.n	8001708 <HAL_GPIO_Init+0x48>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d007      	beq.n	8001708 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016fc:	2b11      	cmp	r3, #17
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b12      	cmp	r3, #18
 8001706:	d130      	bne.n	800176a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800173e:	2201      	movs	r2, #1
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	f003 0201 	and.w	r2, r3, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0xea>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b12      	cmp	r3, #18
 80017a8:	d123      	bne.n	80017f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	6939      	ldr	r1, [r7, #16]
 80017ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0203 	and.w	r2, r3, #3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80b2 	beq.w	8001998 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001834:	4b61      	ldr	r3, [pc, #388]	; (80019bc <HAL_GPIO_Init+0x2fc>)
 8001836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001838:	4a60      	ldr	r2, [pc, #384]	; (80019bc <HAL_GPIO_Init+0x2fc>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6613      	str	r3, [r2, #96]	; 0x60
 8001840:	4b5e      	ldr	r3, [pc, #376]	; (80019bc <HAL_GPIO_Init+0x2fc>)
 8001842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800184c:	4a5c      	ldr	r2, [pc, #368]	; (80019c0 <HAL_GPIO_Init+0x300>)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3302      	adds	r3, #2
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001876:	d02b      	beq.n	80018d0 <HAL_GPIO_Init+0x210>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_GPIO_Init+0x304>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d025      	beq.n	80018cc <HAL_GPIO_Init+0x20c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a51      	ldr	r2, [pc, #324]	; (80019c8 <HAL_GPIO_Init+0x308>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d01f      	beq.n	80018c8 <HAL_GPIO_Init+0x208>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a50      	ldr	r2, [pc, #320]	; (80019cc <HAL_GPIO_Init+0x30c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d019      	beq.n	80018c4 <HAL_GPIO_Init+0x204>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_GPIO_Init+0x310>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d013      	beq.n	80018c0 <HAL_GPIO_Init+0x200>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a4e      	ldr	r2, [pc, #312]	; (80019d4 <HAL_GPIO_Init+0x314>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00d      	beq.n	80018bc <HAL_GPIO_Init+0x1fc>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a4d      	ldr	r2, [pc, #308]	; (80019d8 <HAL_GPIO_Init+0x318>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0x1f8>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <HAL_GPIO_Init+0x31c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_GPIO_Init+0x1f4>
 80018b0:	2307      	movs	r3, #7
 80018b2:	e00e      	b.n	80018d2 <HAL_GPIO_Init+0x212>
 80018b4:	2308      	movs	r3, #8
 80018b6:	e00c      	b.n	80018d2 <HAL_GPIO_Init+0x212>
 80018b8:	2306      	movs	r3, #6
 80018ba:	e00a      	b.n	80018d2 <HAL_GPIO_Init+0x212>
 80018bc:	2305      	movs	r3, #5
 80018be:	e008      	b.n	80018d2 <HAL_GPIO_Init+0x212>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e006      	b.n	80018d2 <HAL_GPIO_Init+0x212>
 80018c4:	2303      	movs	r3, #3
 80018c6:	e004      	b.n	80018d2 <HAL_GPIO_Init+0x212>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e002      	b.n	80018d2 <HAL_GPIO_Init+0x212>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_GPIO_Init+0x212>
 80018d0:	2300      	movs	r3, #0
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	f002 0203 	and.w	r2, r2, #3
 80018d8:	0092      	lsls	r2, r2, #2
 80018da:	4093      	lsls	r3, r2
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018e2:	4937      	ldr	r1, [pc, #220]	; (80019c0 <HAL_GPIO_Init+0x300>)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018f0:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <HAL_GPIO_Init+0x320>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001914:	4a32      	ldr	r2, [pc, #200]	; (80019e0 <HAL_GPIO_Init+0x320>)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800191a:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <HAL_GPIO_Init+0x320>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800193e:	4a28      	ldr	r2, [pc, #160]	; (80019e0 <HAL_GPIO_Init+0x320>)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001944:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <HAL_GPIO_Init+0x320>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <HAL_GPIO_Init+0x320>)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <HAL_GPIO_Init+0x320>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001992:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <HAL_GPIO_Init+0x320>)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3301      	adds	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f47f ae91 	bne.w	80016d0 <HAL_GPIO_Init+0x10>
  }
}
 80019ae:	bf00      	nop
 80019b0:	371c      	adds	r7, #28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40010000 	.word	0x40010000
 80019c4:	48000400 	.word	0x48000400
 80019c8:	48000800 	.word	0x48000800
 80019cc:	48000c00 	.word	0x48000c00
 80019d0:	48001000 	.word	0x48001000
 80019d4:	48001400 	.word	0x48001400
 80019d8:	48001800 	.word	0x48001800
 80019dc:	48001c00 	.word	0x48001c00
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a00:	e002      	b.n	8001a08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a24:	d102      	bne.n	8001a2c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2a:	e00b      	b.n	8001a44 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a3a:	d102      	bne.n	8001a42 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a40:	e000      	b.n	8001a44 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001a42:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40007000 	.word	0x40007000

08001a54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d141      	bne.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a62:	4b4b      	ldr	r3, [pc, #300]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6e:	d131      	bne.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a70:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a76:	4a46      	ldr	r2, [pc, #280]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a80:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a88:	4a41      	ldr	r2, [pc, #260]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a90:	4b40      	ldr	r3, [pc, #256]	; (8001b94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2232      	movs	r2, #50	; 0x32
 8001a96:	fb02 f303 	mul.w	r3, r2, r3
 8001a9a:	4a3f      	ldr	r2, [pc, #252]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa0:	0c9b      	lsrs	r3, r3, #18
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aa6:	e002      	b.n	8001aae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aae:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aba:	d102      	bne.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f2      	bne.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ac2:	4b33      	ldr	r3, [pc, #204]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ace:	d158      	bne.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e057      	b.n	8001b84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ada:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ae4:	e04d      	b.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aec:	d141      	bne.n	8001b72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aee:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afa:	d131      	bne.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001afc:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b02:	4a23      	ldr	r2, [pc, #140]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b0c:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b14:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2232      	movs	r2, #50	; 0x32
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	0c9b      	lsrs	r3, r3, #18
 8001b2e:	3301      	adds	r3, #1
 8001b30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b32:	e002      	b.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b46:	d102      	bne.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f2      	bne.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b5a:	d112      	bne.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e011      	b.n	8001b84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b70:	e007      	b.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b80:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40007000 	.word	0x40007000
 8001b94:	20000004 	.word	0x20000004
 8001b98:	431bde83 	.word	0x431bde83

08001b9c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001baa:	6053      	str	r3, [r2, #4]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40007000 	.word	0x40007000

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d102      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f000 bc16 	b.w	80023fc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd0:	4ba0      	ldr	r3, [pc, #640]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bda:	4b9e      	ldr	r3, [pc, #632]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80e4 	beq.w	8001dba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <HAL_RCC_OscConfig+0x4c>
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	f040 808b 	bne.w	8001d16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	f040 8087 	bne.w	8001d16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c08:	4b92      	ldr	r3, [pc, #584]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_OscConfig+0x64>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e3ed      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1a      	ldr	r2, [r3, #32]
 8001c24:	4b8b      	ldr	r3, [pc, #556]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7e>
 8001c30:	4b88      	ldr	r3, [pc, #544]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c38:	e005      	b.n	8001c46 <HAL_RCC_OscConfig+0x8a>
 8001c3a:	4b86      	ldr	r3, [pc, #536]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d223      	bcs.n	8001c92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fdc8 	bl	80027e4 <RCC_SetFlashLatencyFromMSIRange>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e3ce      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c5e:	4b7d      	ldr	r3, [pc, #500]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a7c      	ldr	r2, [pc, #496]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b7a      	ldr	r3, [pc, #488]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4977      	ldr	r1, [pc, #476]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7c:	4b75      	ldr	r3, [pc, #468]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	4972      	ldr	r1, [pc, #456]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
 8001c90:	e025      	b.n	8001cde <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c92:	4b70      	ldr	r3, [pc, #448]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6f      	ldr	r2, [pc, #444]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b6d      	ldr	r3, [pc, #436]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	496a      	ldr	r1, [pc, #424]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb0:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	4965      	ldr	r1, [pc, #404]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fd88 	bl	80027e4 <RCC_SetFlashLatencyFromMSIRange>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e38e      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cde:	f000 fcbf 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8001ce2:	4601      	mov	r1, r0
 8001ce4:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	4a5a      	ldr	r2, [pc, #360]	; (8001e58 <HAL_RCC_OscConfig+0x29c>)
 8001cf0:	5cd3      	ldrb	r3, [r2, r3]
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	fa21 f303 	lsr.w	r3, r1, r3
 8001cfa:	4a58      	ldr	r2, [pc, #352]	; (8001e5c <HAL_RCC_OscConfig+0x2a0>)
 8001cfc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cfe:	4b58      	ldr	r3, [pc, #352]	; (8001e60 <HAL_RCC_OscConfig+0x2a4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f8fc 	bl	8000f00 <HAL_InitTick>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d052      	beq.n	8001db8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	e372      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d032      	beq.n	8001d84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d1e:	4b4d      	ldr	r3, [pc, #308]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a4c      	ldr	r2, [pc, #304]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff f939 	bl	8000fa0 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d32:	f7ff f935 	bl	8000fa0 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e35b      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d44:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d50:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a3f      	ldr	r2, [pc, #252]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d56:	f043 0308 	orr.w	r3, r3, #8
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	493a      	ldr	r1, [pc, #232]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d6e:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	4935      	ldr	r1, [pc, #212]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	604b      	str	r3, [r1, #4]
 8001d82:	e01a      	b.n	8001dba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d84:	4b33      	ldr	r3, [pc, #204]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a32      	ldr	r2, [pc, #200]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d90:	f7ff f906 	bl	8000fa0 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d98:	f7ff f902 	bl	8000fa0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e328      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x1dc>
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001db8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d073      	beq.n	8001eae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x21c>
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	d10e      	bne.n	8001df0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d10b      	bne.n	8001df0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d063      	beq.n	8001eac <HAL_RCC_OscConfig+0x2f0>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d15f      	bne.n	8001eac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e305      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df8:	d106      	bne.n	8001e08 <HAL_RCC_OscConfig+0x24c>
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e01d      	b.n	8001e44 <HAL_RCC_OscConfig+0x288>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x270>
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0x288>
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <HAL_RCC_OscConfig+0x298>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01b      	beq.n	8001e84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f8a8 	bl	8000fa0 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e52:	e010      	b.n	8001e76 <HAL_RCC_OscConfig+0x2ba>
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08005150 	.word	0x08005150
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff f89c 	bl	8000fa0 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	; 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e2c2      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e76:	4baf      	ldr	r3, [pc, #700]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x2a8>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff f88c 	bl	8000fa0 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff f888 	bl	8000fa0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e2ae      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e9e:	4ba5      	ldr	r3, [pc, #660]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x2d0>
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d060      	beq.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_OscConfig+0x310>
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d119      	bne.n	8001efa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d116      	bne.n	8001efa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ecc:	4b99      	ldr	r3, [pc, #612]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x328>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e28b      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b93      	ldr	r3, [pc, #588]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	061b      	lsls	r3, r3, #24
 8001ef2:	4990      	ldr	r1, [pc, #576]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef8:	e040      	b.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d023      	beq.n	8001f4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f02:	4b8c      	ldr	r3, [pc, #560]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a8b      	ldr	r2, [pc, #556]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7ff f847 	bl	8000fa0 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f16:	f7ff f843 	bl	8000fa0 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e269      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f28:	4b82      	ldr	r3, [pc, #520]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f34:	4b7f      	ldr	r3, [pc, #508]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	061b      	lsls	r3, r3, #24
 8001f42:	497c      	ldr	r1, [pc, #496]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
 8001f48:	e018      	b.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4a:	4b7a      	ldr	r3, [pc, #488]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a79      	ldr	r2, [pc, #484]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7ff f823 	bl	8000fa0 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5e:	f7ff f81f 	bl	8000fa0 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e245      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f70:	4b70      	ldr	r3, [pc, #448]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d03c      	beq.n	8002002 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01c      	beq.n	8001fca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f90:	4b68      	ldr	r3, [pc, #416]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	4a67      	ldr	r2, [pc, #412]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa0:	f7fe fffe 	bl	8000fa0 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7fe fffa 	bl	8000fa0 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e220      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fba:	4b5e      	ldr	r3, [pc, #376]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ef      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x3ec>
 8001fc8:	e01b      	b.n	8002002 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fca:	4b5a      	ldr	r3, [pc, #360]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd0:	4a58      	ldr	r2, [pc, #352]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7fe ffe1 	bl	8000fa0 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe2:	f7fe ffdd 	bl	8000fa0 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e203      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ff4:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ef      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80a6 	beq.w	800215c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002014:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10d      	bne.n	800203c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	4b44      	ldr	r3, [pc, #272]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	4a43      	ldr	r2, [pc, #268]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202a:	6593      	str	r3, [r2, #88]	; 0x58
 800202c:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002038:	2301      	movs	r3, #1
 800203a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203c:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_RCC_OscConfig+0x57c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d118      	bne.n	800207a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_RCC_OscConfig+0x57c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <HAL_RCC_OscConfig+0x57c>)
 800204e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002052:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002054:	f7fe ffa4 	bl	8000fa0 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205c:	f7fe ffa0 	bl	8000fa0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1c6      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206e:	4b32      	ldr	r3, [pc, #200]	; (8002138 <HAL_RCC_OscConfig+0x57c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d108      	bne.n	8002094 <HAL_RCC_OscConfig+0x4d8>
 8002082:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002092:	e024      	b.n	80020de <HAL_RCC_OscConfig+0x522>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b05      	cmp	r3, #5
 800209a:	d110      	bne.n	80020be <HAL_RCC_OscConfig+0x502>
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	4a20      	ldr	r2, [pc, #128]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020bc:	e00f      	b.n	80020de <HAL_RCC_OscConfig+0x522>
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	4a17      	ldr	r2, [pc, #92]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 80020d6:	f023 0304 	bic.w	r3, r3, #4
 80020da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7fe ff5b 	bl	8000fa0 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7fe ff57 	bl	8000fa0 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e17b      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_OscConfig+0x578>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0ed      	beq.n	80020ee <HAL_RCC_OscConfig+0x532>
 8002112:	e01a      	b.n	800214a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7fe ff44 	bl	8000fa0 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800211a:	e00f      	b.n	800213c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211c:	f7fe ff40 	bl	8000fa0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	; 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d906      	bls.n	800213c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e164      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800213c:	4ba8      	ldr	r3, [pc, #672]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1e8      	bne.n	800211c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214a:	7ffb      	ldrb	r3, [r7, #31]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002150:	4ba3      	ldr	r3, [pc, #652]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	4aa2      	ldr	r2, [pc, #648]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01c      	beq.n	80021aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002170:	4b9b      	ldr	r3, [pc, #620]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002172:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002176:	4a9a      	ldr	r2, [pc, #616]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7fe ff0e 	bl	8000fa0 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002188:	f7fe ff0a 	bl	8000fa0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e130      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800219a:	4b91      	ldr	r3, [pc, #580]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800219c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ef      	beq.n	8002188 <HAL_RCC_OscConfig+0x5cc>
 80021a8:	e01b      	b.n	80021e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021aa:	4b8d      	ldr	r3, [pc, #564]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80021ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021b0:	4a8b      	ldr	r2, [pc, #556]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7fe fef1 	bl	8000fa0 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c2:	f7fe feed 	bl	8000fa0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e113      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021d4:	4b82      	ldr	r3, [pc, #520]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80021d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1ef      	bne.n	80021c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8107 	beq.w	80023fa <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	f040 80cb 	bne.w	800238c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021f6:	4b7a      	ldr	r3, [pc, #488]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f003 0203 	and.w	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	429a      	cmp	r2, r3
 8002208:	d12c      	bne.n	8002264 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	3b01      	subs	r3, #1
 8002216:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d123      	bne.n	8002264 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002226:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d11b      	bne.n	8002264 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d113      	bne.n	8002264 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	3b01      	subs	r3, #1
 800224a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d109      	bne.n	8002264 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	3b01      	subs	r3, #1
 800225e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d06d      	beq.n	8002340 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d068      	beq.n	800233c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800226a:	4b5d      	ldr	r3, [pc, #372]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002276:	4b5a      	ldr	r3, [pc, #360]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0ba      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002286:	4b56      	ldr	r3, [pc, #344]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a55      	ldr	r2, [pc, #340]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800228c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002290:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002292:	f7fe fe85 	bl	8000fa0 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229a:	f7fe fe81 	bl	8000fa0 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0a7      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ac:	4b4c      	ldr	r3, [pc, #304]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f0      	bne.n	800229a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b8:	4b49      	ldr	r3, [pc, #292]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <HAL_RCC_OscConfig+0x828>)
 80022be:	4013      	ands	r3, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022c8:	3a01      	subs	r2, #1
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	4311      	orrs	r1, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022d2:	0212      	lsls	r2, r2, #8
 80022d4:	4311      	orrs	r1, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022da:	0852      	lsrs	r2, r2, #1
 80022dc:	3a01      	subs	r2, #1
 80022de:	0552      	lsls	r2, r2, #21
 80022e0:	4311      	orrs	r1, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022e6:	0852      	lsrs	r2, r2, #1
 80022e8:	3a01      	subs	r2, #1
 80022ea:	0652      	lsls	r2, r2, #25
 80022ec:	4311      	orrs	r1, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022f2:	06d2      	lsls	r2, r2, #27
 80022f4:	430a      	orrs	r2, r1
 80022f6:	493a      	ldr	r1, [pc, #232]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022fc:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a37      	ldr	r2, [pc, #220]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002306:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002308:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a34      	ldr	r2, [pc, #208]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800230e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002312:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002314:	f7fe fe44 	bl	8000fa0 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe fe40 	bl	8000fa0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e066      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232e:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800233a:	e05e      	b.n	80023fa <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e05d      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002340:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d156      	bne.n	80023fa <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800234c:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a23      	ldr	r2, [pc, #140]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002356:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a20      	ldr	r2, [pc, #128]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 800235e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002362:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002364:	f7fe fe1c 	bl	8000fa0 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7fe fe18 	bl	8000fa0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e03e      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x7b0>
 800238a:	e036      	b.n	80023fa <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d031      	beq.n	80023f6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 8002398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800239c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80023b0:	f023 0303 	bic.w	r3, r3, #3
 80023b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_RCC_OscConfig+0x824>)
 80023bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe fdeb 	bl	8000fa0 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023cc:	e00c      	b.n	80023e8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fde7 	bl	8000fa0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d905      	bls.n	80023e8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e00d      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
 80023e0:	40021000 	.word	0x40021000
 80023e4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_RCC_OscConfig+0x848>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ec      	bne.n	80023ce <HAL_RCC_OscConfig+0x812>
 80023f4:	e001      	b.n	80023fa <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000

08002408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e10f      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002420:	4b89      	ldr	r3, [pc, #548]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d910      	bls.n	8002450 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b86      	ldr	r3, [pc, #536]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 020f 	bic.w	r2, r3, #15
 8002436:	4984      	ldr	r1, [pc, #528]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b82      	ldr	r3, [pc, #520]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0f7      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8089 	beq.w	8002570 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d133      	bne.n	80024ce <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002466:	4b79      	ldr	r3, [pc, #484]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0e4      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002476:	f000 fa0f 	bl	8002898 <RCC_GetSysClockFreqFromPLLSource>
 800247a:	4602      	mov	r2, r0
 800247c:	4b74      	ldr	r3, [pc, #464]	; (8002650 <HAL_RCC_ClockConfig+0x248>)
 800247e:	429a      	cmp	r2, r3
 8002480:	d955      	bls.n	800252e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002482:	4b72      	ldr	r3, [pc, #456]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10a      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800248e:	4b6f      	ldr	r3, [pc, #444]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002496:	4a6d      	ldr	r2, [pc, #436]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	e044      	b.n	800252e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d03e      	beq.n	800252e <HAL_RCC_ClockConfig+0x126>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d13a      	bne.n	800252e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024b8:	4b64      	ldr	r3, [pc, #400]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024c0:	4a62      	ldr	r2, [pc, #392]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80024c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	e02f      	b.n	800252e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d6:	4b5d      	ldr	r3, [pc, #372]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d115      	bne.n	800250e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0ac      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ee:	4b57      	ldr	r3, [pc, #348]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0a0      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024fe:	4b53      	ldr	r3, [pc, #332]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e098      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800250e:	f000 f8a7 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b4e      	ldr	r3, [pc, #312]	; (8002650 <HAL_RCC_ClockConfig+0x248>)
 8002516:	429a      	cmp	r2, r3
 8002518:	d909      	bls.n	800252e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800251a:	4b4c      	ldr	r3, [pc, #304]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002522:	4a4a      	ldr	r2, [pc, #296]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002528:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 0203 	bic.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4944      	ldr	r1, [pc, #272]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002540:	f7fe fd2e 	bl	8000fa0 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	e00a      	b.n	800255e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe fd2a 	bl	8000fa0 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e070      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	4b3b      	ldr	r3, [pc, #236]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 020c 	and.w	r2, r3, #12
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	429a      	cmp	r2, r3
 800256e:	d1eb      	bne.n	8002548 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b33      	ldr	r3, [pc, #204]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4930      	ldr	r1, [pc, #192]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
 800258e:	e008      	b.n	80025a2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b80      	cmp	r3, #128	; 0x80
 8002594:	d105      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002596:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	4a2c      	ldr	r2, [pc, #176]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 800259c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025a0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a2:	4b29      	ldr	r3, [pc, #164]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d210      	bcs.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 020f 	bic.w	r2, r3, #15
 80025b8:	4923      	ldr	r1, [pc, #140]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c0:	4b21      	ldr	r3, [pc, #132]	; (8002648 <HAL_RCC_ClockConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e036      	b.n	8002640 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025de:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4918      	ldr	r1, [pc, #96]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4910      	ldr	r1, [pc, #64]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 800260c:	4313      	orrs	r3, r2
 800260e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002610:	f000 f826 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8002614:	4601      	mov	r1, r0
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_RCC_ClockConfig+0x244>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <HAL_RCC_ClockConfig+0x24c>)
 8002622:	5cd3      	ldrb	r3, [r2, r3]
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	fa21 f303 	lsr.w	r3, r1, r3
 800262c:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <HAL_RCC_ClockConfig+0x250>)
 800262e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <HAL_RCC_ClockConfig+0x254>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe fc63 	bl	8000f00 <HAL_InitTick>
 800263a:	4603      	mov	r3, r0
 800263c:	73fb      	strb	r3, [r7, #15]

  return status;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40022000 	.word	0x40022000
 800264c:	40021000 	.word	0x40021000
 8002650:	04c4b400 	.word	0x04c4b400
 8002654:	08005150 	.word	0x08005150
 8002658:	20000004 	.word	0x20000004
 800265c:	20000008 	.word	0x20000008

08002660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266e:	4b3d      	ldr	r3, [pc, #244]	; (8002764 <HAL_RCC_GetSysClockFreq+0x104>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002678:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_RCC_GetSysClockFreq+0x104>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x34>
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d121      	bne.n	80026d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d11e      	bne.n	80026d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002694:	4b33      	ldr	r3, [pc, #204]	; (8002764 <HAL_RCC_GetSysClockFreq+0x104>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d107      	bne.n	80026b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026a0:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCC_GetSysClockFreq+0x104>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e005      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026b0:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <HAL_RCC_GetSysClockFreq+0x104>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026bc:	4a2a      	ldr	r2, [pc, #168]	; (8002768 <HAL_RCC_GetSysClockFreq+0x108>)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10d      	bne.n	80026e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d102      	bne.n	80026de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026d8:	4b24      	ldr	r3, [pc, #144]	; (800276c <HAL_RCC_GetSysClockFreq+0x10c>)
 80026da:	61bb      	str	r3, [r7, #24]
 80026dc:	e004      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026e4:	4b22      	ldr	r3, [pc, #136]	; (8002770 <HAL_RCC_GetSysClockFreq+0x110>)
 80026e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d133      	bne.n	8002756 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_RCC_GetSysClockFreq+0x104>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d002      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0xa4>
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d003      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0xaa>
 8002702:	e005      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002706:	617b      	str	r3, [r7, #20]
      break;
 8002708:	e005      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_RCC_GetSysClockFreq+0x110>)
 800270c:	617b      	str	r3, [r7, #20]
      break;
 800270e:	e002      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	617b      	str	r3, [r7, #20]
      break;
 8002714:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_RCC_GetSysClockFreq+0x104>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	3301      	adds	r3, #1
 8002722:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <HAL_RCC_GetSysClockFreq+0x104>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	0a1b      	lsrs	r3, r3, #8
 800272a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	fb02 f203 	mul.w	r2, r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_GetSysClockFreq+0x104>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0e5b      	lsrs	r3, r3, #25
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	3301      	adds	r3, #1
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002756:	69bb      	ldr	r3, [r7, #24]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3724      	adds	r7, #36	; 0x24
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40021000 	.word	0x40021000
 8002768:	08005168 	.word	0x08005168
 800276c:	00f42400 	.word	0x00f42400
 8002770:	007a1200 	.word	0x007a1200

08002774 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCC_GetHCLKFreq+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000004 	.word	0x20000004

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002790:	f7ff fff0 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 8002794:	4601      	mov	r1, r0
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000
 80027b4:	08005160 	.word	0x08005160

080027b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027bc:	f7ff ffda 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 80027c0:	4601      	mov	r1, r0
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	0adb      	lsrs	r3, r3, #11
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08005160 	.word	0x08005160

080027e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027ec:	2300      	movs	r3, #0
 80027ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027f0:	4b27      	ldr	r3, [pc, #156]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027fc:	f7ff f90a 	bl	8001a14 <HAL_PWREx_GetVoltageRange>
 8002800:	6178      	str	r0, [r7, #20]
 8002802:	e014      	b.n	800282e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002804:	4b22      	ldr	r3, [pc, #136]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	4a21      	ldr	r2, [pc, #132]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800280a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280e:	6593      	str	r3, [r2, #88]	; 0x58
 8002810:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800281c:	f7ff f8fa 	bl	8001a14 <HAL_PWREx_GetVoltageRange>
 8002820:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002822:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002834:	d10b      	bne.n	800284e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b80      	cmp	r3, #128	; 0x80
 800283a:	d913      	bls.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2ba0      	cmp	r3, #160	; 0xa0
 8002840:	d902      	bls.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002842:	2302      	movs	r3, #2
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	e00d      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002848:	2301      	movs	r3, #1
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	e00a      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b7f      	cmp	r3, #127	; 0x7f
 8002852:	d902      	bls.n	800285a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002854:	2302      	movs	r3, #2
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	e004      	b.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b70      	cmp	r3, #112	; 0x70
 800285e:	d101      	bne.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002860:	2301      	movs	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 020f 	bic.w	r2, r3, #15
 800286c:	4909      	ldr	r1, [pc, #36]	; (8002894 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	429a      	cmp	r2, r3
 8002880:	d001      	beq.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	40022000 	.word	0x40022000

08002898 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80028a2:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d118      	bne.n	80028e0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d107      	bne.n	80028ca <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028ba:	4b27      	ldr	r3, [pc, #156]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	e005      	b.n	80028d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028d6:	4a21      	ldr	r2, [pc, #132]	; (800295c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028de:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d002      	beq.n	80028f6 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d003      	beq.n	80028fc <RCC_GetSysClockFreqFromPLLSource+0x64>
 80028f4:	e005      	b.n	8002902 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80028f8:	613b      	str	r3, [r7, #16]
    break;
 80028fa:	e005      	b.n	8002908 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80028fe:	613b      	str	r3, [r7, #16]
    break;
 8002900:	e002      	b.n	8002908 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	613b      	str	r3, [r7, #16]
    break;
 8002906:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3301      	adds	r3, #1
 8002914:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	fb02 f203 	mul.w	r2, r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	0e5b      	lsrs	r3, r3, #25
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	3301      	adds	r3, #1
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002948:	683b      	ldr	r3, [r7, #0]
}
 800294a:	4618      	mov	r0, r3
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	08005168 	.word	0x08005168
 8002960:	00f42400 	.word	0x00f42400
 8002964:	007a1200 	.word	0x007a1200

08002968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002970:	2300      	movs	r3, #0
 8002972:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002974:	2300      	movs	r3, #0
 8002976:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002980:	2b00      	cmp	r3, #0
 8002982:	d03d      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002988:	2b40      	cmp	r3, #64	; 0x40
 800298a:	d00b      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d804      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00e      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002994:	2b20      	cmp	r3, #32
 8002996:	d015      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002998:	e01d      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800299a:	2b60      	cmp	r3, #96	; 0x60
 800299c:	d01e      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 800299e:	2b80      	cmp	r3, #128	; 0x80
 80029a0:	d01c      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029a2:	e018      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029a4:	4b86      	ldr	r3, [pc, #536]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a85      	ldr	r2, [pc, #532]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029b0:	e015      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fafd 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029c2:	e00c      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3320      	adds	r3, #32
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fbe4 	bl	8003198 <RCCEx_PLLSAI2_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d4:	e003      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	74fb      	strb	r3, [r7, #19]
      break;
 80029da:	e000      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80029dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029e4:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029ea:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f2:	4973      	ldr	r1, [pc, #460]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80029fa:	e001      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d042      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a14:	d00f      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a1a:	d805      	bhi.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d011      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a24:	d017      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002a26:	e01f      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002a28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a2c:	d01f      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a32:	d01c      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a34:	e018      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a36:	4b62      	ldr	r3, [pc, #392]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4a61      	ldr	r2, [pc, #388]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a40:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a42:	e015      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fab4 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a54:	e00c      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3320      	adds	r3, #32
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fb9b 	bl	8003198 <RCCEx_PLLSAI2_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a66:	e003      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	74fb      	strb	r3, [r7, #19]
      break;
 8002a6c:	e000      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8002a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a76:	4b52      	ldr	r3, [pc, #328]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	494e      	ldr	r1, [pc, #312]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a8c:	e001      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 809f 	beq.w	8002bde <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aa4:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	4a40      	ldr	r2, [pc, #256]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ac6:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad6:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a3a      	ldr	r2, [pc, #232]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ae2:	f7fe fa5d 	bl	8000fa0 <HAL_GetTick>
 8002ae6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ae8:	e009      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aea:	f7fe fa59 	bl	8000fa0 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d902      	bls.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	74fb      	strb	r3, [r7, #19]
        break;
 8002afc:	e005      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002afe:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ef      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8002b0a:	7cfb      	ldrb	r3, [r7, #19]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d15b      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01f      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d019      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b2e:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b38:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b40:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	4a1b      	ldr	r2, [pc, #108]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b5a:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d016      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fa18 	bl	8000fa0 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b72:	e00b      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7fe fa14 	bl	8000fa0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d902      	bls.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	74fb      	strb	r3, [r7, #19]
            break;
 8002b8a:	e006      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0ec      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10c      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	4903      	ldr	r1, [pc, #12]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bb8:	e008      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bba:	7cfb      	ldrb	r3, [r7, #19]
 8002bbc:	74bb      	strb	r3, [r7, #18]
 8002bbe:	e005      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bcc:	7c7b      	ldrb	r3, [r7, #17]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd2:	4ba0      	ldr	r3, [pc, #640]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	4a9f      	ldr	r2, [pc, #636]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bea:	4b9a      	ldr	r3, [pc, #616]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf0:	f023 0203 	bic.w	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	4996      	ldr	r1, [pc, #600]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c0c:	4b91      	ldr	r3, [pc, #580]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f023 020c 	bic.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	498e      	ldr	r1, [pc, #568]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c2e:	4b89      	ldr	r3, [pc, #548]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	4985      	ldr	r1, [pc, #532]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c50:	4b80      	ldr	r3, [pc, #512]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	497d      	ldr	r1, [pc, #500]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c72:	4b78      	ldr	r3, [pc, #480]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	4974      	ldr	r1, [pc, #464]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c94:	4b6f      	ldr	r3, [pc, #444]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	496c      	ldr	r1, [pc, #432]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cb6:	4b67      	ldr	r3, [pc, #412]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cc4:	4963      	ldr	r1, [pc, #396]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cd8:	4b5e      	ldr	r3, [pc, #376]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ce6:	495b      	ldr	r1, [pc, #364]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cfa:	4b56      	ldr	r3, [pc, #344]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	4952      	ldr	r1, [pc, #328]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d1c:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	494a      	ldr	r1, [pc, #296]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d3e:	4b45      	ldr	r3, [pc, #276]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	4941      	ldr	r1, [pc, #260]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d60:	4b3c      	ldr	r3, [pc, #240]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6e:	4939      	ldr	r1, [pc, #228]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d028      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d82:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d90:	4930      	ldr	r1, [pc, #192]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da0:	d106      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da2:	4b2c      	ldr	r3, [pc, #176]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dac:	60d3      	str	r3, [r2, #12]
 8002dae:	e011      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 f8f9 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d04d      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de8:	d108      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002dea:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002df0:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002dfa:	e012      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002dfc:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e02:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e1a:	490e      	ldr	r1, [pc, #56]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e36:	60d3      	str	r3, [r2, #12]
 8002e38:	e020      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e42:	d109      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a02      	ldr	r2, [pc, #8]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4e:	60d3      	str	r3, [r2, #12]
 8002e50:	e014      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2101      	movs	r1, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 f8a5 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e72:	7cfb      	ldrb	r3, [r7, #19]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e78:	7cfb      	ldrb	r3, [r7, #19]
 8002e7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d028      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e88:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e96:	4947      	ldr	r1, [pc, #284]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea8:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a41      	ldr	r2, [pc, #260]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eb2:	60d3      	str	r3, [r2, #12]
 8002eb4:	e011      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f876 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d01e      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ee6:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef6:	492f      	ldr	r1, [pc, #188]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2102      	movs	r1, #2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 f851 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002f16:	4603      	mov	r3, r0
 8002f18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00b      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f30:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f36:	f023 0204 	bic.w	r2, r3, #4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f40:	491c      	ldr	r1, [pc, #112]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f54:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f5a:	f023 0218 	bic.w	r2, r3, #24
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	4913      	ldr	r1, [pc, #76]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d017      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f88:	490a      	ldr	r1, [pc, #40]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fa6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fa8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000

08002fb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fc6:	4b70      	ldr	r3, [pc, #448]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00e      	beq.n	8002ff0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fd2:	4b6d      	ldr	r3, [pc, #436]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 0203 	and.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d103      	bne.n	8002fea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d13f      	bne.n	800306a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
 8002fee:	e03c      	b.n	800306a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d00c      	beq.n	8003012 <RCCEx_PLLSAI1_Config+0x5a>
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d013      	beq.n	8003024 <RCCEx_PLLSAI1_Config+0x6c>
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d120      	bne.n	8003042 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003000:	4b61      	ldr	r3, [pc, #388]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d11d      	bne.n	8003048 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003010:	e01a      	b.n	8003048 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003012:	4b5d      	ldr	r3, [pc, #372]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003022:	e013      	b.n	800304c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003024:	4b58      	ldr	r3, [pc, #352]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10f      	bne.n	8003050 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003030:	4b55      	ldr	r3, [pc, #340]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d109      	bne.n	8003050 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003040:	e006      	b.n	8003050 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
      break;
 8003046:	e004      	b.n	8003052 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003048:	bf00      	nop
 800304a:	e002      	b.n	8003052 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800304c:	bf00      	nop
 800304e:	e000      	b.n	8003052 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003050:	bf00      	nop
    }

    if(status == HAL_OK)
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d108      	bne.n	800306a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003058:	4b4b      	ldr	r3, [pc, #300]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f023 0203 	bic.w	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4948      	ldr	r1, [pc, #288]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f040 8086 	bne.w	800317e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003072:	4b45      	ldr	r3, [pc, #276]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a44      	ldr	r2, [pc, #272]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003078:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800307c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307e:	f7fd ff8f 	bl	8000fa0 <HAL_GetTick>
 8003082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003084:	e009      	b.n	800309a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003086:	f7fd ff8b 	bl	8000fa0 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d902      	bls.n	800309a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	73fb      	strb	r3, [r7, #15]
        break;
 8003098:	e005      	b.n	80030a6 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800309a:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1ef      	bne.n	8003086 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d168      	bne.n	800317e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d113      	bne.n	80030da <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030b2:	4b35      	ldr	r3, [pc, #212]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	4b35      	ldr	r3, [pc, #212]	; (800318c <RCCEx_PLLSAI1_Config+0x1d4>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6892      	ldr	r2, [r2, #8]
 80030be:	0211      	lsls	r1, r2, #8
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68d2      	ldr	r2, [r2, #12]
 80030c4:	06d2      	lsls	r2, r2, #27
 80030c6:	4311      	orrs	r1, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6852      	ldr	r2, [r2, #4]
 80030cc:	3a01      	subs	r2, #1
 80030ce:	0112      	lsls	r2, r2, #4
 80030d0:	430a      	orrs	r2, r1
 80030d2:	492d      	ldr	r1, [pc, #180]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	610b      	str	r3, [r1, #16]
 80030d8:	e02d      	b.n	8003136 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d115      	bne.n	800310c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e0:	4b29      	ldr	r3, [pc, #164]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6892      	ldr	r2, [r2, #8]
 80030ec:	0211      	lsls	r1, r2, #8
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6912      	ldr	r2, [r2, #16]
 80030f2:	0852      	lsrs	r2, r2, #1
 80030f4:	3a01      	subs	r2, #1
 80030f6:	0552      	lsls	r2, r2, #21
 80030f8:	4311      	orrs	r1, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6852      	ldr	r2, [r2, #4]
 80030fe:	3a01      	subs	r2, #1
 8003100:	0112      	lsls	r2, r2, #4
 8003102:	430a      	orrs	r2, r1
 8003104:	4920      	ldr	r1, [pc, #128]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003106:	4313      	orrs	r3, r2
 8003108:	610b      	str	r3, [r1, #16]
 800310a:	e014      	b.n	8003136 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003112:	4013      	ands	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6892      	ldr	r2, [r2, #8]
 8003118:	0211      	lsls	r1, r2, #8
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6952      	ldr	r2, [r2, #20]
 800311e:	0852      	lsrs	r2, r2, #1
 8003120:	3a01      	subs	r2, #1
 8003122:	0652      	lsls	r2, r2, #25
 8003124:	4311      	orrs	r1, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6852      	ldr	r2, [r2, #4]
 800312a:	3a01      	subs	r2, #1
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	430a      	orrs	r2, r1
 8003130:	4915      	ldr	r1, [pc, #84]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003132:	4313      	orrs	r3, r2
 8003134:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003136:	4b14      	ldr	r3, [pc, #80]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a13      	ldr	r2, [pc, #76]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 800313c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003140:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003142:	f7fd ff2d 	bl	8000fa0 <HAL_GetTick>
 8003146:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003148:	e009      	b.n	800315e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800314a:	f7fd ff29 	bl	8000fa0 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d902      	bls.n	800315e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	73fb      	strb	r3, [r7, #15]
          break;
 800315c:	e005      	b.n	800316a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0ef      	beq.n	800314a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d106      	bne.n	800317e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	4903      	ldr	r1, [pc, #12]	; (8003188 <RCCEx_PLLSAI1_Config+0x1d0>)
 800317a:	4313      	orrs	r3, r2
 800317c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800317e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000
 800318c:	07ff800f 	.word	0x07ff800f
 8003190:	ff9f800f 	.word	0xff9f800f
 8003194:	f9ff800f 	.word	0xf9ff800f

08003198 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031a6:	4b70      	ldr	r3, [pc, #448]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00e      	beq.n	80031d0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031b2:	4b6d      	ldr	r3, [pc, #436]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0203 	and.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d103      	bne.n	80031ca <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
       ||
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d13f      	bne.n	800324a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	e03c      	b.n	800324a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d00c      	beq.n	80031f2 <RCCEx_PLLSAI2_Config+0x5a>
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d013      	beq.n	8003204 <RCCEx_PLLSAI2_Config+0x6c>
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d120      	bne.n	8003222 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031e0:	4b61      	ldr	r3, [pc, #388]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d11d      	bne.n	8003228 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f0:	e01a      	b.n	8003228 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031f2:	4b5d      	ldr	r3, [pc, #372]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d116      	bne.n	800322c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003202:	e013      	b.n	800322c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003204:	4b58      	ldr	r3, [pc, #352]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10f      	bne.n	8003230 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003210:	4b55      	ldr	r3, [pc, #340]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003220:	e006      	b.n	8003230 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
      break;
 8003226:	e004      	b.n	8003232 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003228:	bf00      	nop
 800322a:	e002      	b.n	8003232 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800322c:	bf00      	nop
 800322e:	e000      	b.n	8003232 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003230:	bf00      	nop
    }

    if(status == HAL_OK)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d108      	bne.n	800324a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003238:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f023 0203 	bic.w	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4948      	ldr	r1, [pc, #288]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003246:	4313      	orrs	r3, r2
 8003248:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 8086 	bne.w	800335e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003252:	4b45      	ldr	r3, [pc, #276]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a44      	ldr	r2, [pc, #272]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325e:	f7fd fe9f 	bl	8000fa0 <HAL_GetTick>
 8003262:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003264:	e009      	b.n	800327a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003266:	f7fd fe9b 	bl	8000fa0 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d902      	bls.n	800327a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	73fb      	strb	r3, [r7, #15]
        break;
 8003278:	e005      	b.n	8003286 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800327a:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1ef      	bne.n	8003266 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d168      	bne.n	800335e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d113      	bne.n	80032ba <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003292:	4b35      	ldr	r3, [pc, #212]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	4b35      	ldr	r3, [pc, #212]	; (800336c <RCCEx_PLLSAI2_Config+0x1d4>)
 8003298:	4013      	ands	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6892      	ldr	r2, [r2, #8]
 800329e:	0211      	lsls	r1, r2, #8
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	68d2      	ldr	r2, [r2, #12]
 80032a4:	06d2      	lsls	r2, r2, #27
 80032a6:	4311      	orrs	r1, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6852      	ldr	r2, [r2, #4]
 80032ac:	3a01      	subs	r2, #1
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	430a      	orrs	r2, r1
 80032b2:	492d      	ldr	r1, [pc, #180]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	614b      	str	r3, [r1, #20]
 80032b8:	e02d      	b.n	8003316 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d115      	bne.n	80032ec <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032c0:	4b29      	ldr	r3, [pc, #164]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6892      	ldr	r2, [r2, #8]
 80032cc:	0211      	lsls	r1, r2, #8
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6912      	ldr	r2, [r2, #16]
 80032d2:	0852      	lsrs	r2, r2, #1
 80032d4:	3a01      	subs	r2, #1
 80032d6:	0552      	lsls	r2, r2, #21
 80032d8:	4311      	orrs	r1, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6852      	ldr	r2, [r2, #4]
 80032de:	3a01      	subs	r2, #1
 80032e0:	0112      	lsls	r2, r2, #4
 80032e2:	430a      	orrs	r2, r1
 80032e4:	4920      	ldr	r1, [pc, #128]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	614b      	str	r3, [r1, #20]
 80032ea:	e014      	b.n	8003316 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032ec:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	4b20      	ldr	r3, [pc, #128]	; (8003374 <RCCEx_PLLSAI2_Config+0x1dc>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6892      	ldr	r2, [r2, #8]
 80032f8:	0211      	lsls	r1, r2, #8
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6952      	ldr	r2, [r2, #20]
 80032fe:	0852      	lsrs	r2, r2, #1
 8003300:	3a01      	subs	r2, #1
 8003302:	0652      	lsls	r2, r2, #25
 8003304:	4311      	orrs	r1, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6852      	ldr	r2, [r2, #4]
 800330a:	3a01      	subs	r2, #1
 800330c:	0112      	lsls	r2, r2, #4
 800330e:	430a      	orrs	r2, r1
 8003310:	4915      	ldr	r1, [pc, #84]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003312:	4313      	orrs	r3, r2
 8003314:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003316:	4b14      	ldr	r3, [pc, #80]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a13      	ldr	r2, [pc, #76]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003320:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003322:	f7fd fe3d 	bl	8000fa0 <HAL_GetTick>
 8003326:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003328:	e009      	b.n	800333e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800332a:	f7fd fe39 	bl	8000fa0 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d902      	bls.n	800333e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	73fb      	strb	r3, [r7, #15]
          break;
 800333c:	e005      	b.n	800334a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ef      	beq.n	800332a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	4903      	ldr	r1, [pc, #12]	; (8003368 <RCCEx_PLLSAI2_Config+0x1d0>)
 800335a:	4313      	orrs	r3, r2
 800335c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800335e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	07ff800f 	.word	0x07ff800f
 8003370:	ff9f800f 	.word	0xff9f800f
 8003374:	f9ff800f 	.word	0xf9ff800f

08003378 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e095      	b.n	80034b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	2b00      	cmp	r3, #0
 8003390:	d108      	bne.n	80033a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800339a:	d009      	beq.n	80033b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	61da      	str	r2, [r3, #28]
 80033a2:	e005      	b.n	80033b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fd fcaa 	bl	8000d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033f0:	d902      	bls.n	80033f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	e002      	b.n	80033fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80033f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003406:	d007      	beq.n	8003418 <HAL_SPI_Init+0xa0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003410:	d002      	beq.n	8003418 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345a:	ea42 0103 	orr.w	r1, r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	0c1b      	lsrs	r3, r3, #16
 8003474:	f003 0204 	and.w	r2, r3, #4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003494:	ea42 0103 	orr.w	r1, r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b088      	sub	sp, #32
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_SPI_Transmit+0x22>
 80034dc:	2302      	movs	r3, #2
 80034de:	e158      	b.n	8003792 <HAL_SPI_Transmit+0x2d4>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034e8:	f7fd fd5a 	bl	8000fa0 <HAL_GetTick>
 80034ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d002      	beq.n	8003504 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
 8003500:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003502:	e13d      	b.n	8003780 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_SPI_Transmit+0x52>
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003514:	e134      	b.n	8003780 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2203      	movs	r2, #3
 800351a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	88fa      	ldrh	r2, [r7, #6]
 800352e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	88fa      	ldrh	r2, [r7, #6]
 8003534:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003560:	d10f      	bne.n	8003582 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003570:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003580:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d007      	beq.n	80035a0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035a8:	d94b      	bls.n	8003642 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_SPI_Transmit+0xfa>
 80035b2:	8afb      	ldrh	r3, [r7, #22]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d13e      	bne.n	8003636 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	881a      	ldrh	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	1c9a      	adds	r2, r3, #2
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035dc:	e02b      	b.n	8003636 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d112      	bne.n	8003612 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	881a      	ldrh	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	1c9a      	adds	r2, r3, #2
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003610:	e011      	b.n	8003636 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003612:	f7fd fcc5 	bl	8000fa0 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d803      	bhi.n	800362a <HAL_SPI_Transmit+0x16c>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d102      	bne.n	8003630 <HAL_SPI_Transmit+0x172>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003634:	e0a4      	b.n	8003780 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ce      	bne.n	80035de <HAL_SPI_Transmit+0x120>
 8003640:	e07c      	b.n	800373c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_SPI_Transmit+0x192>
 800364a:	8afb      	ldrh	r3, [r7, #22]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d170      	bne.n	8003732 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b01      	cmp	r3, #1
 8003658:	d912      	bls.n	8003680 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	881a      	ldrh	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	1c9a      	adds	r2, r3, #2
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b02      	subs	r3, #2
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800367e:	e058      	b.n	8003732 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	7812      	ldrb	r2, [r2, #0]
 800368c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80036a6:	e044      	b.n	8003732 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d12b      	bne.n	800370e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d912      	bls.n	80036e6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	881a      	ldrh	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	1c9a      	adds	r2, r3, #2
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b02      	subs	r3, #2
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036e4:	e025      	b.n	8003732 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	330c      	adds	r3, #12
 80036f0:	7812      	ldrb	r2, [r2, #0]
 80036f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800370c:	e011      	b.n	8003732 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800370e:	f7fd fc47 	bl	8000fa0 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d803      	bhi.n	8003726 <HAL_SPI_Transmit+0x268>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d102      	bne.n	800372c <HAL_SPI_Transmit+0x26e>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003730:	e026      	b.n	8003780 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1b5      	bne.n	80036a8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	6839      	ldr	r1, [r7, #0]
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 fcdb 	bl	80040fc <SPI_EndRxTxTransaction>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e000      	b.n	8003780 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800377e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003790:	7ffb      	ldrb	r3, [r7, #31]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b088      	sub	sp, #32
 800379e:	af02      	add	r7, sp, #8
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b6:	d112      	bne.n	80037de <HAL_SPI_Receive+0x44>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10e      	bne.n	80037de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2204      	movs	r2, #4
 80037c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f910 	bl	80039fa <HAL_SPI_TransmitReceive>
 80037da:	4603      	mov	r3, r0
 80037dc:	e109      	b.n	80039f2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_SPI_Receive+0x52>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e102      	b.n	80039f2 <HAL_SPI_Receive+0x258>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037f4:	f7fd fbd4 	bl	8000fa0 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b01      	cmp	r3, #1
 8003804:	d002      	beq.n	800380c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003806:	2302      	movs	r3, #2
 8003808:	75fb      	strb	r3, [r7, #23]
    goto error;
 800380a:	e0e9      	b.n	80039e0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_SPI_Receive+0x7e>
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800381c:	e0e0      	b.n	80039e0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2204      	movs	r2, #4
 8003822:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	88fa      	ldrh	r2, [r7, #6]
 8003836:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003868:	d908      	bls.n	800387c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	e007      	b.n	800388c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003894:	d10f      	bne.n	80038b6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	d007      	beq.n	80038d4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038dc:	d867      	bhi.n	80039ae <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80038de:	e030      	b.n	8003942 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d117      	bne.n	800391e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f103 020c 	add.w	r2, r3, #12
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800391c:	e011      	b.n	8003942 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800391e:	f7fd fb3f 	bl	8000fa0 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d803      	bhi.n	8003936 <HAL_SPI_Receive+0x19c>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d102      	bne.n	800393c <HAL_SPI_Receive+0x1a2>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003940:	e04e      	b.n	80039e0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1c8      	bne.n	80038e0 <HAL_SPI_Receive+0x146>
 800394e:	e034      	b.n	80039ba <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d115      	bne.n	800398a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	b292      	uxth	r2, r2
 800396a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	1c9a      	adds	r2, r3, #2
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003988:	e011      	b.n	80039ae <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800398a:	f7fd fb09 	bl	8000fa0 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d803      	bhi.n	80039a2 <HAL_SPI_Receive+0x208>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d102      	bne.n	80039a8 <HAL_SPI_Receive+0x20e>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039ac:	e018      	b.n	80039e0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ca      	bne.n	8003950 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	6839      	ldr	r1, [r7, #0]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fb44 	bl	800404c <SPI_EndRxTransaction>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	75fb      	strb	r3, [r7, #23]
 80039dc:	e000      	b.n	80039e0 <HAL_SPI_Receive+0x246>
  }

error :
 80039de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b08a      	sub	sp, #40	; 0x28
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_SPI_TransmitReceive+0x26>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e1fb      	b.n	8003e18 <HAL_SPI_TransmitReceive+0x41e>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a28:	f7fd faba 	bl	8000fa0 <HAL_GetTick>
 8003a2c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a34:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003a3c:	887b      	ldrh	r3, [r7, #2]
 8003a3e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003a40:	887b      	ldrh	r3, [r7, #2]
 8003a42:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a44:	7efb      	ldrb	r3, [r7, #27]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d00e      	beq.n	8003a68 <HAL_SPI_TransmitReceive+0x6e>
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a50:	d106      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x66>
 8003a5a:	7efb      	ldrb	r3, [r7, #27]
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d003      	beq.n	8003a68 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003a66:	e1cd      	b.n	8003e04 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_SPI_TransmitReceive+0x80>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_SPI_TransmitReceive+0x80>
 8003a74:	887b      	ldrh	r3, [r7, #2]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003a80:	e1c0      	b.n	8003e04 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d003      	beq.n	8003a96 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2205      	movs	r2, #5
 8003a92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	887a      	ldrh	r2, [r7, #2]
 8003aa6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	887a      	ldrh	r2, [r7, #2]
 8003aae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	887a      	ldrh	r2, [r7, #2]
 8003ac2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ad8:	d802      	bhi.n	8003ae0 <HAL_SPI_TransmitReceive+0xe6>
 8003ada:	8a3b      	ldrh	r3, [r7, #16]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d908      	bls.n	8003af2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aee:	605a      	str	r2, [r3, #4]
 8003af0:	e007      	b.n	8003b02 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b00:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	d007      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b28:	d97c      	bls.n	8003c24 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_SPI_TransmitReceive+0x13e>
 8003b32:	8a7b      	ldrh	r3, [r7, #18]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d169      	bne.n	8003c0c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	881a      	ldrh	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	1c9a      	adds	r2, r3, #2
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b5c:	e056      	b.n	8003c0c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_SPI_TransmitReceive+0x1aa>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d016      	beq.n	8003ba4 <HAL_SPI_TransmitReceive+0x1aa>
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d113      	bne.n	8003ba4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	881a      	ldrh	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	1c9a      	adds	r2, r3, #2
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d11c      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x1f2>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	b292      	uxth	r2, r2
 8003bca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	1c9a      	adds	r2, r3, #2
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003be8:	2301      	movs	r3, #1
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bec:	f7fd f9d8 	bl	8000fa0 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d807      	bhi.n	8003c0c <HAL_SPI_TransmitReceive+0x212>
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d003      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003c0a:	e0fb      	b.n	8003e04 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1a3      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x164>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d19d      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x164>
 8003c22:	e0df      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x23a>
 8003c2c:	8a7b      	ldrh	r3, [r7, #18]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	f040 80cb 	bne.w	8003dca <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d912      	bls.n	8003c64 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	881a      	ldrh	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	1c9a      	adds	r2, r3, #2
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b02      	subs	r3, #2
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c62:	e0b2      	b.n	8003dca <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	7812      	ldrb	r2, [r2, #0]
 8003c70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c8a:	e09e      	b.n	8003dca <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d134      	bne.n	8003d04 <HAL_SPI_TransmitReceive+0x30a>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d02f      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x30a>
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d12c      	bne.n	8003d04 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d912      	bls.n	8003cda <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	881a      	ldrh	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	1c9a      	adds	r2, r3, #2
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b02      	subs	r3, #2
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cd8:	e012      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	7812      	ldrb	r2, [r2, #0]
 8003ce6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d148      	bne.n	8003da4 <HAL_SPI_TransmitReceive+0x3aa>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d042      	beq.n	8003da4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d923      	bls.n	8003d72 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	b292      	uxth	r2, r2
 8003d36:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	1c9a      	adds	r2, r3, #2
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b02      	subs	r3, #2
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d81f      	bhi.n	8003da0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d6e:	605a      	str	r2, [r3, #4]
 8003d70:	e016      	b.n	8003da0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f103 020c 	add.w	r2, r3, #12
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	7812      	ldrb	r2, [r2, #0]
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003da0:	2301      	movs	r3, #1
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003da4:	f7fd f8fc 	bl	8000fa0 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d803      	bhi.n	8003dbc <HAL_SPI_TransmitReceive+0x3c2>
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d102      	bne.n	8003dc2 <HAL_SPI_TransmitReceive+0x3c8>
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003dc8:	e01c      	b.n	8003e04 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f47f af5b 	bne.w	8003c8c <HAL_SPI_TransmitReceive+0x292>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f47f af54 	bne.w	8003c8c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f987 	bl	80040fc <SPI_EndRxTxTransaction>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d006      	beq.n	8003e02 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	661a      	str	r2, [r3, #96]	; 0x60
 8003e00:	e000      	b.n	8003e04 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003e02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3728      	adds	r7, #40	; 0x28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e30:	f7fd f8b6 	bl	8000fa0 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e40:	f7fd f8ae 	bl	8000fa0 <HAL_GetTick>
 8003e44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e46:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	015b      	lsls	r3, r3, #5
 8003e4c:	0d1b      	lsrs	r3, r3, #20
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e56:	e054      	b.n	8003f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5e:	d050      	beq.n	8003f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e60:	f7fd f89e 	bl	8000fa0 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d902      	bls.n	8003e76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d13d      	bne.n	8003ef2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e8e:	d111      	bne.n	8003eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e98:	d004      	beq.n	8003ea4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea2:	d107      	bne.n	8003eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebc:	d10f      	bne.n	8003ede <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003edc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e017      	b.n	8003f22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	bf0c      	ite	eq
 8003f12:	2301      	moveq	r3, #1
 8003f14:	2300      	movne	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d19b      	bne.n	8003e58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000004 	.word	0x20000004

08003f30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f3e:	f7fd f82f 	bl	8000fa0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f4e:	f7fd f827 	bl	8000fa0 <HAL_GetTick>
 8003f52:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f54:	4b3c      	ldr	r3, [pc, #240]	; (8004048 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	00da      	lsls	r2, r3, #3
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	0d1b      	lsrs	r3, r3, #20
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f6c:	e05f      	b.n	800402e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f74:	d106      	bne.n	8003f84 <SPI_WaitFifoStateUntilTimeout+0x54>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d103      	bne.n	8003f84 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d050      	beq.n	800402e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f8c:	f7fd f808 	bl	8000fa0 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d902      	bls.n	8003fa2 <SPI_WaitFifoStateUntilTimeout+0x72>
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d13d      	bne.n	800401e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fba:	d111      	bne.n	8003fe0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc4:	d004      	beq.n	8003fd0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d107      	bne.n	8003fe0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe8:	d10f      	bne.n	800400a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004008:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e010      	b.n	8004040 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3b01      	subs	r3, #1
 800402c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	429a      	cmp	r2, r3
 800403c:	d197      	bne.n	8003f6e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000004 	.word	0x20000004

0800404c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004060:	d111      	bne.n	8004086 <SPI_EndRxTransaction+0x3a>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406a:	d004      	beq.n	8004076 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004074:	d107      	bne.n	8004086 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004084:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2200      	movs	r2, #0
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7ff fec5 	bl	8003e20 <SPI_WaitFlagStateUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a0:	f043 0220 	orr.w	r2, r3, #32
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e023      	b.n	80040f4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b4:	d11d      	bne.n	80040f2 <SPI_EndRxTransaction+0xa6>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040be:	d004      	beq.n	80040ca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c8:	d113      	bne.n	80040f2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f7ff ff2a 	bl	8003f30 <SPI_WaitFifoStateUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e6:	f043 0220 	orr.w	r2, r3, #32
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e000      	b.n	80040f4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2200      	movs	r2, #0
 8004110:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7ff ff0b 	bl	8003f30 <SPI_WaitFifoStateUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004124:	f043 0220 	orr.w	r2, r3, #32
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e027      	b.n	8004180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2200      	movs	r2, #0
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff fe70 	bl	8003e20 <SPI_WaitFlagStateUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e014      	b.n	8004180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2200      	movs	r2, #0
 800415e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f7ff fee4 	bl	8003f30 <SPI_WaitFifoStateUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004172:	f043 0220 	orr.w	r2, r3, #32
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e000      	b.n	8004180 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e042      	b.n	8004220 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7fc fd45 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2224      	movs	r2, #36	; 0x24
 80041b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f960 	bl	8004490 <UART_SetConfig>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e022      	b.n	8004220 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fc26 	bl	8004a34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004206:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fcad 	bl	8004b78 <UART_CheckIdleState>
 800421e:	4603      	mov	r3, r0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800423e:	2b20      	cmp	r3, #32
 8004240:	f040 8084 	bne.w	800434c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_UART_Transmit+0x28>
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e07c      	b.n	800434e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_UART_Transmit+0x3a>
 800425e:	2302      	movs	r3, #2
 8004260:	e075      	b.n	800434e <HAL_UART_Transmit+0x126>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2221      	movs	r2, #33	; 0x21
 8004276:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800427a:	f7fc fe91 	bl	8000fa0 <HAL_GetTick>
 800427e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	88fa      	ldrh	r2, [r7, #6]
 8004284:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	88fa      	ldrh	r2, [r7, #6]
 800428c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004298:	d108      	bne.n	80042ac <HAL_UART_Transmit+0x84>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	e003      	b.n	80042b4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80042bc:	e02d      	b.n	800431a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2200      	movs	r2, #0
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fc9d 	bl	8004c08 <UART_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e03a      	b.n	800434e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10b      	bne.n	80042f6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	881a      	ldrh	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042ea:	b292      	uxth	r2, r2
 80042ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	3302      	adds	r3, #2
 80042f2:	61bb      	str	r3, [r7, #24]
 80042f4:	e008      	b.n	8004308 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	781a      	ldrb	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	b292      	uxth	r2, r2
 8004300:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3301      	adds	r3, #1
 8004306:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1cb      	bne.n	80042be <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	2140      	movs	r1, #64	; 0x40
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 fc69 	bl	8004c08 <UART_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e006      	b.n	800434e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	e000      	b.n	800434e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800434c:	2302      	movs	r3, #2
  }
}
 800434e:	4618      	mov	r0, r3
 8004350:	3720      	adds	r7, #32
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	4613      	mov	r3, r2
 8004364:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436c:	2b20      	cmp	r3, #32
 800436e:	d170      	bne.n	8004452 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_UART_Receive_DMA+0x24>
 8004376:	88fb      	ldrh	r3, [r7, #6]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e069      	b.n	8004454 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_UART_Receive_DMA+0x36>
 800438a:	2302      	movs	r3, #2
 800438c:	e062      	b.n	8004454 <HAL_UART_Receive_DMA+0xfc>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2222      	movs	r2, #34	; 0x22
 80043b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02c      	beq.n	8004416 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c0:	4a26      	ldr	r2, [pc, #152]	; (800445c <HAL_UART_Receive_DMA+0x104>)
 80043c2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c8:	4a25      	ldr	r2, [pc, #148]	; (8004460 <HAL_UART_Receive_DMA+0x108>)
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043d0:	4a24      	ldr	r2, [pc, #144]	; (8004464 <HAL_UART_Receive_DMA+0x10c>)
 80043d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043d8:	2200      	movs	r2, #0
 80043da:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3324      	adds	r3, #36	; 0x24
 80043e6:	4619      	mov	r1, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	461a      	mov	r2, r3
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	f7fc ff9c 	bl	800132c <HAL_DMA_Start_IT>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2210      	movs	r2, #16
 80043fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e01e      	b.n	8004454 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800442c:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0201 	orr.w	r2, r2, #1
 800443c:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800444c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	08004d8b 	.word	0x08004d8b
 8004460:	08004df5 	.word	0x08004df5
 8004464:	08004e11 	.word	0x08004e11

08004468 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004490:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004494:	b088      	sub	sp, #32
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4bb1      	ldr	r3, [pc, #708]	; (800478c <UART_SetConfig+0x2fc>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	69f9      	ldr	r1, [r7, #28]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4aa6      	ldr	r2, [pc, #664]	; (8004790 <UART_SetConfig+0x300>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	4313      	orrs	r3, r2
 8004502:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800450e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	69f9      	ldr	r1, [r7, #28]
 8004518:	430b      	orrs	r3, r1
 800451a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	f023 010f 	bic.w	r1, r3, #15
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a97      	ldr	r2, [pc, #604]	; (8004794 <UART_SetConfig+0x304>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d121      	bne.n	8004580 <UART_SetConfig+0xf0>
 800453c:	4b96      	ldr	r3, [pc, #600]	; (8004798 <UART_SetConfig+0x308>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b03      	cmp	r3, #3
 8004548:	d816      	bhi.n	8004578 <UART_SetConfig+0xe8>
 800454a:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <UART_SetConfig+0xc0>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	08004561 	.word	0x08004561
 8004554:	0800456d 	.word	0x0800456d
 8004558:	08004567 	.word	0x08004567
 800455c:	08004573 	.word	0x08004573
 8004560:	2301      	movs	r3, #1
 8004562:	76fb      	strb	r3, [r7, #27]
 8004564:	e0e8      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004566:	2302      	movs	r3, #2
 8004568:	76fb      	strb	r3, [r7, #27]
 800456a:	e0e5      	b.n	8004738 <UART_SetConfig+0x2a8>
 800456c:	2304      	movs	r3, #4
 800456e:	76fb      	strb	r3, [r7, #27]
 8004570:	e0e2      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004572:	2308      	movs	r3, #8
 8004574:	76fb      	strb	r3, [r7, #27]
 8004576:	e0df      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004578:	2310      	movs	r3, #16
 800457a:	76fb      	strb	r3, [r7, #27]
 800457c:	bf00      	nop
 800457e:	e0db      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a85      	ldr	r2, [pc, #532]	; (800479c <UART_SetConfig+0x30c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d134      	bne.n	80045f4 <UART_SetConfig+0x164>
 800458a:	4b83      	ldr	r3, [pc, #524]	; (8004798 <UART_SetConfig+0x308>)
 800458c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	2b0c      	cmp	r3, #12
 8004596:	d829      	bhi.n	80045ec <UART_SetConfig+0x15c>
 8004598:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <UART_SetConfig+0x110>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045d5 	.word	0x080045d5
 80045a4:	080045ed 	.word	0x080045ed
 80045a8:	080045ed 	.word	0x080045ed
 80045ac:	080045ed 	.word	0x080045ed
 80045b0:	080045e1 	.word	0x080045e1
 80045b4:	080045ed 	.word	0x080045ed
 80045b8:	080045ed 	.word	0x080045ed
 80045bc:	080045ed 	.word	0x080045ed
 80045c0:	080045db 	.word	0x080045db
 80045c4:	080045ed 	.word	0x080045ed
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	080045ed 	.word	0x080045ed
 80045d0:	080045e7 	.word	0x080045e7
 80045d4:	2300      	movs	r3, #0
 80045d6:	76fb      	strb	r3, [r7, #27]
 80045d8:	e0ae      	b.n	8004738 <UART_SetConfig+0x2a8>
 80045da:	2302      	movs	r3, #2
 80045dc:	76fb      	strb	r3, [r7, #27]
 80045de:	e0ab      	b.n	8004738 <UART_SetConfig+0x2a8>
 80045e0:	2304      	movs	r3, #4
 80045e2:	76fb      	strb	r3, [r7, #27]
 80045e4:	e0a8      	b.n	8004738 <UART_SetConfig+0x2a8>
 80045e6:	2308      	movs	r3, #8
 80045e8:	76fb      	strb	r3, [r7, #27]
 80045ea:	e0a5      	b.n	8004738 <UART_SetConfig+0x2a8>
 80045ec:	2310      	movs	r3, #16
 80045ee:	76fb      	strb	r3, [r7, #27]
 80045f0:	bf00      	nop
 80045f2:	e0a1      	b.n	8004738 <UART_SetConfig+0x2a8>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a69      	ldr	r2, [pc, #420]	; (80047a0 <UART_SetConfig+0x310>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d120      	bne.n	8004640 <UART_SetConfig+0x1b0>
 80045fe:	4b66      	ldr	r3, [pc, #408]	; (8004798 <UART_SetConfig+0x308>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004604:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004608:	2b10      	cmp	r3, #16
 800460a:	d00f      	beq.n	800462c <UART_SetConfig+0x19c>
 800460c:	2b10      	cmp	r3, #16
 800460e:	d802      	bhi.n	8004616 <UART_SetConfig+0x186>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <UART_SetConfig+0x190>
 8004614:	e010      	b.n	8004638 <UART_SetConfig+0x1a8>
 8004616:	2b20      	cmp	r3, #32
 8004618:	d005      	beq.n	8004626 <UART_SetConfig+0x196>
 800461a:	2b30      	cmp	r3, #48	; 0x30
 800461c:	d009      	beq.n	8004632 <UART_SetConfig+0x1a2>
 800461e:	e00b      	b.n	8004638 <UART_SetConfig+0x1a8>
 8004620:	2300      	movs	r3, #0
 8004622:	76fb      	strb	r3, [r7, #27]
 8004624:	e088      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004626:	2302      	movs	r3, #2
 8004628:	76fb      	strb	r3, [r7, #27]
 800462a:	e085      	b.n	8004738 <UART_SetConfig+0x2a8>
 800462c:	2304      	movs	r3, #4
 800462e:	76fb      	strb	r3, [r7, #27]
 8004630:	e082      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004632:	2308      	movs	r3, #8
 8004634:	76fb      	strb	r3, [r7, #27]
 8004636:	e07f      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004638:	2310      	movs	r3, #16
 800463a:	76fb      	strb	r3, [r7, #27]
 800463c:	bf00      	nop
 800463e:	e07b      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a57      	ldr	r2, [pc, #348]	; (80047a4 <UART_SetConfig+0x314>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d120      	bne.n	800468c <UART_SetConfig+0x1fc>
 800464a:	4b53      	ldr	r3, [pc, #332]	; (8004798 <UART_SetConfig+0x308>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d00f      	beq.n	8004678 <UART_SetConfig+0x1e8>
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d802      	bhi.n	8004662 <UART_SetConfig+0x1d2>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <UART_SetConfig+0x1dc>
 8004660:	e010      	b.n	8004684 <UART_SetConfig+0x1f4>
 8004662:	2b80      	cmp	r3, #128	; 0x80
 8004664:	d005      	beq.n	8004672 <UART_SetConfig+0x1e2>
 8004666:	2bc0      	cmp	r3, #192	; 0xc0
 8004668:	d009      	beq.n	800467e <UART_SetConfig+0x1ee>
 800466a:	e00b      	b.n	8004684 <UART_SetConfig+0x1f4>
 800466c:	2300      	movs	r3, #0
 800466e:	76fb      	strb	r3, [r7, #27]
 8004670:	e062      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004672:	2302      	movs	r3, #2
 8004674:	76fb      	strb	r3, [r7, #27]
 8004676:	e05f      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004678:	2304      	movs	r3, #4
 800467a:	76fb      	strb	r3, [r7, #27]
 800467c:	e05c      	b.n	8004738 <UART_SetConfig+0x2a8>
 800467e:	2308      	movs	r3, #8
 8004680:	76fb      	strb	r3, [r7, #27]
 8004682:	e059      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004684:	2310      	movs	r3, #16
 8004686:	76fb      	strb	r3, [r7, #27]
 8004688:	bf00      	nop
 800468a:	e055      	b.n	8004738 <UART_SetConfig+0x2a8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a45      	ldr	r2, [pc, #276]	; (80047a8 <UART_SetConfig+0x318>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d124      	bne.n	80046e0 <UART_SetConfig+0x250>
 8004696:	4b40      	ldr	r3, [pc, #256]	; (8004798 <UART_SetConfig+0x308>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a4:	d012      	beq.n	80046cc <UART_SetConfig+0x23c>
 80046a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046aa:	d802      	bhi.n	80046b2 <UART_SetConfig+0x222>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <UART_SetConfig+0x230>
 80046b0:	e012      	b.n	80046d8 <UART_SetConfig+0x248>
 80046b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b6:	d006      	beq.n	80046c6 <UART_SetConfig+0x236>
 80046b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046bc:	d009      	beq.n	80046d2 <UART_SetConfig+0x242>
 80046be:	e00b      	b.n	80046d8 <UART_SetConfig+0x248>
 80046c0:	2300      	movs	r3, #0
 80046c2:	76fb      	strb	r3, [r7, #27]
 80046c4:	e038      	b.n	8004738 <UART_SetConfig+0x2a8>
 80046c6:	2302      	movs	r3, #2
 80046c8:	76fb      	strb	r3, [r7, #27]
 80046ca:	e035      	b.n	8004738 <UART_SetConfig+0x2a8>
 80046cc:	2304      	movs	r3, #4
 80046ce:	76fb      	strb	r3, [r7, #27]
 80046d0:	e032      	b.n	8004738 <UART_SetConfig+0x2a8>
 80046d2:	2308      	movs	r3, #8
 80046d4:	76fb      	strb	r3, [r7, #27]
 80046d6:	e02f      	b.n	8004738 <UART_SetConfig+0x2a8>
 80046d8:	2310      	movs	r3, #16
 80046da:	76fb      	strb	r3, [r7, #27]
 80046dc:	bf00      	nop
 80046de:	e02b      	b.n	8004738 <UART_SetConfig+0x2a8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2a      	ldr	r2, [pc, #168]	; (8004790 <UART_SetConfig+0x300>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d124      	bne.n	8004734 <UART_SetConfig+0x2a4>
 80046ea:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <UART_SetConfig+0x308>)
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f8:	d012      	beq.n	8004720 <UART_SetConfig+0x290>
 80046fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fe:	d802      	bhi.n	8004706 <UART_SetConfig+0x276>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <UART_SetConfig+0x284>
 8004704:	e012      	b.n	800472c <UART_SetConfig+0x29c>
 8004706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470a:	d006      	beq.n	800471a <UART_SetConfig+0x28a>
 800470c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004710:	d009      	beq.n	8004726 <UART_SetConfig+0x296>
 8004712:	e00b      	b.n	800472c <UART_SetConfig+0x29c>
 8004714:	2300      	movs	r3, #0
 8004716:	76fb      	strb	r3, [r7, #27]
 8004718:	e00e      	b.n	8004738 <UART_SetConfig+0x2a8>
 800471a:	2302      	movs	r3, #2
 800471c:	76fb      	strb	r3, [r7, #27]
 800471e:	e00b      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004720:	2304      	movs	r3, #4
 8004722:	76fb      	strb	r3, [r7, #27]
 8004724:	e008      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004726:	2308      	movs	r3, #8
 8004728:	76fb      	strb	r3, [r7, #27]
 800472a:	e005      	b.n	8004738 <UART_SetConfig+0x2a8>
 800472c:	2310      	movs	r3, #16
 800472e:	76fb      	strb	r3, [r7, #27]
 8004730:	bf00      	nop
 8004732:	e001      	b.n	8004738 <UART_SetConfig+0x2a8>
 8004734:	2310      	movs	r3, #16
 8004736:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a14      	ldr	r2, [pc, #80]	; (8004790 <UART_SetConfig+0x300>)
 800473e:	4293      	cmp	r3, r2
 8004740:	f040 80a1 	bne.w	8004886 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004744:	7efb      	ldrb	r3, [r7, #27]
 8004746:	2b08      	cmp	r3, #8
 8004748:	d836      	bhi.n	80047b8 <UART_SetConfig+0x328>
 800474a:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <UART_SetConfig+0x2c0>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004775 	.word	0x08004775
 8004754:	080047b9 	.word	0x080047b9
 8004758:	0800477d 	.word	0x0800477d
 800475c:	080047b9 	.word	0x080047b9
 8004760:	08004783 	.word	0x08004783
 8004764:	080047b9 	.word	0x080047b9
 8004768:	080047b9 	.word	0x080047b9
 800476c:	080047b9 	.word	0x080047b9
 8004770:	080047b1 	.word	0x080047b1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004774:	f7fe f80a 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8004778:	6178      	str	r0, [r7, #20]
        break;
 800477a:	e022      	b.n	80047c2 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <UART_SetConfig+0x31c>)
 800477e:	617b      	str	r3, [r7, #20]
        break;
 8004780:	e01f      	b.n	80047c2 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004782:	f7fd ff6d 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8004786:	6178      	str	r0, [r7, #20]
        break;
 8004788:	e01b      	b.n	80047c2 <UART_SetConfig+0x332>
 800478a:	bf00      	nop
 800478c:	cfff69f3 	.word	0xcfff69f3
 8004790:	40008000 	.word	0x40008000
 8004794:	40013800 	.word	0x40013800
 8004798:	40021000 	.word	0x40021000
 800479c:	40004400 	.word	0x40004400
 80047a0:	40004800 	.word	0x40004800
 80047a4:	40004c00 	.word	0x40004c00
 80047a8:	40005000 	.word	0x40005000
 80047ac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b4:	617b      	str	r3, [r7, #20]
        break;
 80047b6:	e004      	b.n	80047c2 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	76bb      	strb	r3, [r7, #26]
        break;
 80047c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 811d 	beq.w	8004a04 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	4a97      	ldr	r2, [pc, #604]	; (8004a2c <UART_SetConfig+0x59c>)
 80047d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047d4:	461a      	mov	r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80047dc:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	4413      	add	r3, r2
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d305      	bcc.n	80047fa <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d902      	bls.n	8004800 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	76bb      	strb	r3, [r7, #26]
 80047fe:	e101      	b.n	8004a04 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4618      	mov	r0, r3
 8004804:	f04f 0100 	mov.w	r1, #0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	4a87      	ldr	r2, [pc, #540]	; (8004a2c <UART_SetConfig+0x59c>)
 800480e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004812:	b29b      	uxth	r3, r3
 8004814:	f04f 0400 	mov.w	r4, #0
 8004818:	461a      	mov	r2, r3
 800481a:	4623      	mov	r3, r4
 800481c:	f7fb fcf6 	bl	800020c <__aeabi_uldivmod>
 8004820:	4603      	mov	r3, r0
 8004822:	460c      	mov	r4, r1
 8004824:	4619      	mov	r1, r3
 8004826:	4622      	mov	r2, r4
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	f04f 0400 	mov.w	r4, #0
 8004830:	0214      	lsls	r4, r2, #8
 8004832:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004836:	020b      	lsls	r3, r1, #8
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6852      	ldr	r2, [r2, #4]
 800483c:	0852      	lsrs	r2, r2, #1
 800483e:	4611      	mov	r1, r2
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	eb13 0b01 	adds.w	fp, r3, r1
 8004848:	eb44 0c02 	adc.w	ip, r4, r2
 800484c:	4658      	mov	r0, fp
 800484e:	4661      	mov	r1, ip
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f04f 0400 	mov.w	r4, #0
 8004858:	461a      	mov	r2, r3
 800485a:	4623      	mov	r3, r4
 800485c:	f7fb fcd6 	bl	800020c <__aeabi_uldivmod>
 8004860:	4603      	mov	r3, r0
 8004862:	460c      	mov	r4, r1
 8004864:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800486c:	d308      	bcc.n	8004880 <UART_SetConfig+0x3f0>
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004874:	d204      	bcs.n	8004880 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	60da      	str	r2, [r3, #12]
 800487e:	e0c1      	b.n	8004a04 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	76bb      	strb	r3, [r7, #26]
 8004884:	e0be      	b.n	8004a04 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488e:	d164      	bne.n	800495a <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004890:	7efb      	ldrb	r3, [r7, #27]
 8004892:	2b08      	cmp	r3, #8
 8004894:	d827      	bhi.n	80048e6 <UART_SetConfig+0x456>
 8004896:	a201      	add	r2, pc, #4	; (adr r2, 800489c <UART_SetConfig+0x40c>)
 8004898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	080048e7 	.word	0x080048e7
 80048ac:	080048d7 	.word	0x080048d7
 80048b0:	080048e7 	.word	0x080048e7
 80048b4:	080048e7 	.word	0x080048e7
 80048b8:	080048e7 	.word	0x080048e7
 80048bc:	080048df 	.word	0x080048df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c0:	f7fd ff64 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 80048c4:	6178      	str	r0, [r7, #20]
        break;
 80048c6:	e013      	b.n	80048f0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c8:	f7fd ff76 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 80048cc:	6178      	str	r0, [r7, #20]
        break;
 80048ce:	e00f      	b.n	80048f0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d0:	4b57      	ldr	r3, [pc, #348]	; (8004a30 <UART_SetConfig+0x5a0>)
 80048d2:	617b      	str	r3, [r7, #20]
        break;
 80048d4:	e00c      	b.n	80048f0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048d6:	f7fd fec3 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 80048da:	6178      	str	r0, [r7, #20]
        break;
 80048dc:	e008      	b.n	80048f0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e2:	617b      	str	r3, [r7, #20]
        break;
 80048e4:	e004      	b.n	80048f0 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	76bb      	strb	r3, [r7, #26]
        break;
 80048ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 8086 	beq.w	8004a04 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	4a4b      	ldr	r2, [pc, #300]	; (8004a2c <UART_SetConfig+0x59c>)
 80048fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004902:	461a      	mov	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	fbb3 f3f2 	udiv	r3, r3, r2
 800490a:	005a      	lsls	r2, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	085b      	lsrs	r3, r3, #1
 8004912:	441a      	add	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	b29b      	uxth	r3, r3
 800491e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b0f      	cmp	r3, #15
 8004924:	d916      	bls.n	8004954 <UART_SetConfig+0x4c4>
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	d212      	bcs.n	8004954 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f023 030f 	bic.w	r3, r3, #15
 8004936:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	b29b      	uxth	r3, r3
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	b29a      	uxth	r2, r3
 8004944:	89fb      	ldrh	r3, [r7, #14]
 8004946:	4313      	orrs	r3, r2
 8004948:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	89fa      	ldrh	r2, [r7, #14]
 8004950:	60da      	str	r2, [r3, #12]
 8004952:	e057      	b.n	8004a04 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	76bb      	strb	r3, [r7, #26]
 8004958:	e054      	b.n	8004a04 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800495a:	7efb      	ldrb	r3, [r7, #27]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d828      	bhi.n	80049b2 <UART_SetConfig+0x522>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <UART_SetConfig+0x4d8>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	0800498d 	.word	0x0800498d
 800496c:	08004995 	.word	0x08004995
 8004970:	0800499d 	.word	0x0800499d
 8004974:	080049b3 	.word	0x080049b3
 8004978:	080049a3 	.word	0x080049a3
 800497c:	080049b3 	.word	0x080049b3
 8004980:	080049b3 	.word	0x080049b3
 8004984:	080049b3 	.word	0x080049b3
 8004988:	080049ab 	.word	0x080049ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800498c:	f7fd fefe 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8004990:	6178      	str	r0, [r7, #20]
        break;
 8004992:	e013      	b.n	80049bc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004994:	f7fd ff10 	bl	80027b8 <HAL_RCC_GetPCLK2Freq>
 8004998:	6178      	str	r0, [r7, #20]
        break;
 800499a:	e00f      	b.n	80049bc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800499c:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <UART_SetConfig+0x5a0>)
 800499e:	617b      	str	r3, [r7, #20]
        break;
 80049a0:	e00c      	b.n	80049bc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a2:	f7fd fe5d 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 80049a6:	6178      	str	r0, [r7, #20]
        break;
 80049a8:	e008      	b.n	80049bc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ae:	617b      	str	r3, [r7, #20]
        break;
 80049b0:	e004      	b.n	80049bc <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	76bb      	strb	r3, [r7, #26]
        break;
 80049ba:	bf00      	nop
    }

    if (pclk != 0U)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d020      	beq.n	8004a04 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	4a19      	ldr	r2, [pc, #100]	; (8004a2c <UART_SetConfig+0x59c>)
 80049c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049cc:	461a      	mov	r2, r3
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	441a      	add	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b0f      	cmp	r3, #15
 80049ec:	d908      	bls.n	8004a00 <UART_SetConfig+0x570>
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f4:	d204      	bcs.n	8004a00 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	e001      	b.n	8004a04 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004a20:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004a2c:	08005198 	.word	0x08005198
 8004a30:	00f42400 	.word	0x00f42400

08004a34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01a      	beq.n	8004b4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b32:	d10a      	bne.n	8004b4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	605a      	str	r2, [r3, #4]
  }
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004b88:	f7fc fa0a 	bl	8000fa0 <HAL_GetTick>
 8004b8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d10e      	bne.n	8004bba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f82c 	bl	8004c08 <UART_WaitOnFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e022      	b.n	8004c00 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d10e      	bne.n	8004be6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f816 	bl	8004c08 <UART_WaitOnFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e00c      	b.n	8004c00 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c18:	e062      	b.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d05e      	beq.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c22:	f7fc f9bd 	bl	8000fa0 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d302      	bcc.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d11d      	bne.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c46:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0201 	bic.w	r2, r2, #1
 8004c56:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e045      	b.n	8004d00 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d02e      	beq.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c90:	d126      	bne.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c9a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004caa:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0201 	bic.w	r2, r2, #1
 8004cba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e00f      	b.n	8004d00 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69da      	ldr	r2, [r3, #28]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d08d      	beq.n	8004c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004d1e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004d2e:	609a      	str	r2, [r3, #8]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d5a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d11f      	bne.n	8004de6 <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dbc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0201 	bic.w	r2, r2, #1
 8004dcc:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ddc:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7fb fdd4 	bl	8000994 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f7ff fb30 	bl	8004468 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e24:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e38:	2b80      	cmp	r3, #128	; 0x80
 8004e3a:	d109      	bne.n	8004e50 <UART_DMAError+0x40>
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b21      	cmp	r3, #33	; 0x21
 8004e40:	d106      	bne.n	8004e50 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004e4a:	6978      	ldr	r0, [r7, #20]
 8004e4c:	f7ff ff5c 	bl	8004d08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	d109      	bne.n	8004e72 <UART_DMAError+0x62>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b22      	cmp	r3, #34	; 0x22
 8004e62:	d106      	bne.n	8004e72 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004e6c:	6978      	ldr	r0, [r7, #20]
 8004e6e:	f7ff ff69 	bl	8004d44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f043 0210 	orr.w	r2, r3, #16
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e82:	6978      	ldr	r0, [r7, #20]
 8004e84:	f7ff fafa 	bl	800447c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e88:	bf00      	nop
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e027      	b.n	8004ef6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2224      	movs	r2, #36	; 0x24
 8004eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ed4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e02d      	b.n	8004f76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2224      	movs	r2, #36	; 0x24
 8004f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0201 	bic.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f850 	bl	8004ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e02d      	b.n	8004ff2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2224      	movs	r2, #36	; 0x24
 8004fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0201 	bic.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f812 	bl	8004ffc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b089      	sub	sp, #36	; 0x24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005004:	4a2f      	ldr	r2, [pc, #188]	; (80050c4 <UARTEx_SetNbDataToProcess+0xc8>)
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800500e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005012:	4a2d      	ldr	r2, [pc, #180]	; (80050c8 <UARTEx_SetNbDataToProcess+0xcc>)
 8005014:	f107 030c 	add.w	r3, r7, #12
 8005018:	e892 0003 	ldmia.w	r2, {r0, r1}
 800501c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005024:	2b00      	cmp	r3, #0
 8005026:	d108      	bne.n	800503a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005038:	e03d      	b.n	80050b6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800503a:	2308      	movs	r3, #8
 800503c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800503e:	2308      	movs	r3, #8
 8005040:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	0e5b      	lsrs	r3, r3, #25
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	0f5b      	lsrs	r3, r3, #29
 800505a:	b2db      	uxtb	r3, r3
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005062:	7fbb      	ldrb	r3, [r7, #30]
 8005064:	7f3a      	ldrb	r2, [r7, #28]
 8005066:	f107 0120 	add.w	r1, r7, #32
 800506a:	440a      	add	r2, r1
 800506c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005070:	fb02 f303 	mul.w	r3, r2, r3
 8005074:	7f3a      	ldrb	r2, [r7, #28]
 8005076:	f107 0120 	add.w	r1, r7, #32
 800507a:	440a      	add	r2, r1
 800507c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005080:	fb93 f3f2 	sdiv	r3, r3, r2
 8005084:	b29a      	uxth	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800508c:	7ffb      	ldrb	r3, [r7, #31]
 800508e:	7f7a      	ldrb	r2, [r7, #29]
 8005090:	f107 0120 	add.w	r1, r7, #32
 8005094:	440a      	add	r2, r1
 8005096:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	7f7a      	ldrb	r2, [r7, #29]
 80050a0:	f107 0120 	add.w	r1, r7, #32
 80050a4:	440a      	add	r2, r1
 80050a6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80050aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050b6:	bf00      	nop
 80050b8:	3724      	adds	r7, #36	; 0x24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	0800513c 	.word	0x0800513c
 80050c8:	08005144 	.word	0x08005144

080050cc <__libc_init_array>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	4e0d      	ldr	r6, [pc, #52]	; (8005104 <__libc_init_array+0x38>)
 80050d0:	4c0d      	ldr	r4, [pc, #52]	; (8005108 <__libc_init_array+0x3c>)
 80050d2:	1ba4      	subs	r4, r4, r6
 80050d4:	10a4      	asrs	r4, r4, #2
 80050d6:	2500      	movs	r5, #0
 80050d8:	42a5      	cmp	r5, r4
 80050da:	d109      	bne.n	80050f0 <__libc_init_array+0x24>
 80050dc:	4e0b      	ldr	r6, [pc, #44]	; (800510c <__libc_init_array+0x40>)
 80050de:	4c0c      	ldr	r4, [pc, #48]	; (8005110 <__libc_init_array+0x44>)
 80050e0:	f000 f820 	bl	8005124 <_init>
 80050e4:	1ba4      	subs	r4, r4, r6
 80050e6:	10a4      	asrs	r4, r4, #2
 80050e8:	2500      	movs	r5, #0
 80050ea:	42a5      	cmp	r5, r4
 80050ec:	d105      	bne.n	80050fa <__libc_init_array+0x2e>
 80050ee:	bd70      	pop	{r4, r5, r6, pc}
 80050f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050f4:	4798      	blx	r3
 80050f6:	3501      	adds	r5, #1
 80050f8:	e7ee      	b.n	80050d8 <__libc_init_array+0xc>
 80050fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050fe:	4798      	blx	r3
 8005100:	3501      	adds	r5, #1
 8005102:	e7f2      	b.n	80050ea <__libc_init_array+0x1e>
 8005104:	080051b8 	.word	0x080051b8
 8005108:	080051b8 	.word	0x080051b8
 800510c:	080051b8 	.word	0x080051b8
 8005110:	080051bc 	.word	0x080051bc

08005114 <memset>:
 8005114:	4402      	add	r2, r0
 8005116:	4603      	mov	r3, r0
 8005118:	4293      	cmp	r3, r2
 800511a:	d100      	bne.n	800511e <memset+0xa>
 800511c:	4770      	bx	lr
 800511e:	f803 1b01 	strb.w	r1, [r3], #1
 8005122:	e7f9      	b.n	8005118 <memset+0x4>

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
