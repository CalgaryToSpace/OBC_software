
NUCLEO_L4R5ZI_Camera_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005254  08005254  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005254  08005254  00015254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800525c  0800525c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800525c  0800525c  0001525c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005260  08005260  00015260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  2000000c  08005270  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  08005270  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014485  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002719  00000000  00000000  000344c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001148  00000000  00000000  00036be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  00037d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029e67  00000000  00000000  00038d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db5f  00000000  00000000  00062b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ff830  00000000  00000000  000706fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016ff2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c4  00000000  00000000  0016ffac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800518c 	.word	0x0800518c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800518c 	.word	0x0800518c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	f5ad 3d80 	sub.w	sp, sp, #65536	; 0x10000
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fdb7 	bl	8001076 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f824 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 fa04 	bl	8000918 <MX_GPIO_Init>
  MX_DMA_Init();
 8000510:	f000 f9d8 	bl	80008c4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000514:	f000 f912 	bl	800073c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000518:	f000 f95e 	bl	80007d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051c:	f000 f9a8 	bl	8000870 <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 8000520:	f000 f898 	bl	8000654 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000524:	f000 f8ca 	bl	80006bc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  char dmci_buf[65535] = {0};	//DMA buffer
 8000528:	463b      	mov	r3, r7
 800052a:	4618      	mov	r0, r3
 800052c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000530:	461a      	mov	r2, r3
 8000532:	2100      	movs	r1, #0
 8000534:	f004 fe22 	bl	800517c <memset>
  HAL_DCMI_Init(&hdcmi);		//init dcmi
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x54>)
 800053a:	f000 ff45 	bl	80013c8 <HAL_DCMI_Init>
  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t *)dmci_buf, 65535); //TODO: Figure out acutal frame size
 800053e:	463a      	mov	r2, r7
 8000540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000544:	2102      	movs	r1, #2
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <main+0x54>)
 8000548:	f000 ffc4 	bl	80014d4 <HAL_DCMI_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	e7fe      	b.n	800054c <main+0x50>
 800054e:	bf00      	nop
 8000550:	200005f4 	.word	0x200005f4

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b0bc      	sub	sp, #240	; 0xf0
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800055e:	2244      	movs	r2, #68	; 0x44
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f004 fe0a 	bl	800517c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2294      	movs	r2, #148	; 0x94
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 fdfc 	bl	800517c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000584:	2000      	movs	r0, #0
 8000586:	f002 f8f9 	bl	800277c <HAL_PWREx_ControlVoltageScaling>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000590:	f000 fa7e 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000594:	2322      	movs	r3, #34	; 0x22
 8000596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800059e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005a2:	2301      	movs	r3, #1
 80005a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2340      	movs	r3, #64	; 0x40
 80005aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005c0:	231e      	movs	r3, #30
 80005c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 f991 	bl	8002904 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005e8:	f000 fa52 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2303      	movs	r3, #3
 80005f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000610:	2105      	movs	r1, #5
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fd9c 	bl	8003150 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800061e:	f000 fa37 	bl	8000a90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 8000622:	f242 03a4 	movw	r3, #8356	; 0x20a4
 8000626:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000628:	2300      	movs	r3, #0
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800062c:	2300      	movs	r3, #0
 800062e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000630:	2300      	movs	r3, #0
 8000632:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000634:	2300      	movs	r3, #0
 8000636:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f003 f838 	bl	80036b0 <HAL_RCCEx_PeriphCLKConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000646:	f000 fa23 	bl	8000a90 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	37f0      	adds	r7, #240	; 0xf0
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_DCMI_Init+0x60>)
 800065a:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <MX_DCMI_Init+0x64>)
 800065c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_DCMI_Init+0x60>)
 8000660:	2200      	movs	r2, #0
 8000662:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_DCMI_Init+0x60>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_DCMI_Init+0x60>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_DCMI_Init+0x60>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_DCMI_Init+0x60>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_DCMI_Init+0x60>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_DCMI_Init+0x60>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_DCMI_Init+0x60>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_DCMI_Init+0x60>)
 8000690:	2200      	movs	r2, #0
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_DCMI_Init+0x60>)
 8000696:	2200      	movs	r2, #0
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_DCMI_Init+0x60>)
 800069c:	2200      	movs	r2, #0
 800069e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_DCMI_Init+0x60>)
 80006a2:	f000 fe91 	bl	80013c8 <HAL_DCMI_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80006ac:	f000 f9f0 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200005f4 	.word	0x200005f4
 80006b8:	50050000 	.word	0x50050000

080006bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_I2C2_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <MX_I2C2_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x107075B0;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_I2C2_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <MX_I2C2_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_I2C2_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_I2C2_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_I2C2_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_I2C2_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C2_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C2_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C2_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <MX_I2C2_Init+0x74>)
 80006f8:	f001 fdb2 	bl	8002260 <HAL_I2C_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000702:	f000 f9c5 	bl	8000a90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <MX_I2C2_Init+0x74>)
 800070a:	f001 fe38 	bl	800237e <HAL_I2CEx_ConfigAnalogFilter>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 f9bc 	bl	8000a90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_I2C2_Init+0x74>)
 800071c:	f001 fe7a 	bl	8002414 <HAL_I2CEx_ConfigDigitalFilter>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 f9b3 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200004bc 	.word	0x200004bc
 8000734:	40005800 	.word	0x40005800
 8000738:	107075b0 	.word	0x107075b0

0800073c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 8000742:	4a23      	ldr	r2, [pc, #140]	; (80007d0 <MX_LPUART1_UART_Init+0x94>)
 8000744:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 8000748:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <MX_LPUART1_UART_Init+0x98>)
 800074a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 800074e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000752:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 8000780:	2200      	movs	r2, #0
 8000782:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000784:	4811      	ldr	r0, [pc, #68]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 8000786:	f003 fc9b 	bl	80040c0 <HAL_UART_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000790:	f000 f97e 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000794:	2100      	movs	r1, #0
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 8000798:	f004 f957 	bl	8004a4a <HAL_UARTEx_SetTxFifoThreshold>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007a2:	f000 f975 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a6:	2100      	movs	r1, #0
 80007a8:	4808      	ldr	r0, [pc, #32]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 80007aa:	f004 f98c 	bl	8004ac6 <HAL_UARTEx_SetRxFifoThreshold>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007b4:	f000 f96c 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_LPUART1_UART_Init+0x90>)
 80007ba:	f004 f90d 	bl	80049d8 <HAL_UARTEx_DisableFifoMode>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007c4:	f000 f964 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000568 	.word	0x20000568
 80007d0:	40008000 	.word	0x40008000
 80007d4:	00033324 	.word	0x00033324

080007d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <MX_USART3_UART_Init+0x90>)
 80007de:	4a23      	ldr	r2, [pc, #140]	; (800086c <MX_USART3_UART_Init+0x94>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_USART3_UART_Init+0x90>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_USART3_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_USART3_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_USART3_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_USART3_UART_Init+0x90>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_USART3_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART3_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000820:	4811      	ldr	r0, [pc, #68]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000822:	f003 fc4d 	bl	80040c0 <HAL_UART_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800082c:	f000 f930 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000834:	f004 f909 	bl	8004a4a <HAL_UARTEx_SetTxFifoThreshold>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800083e:	f000 f927 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4808      	ldr	r0, [pc, #32]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000846:	f004 f93e 	bl	8004ac6 <HAL_UARTEx_SetRxFifoThreshold>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000850:	f000 f91e 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000856:	f004 f8bf 	bl	80049d8 <HAL_UARTEx_DisableFifoMode>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000860:	f000 f916 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000028 	.word	0x20000028
 800086c:	40004800 	.word	0x40004800

08000870 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000876:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800087a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800087e:	2206      	movs	r2, #6
 8000880:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000884:	2202      	movs	r2, #2
 8000886:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800088a:	2201      	movs	r2, #1
 800088c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800089c:	2201      	movs	r2, #1
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008ae:	f001 fdfd 	bl	80024ac <HAL_PCD_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80008b8:	f000 f8ea 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000b4 	.word	0x200000b4

080008c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_DMA_Init+0x50>)
 80008cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ce:	4a11      	ldr	r2, [pc, #68]	; (8000914 <MX_DMA_Init+0x50>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6493      	str	r3, [r2, #72]	; 0x48
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_DMA_Init+0x50>)
 80008d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_DMA_Init+0x50>)
 80008e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <MX_DMA_Init+0x50>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6493      	str	r3, [r2, #72]	; 0x48
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_DMA_Init+0x50>)
 80008f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	200b      	movs	r0, #11
 8000900:	f000 fd2b 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000904:	200b      	movs	r0, #11
 8000906:	f000 fd44 	bl	8001392 <HAL_NVIC_EnableIRQ>

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08e      	sub	sp, #56	; 0x38
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092e:	4b53      	ldr	r3, [pc, #332]	; (8000a7c <MX_GPIO_Init+0x164>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a52      	ldr	r2, [pc, #328]	; (8000a7c <MX_GPIO_Init+0x164>)
 8000934:	f043 0310 	orr.w	r3, r3, #16
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b50      	ldr	r3, [pc, #320]	; (8000a7c <MX_GPIO_Init+0x164>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	623b      	str	r3, [r7, #32]
 8000944:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b4d      	ldr	r3, [pc, #308]	; (8000a7c <MX_GPIO_Init+0x164>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	4a4c      	ldr	r2, [pc, #304]	; (8000a7c <MX_GPIO_Init+0x164>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000952:	4b4a      	ldr	r3, [pc, #296]	; (8000a7c <MX_GPIO_Init+0x164>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	61fb      	str	r3, [r7, #28]
 800095c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095e:	4b47      	ldr	r3, [pc, #284]	; (8000a7c <MX_GPIO_Init+0x164>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a46      	ldr	r2, [pc, #280]	; (8000a7c <MX_GPIO_Init+0x164>)
 8000964:	f043 0320 	orr.w	r3, r3, #32
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b44      	ldr	r3, [pc, #272]	; (8000a7c <MX_GPIO_Init+0x164>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0320 	and.w	r3, r3, #32
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b41      	ldr	r3, [pc, #260]	; (8000a7c <MX_GPIO_Init+0x164>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a40      	ldr	r2, [pc, #256]	; (8000a7c <MX_GPIO_Init+0x164>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <MX_GPIO_Init+0x164>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <MX_GPIO_Init+0x164>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a3a      	ldr	r2, [pc, #232]	; (8000a7c <MX_GPIO_Init+0x164>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <MX_GPIO_Init+0x164>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b35      	ldr	r3, [pc, #212]	; (8000a7c <MX_GPIO_Init+0x164>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a34      	ldr	r2, [pc, #208]	; (8000a7c <MX_GPIO_Init+0x164>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <MX_GPIO_Init+0x164>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <MX_GPIO_Init+0x164>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a2e      	ldr	r2, [pc, #184]	; (8000a7c <MX_GPIO_Init+0x164>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <MX_GPIO_Init+0x164>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d6:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <MX_GPIO_Init+0x164>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a28      	ldr	r2, [pc, #160]	; (8000a7c <MX_GPIO_Init+0x164>)
 80009dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b26      	ldr	r3, [pc, #152]	; (8000a7c <MX_GPIO_Init+0x164>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80009ee:	f001 ff79 	bl	80028e4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f8:	4821      	ldr	r0, [pc, #132]	; (8000a80 <MX_GPIO_Init+0x168>)
 80009fa:	f001 fc19 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2120      	movs	r1, #32
 8000a02:	4820      	ldr	r0, [pc, #128]	; (8000a84 <MX_GPIO_Init+0x16c>)
 8000a04:	f001 fc14 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <MX_GPIO_Init+0x170>)
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	481b      	ldr	r0, [pc, #108]	; (8000a8c <MX_GPIO_Init+0x174>)
 8000a1e:	f001 fa75 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4811      	ldr	r0, [pc, #68]	; (8000a80 <MX_GPIO_Init+0x168>)
 8000a3c:	f001 fa66 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a40:	2320      	movs	r3, #32
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	480b      	ldr	r0, [pc, #44]	; (8000a84 <MX_GPIO_Init+0x16c>)
 8000a58:	f001 fa58 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a5c:	2340      	movs	r3, #64	; 0x40
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_GPIO_Init+0x16c>)
 8000a70:	f001 fa4c 	bl	8001f0c <HAL_GPIO_Init>

}
 8000a74:	bf00      	nop
 8000a76:	3738      	adds	r7, #56	; 0x38
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	48000400 	.word	0x48000400
 8000a84:	48001800 	.word	0x48001800
 8000a88:	10110000 	.word	0x10110000
 8000a8c:	48000800 	.word	0x48000800

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <Error_Handler+0x6>

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_MspInit+0x44>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_MspInit+0x44>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_MspInit+0x44>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x44>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x44>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x44>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000

08000ae0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a77      	ldr	r2, [pc, #476]	; (8000cdc <HAL_DCMI_MspInit+0x1fc>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	f040 80e7 	bne.w	8000cd2 <HAL_DCMI_MspInit+0x1f2>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000b04:	4b76      	ldr	r3, [pc, #472]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b08:	4a75      	ldr	r2, [pc, #468]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b10:	4b73      	ldr	r3, [pc, #460]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b18:	623b      	str	r3, [r7, #32]
 8000b1a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1c:	4b70      	ldr	r3, [pc, #448]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b20:	4a6f      	ldr	r2, [pc, #444]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b28:	4b6d      	ldr	r3, [pc, #436]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b6a      	ldr	r3, [pc, #424]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b38:	4a69      	ldr	r2, [pc, #420]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b40:	4b67      	ldr	r3, [pc, #412]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4c:	4b64      	ldr	r3, [pc, #400]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b50:	4a63      	ldr	r2, [pc, #396]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b58:	4b61      	ldr	r3, [pc, #388]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b64:	4b5e      	ldr	r3, [pc, #376]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b68:	4a5d      	ldr	r2, [pc, #372]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b6a:	f043 0308 	orr.w	r3, r3, #8
 8000b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b70:	4b5b      	ldr	r3, [pc, #364]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b74:	f003 0308 	and.w	r3, r3, #8
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b58      	ldr	r3, [pc, #352]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b80:	4a57      	ldr	r2, [pc, #348]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b88:	4b55      	ldr	r3, [pc, #340]	; (8000ce0 <HAL_DCMI_MspInit+0x200>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b94:	2370      	movs	r3, #112	; 0x70
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000ba4:	230a      	movs	r3, #10
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	484d      	ldr	r0, [pc, #308]	; (8000ce4 <HAL_DCMI_MspInit+0x204>)
 8000bb0:	f001 f9ac 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f001 f99b 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bd6:	2340      	movs	r3, #64	; 0x40
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8000be6:	2304      	movs	r3, #4
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f001 f98a 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000bf8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	4834      	ldr	r0, [pc, #208]	; (8000ce8 <HAL_DCMI_MspInit+0x208>)
 8000c16:	f001 f979 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	482c      	ldr	r0, [pc, #176]	; (8000ce8 <HAL_DCMI_MspInit+0x208>)
 8000c38:	f001 f968 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4825      	ldr	r0, [pc, #148]	; (8000cec <HAL_DCMI_MspInit+0x20c>)
 8000c58:	f001 f958 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c6c:	230a      	movs	r3, #10
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	481e      	ldr	r0, [pc, #120]	; (8000cf0 <HAL_DCMI_MspInit+0x210>)
 8000c78:	f001 f948 	bl	8001f0c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Channel1;
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <HAL_DCMI_MspInit+0x214>)
 8000c7e:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <HAL_DCMI_MspInit+0x218>)
 8000c80:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <HAL_DCMI_MspInit+0x214>)
 8000c84:	225a      	movs	r2, #90	; 0x5a
 8000c86:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <HAL_DCMI_MspInit+0x214>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_DCMI_MspInit+0x214>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <HAL_DCMI_MspInit+0x214>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <HAL_DCMI_MspInit+0x214>)
 8000c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_DCMI_MspInit+0x214>)
 8000ca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_DCMI_MspInit+0x214>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_DCMI_MspInit+0x214>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <HAL_DCMI_MspInit+0x214>)
 8000cb8:	f000 feb6 	bl	8001a28 <HAL_DMA_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_DCMI_MspInit+0x1e6>
    {
      Error_Handler();
 8000cc2:	f7ff fee5 	bl	8000a90 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_DCMI_MspInit+0x214>)
 8000cca:	651a      	str	r2, [r3, #80]	; 0x50
 8000ccc:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_DCMI_MspInit+0x214>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3738      	adds	r7, #56	; 0x38
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	50050000 	.word	0x50050000
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	48001000 	.word	0x48001000
 8000ce8:	48000800 	.word	0x48000800
 8000cec:	48000c00 	.word	0x48000c00
 8000cf0:	48000400 	.word	0x48000400
 8000cf4:	20000508 	.word	0x20000508
 8000cf8:	40020008 	.word	0x40020008

08000cfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_I2C_MspInit+0x7c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d127      	bne.n	8000d6e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_I2C_MspInit+0x80>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <HAL_I2C_MspInit+0x80>)
 8000d24:	f043 0320 	orr.w	r3, r3, #32
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_I2C_MspInit+0x80>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0320 	and.w	r3, r3, #32
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d36:	2303      	movs	r3, #3
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3a:	2312      	movs	r3, #18
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d46:	2304      	movs	r3, #4
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <HAL_I2C_MspInit+0x84>)
 8000d52:	f001 f8db 	bl	8001f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_I2C_MspInit+0x80>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_I2C_MspInit+0x80>)
 8000d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d60:	6593      	str	r3, [r2, #88]	; 0x58
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_I2C_MspInit+0x80>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40005800 	.word	0x40005800
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48001400 	.word	0x48001400

08000d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	; 0x30
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a30      	ldr	r2, [pc, #192]	; (8000e64 <HAL_UART_MspInit+0xe0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d12b      	bne.n	8000dfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000da6:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000daa:	4a2f      	ldr	r2, [pc, #188]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
 8000dbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a29      	ldr	r2, [pc, #164]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000dd6:	f001 fd85 	bl	80028e4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000dda:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dec:	2308      	movs	r3, #8
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	481d      	ldr	r0, [pc, #116]	; (8000e6c <HAL_UART_MspInit+0xe8>)
 8000df8:	f001 f888 	bl	8001f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dfc:	e02d      	b.n	8000e5a <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <HAL_UART_MspInit+0xec>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d128      	bne.n	8000e5a <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0c:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e12:	6593      	str	r3, [r2, #88]	; 0x58
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_UART_MspInit+0xe4>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	4807      	ldr	r0, [pc, #28]	; (8000e74 <HAL_UART_MspInit+0xf0>)
 8000e56:	f001 f859 	bl	8001f0c <HAL_GPIO_Init>
}
 8000e5a:	bf00      	nop
 8000e5c:	3730      	adds	r7, #48	; 0x30
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40008000 	.word	0x40008000
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48001800 	.word	0x48001800
 8000e70:	40004800 	.word	0x40004800
 8000e74:	48000c00 	.word	0x48000c00

08000e78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e98:	d154      	bne.n	8000f44 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <HAL_PCD_MspInit+0xd4>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a2b      	ldr	r2, [pc, #172]	; (8000f4c <HAL_PCD_MspInit+0xd4>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <HAL_PCD_MspInit+0xd4>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000eb2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f001 f81b 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f001 f80d 	bl	8001f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_PCD_MspInit+0xd4>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <HAL_PCD_MspInit+0xd4>)
 8000ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <HAL_PCD_MspInit+0xd4>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_PCD_MspInit+0xd4>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d114      	bne.n	8000f40 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <HAL_PCD_MspInit+0xd4>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <HAL_PCD_MspInit+0xd4>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6593      	str	r3, [r2, #88]	; 0x58
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_PCD_MspInit+0xd4>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000f2e:	f001 fcc9 	bl	80028c4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_PCD_MspInit+0xd4>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <HAL_PCD_MspInit+0xd4>)
 8000f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f3e:	e001      	b.n	8000f44 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000f40:	f001 fcc0 	bl	80028c4 <HAL_PWREx_EnableVddUSB>
}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <NMI_Handler+0x4>

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f8c0 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA1_Channel1_IRQHandler+0x10>)
 8000faa:	f000 fe60 	bl	8001c6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000508 	.word	0x20000508

08000fb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <SystemInit+0x64>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <SystemInit+0x64>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <SystemInit+0x68>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a13      	ldr	r2, [pc, #76]	; (8001020 <SystemInit+0x68>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <SystemInit+0x68>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <SystemInit+0x68>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <SystemInit+0x68>)
 8000fe4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000fe8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <SystemInit+0x68>)
 8000ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <SystemInit+0x68>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <SystemInit+0x68>)
 8000ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <SystemInit+0x68>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <SystemInit+0x64>)
 800100a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100e:	609a      	str	r2, [r3, #8]
#endif
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	40021000 	.word	0x40021000

08001024 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001028:	f7ff ffc6 	bl	8000fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800102c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800102e:	e003      	b.n	8001038 <LoopCopyDataInit>

08001030 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001032:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001034:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001036:	3104      	adds	r1, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001038:	480a      	ldr	r0, [pc, #40]	; (8001064 <LoopForever+0xa>)
	ldr	r3, =_edata
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <LoopForever+0xe>)
	adds	r2, r0, r1
 800103c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800103e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001040:	d3f6      	bcc.n	8001030 <CopyDataInit>
	ldr	r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001044:	e002      	b.n	800104c <LoopFillZerobss>

08001046 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001046:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001048:	f842 3b04 	str.w	r3, [r2], #4

0800104c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <LoopForever+0x16>)
	cmp	r2, r3
 800104e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001050:	d3f9      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001052:	f004 f86f 	bl	8005134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001056:	f7ff fa51 	bl	80004fc <main>

0800105a <LoopForever>:

LoopForever:
    b LoopForever
 800105a:	e7fe      	b.n	800105a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800105c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001060:	08005264 	.word	0x08005264
	ldr	r0, =_sdata
 8001064:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001068:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800106c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001070:	2000065c 	.word	0x2000065c

08001074 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC1_IRQHandler>

08001076 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f95f 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f80e 	bl	80010a8 <HAL_InitTick>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	e001      	b.n	800109c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001098:	f7ff fcfe 	bl	8000a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800109c:	79fb      	ldrb	r3, [r7, #7]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_InitTick+0x6c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d023      	beq.n	8001104 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_InitTick+0x70>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_InitTick+0x6c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f96b 	bl	80013ae <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10f      	bne.n	80010fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d809      	bhi.n	80010f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f935 	bl	800135a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <HAL_InitTick+0x74>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e007      	b.n	8001108 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e004      	b.n	8001108 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	e001      	b.n	8001108 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	20000000 	.word	0x20000000
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	20000658 	.word	0x20000658

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000658 	.word	0x20000658

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_Delay+0x40>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000008 	.word	0x20000008

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60d3      	str	r3, [r2, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	2b00      	cmp	r3, #0
 8001218:	db0b      	blt.n	8001232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f003 021f 	and.w	r2, r3, #31
 8001220:	4907      	ldr	r1, [pc, #28]	; (8001240 <__NVIC_EnableIRQ+0x38>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	2001      	movs	r0, #1
 800122a:	fa00 f202 	lsl.w	r2, r0, r2
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e100 	.word	0xe000e100

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	; (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f7ff ff8e 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff29 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff3e 	bl	80011ec <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff8e 	bl	8001298 <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5d 	bl	8001244 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff31 	bl	8001208 <__NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffa2 	bl	8001300 <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e075      	b.n	80014c6 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fb76 	bl	8000ae0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800140a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_DCMI_Init+0x108>)
 8001426:	400b      	ands	r3, r1
 8001428:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6819      	ldr	r1, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800143e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800144a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001456:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001462:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800146e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b10      	cmp	r3, #16
 800147e:	d112      	bne.n	80014a6 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7f1b      	ldrb	r3, [r3, #28]
 8001484:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7f5b      	ldrb	r3, [r3, #29]
 800148a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800148c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7f9b      	ldrb	r3, [r3, #30]
 8001492:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001494:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7fdb      	ldrb	r3, [r3, #31]
 800149c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80014a2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80014a4:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 021f 	orr.w	r2, r2, #31
 80014b4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	ffe0f007 	.word	0xffe0f007

080014d4 <HAL_DCMI_Start_DMA>:
  *        in DCMI_DMAXferCplt callback at the end of the DMA transfer. If flag is set,
  *        HAL_DCMI_FrameEventCallback() API is called.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]

  /* Check capture parameter */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_DCMI_Start_DMA+0x1c>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e0bc      	b.n	800166a <HAL_DCMI_Start_DMA+0x196>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2202      	movs	r2, #2
 80014fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DCMI Mode and enable the DCMI IP at the same time */
  MODIFY_REG(hdcmi->Instance->CR, (DCMI_CR_CM|DCMI_CR_ENABLE), (DCMI_Mode|DCMI_CR_ENABLE));
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800150a:	f023 0302 	bic.w	r3, r3, #2
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	431a      	orrs	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800151a:	601a      	str	r2, [r3, #0]

  /* Set the DMA conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001520:	4a54      	ldr	r2, [pc, #336]	; (8001674 <HAL_DCMI_Start_DMA+0x1a0>)
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001528:	4a53      	ldr	r2, [pc, #332]	; (8001678 <HAL_DCMI_Start_DMA+0x1a4>)
 800152a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001530:	2200      	movs	r2, #0
 8001532:	639a      	str	r2, [r3, #56]	; 0x38

  if(Length <= 0xFFFFU)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153a:	d21f      	bcs.n	800157c <HAL_DCMI_Start_DMA+0xa8>
  {
    hdcmi->XferCount = 0; /* Mark as direct transfer from DCMI_DR register to final destination buffer */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3328      	adds	r3, #40	; 0x28
 800154c:	4619      	mov	r1, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	f000 fb11 	bl	8001b78 <HAL_DMA_Start_IT>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d079      	beq.n	8001650 <HAL_DCMI_Start_DMA+0x17c>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e076      	b.n	800166a <HAL_DCMI_Start_DMA+0x196>
    }
  }
  else /* Capture length is longer than DMA maximum transfer size */
  {
     /* Set DMA in circular mode */
    hdcmi->DMA_Handle->Init.Mode = DMA_CIRCULAR;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001580:	2220      	movs	r2, #32
 8001582:	61da      	str	r2, [r3, #28]

    /* Set the DMA half transfer complete callback */
    hdcmi->DMA_Handle->XferHalfCpltCallback = DCMI_DMAHalfXferCplt;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001588:	4a3c      	ldr	r2, [pc, #240]	; (800167c <HAL_DCMI_Start_DMA+0x1a8>)
 800158a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Initialize transfer parameters */
    hdcmi->XferSize = Length;  /* Store the complete transfer length in DCMI handle */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;   /* Final destination buffer pointer */
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	641a      	str	r2, [r3, #64]	; 0x40

    circular_copy_length = DCMI_TransferSize(Length);
 8001598:	6838      	ldr	r0, [r7, #0]
 800159a:	f000 f981 	bl	80018a0 <DCMI_TransferSize>
 800159e:	6178      	str	r0, [r7, #20]

    /* Check if issue in intermediate length computation */
    if (circular_copy_length == 0U)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_DCMI_Start_DMA+0xe6>
    {
      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e057      	b.n	800166a <HAL_DCMI_Start_DMA+0x196>
    }

    /* Store the number of half - intermediate buffer copies needed */
    hdcmi->XferCount = 2U * ((Length / circular_copy_length) - 1U);
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80015c6:	3b01      	subs	r3, #1
 80015c8:	005a      	lsls	r2, r3, #1
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Store the half-buffer copy length */
    hdcmi->HalfCopyLength = circular_copy_length / 2U;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	085a      	lsrs	r2, r3, #1
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Save initial values for continuous mode case */
    hdcmi->XferCount_0 = hdcmi->XferCount;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdcmi->XferSize_0  = hdcmi->XferSize;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	649a      	str	r2, [r3, #72]	; 0x48
    hdcmi->pBuffPtr_0  = hdcmi->pBuffPtr;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* DCMI DR samples in circular mode will be copied
       at the end of the final buffer.
       Now compute the circular buffer start address. */
    /* Start by pointing at the final buffer */
    hdcmi->pCircularBuffer = pData;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Update pCircularBuffer in "moving" at the end of the final
       buffer, don't forger to convert in bytes to compute exact address */
    hdcmi->pCircularBuffer +=  4U * (((Length / circular_copy_length) - 1U) * circular_copy_length);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015f8:	6839      	ldr	r1, [r7, #0]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001600:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001604:	3b01      	subs	r3, #1
 8001606:	6979      	ldr	r1, [r7, #20]
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	441a      	add	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initiate the circular DMA transfer from DCMI IP to final buffer end */
    if ( HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)hdcmi->pCircularBuffer, circular_copy_length) != HAL_OK)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3328      	adds	r3, #40	; 0x28
 800161e:	4619      	mov	r1, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f000 faa7 	bl	8001b78 <HAL_DMA_Start_IT>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00f      	beq.n	8001650 <HAL_DCMI_Start_DMA+0x17c>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001634:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set state back to Ready */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdcmi);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

       return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e00c      	b.n	800166a <HAL_DCMI_Start_DMA+0x196>
    }
  }

  /* Enable Capture */
  SET_BIT(hdcmi->Instance->CR, DCMI_CR_CAPTURE);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	080016a9 	.word	0x080016a9
 8001678:	08001871 	.word	0x08001871
 800167c:	080017d9 	.word	0x080017d9

08001680 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_ErrorCallback() callback can be implemented in the user file.
   */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *               the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DCMI_FrameEventCallback() callback can be implemented in the user file.
   */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <DCMI_DMAXferCplt>:
  *       another DMA transfer to copy the second half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;
  uint32_t temp;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	61fb      	str	r3, [r7, #28]


  if(hdcmi->XferCount != 0U)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d05c      	beq.n	8001778 <DCMI_DMAXferCplt+0xd0>
  {
    if (hdcmi->XferCount == 0xBEBE)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c2:	f64b 62be 	movw	r2, #48830	; 0xbebe
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d10c      	bne.n	80016e4 <DCMI_DMAXferCplt+0x3c>
    {
      hdcmi->XferCount = hdcmi->XferCount_0;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	639a      	str	r2, [r3, #56]	; 0x38
      hdcmi->XferSize  = hdcmi->XferSize_0;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->pBuffPtr  = hdcmi->pBuffPtr_0;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_DCMI_FrameEventCallback(hdcmi);
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 80016e2:	e075      	b.n	80017d0 <DCMI_DMAXferCplt+0x128>
      hdcmi->XferCount--;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e8:	1e5a      	subs	r2, r3, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	639a      	str	r2, [r3, #56]	; 0x38
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	61bb      	str	r3, [r7, #24]
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f8:	617b      	str	r3, [r7, #20]
      temp = (uint32_t) (tmpBuffer_Orig);
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	613b      	str	r3, [r7, #16]
        temp += hdcmi->HalfCopyLength * 4U;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4413      	add	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
      tmpBuffer_Orig = (uint32_t *) temp;
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	617b      	str	r3, [r7, #20]
      loop_length = hdcmi->HalfCopyLength;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001712:	60fb      	str	r3, [r7, #12]
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	441a      	add	r2, r3
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	1ad2      	subs	r2, r2, r3
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	63da      	str	r2, [r3, #60]	; 0x3c
        if (hdcmi->XferCount == 0)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001734:	2b00      	cmp	r3, #0
 8001736:	d103      	bne.n	8001740 <DCMI_DMAXferCplt+0x98>
          hdcmi->XferCount = 0xBEBE;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f64b 62be 	movw	r2, #48830	; 0xbebe
 800173e:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001744:	6979      	ldr	r1, [r7, #20]
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f000 fa15 	bl	8001b78 <HAL_DMA_Start_IT>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d03d      	beq.n	80017d0 <DCMI_DMAXferCplt+0x128>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	659a      	str	r2, [r3, #88]	; 0x58
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        __HAL_UNLOCK(hdcmi);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_ErrorCallback(hdcmi);
 8001770:	69f8      	ldr	r0, [r7, #28]
 8001772:	f7ff ff85 	bl	8001680 <HAL_DCMI_ErrorCallback>
}
 8001776:	e02b      	b.n	80017d0 <DCMI_DMAXferCplt+0x128>
    if((hdcmi->Instance->IER & DCMI_IT_FRAME) == 0x0U)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d124      	bne.n	80017d0 <DCMI_DMAXferCplt+0x128>
      if(__HAL_DCMI_GET_FLAG(hdcmi, (uint32_t)DCMI_FLAG_FRAMERI) != 0x0UL)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d01d      	beq.n	80017d0 <DCMI_DMAXferCplt+0x128>
        __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2201      	movs	r2, #1
 800179a:	615a      	str	r2, [r3, #20]
        if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d10f      	bne.n	80017ca <DCMI_DMAXferCplt+0x122>
          __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 021e 	bic.w	r2, r2, #30
 80017b8:	60da      	str	r2, [r3, #12]
          hdcmi->State = HAL_DCMI_STATE_READY;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hdcmi);
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_DCMI_FrameEventCallback(hdcmi);
 80017ca:	69f8      	ldr	r0, [r7, #28]
 80017cc:	f7ff ff62 	bl	8001694 <HAL_DCMI_FrameEventCallback>
}
 80017d0:	bf00      	nop
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <DCMI_DMAHalfXferCplt>:
  *       another DMA transfer to copy the first half of the work buffer
  *       associated to the DCMI handle to the final destination buffer.
  * @retval None
  */
static void DCMI_DMAHalfXferCplt(DMA_HandleTypeDef *hdma)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t loop_length;     /* transfer length  */
  uint32_t * tmpBuffer_Dest;
  uint32_t * tmpBuffer_Orig;

  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	617b      	str	r3, [r7, #20]

  if(hdcmi->XferCount != 0U)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d03c      	beq.n	8001868 <DCMI_DMAHalfXferCplt+0x90>
  {
    if (hdcmi->XferCount != 0xBEBE)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f2:	f64b 62be 	movw	r2, #48830	; 0xbebe
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d036      	beq.n	8001868 <DCMI_DMAHalfXferCplt+0x90>
    {
      /* Manage first half buffer copy in case of big transfer */

      /* Decrement half-copies counter */
      hdcmi->XferCount--;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fe:	1e5a      	subs	r2, r3, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	639a      	str	r2, [r3, #56]	; 0x38

      /* Point at DCMI final destination */
      tmpBuffer_Dest = (uint32_t *)hdcmi->pBuffPtr;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	613b      	str	r3, [r7, #16]

      /* Point at DCMI circular buffer start */
      tmpBuffer_Orig = (uint32_t *)hdcmi->pCircularBuffer;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	60fb      	str	r3, [r7, #12]

      /* copy half the buffer size */
      loop_length = hdcmi->HalfCopyLength;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001814:	60bb      	str	r3, [r7, #8]

      /* Save next entry to write at next DMA transfer interruption */
      hdcmi->pBuffPtr += (uint32_t) loop_length*4U;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	441a      	add	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	641a      	str	r2, [r3, #64]	; 0x40
      hdcmi->XferSize -= hdcmi->HalfCopyLength;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182c:	1ad2      	subs	r2, r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Data copy from work buffer to final destination buffer */
      /* Enable the DMA Channel */
      if (HAL_DMA_Start_IT(hdcmi->DMAM2M_Handle, (uint32_t) tmpBuffer_Orig, (uint32_t) tmpBuffer_Dest, loop_length) != HAL_OK)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001836:	68f9      	ldr	r1, [r7, #12]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f000 f99c 	bl	8001b78 <HAL_DMA_Start_IT>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d010      	beq.n	8001868 <DCMI_DMAHalfXferCplt+0x90>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	659a      	str	r2, [r3, #88]	; 0x58

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdcmi);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
        /*Call registered DCMI error callback*/
        hdcmi->ErrorCallback(hdcmi);
#else
        HAL_DCMI_ErrorCallback(hdcmi);
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff0c 	bl	8001680 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
      }
    }
  }
}
 8001868:	bf00      	nop
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f7ff fef4 	bl	8001680 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <DCMI_TransferSize>:
  * @note InputSize MUST be even.
  * @param  InputSize full buffer size (in 32-bit words)
  * @retval Transfer size (in 32-bit words)
  */
static uint32_t DCMI_TransferSize(uint32_t InputSize)
{
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	b0a6      	sub	sp, #152	; 0x98
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t j = 1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t temp = InputSize;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t aPrime[NPRIME] = {0};
 80018b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018b8:	2240      	movs	r2, #64	; 0x40
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 fc5d 	bl	800517c <memset>
  uint32_t output = 2; /* Want a result which is an even number */
 80018c2:	2302      	movs	r3, #2
 80018c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t PrimeArray[NPRIME] = { 1UL,  2UL,  3UL,  5UL,
 80018c8:	4b56      	ldr	r3, [pc, #344]	; (8001a24 <DCMI_TransferSize+0x184>)
 80018ca:	f107 040c 	add.w	r4, r7, #12
 80018ce:	461d      	mov	r5, r3
 80018d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                               37UL, 41UL, 43UL, 47UL};


  /* Develop InputSize in product of prime numbers */

  while (j < NPRIME)
 80018e4:	e041      	b.n	800196a <DCMI_TransferSize+0xca>
  {
    if (temp < PrimeArray[j])
 80018e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80018f0:	4413      	add	r3, r2
 80018f2:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80018f6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d33a      	bcc.n	8001974 <DCMI_TransferSize+0xd4>
    {
      break;
    }
    while ((temp % PrimeArray[j]) == 0U)
 80018fe:	e01e      	b.n	800193e <DCMI_TransferSize+0x9e>
    {
      aPrime[j]++;
 8001900:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800190a:	4413      	add	r3, r2
 800190c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800191c:	440b      	add	r3, r1
 800191e:	f843 2c4c 	str.w	r2, [r3, #-76]
      temp /= PrimeArray[j];
 8001922:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800192c:	4413      	add	r3, r2
 800192e:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8001932:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    while ((temp % PrimeArray[j]) == 0U)
 800193e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001948:	4413      	add	r3, r2
 800194a:	f853 2c8c 	ldr.w	r2, [r3, #-140]
 800194e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001952:	fbb3 f1f2 	udiv	r1, r3, r2
 8001956:	fb02 f201 	mul.w	r2, r2, r1
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0cf      	beq.n	8001900 <DCMI_TransferSize+0x60>
    }
    j++;
 8001960:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001964:	3301      	adds	r3, #1
 8001966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while (j < NPRIME)
 800196a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800196e:	2b0f      	cmp	r3, #15
 8001970:	d9b9      	bls.n	80018e6 <DCMI_TransferSize+0x46>
 8001972:	e000      	b.n	8001976 <DCMI_TransferSize+0xd6>
      break;
 8001974:	bf00      	nop
  }

  /*  Search for the biggest even divisor less or equal to 0xFFFE = 65534 */
  aPrime[1] -= 1U; /* output is initialized to 2, so don't count dividor 2 twice */
 8001976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001978:	3b01      	subs	r3, #1
 800197a:	653b      	str	r3, [r7, #80]	; 0x50

   /*  The algorithm below yields a sub-optimal solution
       but in an acceptable time.  */
    j =  NPRIME-1U;
 800197c:	230f      	movs	r3, #15
 800197e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while ((j > 0U) &&  (output <= 0xFFFEU))
 8001982:	e03f      	b.n	8001a04 <DCMI_TransferSize+0x164>
  {
    while (aPrime[j] > 0U)
    {
      if ((output * PrimeArray[j]) > 0xFFFEU)
 8001984:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800198e:	4413      	add	r3, r2
 8001990:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8001994:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d829      	bhi.n	80019f8 <DCMI_TransferSize+0x158>
      {
        break;
      }
      else
      {
        output *= PrimeArray[j];
 80019a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80019ae:	4413      	add	r3, r2
 80019b0:	f853 2c8c 	ldr.w	r2, [r3, #-140]
 80019b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019b8:	fb02 f303 	mul.w	r3, r2, r3
 80019bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        aPrime[j]--;
 80019c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80019ca:	4413      	add	r3, r2
 80019cc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80019dc:	440b      	add	r3, r1
 80019de:	f843 2c4c 	str.w	r2, [r3, #-76]
    while (aPrime[j] > 0U)
 80019e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80019ec:	4413      	add	r3, r2
 80019ee:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1c6      	bne.n	8001984 <DCMI_TransferSize+0xe4>
 80019f6:	e000      	b.n	80019fa <DCMI_TransferSize+0x15a>
        break;
 80019f8:	bf00      	nop
      }
    }
    j--;
 80019fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while ((j > 0U) &&  (output <= 0xFFFEU))
 8001a04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <DCMI_TransferSize+0x178>
 8001a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d9e4      	bls.n	80019e2 <DCMI_TransferSize+0x142>
  }



  return output;
 8001a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3798      	adds	r7, #152	; 0x98
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bdb0      	pop	{r4, r5, r7, pc}
 8001a24:	080051a4 	.word	0x080051a4

08001a28 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e08d      	b.n	8001b56 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_DMA_Init+0x138>)
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d80f      	bhi.n	8001a66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b45      	ldr	r3, [pc, #276]	; (8001b64 <HAL_DMA_Init+0x13c>)
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a45      	ldr	r2, [pc, #276]	; (8001b68 <HAL_DMA_Init+0x140>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	009a      	lsls	r2, r3, #2
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a42      	ldr	r2, [pc, #264]	; (8001b6c <HAL_DMA_Init+0x144>)
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
 8001a64:	e00e      	b.n	8001a84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <HAL_DMA_Init+0x148>)
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a3d      	ldr	r2, [pc, #244]	; (8001b68 <HAL_DMA_Init+0x140>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	009a      	lsls	r2, r3, #2
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a3c      	ldr	r2, [pc, #240]	; (8001b74 <HAL_DMA_Init+0x14c>)
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f9b6 	bl	8001e48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ae4:	d102      	bne.n	8001aec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b00:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d010      	beq.n	8001b2c <HAL_DMA_Init+0x104>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d80c      	bhi.n	8001b2c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f9d6 	bl	8001ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	e008      	b.n	8001b3e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020407 	.word	0x40020407
 8001b64:	bffdfff8 	.word	0xbffdfff8
 8001b68:	cccccccd 	.word	0xcccccccd
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	bffdfbf8 	.word	0xbffdfbf8
 8001b74:	40020400 	.word	0x40020400

08001b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_DMA_Start_IT+0x20>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e066      	b.n	8001c66 <HAL_DMA_Start_IT+0xee>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d155      	bne.n	8001c58 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	68b9      	ldr	r1, [r7, #8]
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f8fb 	bl	8001dcc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 020e 	orr.w	r2, r2, #14
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	e00f      	b.n	8001c10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0204 	bic.w	r2, r2, #4
 8001bfe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 020a 	orr.w	r2, r2, #10
 8001c0e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c2c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c44:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0201 	orr.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e005      	b.n	8001c64 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c60:	2302      	movs	r3, #2
 8001c62:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f003 031c 	and.w	r3, r3, #28
 8001c8e:	2204      	movs	r2, #4
 8001c90:	409a      	lsls	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d026      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x7a>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d021      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d107      	bne.n	8001cc2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0204 	bic.w	r2, r2, #4
 8001cc0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f003 021c 	and.w	r2, r3, #28
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	2104      	movs	r1, #4
 8001cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d071      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001ce6:	e06c      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	f003 031c 	and.w	r3, r3, #28
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d02e      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xec>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d029      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10b      	bne.n	8001d2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 020a 	bic.w	r2, r2, #10
 8001d22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	f003 021c 	and.w	r2, r3, #28
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	2102      	movs	r1, #2
 8001d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d038      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d58:	e033      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f003 031c 	and.w	r3, r3, #28
 8001d62:	2208      	movs	r2, #8
 8001d64:	409a      	lsls	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d02a      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x156>
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d025      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 020e 	bic.w	r2, r2, #14
 8001d86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	f003 021c 	and.w	r2, r3, #28
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	2101      	movs	r1, #1
 8001d96:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
}
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001de2:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d004      	beq.n	8001df6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001df4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f003 021c 	and.w	r2, r3, #28
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f202 	lsl.w	r2, r1, r2
 8001e08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b10      	cmp	r3, #16
 8001e18:	d108      	bne.n	8001e2c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e2a:	e007      	b.n	8001e3c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	60da      	str	r2, [r3, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d80a      	bhi.n	8001e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e68:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6493      	str	r3, [r2, #72]	; 0x48
 8001e70:	e007      	b.n	8001e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	009a      	lsls	r2, r3, #2
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e7c:	4413      	add	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3b08      	subs	r3, #8
 8001e8a:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e98:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40020407 	.word	0x40020407
 8001eb8:	4002081c 	.word	0x4002081c
 8001ebc:	cccccccd 	.word	0xcccccccd
 8001ec0:	40020880 	.word	0x40020880

08001ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001ee6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	1000823f 	.word	0x1000823f
 8001f08:	40020940 	.word	0x40020940

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1a:	e166      	b.n	80021ea <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2101      	movs	r1, #1
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8158 	beq.w	80021e4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d00b      	beq.n	8001f54 <HAL_GPIO_Init+0x48>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d007      	beq.n	8001f54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f48:	2b11      	cmp	r3, #17
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b12      	cmp	r3, #18
 8001f52:	d130      	bne.n	8001fb6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	f003 0201 	and.w	r2, r3, #1
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0xea>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b12      	cmp	r3, #18
 8001ff4:	d123      	bne.n	800203e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	08da      	lsrs	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3208      	adds	r2, #8
 8001ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	08da      	lsrs	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3208      	adds	r2, #8
 8002038:	6939      	ldr	r1, [r7, #16]
 800203a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0203 	and.w	r2, r3, #3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 80b2 	beq.w	80021e4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002080:	4b61      	ldr	r3, [pc, #388]	; (8002208 <HAL_GPIO_Init+0x2fc>)
 8002082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002084:	4a60      	ldr	r2, [pc, #384]	; (8002208 <HAL_GPIO_Init+0x2fc>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6613      	str	r3, [r2, #96]	; 0x60
 800208c:	4b5e      	ldr	r3, [pc, #376]	; (8002208 <HAL_GPIO_Init+0x2fc>)
 800208e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002098:	4a5c      	ldr	r2, [pc, #368]	; (800220c <HAL_GPIO_Init+0x300>)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	3302      	adds	r3, #2
 80020a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	220f      	movs	r2, #15
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020c2:	d02b      	beq.n	800211c <HAL_GPIO_Init+0x210>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a52      	ldr	r2, [pc, #328]	; (8002210 <HAL_GPIO_Init+0x304>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d025      	beq.n	8002118 <HAL_GPIO_Init+0x20c>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a51      	ldr	r2, [pc, #324]	; (8002214 <HAL_GPIO_Init+0x308>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d01f      	beq.n	8002114 <HAL_GPIO_Init+0x208>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a50      	ldr	r2, [pc, #320]	; (8002218 <HAL_GPIO_Init+0x30c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d019      	beq.n	8002110 <HAL_GPIO_Init+0x204>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a4f      	ldr	r2, [pc, #316]	; (800221c <HAL_GPIO_Init+0x310>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d013      	beq.n	800210c <HAL_GPIO_Init+0x200>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a4e      	ldr	r2, [pc, #312]	; (8002220 <HAL_GPIO_Init+0x314>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00d      	beq.n	8002108 <HAL_GPIO_Init+0x1fc>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a4d      	ldr	r2, [pc, #308]	; (8002224 <HAL_GPIO_Init+0x318>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d007      	beq.n	8002104 <HAL_GPIO_Init+0x1f8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a4c      	ldr	r2, [pc, #304]	; (8002228 <HAL_GPIO_Init+0x31c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d101      	bne.n	8002100 <HAL_GPIO_Init+0x1f4>
 80020fc:	2307      	movs	r3, #7
 80020fe:	e00e      	b.n	800211e <HAL_GPIO_Init+0x212>
 8002100:	2308      	movs	r3, #8
 8002102:	e00c      	b.n	800211e <HAL_GPIO_Init+0x212>
 8002104:	2306      	movs	r3, #6
 8002106:	e00a      	b.n	800211e <HAL_GPIO_Init+0x212>
 8002108:	2305      	movs	r3, #5
 800210a:	e008      	b.n	800211e <HAL_GPIO_Init+0x212>
 800210c:	2304      	movs	r3, #4
 800210e:	e006      	b.n	800211e <HAL_GPIO_Init+0x212>
 8002110:	2303      	movs	r3, #3
 8002112:	e004      	b.n	800211e <HAL_GPIO_Init+0x212>
 8002114:	2302      	movs	r3, #2
 8002116:	e002      	b.n	800211e <HAL_GPIO_Init+0x212>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <HAL_GPIO_Init+0x212>
 800211c:	2300      	movs	r3, #0
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	f002 0203 	and.w	r2, r2, #3
 8002124:	0092      	lsls	r2, r2, #2
 8002126:	4093      	lsls	r3, r2
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800212e:	4937      	ldr	r1, [pc, #220]	; (800220c <HAL_GPIO_Init+0x300>)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <HAL_GPIO_Init+0x320>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	43db      	mvns	r3, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002160:	4a32      	ldr	r2, [pc, #200]	; (800222c <HAL_GPIO_Init+0x320>)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002166:	4b31      	ldr	r3, [pc, #196]	; (800222c <HAL_GPIO_Init+0x320>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	43db      	mvns	r3, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800218a:	4a28      	ldr	r2, [pc, #160]	; (800222c <HAL_GPIO_Init+0x320>)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002190:	4b26      	ldr	r3, [pc, #152]	; (800222c <HAL_GPIO_Init+0x320>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021b4:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_GPIO_Init+0x320>)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021ba:	4b1c      	ldr	r3, [pc, #112]	; (800222c <HAL_GPIO_Init+0x320>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021de:	4a13      	ldr	r2, [pc, #76]	; (800222c <HAL_GPIO_Init+0x320>)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3301      	adds	r3, #1
 80021e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f47f ae91 	bne.w	8001f1c <HAL_GPIO_Init+0x10>
  }
}
 80021fa:	bf00      	nop
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	40010000 	.word	0x40010000
 8002210:	48000400 	.word	0x48000400
 8002214:	48000800 	.word	0x48000800
 8002218:	48000c00 	.word	0x48000c00
 800221c:	48001000 	.word	0x48001000
 8002220:	48001400 	.word	0x48001400
 8002224:	48001800 	.word	0x48001800
 8002228:	48001c00 	.word	0x48001c00
 800222c:	40010400 	.word	0x40010400

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800224c:	e002      	b.n	8002254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e081      	b.n	8002376 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fd38 	bl	8000cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2224      	movs	r2, #36	; 0x24
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d107      	bne.n	80022da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	e006      	b.n	80022e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d104      	bne.n	80022fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800230c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800231c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	ea42 0103 	orr.w	r1, r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	021a      	lsls	r2, r3, #8
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69d9      	ldr	r1, [r3, #28]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1a      	ldr	r2, [r3, #32]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b20      	cmp	r3, #32
 8002392:	d138      	bne.n	8002406 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800239e:	2302      	movs	r3, #2
 80023a0:	e032      	b.n	8002408 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2224      	movs	r2, #36	; 0x24
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0201 	bic.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0201 	orr.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b20      	cmp	r3, #32
 8002428:	d139      	bne.n	800249e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002434:	2302      	movs	r3, #2
 8002436:	e033      	b.n	80024a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2224      	movs	r2, #36	; 0x24
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002466:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800249e:	2302      	movs	r3, #2
  }
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ae:	b08f      	sub	sp, #60	; 0x3c
 80024b0:	af0a      	add	r7, sp, #40	; 0x28
 80024b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e116      	b.n	80026ec <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7fe fccd 	bl	8000e78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2203      	movs	r2, #3
 80024e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 fbdb 	bl	8004cb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	687e      	ldr	r6, [r7, #4]
 800250a:	466d      	mov	r5, sp
 800250c:	f106 0410 	add.w	r4, r6, #16
 8002510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002518:	e894 0003 	ldmia.w	r4, {r0, r1}
 800251c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002520:	1d33      	adds	r3, r6, #4
 8002522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002524:	6838      	ldr	r0, [r7, #0]
 8002526:	f002 fb75 	bl	8004c14 <USB_CoreInit>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0d7      	b.n	80026ec <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f002 fbc9 	bl	8004cda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e04a      	b.n	80025e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	333d      	adds	r3, #61	; 0x3d
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	333c      	adds	r3, #60	; 0x3c
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	b298      	uxth	r0, r3
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	3342      	adds	r3, #66	; 0x42
 800258a:	4602      	mov	r2, r0
 800258c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	333f      	adds	r3, #63	; 0x3f
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	3344      	adds	r3, #68	; 0x44
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3348      	adds	r3, #72	; 0x48
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3350      	adds	r3, #80	; 0x50
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	3301      	adds	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d3af      	bcc.n	800254e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	e044      	b.n	800267e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025f4:	7bfa      	ldrb	r2, [r7, #15]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002662:	7bfa      	ldrb	r2, [r7, #15]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	3301      	adds	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	429a      	cmp	r2, r3
 8002686:	d3b5      	bcc.n	80025f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	687e      	ldr	r6, [r7, #4]
 8002690:	466d      	mov	r5, sp
 8002692:	f106 0410 	add.w	r4, r6, #16
 8002696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800269e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026a6:	1d33      	adds	r3, r6, #4
 80026a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026aa:	6838      	ldr	r0, [r7, #0]
 80026ac:	f002 fb40 	bl	8004d30 <USB_DevInit>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e014      	b.n	80026ec <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d102      	bne.n	80026e0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f80a 	bl	80026f4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f002 fcd0 	bl	800508a <USB_DevDisconnect>

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002726:	f043 0303 	orr.w	r3, r3, #3
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002740:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274c:	d102      	bne.n	8002754 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800274e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002752:	e00b      	b.n	800276c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002762:	d102      	bne.n	800276a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002768:	e000      	b.n	800276c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800276a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40007000 	.word	0x40007000

0800277c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d141      	bne.n	800280e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800278a:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002796:	d131      	bne.n	80027fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002798:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800279a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800279e:	4a46      	ldr	r2, [pc, #280]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a8:	4b43      	ldr	r3, [pc, #268]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027b0:	4a41      	ldr	r2, [pc, #260]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80027b8:	4b40      	ldr	r3, [pc, #256]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2232      	movs	r2, #50	; 0x32
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	4a3f      	ldr	r2, [pc, #252]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	0c9b      	lsrs	r3, r3, #18
 80027ca:	3301      	adds	r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ce:	e002      	b.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027d6:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e2:	d102      	bne.n	80027ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f2      	bne.n	80027d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027ea:	4b33      	ldr	r3, [pc, #204]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f6:	d158      	bne.n	80028aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e057      	b.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027fc:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002802:	4a2d      	ldr	r2, [pc, #180]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002808:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800280c:	e04d      	b.n	80028aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002814:	d141      	bne.n	800289a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800281e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002822:	d131      	bne.n	8002888 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002824:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800282a:	4a23      	ldr	r2, [pc, #140]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002830:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002834:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800283c:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800283e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002842:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2232      	movs	r2, #50	; 0x32
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	0c9b      	lsrs	r3, r3, #18
 8002856:	3301      	adds	r3, #1
 8002858:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800285a:	e002      	b.n	8002862 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	3b01      	subs	r3, #1
 8002860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286e:	d102      	bne.n	8002876 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f2      	bne.n	800285c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002882:	d112      	bne.n	80028aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e011      	b.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800288a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002898:	e007      	b.n	80028aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028a2:	4a05      	ldr	r2, [pc, #20]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	40007000 	.word	0x40007000
 80028bc:	20000000 	.word	0x20000000
 80028c0:	431bde83 	.word	0x431bde83

080028c4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80028ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028d2:	6053      	str	r3, [r2, #4]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40007000 	.word	0x40007000

080028e4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_PWREx_EnableVddIO2+0x1c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a04      	ldr	r2, [pc, #16]	; (8002900 <HAL_PWREx_EnableVddIO2+0x1c>)
 80028ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028f2:	6053      	str	r3, [r2, #4]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40007000 	.word	0x40007000

08002904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	f000 bc16 	b.w	8003144 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002918:	4ba0      	ldr	r3, [pc, #640]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002922:	4b9e      	ldr	r3, [pc, #632]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80e4 	beq.w	8002b02 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <HAL_RCC_OscConfig+0x4c>
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	f040 808b 	bne.w	8002a5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b01      	cmp	r3, #1
 800294c:	f040 8087 	bne.w	8002a5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002950:	4b92      	ldr	r3, [pc, #584]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_OscConfig+0x64>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e3ed      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	4b8b      	ldr	r3, [pc, #556]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <HAL_RCC_OscConfig+0x7e>
 8002978:	4b88      	ldr	r3, [pc, #544]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002980:	e005      	b.n	800298e <HAL_RCC_OscConfig+0x8a>
 8002982:	4b86      	ldr	r3, [pc, #536]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800298e:	4293      	cmp	r3, r2
 8002990:	d223      	bcs.n	80029da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fdc8 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e3ce      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a6:	4b7d      	ldr	r3, [pc, #500]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a7c      	ldr	r2, [pc, #496]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b7a      	ldr	r3, [pc, #488]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	4977      	ldr	r1, [pc, #476]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c4:	4b75      	ldr	r3, [pc, #468]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	4972      	ldr	r1, [pc, #456]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
 80029d8:	e025      	b.n	8002a26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029da:	4b70      	ldr	r3, [pc, #448]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6f      	ldr	r2, [pc, #444]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 80029e0:	f043 0308 	orr.w	r3, r3, #8
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	496a      	ldr	r1, [pc, #424]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	4965      	ldr	r1, [pc, #404]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fd88 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e38e      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a26:	f000 fcbf 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8002a2a:	4601      	mov	r1, r0
 8002a2c:	4b5b      	ldr	r3, [pc, #364]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	4a5a      	ldr	r2, [pc, #360]	; (8002ba0 <HAL_RCC_OscConfig+0x29c>)
 8002a38:	5cd3      	ldrb	r3, [r2, r3]
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a42:	4a58      	ldr	r2, [pc, #352]	; (8002ba4 <HAL_RCC_OscConfig+0x2a0>)
 8002a44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a46:	4b58      	ldr	r3, [pc, #352]	; (8002ba8 <HAL_RCC_OscConfig+0x2a4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fb2c 	bl	80010a8 <HAL_InitTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d052      	beq.n	8002b00 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	e372      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d032      	beq.n	8002acc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a66:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a4c      	ldr	r2, [pc, #304]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a72:	f7fe fb69 	bl	8001148 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a7a:	f7fe fb65 	bl	8001148 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e35b      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a8c:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a98:	4b40      	ldr	r3, [pc, #256]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3f      	ldr	r2, [pc, #252]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002a9e:	f043 0308 	orr.w	r3, r3, #8
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	493a      	ldr	r1, [pc, #232]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab6:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	4935      	ldr	r1, [pc, #212]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	604b      	str	r3, [r1, #4]
 8002aca:	e01a      	b.n	8002b02 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002acc:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a32      	ldr	r2, [pc, #200]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ad8:	f7fe fb36 	bl	8001148 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ae0:	f7fe fb32 	bl	8001148 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e328      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x1dc>
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d073      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_OscConfig+0x21c>
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b0c      	cmp	r3, #12
 8002b18:	d10e      	bne.n	8002b38 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d10b      	bne.n	8002b38 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d063      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x2f0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d15f      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e305      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b40:	d106      	bne.n	8002b50 <HAL_RCC_OscConfig+0x24c>
 8002b42:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e01d      	b.n	8002b8c <HAL_RCC_OscConfig+0x288>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x270>
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a0f      	ldr	r2, [pc, #60]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0x288>
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <HAL_RCC_OscConfig+0x298>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01b      	beq.n	8002bcc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe fad8 	bl	8001148 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b9a:	e010      	b.n	8002bbe <HAL_RCC_OscConfig+0x2ba>
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	080051f4 	.word	0x080051f4
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bac:	f7fe facc 	bl	8001148 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	; 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e2c2      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bbe:	4baf      	ldr	r3, [pc, #700]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x2a8>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fabc 	bl	8001148 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7fe fab8 	bl	8001148 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e2ae      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002be6:	4ba5      	ldr	r3, [pc, #660]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x2d0>
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d060      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_OscConfig+0x310>
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d119      	bne.n	8002c42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d116      	bne.n	8002c42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c14:	4b99      	ldr	r3, [pc, #612]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_OscConfig+0x328>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e28b      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b93      	ldr	r3, [pc, #588]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	061b      	lsls	r3, r3, #24
 8002c3a:	4990      	ldr	r1, [pc, #576]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c40:	e040      	b.n	8002cc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d023      	beq.n	8002c92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4a:	4b8c      	ldr	r3, [pc, #560]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a8b      	ldr	r2, [pc, #556]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fa77 	bl	8001148 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5e:	f7fe fa73 	bl	8001148 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e269      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c70:	4b82      	ldr	r3, [pc, #520]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b7f      	ldr	r3, [pc, #508]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	497c      	ldr	r1, [pc, #496]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
 8002c90:	e018      	b.n	8002cc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c92:	4b7a      	ldr	r3, [pc, #488]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a79      	ldr	r2, [pc, #484]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fa53 	bl	8001148 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7fe fa4f 	bl	8001148 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e245      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cb8:	4b70      	ldr	r3, [pc, #448]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f0      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d03c      	beq.n	8002d4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd8:	4b68      	ldr	r3, [pc, #416]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cde:	4a67      	ldr	r2, [pc, #412]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fa2e 	bl	8001148 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fa2a 	bl	8001148 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e220      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d02:	4b5e      	ldr	r3, [pc, #376]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ef      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x3ec>
 8002d10:	e01b      	b.n	8002d4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d12:	4b5a      	ldr	r3, [pc, #360]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d18:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fe fa11 	bl	8001148 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fa0d 	bl	8001148 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e203      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d3c:	4b4f      	ldr	r3, [pc, #316]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ef      	bne.n	8002d2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 80a6 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d5c:	4b47      	ldr	r3, [pc, #284]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10d      	bne.n	8002d84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d68:	4b44      	ldr	r3, [pc, #272]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6c:	4a43      	ldr	r2, [pc, #268]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d72:	6593      	str	r3, [r2, #88]	; 0x58
 8002d74:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d80:	2301      	movs	r3, #1
 8002d82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d84:	4b3e      	ldr	r3, [pc, #248]	; (8002e80 <HAL_RCC_OscConfig+0x57c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d118      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d90:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <HAL_RCC_OscConfig+0x57c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a3a      	ldr	r2, [pc, #232]	; (8002e80 <HAL_RCC_OscConfig+0x57c>)
 8002d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9c:	f7fe f9d4 	bl	8001148 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da4:	f7fe f9d0 	bl	8001148 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1c6      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db6:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_RCC_OscConfig+0x57c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d108      	bne.n	8002ddc <HAL_RCC_OscConfig+0x4d8>
 8002dca:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd0:	4a2a      	ldr	r2, [pc, #168]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dda:	e024      	b.n	8002e26 <HAL_RCC_OscConfig+0x522>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	d110      	bne.n	8002e06 <HAL_RCC_OscConfig+0x502>
 8002de4:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	4a24      	ldr	r2, [pc, #144]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002df4:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	4a20      	ldr	r2, [pc, #128]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e04:	e00f      	b.n	8002e26 <HAL_RCC_OscConfig+0x522>
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	4a1b      	ldr	r2, [pc, #108]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e16:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002e1e:	f023 0304 	bic.w	r3, r3, #4
 8002e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d016      	beq.n	8002e5c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2e:	f7fe f98b 	bl	8001148 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fe f987 	bl	8001148 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e17b      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RCC_OscConfig+0x578>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0ed      	beq.n	8002e36 <HAL_RCC_OscConfig+0x532>
 8002e5a:	e01a      	b.n	8002e92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7fe f974 	bl	8001148 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e62:	e00f      	b.n	8002e84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e64:	f7fe f970 	bl	8001148 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d906      	bls.n	8002e84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e164      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e84:	4ba8      	ldr	r3, [pc, #672]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e8      	bne.n	8002e64 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e92:	7ffb      	ldrb	r3, [r7, #31]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e98:	4ba3      	ldr	r3, [pc, #652]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	4aa2      	ldr	r2, [pc, #648]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d03c      	beq.n	8002f2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01c      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002eb8:	4b9b      	ldr	r3, [pc, #620]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ebe:	4a9a      	ldr	r2, [pc, #616]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fe f93e 	bl	8001148 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ed0:	f7fe f93a 	bl	8001148 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e130      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ee2:	4b91      	ldr	r3, [pc, #580]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ef      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x5cc>
 8002ef0:	e01b      	b.n	8002f2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ef2:	4b8d      	ldr	r3, [pc, #564]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002ef4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ef8:	4a8b      	ldr	r2, [pc, #556]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe f921 	bl	8001148 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f0a:	f7fe f91d 	bl	8001148 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e113      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f1c:	4b82      	ldr	r3, [pc, #520]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1ef      	bne.n	8002f0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8107 	beq.w	8003142 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	f040 80cb 	bne.w	80030d4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f3e:	4b7a      	ldr	r3, [pc, #488]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f003 0203 	and.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d12c      	bne.n	8002fac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d123      	bne.n	8002fac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d11b      	bne.n	8002fac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d113      	bne.n	8002fac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	085b      	lsrs	r3, r3, #1
 8002f90:	3b01      	subs	r3, #1
 8002f92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d109      	bne.n	8002fac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d06d      	beq.n	8003088 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b0c      	cmp	r3, #12
 8002fb0:	d068      	beq.n	8003084 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fb2:	4b5d      	ldr	r3, [pc, #372]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d105      	bne.n	8002fca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fbe:	4b5a      	ldr	r3, [pc, #360]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0ba      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fce:	4b56      	ldr	r3, [pc, #344]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a55      	ldr	r2, [pc, #340]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002fd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fd8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fda:	f7fe f8b5 	bl	8001148 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe2:	f7fe f8b1 	bl	8001148 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0a7      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff4:	4b4c      	ldr	r3, [pc, #304]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f0      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003000:	4b49      	ldr	r3, [pc, #292]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	4b49      	ldr	r3, [pc, #292]	; (800312c <HAL_RCC_OscConfig+0x828>)
 8003006:	4013      	ands	r3, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003010:	3a01      	subs	r2, #1
 8003012:	0112      	lsls	r2, r2, #4
 8003014:	4311      	orrs	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800301a:	0212      	lsls	r2, r2, #8
 800301c:	4311      	orrs	r1, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003022:	0852      	lsrs	r2, r2, #1
 8003024:	3a01      	subs	r2, #1
 8003026:	0552      	lsls	r2, r2, #21
 8003028:	4311      	orrs	r1, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800302e:	0852      	lsrs	r2, r2, #1
 8003030:	3a01      	subs	r2, #1
 8003032:	0652      	lsls	r2, r2, #25
 8003034:	4311      	orrs	r1, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800303a:	06d2      	lsls	r2, r2, #27
 800303c:	430a      	orrs	r2, r1
 800303e:	493a      	ldr	r1, [pc, #232]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8003040:	4313      	orrs	r3, r2
 8003042:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003044:	4b38      	ldr	r3, [pc, #224]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a37      	ldr	r2, [pc, #220]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 800304a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003050:	4b35      	ldr	r3, [pc, #212]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a34      	ldr	r2, [pc, #208]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800305c:	f7fe f874 	bl	8001148 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe f870 	bl	8001148 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e066      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003076:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003082:	e05e      	b.n	8003142 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e05d      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003088:	4b27      	ldr	r3, [pc, #156]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d156      	bne.n	8003142 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003094:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a23      	ldr	r2, [pc, #140]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 800309a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a0:	4b21      	ldr	r3, [pc, #132]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4a20      	ldr	r2, [pc, #128]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 80030a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030ac:	f7fe f84c 	bl	8001148 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe f848 	bl	8001148 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e03e      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x7b0>
 80030d2:	e036      	b.n	8003142 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d031      	beq.n	800313e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b13      	ldr	r3, [pc, #76]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a12      	ldr	r2, [pc, #72]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 80030e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	4a0c      	ldr	r2, [pc, #48]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 80030f8:	f023 0303 	bic.w	r3, r3, #3
 80030fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4a09      	ldr	r2, [pc, #36]	; (8003128 <HAL_RCC_OscConfig+0x824>)
 8003104:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe f81b 	bl	8001148 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003114:	e00c      	b.n	8003130 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003116:	f7fe f817 	bl	8001148 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d905      	bls.n	8003130 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e00d      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
 8003128:	40021000 	.word	0x40021000
 800312c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_RCC_OscConfig+0x848>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ec      	bne.n	8003116 <HAL_RCC_OscConfig+0x812>
 800313c:	e001      	b.n	8003142 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000

08003150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e10f      	b.n	8003388 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003168:	4b89      	ldr	r3, [pc, #548]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d910      	bls.n	8003198 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b86      	ldr	r3, [pc, #536]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 020f 	bic.w	r2, r3, #15
 800317e:	4984      	ldr	r1, [pc, #528]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b82      	ldr	r3, [pc, #520]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0f7      	b.n	8003388 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8089 	beq.w	80032b8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d133      	bne.n	8003216 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ae:	4b79      	ldr	r3, [pc, #484]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0e4      	b.n	8003388 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80031be:	f000 fa0f 	bl	80035e0 <RCC_GetSysClockFreqFromPLLSource>
 80031c2:	4602      	mov	r2, r0
 80031c4:	4b74      	ldr	r3, [pc, #464]	; (8003398 <HAL_RCC_ClockConfig+0x248>)
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d955      	bls.n	8003276 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80031ca:	4b72      	ldr	r3, [pc, #456]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031d6:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031de:	4a6d      	ldr	r2, [pc, #436]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80031e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	e044      	b.n	8003276 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d03e      	beq.n	8003276 <HAL_RCC_ClockConfig+0x126>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d13a      	bne.n	8003276 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003200:	4b64      	ldr	r3, [pc, #400]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003208:	4a62      	ldr	r2, [pc, #392]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 800320a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800320e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	e02f      	b.n	8003276 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321e:	4b5d      	ldr	r3, [pc, #372]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d115      	bne.n	8003256 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0ac      	b.n	8003388 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003236:	4b57      	ldr	r3, [pc, #348]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e0a0      	b.n	8003388 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003246:	4b53      	ldr	r3, [pc, #332]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e098      	b.n	8003388 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003256:	f000 f8a7 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 800325a:	4602      	mov	r2, r0
 800325c:	4b4e      	ldr	r3, [pc, #312]	; (8003398 <HAL_RCC_ClockConfig+0x248>)
 800325e:	429a      	cmp	r2, r3
 8003260:	d909      	bls.n	8003276 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003262:	4b4c      	ldr	r3, [pc, #304]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800326a:	4a4a      	ldr	r2, [pc, #296]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 800326c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003270:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003276:	4b47      	ldr	r3, [pc, #284]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f023 0203 	bic.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4944      	ldr	r1, [pc, #272]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003284:	4313      	orrs	r3, r2
 8003286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003288:	f7fd ff5e 	bl	8001148 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003290:	f7fd ff5a 	bl	8001148 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	; 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e070      	b.n	8003388 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 020c 	and.w	r2, r3, #12
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d1eb      	bne.n	8003290 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d009      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c4:	4b33      	ldr	r3, [pc, #204]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4930      	ldr	r1, [pc, #192]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
 80032d6:	e008      	b.n	80032ea <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b80      	cmp	r3, #128	; 0x80
 80032dc:	d105      	bne.n	80032ea <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80032de:	4b2d      	ldr	r3, [pc, #180]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	4a2c      	ldr	r2, [pc, #176]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80032e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032e8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d210      	bcs.n	800331a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 020f 	bic.w	r2, r3, #15
 8003300:	4923      	ldr	r1, [pc, #140]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d001      	beq.n	800331a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e036      	b.n	8003388 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d008      	beq.n	8003338 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003326:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	4918      	ldr	r1, [pc, #96]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4910      	ldr	r1, [pc, #64]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003354:	4313      	orrs	r3, r2
 8003356:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003358:	f000 f826 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 800335c:	4601      	mov	r1, r0
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	4a0c      	ldr	r2, [pc, #48]	; (800339c <HAL_RCC_ClockConfig+0x24c>)
 800336a:	5cd3      	ldrb	r3, [r2, r3]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	fa21 f303 	lsr.w	r3, r1, r3
 8003374:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x250>)
 8003376:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_RCC_ClockConfig+0x254>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd fe93 	bl	80010a8 <HAL_InitTick>
 8003382:	4603      	mov	r3, r0
 8003384:	73fb      	strb	r3, [r7, #15]

  return status;
 8003386:	7bfb      	ldrb	r3, [r7, #15]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40022000 	.word	0x40022000
 8003394:	40021000 	.word	0x40021000
 8003398:	04c4b400 	.word	0x04c4b400
 800339c:	080051f4 	.word	0x080051f4
 80033a0:	20000000 	.word	0x20000000
 80033a4:	20000004 	.word	0x20000004

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b6:	4b3d      	ldr	r3, [pc, #244]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x34>
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d121      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d11e      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033dc:	4b33      	ldr	r3, [pc, #204]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d107      	bne.n	80033f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033e8:	4b30      	ldr	r3, [pc, #192]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	e005      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033f8:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003404:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10d      	bne.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b04      	cmp	r3, #4
 800341e:	d102      	bne.n	8003426 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	e004      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d101      	bne.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800342c:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800342e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	2b0c      	cmp	r3, #12
 8003434:	d133      	bne.n	800349e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003436:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0xa4>
 8003446:	2b03      	cmp	r3, #3
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0xaa>
 800344a:	e005      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800344e:	617b      	str	r3, [r7, #20]
      break;
 8003450:	e005      	b.n	800345e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003452:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003454:	617b      	str	r3, [r7, #20]
      break;
 8003456:	e002      	b.n	800345e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	617b      	str	r3, [r7, #20]
      break;
 800345c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	3301      	adds	r3, #1
 800346a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	fb02 f203 	mul.w	r2, r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	0e5b      	lsrs	r3, r3, #25
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	3301      	adds	r3, #1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800349e:	69bb      	ldr	r3, [r7, #24]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3724      	adds	r7, #36	; 0x24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40021000 	.word	0x40021000
 80034b0:	0800520c 	.word	0x0800520c
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	007a1200 	.word	0x007a1200

080034bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034d8:	f7ff fff0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4601      	mov	r1, r0
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4a04      	ldr	r2, [pc, #16]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	08005204 	.word	0x08005204

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003504:	f7ff ffda 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003508:	4601      	mov	r1, r0
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0adb      	lsrs	r3, r3, #11
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	08005204 	.word	0x08005204

0800352c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003538:	4b27      	ldr	r3, [pc, #156]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003544:	f7ff f8fa 	bl	800273c <HAL_PWREx_GetVoltageRange>
 8003548:	6178      	str	r0, [r7, #20]
 800354a:	e014      	b.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	4a21      	ldr	r2, [pc, #132]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	6593      	str	r3, [r2, #88]	; 0x58
 8003558:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003564:	f7ff f8ea 	bl	800273c <HAL_PWREx_GetVoltageRange>
 8003568:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800356a:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003574:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357c:	d10b      	bne.n	8003596 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d913      	bls.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2ba0      	cmp	r3, #160	; 0xa0
 8003588:	d902      	bls.n	8003590 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800358a:	2302      	movs	r3, #2
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e00d      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003590:	2301      	movs	r3, #1
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e00a      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b7f      	cmp	r3, #127	; 0x7f
 800359a:	d902      	bls.n	80035a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800359c:	2302      	movs	r3, #2
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e004      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b70      	cmp	r3, #112	; 0x70
 80035a6:	d101      	bne.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035a8:	2301      	movs	r3, #1
 80035aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 020f 	bic.w	r2, r3, #15
 80035b4:	4909      	ldr	r1, [pc, #36]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035bc:	4b07      	ldr	r3, [pc, #28]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d001      	beq.n	80035ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40022000 	.word	0x40022000

080035e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80035ea:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d118      	bne.n	8003628 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035f6:	4b2a      	ldr	r3, [pc, #168]	; (80036a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d107      	bne.n	8003612 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003602:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003608:	0a1b      	lsrs	r3, r3, #8
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	e005      	b.n	800361e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800361e:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003626:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d002      	beq.n	800363e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003638:	2b03      	cmp	r3, #3
 800363a:	d003      	beq.n	8003644 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800363c:	e005      	b.n	800364a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800363e:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003640:	613b      	str	r3, [r7, #16]
    break;
 8003642:	e005      	b.n	8003650 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003646:	613b      	str	r3, [r7, #16]
    break;
 8003648:	e002      	b.n	8003650 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	613b      	str	r3, [r7, #16]
    break;
 800364e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003650:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	3301      	adds	r3, #1
 800365c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800365e:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	fb02 f203 	mul.w	r2, r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	0e5b      	lsrs	r3, r3, #25
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	3301      	adds	r3, #1
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003690:	683b      	ldr	r3, [r7, #0]
}
 8003692:	4618      	mov	r0, r3
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	0800520c 	.word	0x0800520c
 80036a8:	00f42400 	.word	0x00f42400
 80036ac:	007a1200 	.word	0x007a1200

080036b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036b8:	2300      	movs	r3, #0
 80036ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036bc:	2300      	movs	r3, #0
 80036be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d03d      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d0:	2b40      	cmp	r3, #64	; 0x40
 80036d2:	d00b      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d804      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d015      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80036e0:	e01d      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80036e2:	2b60      	cmp	r3, #96	; 0x60
 80036e4:	d01e      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d01c      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80036ea:	e018      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036ec:	4b86      	ldr	r3, [pc, #536]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4a85      	ldr	r2, [pc, #532]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036f8:	e015      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fafd 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800370a:	e00c      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3320      	adds	r3, #32
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fbe4 	bl	8003ee0 <RCCEx_PLLSAI2_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800371c:	e003      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	74fb      	strb	r3, [r7, #19]
      break;
 8003722:	e000      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003724:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10b      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800372c:	4b76      	ldr	r3, [pc, #472]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800372e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003732:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373a:	4973      	ldr	r1, [pc, #460]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003742:	e001      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d042      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800375c:	d00f      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800375e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003762:	d805      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d011      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376c:	d017      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xee>
 800376e:	e01f      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003774:	d01f      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377a:	d01c      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800377c:	e018      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800377e:	4b62      	ldr	r3, [pc, #392]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	4a61      	ldr	r2, [pc, #388]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003788:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800378a:	e015      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3304      	adds	r3, #4
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fab4 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800379c:	e00c      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3320      	adds	r3, #32
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fb9b 	bl	8003ee0 <RCCEx_PLLSAI2_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037ae:	e003      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	74fb      	strb	r3, [r7, #19]
      break;
 80037b4:	e000      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80037b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10b      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037be:	4b52      	ldr	r3, [pc, #328]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	494e      	ldr	r1, [pc, #312]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80037d4:	e001      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d6:	7cfb      	ldrb	r3, [r7, #19]
 80037d8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 809f 	beq.w	8003926 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e8:	2300      	movs	r3, #0
 80037ea:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037ec:	4b46      	ldr	r3, [pc, #280]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80037fc:	2300      	movs	r3, #0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00d      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	4b41      	ldr	r3, [pc, #260]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003806:	4a40      	ldr	r2, [pc, #256]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	6593      	str	r3, [r2, #88]	; 0x58
 800380e:	4b3e      	ldr	r3, [pc, #248]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381a:	2301      	movs	r3, #1
 800381c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800381e:	4b3b      	ldr	r3, [pc, #236]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a3a      	ldr	r2, [pc, #232]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003828:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800382a:	f7fd fc8d 	bl	8001148 <HAL_GetTick>
 800382e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003830:	e009      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7fd fc89 	bl	8001148 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d902      	bls.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	74fb      	strb	r3, [r7, #19]
        break;
 8003844:	e005      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003846:	4b31      	ldr	r3, [pc, #196]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0ef      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003852:	7cfb      	ldrb	r3, [r7, #19]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d15b      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003858:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003862:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01f      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	429a      	cmp	r2, r3
 8003874:	d019      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003880:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003882:	4b21      	ldr	r3, [pc, #132]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800388a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800389a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038a2:	4a19      	ldr	r2, [pc, #100]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d016      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd fc48 	bl	8001148 <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ba:	e00b      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fd fc44 	bl	8001148 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d902      	bls.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	74fb      	strb	r3, [r7, #19]
            break;
 80038d2:	e006      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d4:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ec      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10c      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e8:	4b07      	ldr	r3, [pc, #28]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	4903      	ldr	r1, [pc, #12]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003900:	e008      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003902:	7cfb      	ldrb	r3, [r7, #19]
 8003904:	74bb      	strb	r3, [r7, #18]
 8003906:	e005      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003908:	40021000 	.word	0x40021000
 800390c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003910:	7cfb      	ldrb	r3, [r7, #19]
 8003912:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003914:	7c7b      	ldrb	r3, [r7, #17]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391a:	4ba0      	ldr	r3, [pc, #640]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	4a9f      	ldr	r2, [pc, #636]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003924:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003932:	4b9a      	ldr	r3, [pc, #616]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f023 0203 	bic.w	r2, r3, #3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003940:	4996      	ldr	r1, [pc, #600]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003954:	4b91      	ldr	r3, [pc, #580]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f023 020c 	bic.w	r2, r3, #12
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	498e      	ldr	r1, [pc, #568]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003976:	4b89      	ldr	r3, [pc, #548]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	4985      	ldr	r1, [pc, #532]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003998:	4b80      	ldr	r3, [pc, #512]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a6:	497d      	ldr	r1, [pc, #500]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ba:	4b78      	ldr	r3, [pc, #480]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c8:	4974      	ldr	r1, [pc, #464]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039dc:	4b6f      	ldr	r3, [pc, #444]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ea:	496c      	ldr	r1, [pc, #432]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039fe:	4b67      	ldr	r3, [pc, #412]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a0c:	4963      	ldr	r1, [pc, #396]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a20:	4b5e      	ldr	r3, [pc, #376]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a2e:	495b      	ldr	r1, [pc, #364]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a42:	4b56      	ldr	r3, [pc, #344]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a50:	4952      	ldr	r1, [pc, #328]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a64:	4b4d      	ldr	r3, [pc, #308]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	494a      	ldr	r1, [pc, #296]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a86:	4b45      	ldr	r3, [pc, #276]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	4941      	ldr	r1, [pc, #260]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aa8:	4b3c      	ldr	r3, [pc, #240]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab6:	4939      	ldr	r1, [pc, #228]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d028      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aca:	4b34      	ldr	r3, [pc, #208]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad8:	4930      	ldr	r1, [pc, #192]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ae8:	d106      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aea:	4b2c      	ldr	r3, [pc, #176]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	4a2b      	ldr	r2, [pc, #172]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003af4:	60d3      	str	r3, [r2, #12]
 8003af6:	e011      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	2101      	movs	r1, #1
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 f8f9 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b12:	7cfb      	ldrb	r3, [r7, #19]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d04d      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b30:	d108      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b32:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b38:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b3e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003b42:	e012      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003b44:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b4a:	4a14      	ldr	r2, [pc, #80]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b50:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003b54:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b62:	490e      	ldr	r1, [pc, #56]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b72:	d106      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b7e:	60d3      	str	r3, [r2, #12]
 8003b80:	e020      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b8a:	d109      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4a02      	ldr	r2, [pc, #8]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b96:	60d3      	str	r3, [r2, #12]
 8003b98:	e014      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ba4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3304      	adds	r3, #4
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 f8a5 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bba:	7cfb      	ldrb	r3, [r7, #19]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d028      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bd0:	4b4a      	ldr	r3, [pc, #296]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bde:	4947      	ldr	r1, [pc, #284]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bee:	d106      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf0:	4b42      	ldr	r3, [pc, #264]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4a41      	ldr	r2, [pc, #260]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bfa:	60d3      	str	r3, [r2, #12]
 8003bfc:	e011      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c06:	d10c      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f876 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003c1e:	7cfb      	ldrb	r3, [r7, #19]
 8003c20:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01e      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c2e:	4b33      	ldr	r3, [pc, #204]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3e:	492f      	ldr	r1, [pc, #188]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3304      	adds	r3, #4
 8003c56:	2102      	movs	r1, #2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 f851 	bl	8003d00 <RCCEx_PLLSAI1_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c62:	7cfb      	ldrb	r3, [r7, #19]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00b      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c7e:	f023 0204 	bic.w	r2, r3, #4
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c88:	491c      	ldr	r1, [pc, #112]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00b      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c9c:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ca2:	f023 0218 	bic.w	r2, r3, #24
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cac:	4913      	ldr	r1, [pc, #76]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d017      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd0:	490a      	ldr	r1, [pc, #40]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ce2:	d105      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000

08003d00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d0e:	4b70      	ldr	r3, [pc, #448]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00e      	beq.n	8003d38 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d1a:	4b6d      	ldr	r3, [pc, #436]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0203 	and.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d103      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d13f      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
 8003d36:	e03c      	b.n	8003db2 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d00c      	beq.n	8003d5a <RCCEx_PLLSAI1_Config+0x5a>
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d013      	beq.n	8003d6c <RCCEx_PLLSAI1_Config+0x6c>
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d120      	bne.n	8003d8a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d48:	4b61      	ldr	r3, [pc, #388]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d11d      	bne.n	8003d90 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d58:	e01a      	b.n	8003d90 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d5a:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d116      	bne.n	8003d94 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d6a:	e013      	b.n	8003d94 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d6c:	4b58      	ldr	r3, [pc, #352]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10f      	bne.n	8003d98 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d78:	4b55      	ldr	r3, [pc, #340]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d88:	e006      	b.n	8003d98 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8e:	e004      	b.n	8003d9a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003d90:	bf00      	nop
 8003d92:	e002      	b.n	8003d9a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003d94:	bf00      	nop
 8003d96:	e000      	b.n	8003d9a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003d98:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d108      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003da0:	4b4b      	ldr	r3, [pc, #300]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f023 0203 	bic.w	r2, r3, #3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4948      	ldr	r1, [pc, #288]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f040 8086 	bne.w	8003ec6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003dba:	4b45      	ldr	r3, [pc, #276]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a44      	ldr	r2, [pc, #272]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003dc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc6:	f7fd f9bf 	bl	8001148 <HAL_GetTick>
 8003dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dcc:	e009      	b.n	8003de2 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dce:	f7fd f9bb 	bl	8001148 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d902      	bls.n	8003de2 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	73fb      	strb	r3, [r7, #15]
        break;
 8003de0:	e005      	b.n	8003dee <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003de2:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1ef      	bne.n	8003dce <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d168      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d113      	bne.n	8003e22 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dfa:	4b35      	ldr	r3, [pc, #212]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	4b35      	ldr	r3, [pc, #212]	; (8003ed4 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6892      	ldr	r2, [r2, #8]
 8003e06:	0211      	lsls	r1, r2, #8
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68d2      	ldr	r2, [r2, #12]
 8003e0c:	06d2      	lsls	r2, r2, #27
 8003e0e:	4311      	orrs	r1, r2
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6852      	ldr	r2, [r2, #4]
 8003e14:	3a01      	subs	r2, #1
 8003e16:	0112      	lsls	r2, r2, #4
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	492d      	ldr	r1, [pc, #180]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	610b      	str	r3, [r1, #16]
 8003e20:	e02d      	b.n	8003e7e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d115      	bne.n	8003e54 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e28:	4b29      	ldr	r3, [pc, #164]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6892      	ldr	r2, [r2, #8]
 8003e34:	0211      	lsls	r1, r2, #8
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6912      	ldr	r2, [r2, #16]
 8003e3a:	0852      	lsrs	r2, r2, #1
 8003e3c:	3a01      	subs	r2, #1
 8003e3e:	0552      	lsls	r2, r2, #21
 8003e40:	4311      	orrs	r1, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6852      	ldr	r2, [r2, #4]
 8003e46:	3a01      	subs	r2, #1
 8003e48:	0112      	lsls	r2, r2, #4
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	4920      	ldr	r1, [pc, #128]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	610b      	str	r3, [r1, #16]
 8003e52:	e014      	b.n	8003e7e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	4b20      	ldr	r3, [pc, #128]	; (8003edc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6892      	ldr	r2, [r2, #8]
 8003e60:	0211      	lsls	r1, r2, #8
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6952      	ldr	r2, [r2, #20]
 8003e66:	0852      	lsrs	r2, r2, #1
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	0652      	lsls	r2, r2, #25
 8003e6c:	4311      	orrs	r1, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6852      	ldr	r2, [r2, #4]
 8003e72:	3a01      	subs	r2, #1
 8003e74:	0112      	lsls	r2, r2, #4
 8003e76:	430a      	orrs	r2, r1
 8003e78:	4915      	ldr	r1, [pc, #84]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e7e:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003e84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8a:	f7fd f95d 	bl	8001148 <HAL_GetTick>
 8003e8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e90:	e009      	b.n	8003ea6 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e92:	f7fd f959 	bl	8001148 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d902      	bls.n	8003ea6 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	73fb      	strb	r3, [r7, #15]
          break;
 8003ea4:	e005      	b.n	8003eb2 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0ef      	beq.n	8003e92 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d106      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	4903      	ldr	r1, [pc, #12]	; (8003ed0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	07ff800f 	.word	0x07ff800f
 8003ed8:	ff9f800f 	.word	0xff9f800f
 8003edc:	f9ff800f 	.word	0xf9ff800f

08003ee0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eee:	4b70      	ldr	r3, [pc, #448]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00e      	beq.n	8003f18 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003efa:	4b6d      	ldr	r3, [pc, #436]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f003 0203 	and.w	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d103      	bne.n	8003f12 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d13f      	bne.n	8003f92 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
 8003f16:	e03c      	b.n	8003f92 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d00c      	beq.n	8003f3a <RCCEx_PLLSAI2_Config+0x5a>
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d013      	beq.n	8003f4c <RCCEx_PLLSAI2_Config+0x6c>
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d120      	bne.n	8003f6a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f28:	4b61      	ldr	r3, [pc, #388]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d11d      	bne.n	8003f70 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f38:	e01a      	b.n	8003f70 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f3a:	4b5d      	ldr	r3, [pc, #372]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d116      	bne.n	8003f74 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f4a:	e013      	b.n	8003f74 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f4c:	4b58      	ldr	r3, [pc, #352]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10f      	bne.n	8003f78 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f58:	4b55      	ldr	r3, [pc, #340]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f68:	e006      	b.n	8003f78 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f6e:	e004      	b.n	8003f7a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003f70:	bf00      	nop
 8003f72:	e002      	b.n	8003f7a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003f74:	bf00      	nop
 8003f76:	e000      	b.n	8003f7a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003f78:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d108      	bne.n	8003f92 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003f80:	4b4b      	ldr	r3, [pc, #300]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f023 0203 	bic.w	r2, r3, #3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4948      	ldr	r1, [pc, #288]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 8086 	bne.w	80040a6 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f9a:	4b45      	ldr	r3, [pc, #276]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a44      	ldr	r2, [pc, #272]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa6:	f7fd f8cf 	bl	8001148 <HAL_GetTick>
 8003faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fac:	e009      	b.n	8003fc2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fae:	f7fd f8cb 	bl	8001148 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d902      	bls.n	8003fc2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	73fb      	strb	r3, [r7, #15]
        break;
 8003fc0:	e005      	b.n	8003fce <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fc2:	4b3b      	ldr	r3, [pc, #236]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1ef      	bne.n	8003fae <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d168      	bne.n	80040a6 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d113      	bne.n	8004002 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fda:	4b35      	ldr	r3, [pc, #212]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003fdc:	695a      	ldr	r2, [r3, #20]
 8003fde:	4b35      	ldr	r3, [pc, #212]	; (80040b4 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6892      	ldr	r2, [r2, #8]
 8003fe6:	0211      	lsls	r1, r2, #8
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68d2      	ldr	r2, [r2, #12]
 8003fec:	06d2      	lsls	r2, r2, #27
 8003fee:	4311      	orrs	r1, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6852      	ldr	r2, [r2, #4]
 8003ff4:	3a01      	subs	r2, #1
 8003ff6:	0112      	lsls	r2, r2, #4
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	492d      	ldr	r1, [pc, #180]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	614b      	str	r3, [r1, #20]
 8004000:	e02d      	b.n	800405e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d115      	bne.n	8004034 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004008:	4b29      	ldr	r3, [pc, #164]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	4b2a      	ldr	r3, [pc, #168]	; (80040b8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800400e:	4013      	ands	r3, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6892      	ldr	r2, [r2, #8]
 8004014:	0211      	lsls	r1, r2, #8
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6912      	ldr	r2, [r2, #16]
 800401a:	0852      	lsrs	r2, r2, #1
 800401c:	3a01      	subs	r2, #1
 800401e:	0552      	lsls	r2, r2, #21
 8004020:	4311      	orrs	r1, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6852      	ldr	r2, [r2, #4]
 8004026:	3a01      	subs	r2, #1
 8004028:	0112      	lsls	r2, r2, #4
 800402a:	430a      	orrs	r2, r1
 800402c:	4920      	ldr	r1, [pc, #128]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800402e:	4313      	orrs	r3, r2
 8004030:	614b      	str	r3, [r1, #20]
 8004032:	e014      	b.n	800405e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004034:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	4b20      	ldr	r3, [pc, #128]	; (80040bc <RCCEx_PLLSAI2_Config+0x1dc>)
 800403a:	4013      	ands	r3, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6892      	ldr	r2, [r2, #8]
 8004040:	0211      	lsls	r1, r2, #8
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6952      	ldr	r2, [r2, #20]
 8004046:	0852      	lsrs	r2, r2, #1
 8004048:	3a01      	subs	r2, #1
 800404a:	0652      	lsls	r2, r2, #25
 800404c:	4311      	orrs	r1, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6852      	ldr	r2, [r2, #4]
 8004052:	3a01      	subs	r2, #1
 8004054:	0112      	lsls	r2, r2, #4
 8004056:	430a      	orrs	r2, r1
 8004058:	4915      	ldr	r1, [pc, #84]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800405a:	4313      	orrs	r3, r2
 800405c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800405e:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004068:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406a:	f7fd f86d 	bl	8001148 <HAL_GetTick>
 800406e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004070:	e009      	b.n	8004086 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004072:	f7fd f869 	bl	8001148 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d902      	bls.n	8004086 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	73fb      	strb	r3, [r7, #15]
          break;
 8004084:	e005      	b.n	8004092 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ef      	beq.n	8004072 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d106      	bne.n	80040a6 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	4903      	ldr	r1, [pc, #12]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40021000 	.word	0x40021000
 80040b4:	07ff800f 	.word	0x07ff800f
 80040b8:	ff9f800f 	.word	0xff9f800f
 80040bc:	f9ff800f 	.word	0xf9ff800f

080040c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e042      	b.n	8004158 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d106      	bne.n	80040ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7fc fe4d 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2224      	movs	r2, #36	; 0x24
 80040ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f82c 	bl	8004160 <UART_SetConfig>
 8004108:	4603      	mov	r3, r0
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e022      	b.n	8004158 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 faf2 	bl	8004704 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800412e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800413e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fb79 	bl	8004848 <UART_CheckIdleState>
 8004156:	4603      	mov	r3, r0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004160:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004164:	b088      	sub	sp, #32
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	4313      	orrs	r3, r2
 8004184:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	4313      	orrs	r3, r2
 800418e:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4bb1      	ldr	r3, [pc, #708]	; (800445c <UART_SetConfig+0x2fc>)
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	69f9      	ldr	r1, [r7, #28]
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4aa6      	ldr	r2, [pc, #664]	; (8004460 <UART_SetConfig+0x300>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d004      	beq.n	80041d4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80041de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	69f9      	ldr	r1, [r7, #28]
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f023 010f 	bic.w	r1, r3, #15
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a97      	ldr	r2, [pc, #604]	; (8004464 <UART_SetConfig+0x304>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d121      	bne.n	8004250 <UART_SetConfig+0xf0>
 800420c:	4b96      	ldr	r3, [pc, #600]	; (8004468 <UART_SetConfig+0x308>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b03      	cmp	r3, #3
 8004218:	d816      	bhi.n	8004248 <UART_SetConfig+0xe8>
 800421a:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <UART_SetConfig+0xc0>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	08004231 	.word	0x08004231
 8004224:	0800423d 	.word	0x0800423d
 8004228:	08004237 	.word	0x08004237
 800422c:	08004243 	.word	0x08004243
 8004230:	2301      	movs	r3, #1
 8004232:	76fb      	strb	r3, [r7, #27]
 8004234:	e0e8      	b.n	8004408 <UART_SetConfig+0x2a8>
 8004236:	2302      	movs	r3, #2
 8004238:	76fb      	strb	r3, [r7, #27]
 800423a:	e0e5      	b.n	8004408 <UART_SetConfig+0x2a8>
 800423c:	2304      	movs	r3, #4
 800423e:	76fb      	strb	r3, [r7, #27]
 8004240:	e0e2      	b.n	8004408 <UART_SetConfig+0x2a8>
 8004242:	2308      	movs	r3, #8
 8004244:	76fb      	strb	r3, [r7, #27]
 8004246:	e0df      	b.n	8004408 <UART_SetConfig+0x2a8>
 8004248:	2310      	movs	r3, #16
 800424a:	76fb      	strb	r3, [r7, #27]
 800424c:	bf00      	nop
 800424e:	e0db      	b.n	8004408 <UART_SetConfig+0x2a8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a85      	ldr	r2, [pc, #532]	; (800446c <UART_SetConfig+0x30c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d134      	bne.n	80042c4 <UART_SetConfig+0x164>
 800425a:	4b83      	ldr	r3, [pc, #524]	; (8004468 <UART_SetConfig+0x308>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b0c      	cmp	r3, #12
 8004266:	d829      	bhi.n	80042bc <UART_SetConfig+0x15c>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <UART_SetConfig+0x110>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	080042a5 	.word	0x080042a5
 8004274:	080042bd 	.word	0x080042bd
 8004278:	080042bd 	.word	0x080042bd
 800427c:	080042bd 	.word	0x080042bd
 8004280:	080042b1 	.word	0x080042b1
 8004284:	080042bd 	.word	0x080042bd
 8004288:	080042bd 	.word	0x080042bd
 800428c:	080042bd 	.word	0x080042bd
 8004290:	080042ab 	.word	0x080042ab
 8004294:	080042bd 	.word	0x080042bd
 8004298:	080042bd 	.word	0x080042bd
 800429c:	080042bd 	.word	0x080042bd
 80042a0:	080042b7 	.word	0x080042b7
 80042a4:	2300      	movs	r3, #0
 80042a6:	76fb      	strb	r3, [r7, #27]
 80042a8:	e0ae      	b.n	8004408 <UART_SetConfig+0x2a8>
 80042aa:	2302      	movs	r3, #2
 80042ac:	76fb      	strb	r3, [r7, #27]
 80042ae:	e0ab      	b.n	8004408 <UART_SetConfig+0x2a8>
 80042b0:	2304      	movs	r3, #4
 80042b2:	76fb      	strb	r3, [r7, #27]
 80042b4:	e0a8      	b.n	8004408 <UART_SetConfig+0x2a8>
 80042b6:	2308      	movs	r3, #8
 80042b8:	76fb      	strb	r3, [r7, #27]
 80042ba:	e0a5      	b.n	8004408 <UART_SetConfig+0x2a8>
 80042bc:	2310      	movs	r3, #16
 80042be:	76fb      	strb	r3, [r7, #27]
 80042c0:	bf00      	nop
 80042c2:	e0a1      	b.n	8004408 <UART_SetConfig+0x2a8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a69      	ldr	r2, [pc, #420]	; (8004470 <UART_SetConfig+0x310>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d120      	bne.n	8004310 <UART_SetConfig+0x1b0>
 80042ce:	4b66      	ldr	r3, [pc, #408]	; (8004468 <UART_SetConfig+0x308>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042d8:	2b10      	cmp	r3, #16
 80042da:	d00f      	beq.n	80042fc <UART_SetConfig+0x19c>
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d802      	bhi.n	80042e6 <UART_SetConfig+0x186>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <UART_SetConfig+0x190>
 80042e4:	e010      	b.n	8004308 <UART_SetConfig+0x1a8>
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d005      	beq.n	80042f6 <UART_SetConfig+0x196>
 80042ea:	2b30      	cmp	r3, #48	; 0x30
 80042ec:	d009      	beq.n	8004302 <UART_SetConfig+0x1a2>
 80042ee:	e00b      	b.n	8004308 <UART_SetConfig+0x1a8>
 80042f0:	2300      	movs	r3, #0
 80042f2:	76fb      	strb	r3, [r7, #27]
 80042f4:	e088      	b.n	8004408 <UART_SetConfig+0x2a8>
 80042f6:	2302      	movs	r3, #2
 80042f8:	76fb      	strb	r3, [r7, #27]
 80042fa:	e085      	b.n	8004408 <UART_SetConfig+0x2a8>
 80042fc:	2304      	movs	r3, #4
 80042fe:	76fb      	strb	r3, [r7, #27]
 8004300:	e082      	b.n	8004408 <UART_SetConfig+0x2a8>
 8004302:	2308      	movs	r3, #8
 8004304:	76fb      	strb	r3, [r7, #27]
 8004306:	e07f      	b.n	8004408 <UART_SetConfig+0x2a8>
 8004308:	2310      	movs	r3, #16
 800430a:	76fb      	strb	r3, [r7, #27]
 800430c:	bf00      	nop
 800430e:	e07b      	b.n	8004408 <UART_SetConfig+0x2a8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a57      	ldr	r2, [pc, #348]	; (8004474 <UART_SetConfig+0x314>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d120      	bne.n	800435c <UART_SetConfig+0x1fc>
 800431a:	4b53      	ldr	r3, [pc, #332]	; (8004468 <UART_SetConfig+0x308>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	d00f      	beq.n	8004348 <UART_SetConfig+0x1e8>
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	d802      	bhi.n	8004332 <UART_SetConfig+0x1d2>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <UART_SetConfig+0x1dc>
 8004330:	e010      	b.n	8004354 <UART_SetConfig+0x1f4>
 8004332:	2b80      	cmp	r3, #128	; 0x80
 8004334:	d005      	beq.n	8004342 <UART_SetConfig+0x1e2>
 8004336:	2bc0      	cmp	r3, #192	; 0xc0
 8004338:	d009      	beq.n	800434e <UART_SetConfig+0x1ee>
 800433a:	e00b      	b.n	8004354 <UART_SetConfig+0x1f4>
 800433c:	2300      	movs	r3, #0
 800433e:	76fb      	strb	r3, [r7, #27]
 8004340:	e062      	b.n	8004408 <UART_SetConfig+0x2a8>
 8004342:	2302      	movs	r3, #2
 8004344:	76fb      	strb	r3, [r7, #27]
 8004346:	e05f      	b.n	8004408 <UART_SetConfig+0x2a8>
 8004348:	2304      	movs	r3, #4
 800434a:	76fb      	strb	r3, [r7, #27]
 800434c:	e05c      	b.n	8004408 <UART_SetConfig+0x2a8>
 800434e:	2308      	movs	r3, #8
 8004350:	76fb      	strb	r3, [r7, #27]
 8004352:	e059      	b.n	8004408 <UART_SetConfig+0x2a8>
 8004354:	2310      	movs	r3, #16
 8004356:	76fb      	strb	r3, [r7, #27]
 8004358:	bf00      	nop
 800435a:	e055      	b.n	8004408 <UART_SetConfig+0x2a8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a45      	ldr	r2, [pc, #276]	; (8004478 <UART_SetConfig+0x318>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d124      	bne.n	80043b0 <UART_SetConfig+0x250>
 8004366:	4b40      	ldr	r3, [pc, #256]	; (8004468 <UART_SetConfig+0x308>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004374:	d012      	beq.n	800439c <UART_SetConfig+0x23c>
 8004376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437a:	d802      	bhi.n	8004382 <UART_SetConfig+0x222>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <UART_SetConfig+0x230>
 8004380:	e012      	b.n	80043a8 <UART_SetConfig+0x248>
 8004382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004386:	d006      	beq.n	8004396 <UART_SetConfig+0x236>
 8004388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800438c:	d009      	beq.n	80043a2 <UART_SetConfig+0x242>
 800438e:	e00b      	b.n	80043a8 <UART_SetConfig+0x248>
 8004390:	2300      	movs	r3, #0
 8004392:	76fb      	strb	r3, [r7, #27]
 8004394:	e038      	b.n	8004408 <UART_SetConfig+0x2a8>
 8004396:	2302      	movs	r3, #2
 8004398:	76fb      	strb	r3, [r7, #27]
 800439a:	e035      	b.n	8004408 <UART_SetConfig+0x2a8>
 800439c:	2304      	movs	r3, #4
 800439e:	76fb      	strb	r3, [r7, #27]
 80043a0:	e032      	b.n	8004408 <UART_SetConfig+0x2a8>
 80043a2:	2308      	movs	r3, #8
 80043a4:	76fb      	strb	r3, [r7, #27]
 80043a6:	e02f      	b.n	8004408 <UART_SetConfig+0x2a8>
 80043a8:	2310      	movs	r3, #16
 80043aa:	76fb      	strb	r3, [r7, #27]
 80043ac:	bf00      	nop
 80043ae:	e02b      	b.n	8004408 <UART_SetConfig+0x2a8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a2a      	ldr	r2, [pc, #168]	; (8004460 <UART_SetConfig+0x300>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d124      	bne.n	8004404 <UART_SetConfig+0x2a4>
 80043ba:	4b2b      	ldr	r3, [pc, #172]	; (8004468 <UART_SetConfig+0x308>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c8:	d012      	beq.n	80043f0 <UART_SetConfig+0x290>
 80043ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ce:	d802      	bhi.n	80043d6 <UART_SetConfig+0x276>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <UART_SetConfig+0x284>
 80043d4:	e012      	b.n	80043fc <UART_SetConfig+0x29c>
 80043d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043da:	d006      	beq.n	80043ea <UART_SetConfig+0x28a>
 80043dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043e0:	d009      	beq.n	80043f6 <UART_SetConfig+0x296>
 80043e2:	e00b      	b.n	80043fc <UART_SetConfig+0x29c>
 80043e4:	2300      	movs	r3, #0
 80043e6:	76fb      	strb	r3, [r7, #27]
 80043e8:	e00e      	b.n	8004408 <UART_SetConfig+0x2a8>
 80043ea:	2302      	movs	r3, #2
 80043ec:	76fb      	strb	r3, [r7, #27]
 80043ee:	e00b      	b.n	8004408 <UART_SetConfig+0x2a8>
 80043f0:	2304      	movs	r3, #4
 80043f2:	76fb      	strb	r3, [r7, #27]
 80043f4:	e008      	b.n	8004408 <UART_SetConfig+0x2a8>
 80043f6:	2308      	movs	r3, #8
 80043f8:	76fb      	strb	r3, [r7, #27]
 80043fa:	e005      	b.n	8004408 <UART_SetConfig+0x2a8>
 80043fc:	2310      	movs	r3, #16
 80043fe:	76fb      	strb	r3, [r7, #27]
 8004400:	bf00      	nop
 8004402:	e001      	b.n	8004408 <UART_SetConfig+0x2a8>
 8004404:	2310      	movs	r3, #16
 8004406:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a14      	ldr	r2, [pc, #80]	; (8004460 <UART_SetConfig+0x300>)
 800440e:	4293      	cmp	r3, r2
 8004410:	f040 80a1 	bne.w	8004556 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004414:	7efb      	ldrb	r3, [r7, #27]
 8004416:	2b08      	cmp	r3, #8
 8004418:	d836      	bhi.n	8004488 <UART_SetConfig+0x328>
 800441a:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <UART_SetConfig+0x2c0>)
 800441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004420:	08004445 	.word	0x08004445
 8004424:	08004489 	.word	0x08004489
 8004428:	0800444d 	.word	0x0800444d
 800442c:	08004489 	.word	0x08004489
 8004430:	08004453 	.word	0x08004453
 8004434:	08004489 	.word	0x08004489
 8004438:	08004489 	.word	0x08004489
 800443c:	08004489 	.word	0x08004489
 8004440:	08004481 	.word	0x08004481
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004444:	f7ff f846 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004448:	6178      	str	r0, [r7, #20]
        break;
 800444a:	e022      	b.n	8004492 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <UART_SetConfig+0x31c>)
 800444e:	617b      	str	r3, [r7, #20]
        break;
 8004450:	e01f      	b.n	8004492 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004452:	f7fe ffa9 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8004456:	6178      	str	r0, [r7, #20]
        break;
 8004458:	e01b      	b.n	8004492 <UART_SetConfig+0x332>
 800445a:	bf00      	nop
 800445c:	cfff69f3 	.word	0xcfff69f3
 8004460:	40008000 	.word	0x40008000
 8004464:	40013800 	.word	0x40013800
 8004468:	40021000 	.word	0x40021000
 800446c:	40004400 	.word	0x40004400
 8004470:	40004800 	.word	0x40004800
 8004474:	40004c00 	.word	0x40004c00
 8004478:	40005000 	.word	0x40005000
 800447c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004484:	617b      	str	r3, [r7, #20]
        break;
 8004486:	e004      	b.n	8004492 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	76bb      	strb	r3, [r7, #26]
        break;
 8004490:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 811d 	beq.w	80046d4 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	4a97      	ldr	r2, [pc, #604]	; (80046fc <UART_SetConfig+0x59c>)
 80044a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044a4:	461a      	mov	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ac:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	4413      	add	r3, r2
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d305      	bcc.n	80044ca <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d902      	bls.n	80044d0 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	76bb      	strb	r3, [r7, #26]
 80044ce:	e101      	b.n	80046d4 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f04f 0100 	mov.w	r1, #0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	4a87      	ldr	r2, [pc, #540]	; (80046fc <UART_SetConfig+0x59c>)
 80044de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f04f 0400 	mov.w	r4, #0
 80044e8:	461a      	mov	r2, r3
 80044ea:	4623      	mov	r3, r4
 80044ec:	f7fb fe86 	bl	80001fc <__aeabi_uldivmod>
 80044f0:	4603      	mov	r3, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	4619      	mov	r1, r3
 80044f6:	4622      	mov	r2, r4
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	f04f 0400 	mov.w	r4, #0
 8004500:	0214      	lsls	r4, r2, #8
 8004502:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004506:	020b      	lsls	r3, r1, #8
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6852      	ldr	r2, [r2, #4]
 800450c:	0852      	lsrs	r2, r2, #1
 800450e:	4611      	mov	r1, r2
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	eb13 0b01 	adds.w	fp, r3, r1
 8004518:	eb44 0c02 	adc.w	ip, r4, r2
 800451c:	4658      	mov	r0, fp
 800451e:	4661      	mov	r1, ip
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f04f 0400 	mov.w	r4, #0
 8004528:	461a      	mov	r2, r3
 800452a:	4623      	mov	r3, r4
 800452c:	f7fb fe66 	bl	80001fc <__aeabi_uldivmod>
 8004530:	4603      	mov	r3, r0
 8004532:	460c      	mov	r4, r1
 8004534:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800453c:	d308      	bcc.n	8004550 <UART_SetConfig+0x3f0>
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004544:	d204      	bcs.n	8004550 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	e0c1      	b.n	80046d4 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	76bb      	strb	r3, [r7, #26]
 8004554:	e0be      	b.n	80046d4 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455e:	d164      	bne.n	800462a <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004560:	7efb      	ldrb	r3, [r7, #27]
 8004562:	2b08      	cmp	r3, #8
 8004564:	d827      	bhi.n	80045b6 <UART_SetConfig+0x456>
 8004566:	a201      	add	r2, pc, #4	; (adr r2, 800456c <UART_SetConfig+0x40c>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	08004591 	.word	0x08004591
 8004570:	08004599 	.word	0x08004599
 8004574:	080045a1 	.word	0x080045a1
 8004578:	080045b7 	.word	0x080045b7
 800457c:	080045a7 	.word	0x080045a7
 8004580:	080045b7 	.word	0x080045b7
 8004584:	080045b7 	.word	0x080045b7
 8004588:	080045b7 	.word	0x080045b7
 800458c:	080045af 	.word	0x080045af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004590:	f7fe ffa0 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004594:	6178      	str	r0, [r7, #20]
        break;
 8004596:	e013      	b.n	80045c0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004598:	f7fe ffb2 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 800459c:	6178      	str	r0, [r7, #20]
        break;
 800459e:	e00f      	b.n	80045c0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a0:	4b57      	ldr	r3, [pc, #348]	; (8004700 <UART_SetConfig+0x5a0>)
 80045a2:	617b      	str	r3, [r7, #20]
        break;
 80045a4:	e00c      	b.n	80045c0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a6:	f7fe feff 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 80045aa:	6178      	str	r0, [r7, #20]
        break;
 80045ac:	e008      	b.n	80045c0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b2:	617b      	str	r3, [r7, #20]
        break;
 80045b4:	e004      	b.n	80045c0 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	76bb      	strb	r3, [r7, #26]
        break;
 80045be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8086 	beq.w	80046d4 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	4a4b      	ldr	r2, [pc, #300]	; (80046fc <UART_SetConfig+0x59c>)
 80045ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045d2:	461a      	mov	r2, r3
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80045da:	005a      	lsls	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	441a      	add	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	2b0f      	cmp	r3, #15
 80045f4:	d916      	bls.n	8004624 <UART_SetConfig+0x4c4>
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045fc:	d212      	bcs.n	8004624 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	b29b      	uxth	r3, r3
 8004602:	f023 030f 	bic.w	r3, r3, #15
 8004606:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	b29b      	uxth	r3, r3
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	b29a      	uxth	r2, r3
 8004614:	89fb      	ldrh	r3, [r7, #14]
 8004616:	4313      	orrs	r3, r2
 8004618:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	89fa      	ldrh	r2, [r7, #14]
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	e057      	b.n	80046d4 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	76bb      	strb	r3, [r7, #26]
 8004628:	e054      	b.n	80046d4 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800462a:	7efb      	ldrb	r3, [r7, #27]
 800462c:	2b08      	cmp	r3, #8
 800462e:	d828      	bhi.n	8004682 <UART_SetConfig+0x522>
 8004630:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <UART_SetConfig+0x4d8>)
 8004632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004636:	bf00      	nop
 8004638:	0800465d 	.word	0x0800465d
 800463c:	08004665 	.word	0x08004665
 8004640:	0800466d 	.word	0x0800466d
 8004644:	08004683 	.word	0x08004683
 8004648:	08004673 	.word	0x08004673
 800464c:	08004683 	.word	0x08004683
 8004650:	08004683 	.word	0x08004683
 8004654:	08004683 	.word	0x08004683
 8004658:	0800467b 	.word	0x0800467b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800465c:	f7fe ff3a 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8004660:	6178      	str	r0, [r7, #20]
        break;
 8004662:	e013      	b.n	800468c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004664:	f7fe ff4c 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8004668:	6178      	str	r0, [r7, #20]
        break;
 800466a:	e00f      	b.n	800468c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800466c:	4b24      	ldr	r3, [pc, #144]	; (8004700 <UART_SetConfig+0x5a0>)
 800466e:	617b      	str	r3, [r7, #20]
        break;
 8004670:	e00c      	b.n	800468c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004672:	f7fe fe99 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8004676:	6178      	str	r0, [r7, #20]
        break;
 8004678:	e008      	b.n	800468c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800467a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467e:	617b      	str	r3, [r7, #20]
        break;
 8004680:	e004      	b.n	800468c <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	76bb      	strb	r3, [r7, #26]
        break;
 800468a:	bf00      	nop
    }

    if (pclk != 0U)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d020      	beq.n	80046d4 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	4a19      	ldr	r2, [pc, #100]	; (80046fc <UART_SetConfig+0x59c>)
 8004698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800469c:	461a      	mov	r2, r3
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	441a      	add	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b0f      	cmp	r3, #15
 80046bc:	d908      	bls.n	80046d0 <UART_SetConfig+0x570>
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d204      	bcs.n	80046d0 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	e001      	b.n	80046d4 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80046f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80046fc:	0800523c 	.word	0x0800523c
 8004700:	00f42400 	.word	0x00f42400

08004704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	f003 0310 	and.w	r3, r3, #16
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01a      	beq.n	800481a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004802:	d10a      	bne.n	800481a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	605a      	str	r2, [r3, #4]
  }
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af02      	add	r7, sp, #8
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004858:	f7fc fc76 	bl	8001148 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b08      	cmp	r3, #8
 800486a:	d10e      	bne.n	800488a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800486c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f82c 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e022      	b.n	80048d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b04      	cmp	r3, #4
 8004896:	d10e      	bne.n	80048b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f816 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e00c      	b.n	80048d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e8:	e062      	b.n	80049b0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d05e      	beq.n	80049b0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f2:	f7fc fc29 	bl	8001148 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d302      	bcc.n	8004908 <UART_WaitOnFlagUntilTimeout+0x30>
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d11d      	bne.n	8004944 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004916:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0201 	bic.w	r2, r2, #1
 8004926:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e045      	b.n	80049d0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	d02e      	beq.n	80049b0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004960:	d126      	bne.n	80049b0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800496a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800497a:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e00f      	b.n	80049d0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	4013      	ands	r3, r2
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	429a      	cmp	r2, r3
 80049be:	bf0c      	ite	eq
 80049c0:	2301      	moveq	r3, #1
 80049c2:	2300      	movne	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d08d      	beq.n	80048ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_UARTEx_DisableFifoMode+0x16>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e027      	b.n	8004a3e <HAL_UARTEx_DisableFifoMode+0x66>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2224      	movs	r2, #36	; 0x24
 80049fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0201 	bic.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e02d      	b.n	8004abe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2224      	movs	r2, #36	; 0x24
 8004a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0201 	bic.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f850 	bl	8004b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e02d      	b.n	8004b3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2224      	movs	r2, #36	; 0x24
 8004aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f812 	bl	8004b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b089      	sub	sp, #36	; 0x24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004b4c:	4a2f      	ldr	r2, [pc, #188]	; (8004c0c <UARTEx_SetNbDataToProcess+0xc8>)
 8004b4e:	f107 0314 	add.w	r3, r7, #20
 8004b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b56:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004b5a:	4a2d      	ldr	r2, [pc, #180]	; (8004c10 <UARTEx_SetNbDataToProcess+0xcc>)
 8004b5c:	f107 030c 	add.w	r3, r7, #12
 8004b60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b64:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d108      	bne.n	8004b82 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b80:	e03d      	b.n	8004bfe <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b82:	2308      	movs	r3, #8
 8004b84:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b86:	2308      	movs	r3, #8
 8004b88:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	0e5b      	lsrs	r3, r3, #25
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	0f5b      	lsrs	r3, r3, #29
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004baa:	7fbb      	ldrb	r3, [r7, #30]
 8004bac:	7f3a      	ldrb	r2, [r7, #28]
 8004bae:	f107 0120 	add.w	r1, r7, #32
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004bb8:	fb02 f303 	mul.w	r3, r2, r3
 8004bbc:	7f3a      	ldrb	r2, [r7, #28]
 8004bbe:	f107 0120 	add.w	r1, r7, #32
 8004bc2:	440a      	add	r2, r1
 8004bc4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004bc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004bd4:	7ffb      	ldrb	r3, [r7, #31]
 8004bd6:	7f7a      	ldrb	r2, [r7, #29]
 8004bd8:	f107 0120 	add.w	r1, r7, #32
 8004bdc:	440a      	add	r2, r1
 8004bde:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	7f7a      	ldrb	r2, [r7, #29]
 8004be8:	f107 0120 	add.w	r1, r7, #32
 8004bec:	440a      	add	r2, r1
 8004bee:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004bf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004bfe:	bf00      	nop
 8004c00:	3724      	adds	r7, #36	; 0x24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	080051e4 	.word	0x080051e4
 8004c10:	080051ec 	.word	0x080051ec

08004c14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c14:	b084      	sub	sp, #16
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	f107 001c 	add.w	r0, r7, #28
 8004c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d122      	bne.n	8004c72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d105      	bne.n	8004c66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa30 	bl	80050cc <USB_CoreReset>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	73fb      	strb	r3, [r7, #15]
 8004c70:	e01a      	b.n	8004ca8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fa24 	bl	80050cc <USB_CoreReset>
 8004c84:	4603      	mov	r3, r0
 8004c86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
 8004c9a:	e005      	b.n	8004ca8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cb4:	b004      	add	sp, #16
 8004cb6:	4770      	bx	lr

08004cb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f023 0201 	bic.w	r2, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d106      	bne.n	8004d06 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60da      	str	r2, [r3, #12]
 8004d04:	e00b      	b.n	8004d1e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	60da      	str	r2, [r3, #12]
 8004d18:	e001      	b.n	8004d1e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e003      	b.n	8004d26 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004d1e:	2032      	movs	r0, #50	; 0x32
 8004d20:	f7fc fa1e 	bl	8001160 <HAL_Delay>

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d30:	b084      	sub	sp, #16
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	e009      	b.n	8004d64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	3340      	adds	r3, #64	; 0x40
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	3301      	adds	r3, #1
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b0e      	cmp	r3, #14
 8004d68:	d9f2      	bls.n	8004d50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d11c      	bne.n	8004daa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d7e:	f043 0302 	orr.w	r3, r3, #2
 8004d82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	e005      	b.n	8004db6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc8:	4619      	mov	r1, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	680b      	ldr	r3, [r1, #0]
 8004dd4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004dd6:	2103      	movs	r1, #3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f93d 	bl	8005058 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dde:	2110      	movs	r1, #16
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f8f1 	bl	8004fc8 <USB_FlushTxFifo>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f90f 	bl	8005014 <USB_FlushRxFifo>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e06:	461a      	mov	r2, r3
 8004e08:	2300      	movs	r3, #0
 8004e0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e12:	461a      	mov	r2, r3
 8004e14:	2300      	movs	r3, #0
 8004e16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2300      	movs	r3, #0
 8004e22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	e043      	b.n	8004eb2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e40:	d118      	bne.n	8004e74 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	461a      	mov	r2, r3
 8004e56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	e013      	b.n	8004e86 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e008      	b.n	8004e86 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	461a      	mov	r2, r3
 8004e82:	2300      	movs	r3, #0
 8004e84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e92:	461a      	mov	r2, r3
 8004e94:	2300      	movs	r3, #0
 8004e96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004eaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d3b7      	bcc.n	8004e2a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	e043      	b.n	8004f48 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed6:	d118      	bne.n	8004f0a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eea:	461a      	mov	r2, r3
 8004eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e013      	b.n	8004f1c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f00:	461a      	mov	r2, r3
 8004f02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e008      	b.n	8004f1c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	461a      	mov	r2, r3
 8004f18:	2300      	movs	r3, #0
 8004f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f28:	461a      	mov	r2, r3
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3301      	adds	r3, #1
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d3b7      	bcc.n	8004ec0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f043 0210 	orr.w	r2, r3, #16
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	4b10      	ldr	r3, [pc, #64]	; (8004fc4 <USB_DevInit+0x294>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	f043 0208 	orr.w	r2, r3, #8
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d107      	bne.n	8004fb2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004faa:	f043 0304 	orr.w	r3, r3, #4
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fbe:	b004      	add	sp, #16
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	803c3800 	.word	0x803c3800

08004fc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	019b      	lsls	r3, r3, #6
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4a09      	ldr	r2, [pc, #36]	; (8005010 <USB_FlushTxFifo+0x48>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d901      	bls.n	8004ff4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e006      	b.n	8005002 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d0f0      	beq.n	8004fe2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	00030d40 	.word	0x00030d40

08005014 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2210      	movs	r2, #16
 8005024:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3301      	adds	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4a09      	ldr	r2, [pc, #36]	; (8005054 <USB_FlushRxFifo+0x40>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d901      	bls.n	8005038 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e006      	b.n	8005046 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b10      	cmp	r3, #16
 8005042:	d0f0      	beq.n	8005026 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	00030d40 	.word	0x00030d40

08005058 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	68f9      	ldr	r1, [r7, #12]
 8005074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005078:	4313      	orrs	r3, r2
 800507a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80050a4:	f023 0303 	bic.w	r3, r3, #3
 80050a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050b8:	f043 0302 	orr.w	r3, r3, #2
 80050bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3301      	adds	r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4a13      	ldr	r2, [pc, #76]	; (8005130 <USB_CoreReset+0x64>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e01b      	b.n	8005122 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	daf2      	bge.n	80050d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f043 0201 	orr.w	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3301      	adds	r3, #1
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a09      	ldr	r2, [pc, #36]	; (8005130 <USB_CoreReset+0x64>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e006      	b.n	8005122 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b01      	cmp	r3, #1
 800511e:	d0f0      	beq.n	8005102 <USB_CoreReset+0x36>

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	00030d40 	.word	0x00030d40

08005134 <__libc_init_array>:
 8005134:	b570      	push	{r4, r5, r6, lr}
 8005136:	4e0d      	ldr	r6, [pc, #52]	; (800516c <__libc_init_array+0x38>)
 8005138:	4c0d      	ldr	r4, [pc, #52]	; (8005170 <__libc_init_array+0x3c>)
 800513a:	1ba4      	subs	r4, r4, r6
 800513c:	10a4      	asrs	r4, r4, #2
 800513e:	2500      	movs	r5, #0
 8005140:	42a5      	cmp	r5, r4
 8005142:	d109      	bne.n	8005158 <__libc_init_array+0x24>
 8005144:	4e0b      	ldr	r6, [pc, #44]	; (8005174 <__libc_init_array+0x40>)
 8005146:	4c0c      	ldr	r4, [pc, #48]	; (8005178 <__libc_init_array+0x44>)
 8005148:	f000 f820 	bl	800518c <_init>
 800514c:	1ba4      	subs	r4, r4, r6
 800514e:	10a4      	asrs	r4, r4, #2
 8005150:	2500      	movs	r5, #0
 8005152:	42a5      	cmp	r5, r4
 8005154:	d105      	bne.n	8005162 <__libc_init_array+0x2e>
 8005156:	bd70      	pop	{r4, r5, r6, pc}
 8005158:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800515c:	4798      	blx	r3
 800515e:	3501      	adds	r5, #1
 8005160:	e7ee      	b.n	8005140 <__libc_init_array+0xc>
 8005162:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005166:	4798      	blx	r3
 8005168:	3501      	adds	r5, #1
 800516a:	e7f2      	b.n	8005152 <__libc_init_array+0x1e>
 800516c:	0800525c 	.word	0x0800525c
 8005170:	0800525c 	.word	0x0800525c
 8005174:	0800525c 	.word	0x0800525c
 8005178:	08005260 	.word	0x08005260

0800517c <memset>:
 800517c:	4402      	add	r2, r0
 800517e:	4603      	mov	r3, r0
 8005180:	4293      	cmp	r3, r2
 8005182:	d100      	bne.n	8005186 <memset+0xa>
 8005184:	4770      	bx	lr
 8005186:	f803 1b01 	strb.w	r1, [r3], #1
 800518a:	e7f9      	b.n	8005180 <memset+0x4>

0800518c <_init>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	bf00      	nop
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr

08005198 <_fini>:
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519a:	bf00      	nop
 800519c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519e:	bc08      	pop	{r3}
 80051a0:	469e      	mov	lr, r3
 80051a2:	4770      	bx	lr
