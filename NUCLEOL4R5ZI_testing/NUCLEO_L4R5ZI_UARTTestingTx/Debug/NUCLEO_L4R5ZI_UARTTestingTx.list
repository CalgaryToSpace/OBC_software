
NUCLEO_L4R5ZI_UARTTestingTx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040ac  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004300  08004300  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004308  08004308  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004308  08004308  00014308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800430c  0800430c  0001430c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  2000000c  0800431c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  0800431c  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f065  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ef6  00000000  00000000  0002f0a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd8  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  00031c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029a68  00000000  00000000  00032850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a257  00000000  00000000  0005c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ffbb0  00000000  00000000  0006650f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001660bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003520  00000000  00000000  0016613c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004250 	.word	0x08004250

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004250 	.word	0x08004250

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295
 800021c:	f04f 30ff 	movne.w	r0, #4294967295
 8000220:	f000 b972 	b.w	8000508 <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9e08      	ldr	r6, [sp, #32]
 8000242:	4604      	mov	r4, r0
 8000244:	4688      	mov	r8, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d14b      	bne.n	80002e2 <__udivmoddi4+0xa6>
 800024a:	428a      	cmp	r2, r1
 800024c:	4615      	mov	r5, r2
 800024e:	d967      	bls.n	8000320 <__udivmoddi4+0xe4>
 8000250:	fab2 f282 	clz	r2, r2
 8000254:	b14a      	cbz	r2, 800026a <__udivmoddi4+0x2e>
 8000256:	f1c2 0720 	rsb	r7, r2, #32
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	fa20 f707 	lsr.w	r7, r0, r7
 8000262:	4095      	lsls	r5, r2
 8000264:	ea47 0803 	orr.w	r8, r7, r3
 8000268:	4094      	lsls	r4, r2
 800026a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026e:	0c23      	lsrs	r3, r4, #16
 8000270:	fbb8 f7fe 	udiv	r7, r8, lr
 8000274:	fa1f fc85 	uxth.w	ip, r5
 8000278:	fb0e 8817 	mls	r8, lr, r7, r8
 800027c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000280:	fb07 f10c 	mul.w	r1, r7, ip
 8000284:	4299      	cmp	r1, r3
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x60>
 8000288:	18eb      	adds	r3, r5, r3
 800028a:	f107 30ff 	add.w	r0, r7, #4294967295
 800028e:	f080 811b 	bcs.w	80004c8 <__udivmoddi4+0x28c>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 8118 	bls.w	80004c8 <__udivmoddi4+0x28c>
 8000298:	3f02      	subs	r7, #2
 800029a:	442b      	add	r3, r5
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b0:	45a4      	cmp	ip, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x8c>
 80002b4:	192c      	adds	r4, r5, r4
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x290>
 80002be:	45a4      	cmp	ip, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x290>
 80002c4:	3802      	subs	r0, #2
 80002c6:	442c      	add	r4, r5
 80002c8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002cc:	eba4 040c 	sub.w	r4, r4, ip
 80002d0:	2700      	movs	r7, #0
 80002d2:	b11e      	cbz	r6, 80002dc <__udivmoddi4+0xa0>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c6 4300 	strd	r4, r3, [r6]
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xbe>
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f000 80eb 	beq.w	80004c2 <__udivmoddi4+0x286>
 80002ec:	2700      	movs	r7, #0
 80002ee:	e9c6 0100 	strd	r0, r1, [r6]
 80002f2:	4638      	mov	r0, r7
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f783 	clz	r7, r3
 80002fe:	2f00      	cmp	r7, #0
 8000300:	d147      	bne.n	8000392 <__udivmoddi4+0x156>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd0>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2c4>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4698      	mov	r8, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa0>
 800031a:	e9c6 4800 	strd	r4, r8, [r6]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa0>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xe8>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 808f 	bne.w	800044c <__udivmoddi4+0x210>
 800032e:	1b49      	subs	r1, r1, r5
 8000330:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000334:	fa1f f885 	uxth.w	r8, r5
 8000338:	2701      	movs	r7, #1
 800033a:	fbb1 fcfe 	udiv	ip, r1, lr
 800033e:	0c23      	lsrs	r3, r4, #16
 8000340:	fb0e 111c 	mls	r1, lr, ip, r1
 8000344:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000348:	fb08 f10c 	mul.w	r1, r8, ip
 800034c:	4299      	cmp	r1, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x124>
 8000350:	18eb      	adds	r3, r5, r3
 8000352:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x122>
 8000358:	4299      	cmp	r1, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2bc>
 800035e:	4684      	mov	ip, r0
 8000360:	1a59      	subs	r1, r3, r1
 8000362:	b2a3      	uxth	r3, r4
 8000364:	fbb1 f0fe 	udiv	r0, r1, lr
 8000368:	fb0e 1410 	mls	r4, lr, r0, r1
 800036c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000370:	fb08 f800 	mul.w	r8, r8, r0
 8000374:	45a0      	cmp	r8, r4
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x14c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x14a>
 8000380:	45a0      	cmp	r8, r4
 8000382:	f200 80b6 	bhi.w	80004f2 <__udivmoddi4+0x2b6>
 8000386:	4618      	mov	r0, r3
 8000388:	eba4 0408 	sub.w	r4, r4, r8
 800038c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000390:	e79f      	b.n	80002d2 <__udivmoddi4+0x96>
 8000392:	f1c7 0c20 	rsb	ip, r7, #32
 8000396:	40bb      	lsls	r3, r7
 8000398:	fa22 fe0c 	lsr.w	lr, r2, ip
 800039c:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a0:	fa01 f407 	lsl.w	r4, r1, r7
 80003a4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003ac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b0:	4325      	orrs	r5, r4
 80003b2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b6:	0c2c      	lsrs	r4, r5, #16
 80003b8:	fb08 3319 	mls	r3, r8, r9, r3
 80003bc:	fa1f fa8e 	uxth.w	sl, lr
 80003c0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c4:	fb09 f40a 	mul.w	r4, r9, sl
 80003c8:	429c      	cmp	r4, r3
 80003ca:	fa02 f207 	lsl.w	r2, r2, r7
 80003ce:	fa00 f107 	lsl.w	r1, r0, r7
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b0>
 80003d4:	eb1e 0303 	adds.w	r3, lr, r3
 80003d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003dc:	f080 8087 	bcs.w	80004ee <__udivmoddi4+0x2b2>
 80003e0:	429c      	cmp	r4, r3
 80003e2:	f240 8084 	bls.w	80004ee <__udivmoddi4+0x2b2>
 80003e6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ea:	4473      	add	r3, lr
 80003ec:	1b1b      	subs	r3, r3, r4
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f4:	fb08 3310 	mls	r3, r8, r0, r3
 80003f8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003fc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000400:	45a2      	cmp	sl, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1da>
 8000404:	eb1e 0404 	adds.w	r4, lr, r4
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295
 800040c:	d26b      	bcs.n	80004e6 <__udivmoddi4+0x2aa>
 800040e:	45a2      	cmp	sl, r4
 8000410:	d969      	bls.n	80004e6 <__udivmoddi4+0x2aa>
 8000412:	3802      	subs	r0, #2
 8000414:	4474      	add	r4, lr
 8000416:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041a:	fba0 8902 	umull	r8, r9, r0, r2
 800041e:	eba4 040a 	sub.w	r4, r4, sl
 8000422:	454c      	cmp	r4, r9
 8000424:	46c2      	mov	sl, r8
 8000426:	464b      	mov	r3, r9
 8000428:	d354      	bcc.n	80004d4 <__udivmoddi4+0x298>
 800042a:	d051      	beq.n	80004d0 <__udivmoddi4+0x294>
 800042c:	2e00      	cmp	r6, #0
 800042e:	d069      	beq.n	8000504 <__udivmoddi4+0x2c8>
 8000430:	ebb1 050a 	subs.w	r5, r1, sl
 8000434:	eb64 0403 	sbc.w	r4, r4, r3
 8000438:	fa04 fc0c 	lsl.w	ip, r4, ip
 800043c:	40fd      	lsrs	r5, r7
 800043e:	40fc      	lsrs	r4, r7
 8000440:	ea4c 0505 	orr.w	r5, ip, r5
 8000444:	e9c6 5400 	strd	r5, r4, [r6]
 8000448:	2700      	movs	r7, #0
 800044a:	e747      	b.n	80002dc <__udivmoddi4+0xa0>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f703 	lsr.w	r7, r0, r3
 8000454:	4095      	lsls	r5, r2
 8000456:	fa01 f002 	lsl.w	r0, r1, r2
 800045a:	fa21 f303 	lsr.w	r3, r1, r3
 800045e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000462:	4338      	orrs	r0, r7
 8000464:	0c01      	lsrs	r1, r0, #16
 8000466:	fbb3 f7fe 	udiv	r7, r3, lr
 800046a:	fa1f f885 	uxth.w	r8, r5
 800046e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb07 f308 	mul.w	r3, r7, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x256>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f107 3cff 	add.w	ip, r7, #4294967295
 8000488:	d22f      	bcs.n	80004ea <__udivmoddi4+0x2ae>
 800048a:	428b      	cmp	r3, r1
 800048c:	d92d      	bls.n	80004ea <__udivmoddi4+0x2ae>
 800048e:	3f02      	subs	r7, #2
 8000490:	4429      	add	r1, r5
 8000492:	1acb      	subs	r3, r1, r3
 8000494:	b281      	uxth	r1, r0
 8000496:	fbb3 f0fe 	udiv	r0, r3, lr
 800049a:	fb0e 3310 	mls	r3, lr, r0, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb00 f308 	mul.w	r3, r0, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x27e>
 80004aa:	1869      	adds	r1, r5, r1
 80004ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b0:	d217      	bcs.n	80004e2 <__udivmoddi4+0x2a6>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d915      	bls.n	80004e2 <__udivmoddi4+0x2a6>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4429      	add	r1, r5
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c0:	e73b      	b.n	800033a <__udivmoddi4+0xfe>
 80004c2:	4637      	mov	r7, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e709      	b.n	80002dc <__udivmoddi4+0xa0>
 80004c8:	4607      	mov	r7, r0
 80004ca:	e6e7      	b.n	800029c <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x8c>
 80004d0:	4541      	cmp	r1, r8
 80004d2:	d2ab      	bcs.n	800042c <__udivmoddi4+0x1f0>
 80004d4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d8:	eb69 020e 	sbc.w	r2, r9, lr
 80004dc:	3801      	subs	r0, #1
 80004de:	4613      	mov	r3, r2
 80004e0:	e7a4      	b.n	800042c <__udivmoddi4+0x1f0>
 80004e2:	4660      	mov	r0, ip
 80004e4:	e7e9      	b.n	80004ba <__udivmoddi4+0x27e>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e795      	b.n	8000416 <__udivmoddi4+0x1da>
 80004ea:	4667      	mov	r7, ip
 80004ec:	e7d1      	b.n	8000492 <__udivmoddi4+0x256>
 80004ee:	4681      	mov	r9, r0
 80004f0:	e77c      	b.n	80003ec <__udivmoddi4+0x1b0>
 80004f2:	3802      	subs	r0, #2
 80004f4:	442c      	add	r4, r5
 80004f6:	e747      	b.n	8000388 <__udivmoddi4+0x14c>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	442b      	add	r3, r5
 80004fe:	e72f      	b.n	8000360 <__udivmoddi4+0x124>
 8000500:	4638      	mov	r0, r7
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xda>
 8000504:	4637      	mov	r7, r6
 8000506:	e6e9      	b.n	80002dc <__udivmoddi4+0xa0>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b5b0      	push	{r4, r5, r7, lr}
 800050e:	b09a      	sub	sp, #104	; 0x68
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t UART1_rxBuffer[100] = {0};
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	2264      	movs	r2, #100	; 0x64
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f003 fe91 	bl	8004240 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fc4e 	bl	8000dbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f833 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f9c1 	bl	80008ac <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800052a:	f000 f8af 	bl	800068c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 800052e:	f000 f947 	bl	80007c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000532:	f000 f991 	bl	8000858 <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8000536:	f000 f8f7 	bl	8000728 <MX_UART5_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  strcpy((char*)UART1_rxBuffer, "Message transmitting at 255400 baud\r\n");
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4a10      	ldr	r2, [pc, #64]	; (8000580 <main+0x74>)
 800053e:	461c      	mov	r4, r3
 8000540:	4615      	mov	r5, r2
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800054e:	6020      	str	r0, [r4, #0]
 8000550:	3404      	adds	r4, #4
 8000552:	8021      	strh	r1, [r4, #0]
	  HAL_UART_Transmit(&hlpuart1, UART1_rxBuffer, strlen((char*)UART1_rxBuffer), HAL_MAX_DELAY);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fe50 	bl	80001fc <strlen>
 800055c:	4603      	mov	r3, r0
 800055e:	b29a      	uxth	r2, r3
 8000560:	1d39      	adds	r1, r7, #4
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	4807      	ldr	r0, [pc, #28]	; (8000584 <main+0x78>)
 8000568:	f002 fdc4 	bl	80030f4 <HAL_UART_Transmit>

	  //flash blue led to indicate its running
	  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800056c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <main+0x7c>)
 8000572:	f000 ff4b 	bl	800140c <HAL_GPIO_TogglePin>
	  	HAL_Delay(250);
 8000576:	20fa      	movs	r0, #250	; 0xfa
 8000578:	f000 fc96 	bl	8000ea8 <HAL_Delay>
	  strcpy((char*)UART1_rxBuffer, "Message transmitting at 255400 baud\r\n");
 800057c:	e7dd      	b.n	800053a <main+0x2e>
 800057e:	bf00      	nop
 8000580:	08004268 	.word	0x08004268
 8000584:	200004bc 	.word	0x200004bc
 8000588:	48000400 	.word	0x48000400

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b0bc      	sub	sp, #240	; 0xf0
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000596:	2244      	movs	r2, #68	; 0x44
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fe50 	bl	8004240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2294      	movs	r2, #148	; 0x94
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fe42 	bl	8004240 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005bc:	2000      	movs	r0, #0
 80005be:	f001 f8a7 	bl	8001710 <HAL_PWREx_ControlVoltageScaling>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x40>
  {
    Error_Handler();
 80005c8:	f000 fa14 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80005cc:	2322      	movs	r3, #34	; 0x22
 80005ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005da:	2301      	movs	r3, #1
 80005dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2340      	movs	r3, #64	; 0x40
 80005e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005f8:	231e      	movs	r3, #30
 80005fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000614:	4618      	mov	r0, r3
 8000616:	f001 f93f 	bl	8001898 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000620:	f000 f9e8 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2303      	movs	r3, #3
 800062c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000644:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000648:	2105      	movs	r1, #5
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fd4a 	bl	80020e4 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000656:	f000 f9cd 	bl	80009f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART5
 800065a:	f242 0334 	movw	r3, #8244	; 0x2034
 800065e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000660:	2300      	movs	r3, #0
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000664:	2300      	movs	r3, #0
 8000666:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000668:	2300      	movs	r3, #0
 800066a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800066c:	2300      	movs	r3, #0
 800066e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f001 ffe6 	bl	8002644 <HAL_RCCEx_PeriphCLKConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800067e:	f000 f9b9 	bl	80009f4 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	37f0      	adds	r7, #240	; 0xf0
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 8000692:	4a23      	ldr	r2, [pc, #140]	; (8000720 <MX_LPUART1_UART_Init+0x94>)
 8000694:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <MX_LPUART1_UART_Init+0x98>)
 800069a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 800069e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006d4:	4811      	ldr	r0, [pc, #68]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 80006d6:	f002 fcbd 	bl	8003054 <HAL_UART_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80006e0:	f000 f988 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 80006e8:	f003 fa11 	bl	8003b0e <HAL_UARTEx_SetTxFifoThreshold>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006f2:	f000 f97f 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4808      	ldr	r0, [pc, #32]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 80006fa:	f003 fa46 	bl	8003b8a <HAL_UARTEx_SetRxFifoThreshold>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000704:	f000 f976 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 800070a:	f003 f9c7 	bl	8003a9c <HAL_UARTEx_DisableFifoMode>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000714:	f000 f96e 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200004bc 	.word	0x200004bc
 8000720:	40008000 	.word	0x40008000
 8000724:	00033324 	.word	0x00033324

08000728 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_UART5_Init+0x90>)
 800072e:	4a23      	ldr	r2, [pc, #140]	; (80007bc <MX_UART5_Init+0x94>)
 8000730:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_UART5_Init+0x90>)
 8000734:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000738:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_UART5_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_UART5_Init+0x90>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_UART5_Init+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_UART5_Init+0x90>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_UART5_Init+0x90>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_UART5_Init+0x90>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_UART5_Init+0x90>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_UART5_Init+0x90>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_UART5_Init+0x90>)
 800076c:	2200      	movs	r2, #0
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MX_UART5_Init+0x90>)
 8000772:	f002 fc6f 	bl	8003054 <HAL_UART_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800077c:	f000 f93a 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000780:	2100      	movs	r1, #0
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <MX_UART5_Init+0x90>)
 8000784:	f003 f9c3 	bl	8003b0e <HAL_UARTEx_SetTxFifoThreshold>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800078e:	f000 f931 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000792:	2100      	movs	r1, #0
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <MX_UART5_Init+0x90>)
 8000796:	f003 f9f8 	bl	8003b8a <HAL_UARTEx_SetRxFifoThreshold>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80007a0:	f000 f928 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_UART5_Init+0x90>)
 80007a6:	f003 f979 	bl	8003a9c <HAL_UARTEx_DisableFifoMode>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80007b0:	f000 f920 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000548 	.word	0x20000548
 80007bc:	40005000 	.word	0x40005000

080007c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_USART3_UART_Init+0x90>)
 80007c6:	4a23      	ldr	r2, [pc, #140]	; (8000854 <MX_USART3_UART_Init+0x94>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_USART3_UART_Init+0x90>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_USART3_UART_Init+0x90>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_USART3_UART_Init+0x90>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_USART3_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_USART3_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_USART3_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USART3_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_USART3_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000808:	4811      	ldr	r0, [pc, #68]	; (8000850 <MX_USART3_UART_Init+0x90>)
 800080a:	f002 fc23 	bl	8003054 <HAL_UART_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000814:	f000 f8ee 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000818:	2100      	movs	r1, #0
 800081a:	480d      	ldr	r0, [pc, #52]	; (8000850 <MX_USART3_UART_Init+0x90>)
 800081c:	f003 f977 	bl	8003b0e <HAL_UARTEx_SetTxFifoThreshold>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000826:	f000 f8e5 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082a:	2100      	movs	r1, #0
 800082c:	4808      	ldr	r0, [pc, #32]	; (8000850 <MX_USART3_UART_Init+0x90>)
 800082e:	f003 f9ac 	bl	8003b8a <HAL_UARTEx_SetRxFifoThreshold>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000838:	f000 f8dc 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_USART3_UART_Init+0x90>)
 800083e:	f003 f92d 	bl	8003a9c <HAL_UARTEx_DisableFifoMode>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000848:	f000 f8d4 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000028 	.word	0x20000028
 8000854:	40004800 	.word	0x40004800

08000858 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800085e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000862:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000866:	2206      	movs	r2, #6
 8000868:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800086c:	2202      	movs	r2, #2
 800086e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000872:	2201      	movs	r2, #1
 8000874:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000884:	2201      	movs	r2, #1
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000890:	2201      	movs	r2, #1
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000896:	f000 fdd3 	bl	8001440 <HAL_PCD_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 f8a8 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000b4 	.word	0x200000b4

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b47      	ldr	r3, [pc, #284]	; (80009e0 <MX_GPIO_Init+0x134>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a46      	ldr	r2, [pc, #280]	; (80009e0 <MX_GPIO_Init+0x134>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b44      	ldr	r3, [pc, #272]	; (80009e0 <MX_GPIO_Init+0x134>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <MX_GPIO_Init+0x134>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a40      	ldr	r2, [pc, #256]	; (80009e0 <MX_GPIO_Init+0x134>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <MX_GPIO_Init+0x134>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <MX_GPIO_Init+0x134>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a3a      	ldr	r2, [pc, #232]	; (80009e0 <MX_GPIO_Init+0x134>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <MX_GPIO_Init+0x134>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <MX_GPIO_Init+0x134>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a34      	ldr	r2, [pc, #208]	; (80009e0 <MX_GPIO_Init+0x134>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <MX_GPIO_Init+0x134>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <MX_GPIO_Init+0x134>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a2e      	ldr	r2, [pc, #184]	; (80009e0 <MX_GPIO_Init+0x134>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_GPIO_Init+0x134>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800093a:	f000 ff9d 	bl	8001878 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <MX_GPIO_Init+0x134>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a27      	ldr	r2, [pc, #156]	; (80009e0 <MX_GPIO_Init+0x134>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <MX_GPIO_Init+0x134>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800095c:	4821      	ldr	r0, [pc, #132]	; (80009e4 <MX_GPIO_Init+0x138>)
 800095e:	f000 fd3d 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	4820      	ldr	r0, [pc, #128]	; (80009e8 <MX_GPIO_Init+0x13c>)
 8000968:	f000 fd38 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_GPIO_Init+0x140>)
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	481b      	ldr	r0, [pc, #108]	; (80009f0 <MX_GPIO_Init+0x144>)
 8000982:	f000 fb99 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000986:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <MX_GPIO_Init+0x138>)
 80009a0:	f000 fb8a 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009a4:	2320      	movs	r3, #32
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	480b      	ldr	r0, [pc, #44]	; (80009e8 <MX_GPIO_Init+0x13c>)
 80009bc:	f000 fb7c 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_GPIO_Init+0x13c>)
 80009d4:	f000 fb70 	bl	80010b8 <HAL_GPIO_Init>

}
 80009d8:	bf00      	nop
 80009da:	3730      	adds	r7, #48	; 0x30
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48000400 	.word	0x48000400
 80009e8:	48001800 	.word	0x48001800
 80009ec:	10110000 	.word	0x10110000
 80009f0:	48000800 	.word	0x48000800

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fa:	e7fe      	b.n	80009fa <Error_Handler+0x6>

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_MspInit+0x44>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_MspInit+0x44>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_MspInit+0x44>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_MspInit+0x44>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x44>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6593      	str	r3, [r2, #88]	; 0x58
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x44>)
 8000a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	; 0x38
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a55      	ldr	r2, [pc, #340]	; (8000bb8 <HAL_UART_MspInit+0x174>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d12b      	bne.n	8000abe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a66:	4b55      	ldr	r3, [pc, #340]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a6a:	4a54      	ldr	r2, [pc, #336]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a72:	4b52      	ldr	r3, [pc, #328]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
 8000a7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7e:	4b4f      	ldr	r3, [pc, #316]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	4a4e      	ldr	r2, [pc, #312]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8a:	4b4c      	ldr	r3, [pc, #304]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a92:	61fb      	str	r3, [r7, #28]
 8000a94:	69fb      	ldr	r3, [r7, #28]
    HAL_PWREx_EnableVddIO2();
 8000a96:	f000 feef 	bl	8001878 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000a9a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000aac:	2308      	movs	r3, #8
 8000aae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4842      	ldr	r0, [pc, #264]	; (8000bc0 <HAL_UART_MspInit+0x17c>)
 8000ab8:	f000 fafe 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000abc:	e078      	b.n	8000bb0 <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==UART5)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a40      	ldr	r2, [pc, #256]	; (8000bc4 <HAL_UART_MspInit+0x180>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d145      	bne.n	8000b54 <HAL_UART_MspInit+0x110>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ac8:	4b3c      	ldr	r3, [pc, #240]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000acc:	4a3b      	ldr	r2, [pc, #236]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad4:	4b39      	ldr	r3, [pc, #228]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae0:	4b36      	ldr	r3, [pc, #216]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	4a35      	ldr	r2, [pc, #212]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aec:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af8:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afc:	4a2f      	ldr	r2, [pc, #188]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b04:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b22:	2308      	movs	r3, #8
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4826      	ldr	r0, [pc, #152]	; (8000bc8 <HAL_UART_MspInit+0x184>)
 8000b2e:	f000 fac3 	bl	80010b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b32:	2304      	movs	r3, #4
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b42:	2308      	movs	r3, #8
 8000b44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	481f      	ldr	r0, [pc, #124]	; (8000bcc <HAL_UART_MspInit+0x188>)
 8000b4e:	f000 fab3 	bl	80010b8 <HAL_GPIO_Init>
}
 8000b52:	e02d      	b.n	8000bb0 <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <HAL_UART_MspInit+0x18c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d128      	bne.n	8000bb0 <HAL_UART_MspInit+0x16c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b68:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_UART_MspInit+0x178>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4808      	ldr	r0, [pc, #32]	; (8000bcc <HAL_UART_MspInit+0x188>)
 8000bac:	f000 fa84 	bl	80010b8 <HAL_GPIO_Init>
}
 8000bb0:	bf00      	nop
 8000bb2:	3738      	adds	r7, #56	; 0x38
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40008000 	.word	0x40008000
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	48001800 	.word	0x48001800
 8000bc4:	40005000 	.word	0x40005000
 8000bc8:	48000800 	.word	0x48000800
 8000bcc:	48000c00 	.word	0x48000c00
 8000bd0:	40004800 	.word	0x40004800

08000bd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bf4:	d154      	bne.n	8000ca0 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <HAL_PCD_MspInit+0xd4>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a2b      	ldr	r2, [pc, #172]	; (8000ca8 <HAL_PCD_MspInit+0xd4>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <HAL_PCD_MspInit+0xd4>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c0e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c20:	230a      	movs	r3, #10
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f000 fa43 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f000 fa35 	bl	80010b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_PCD_MspInit+0xd4>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <HAL_PCD_MspInit+0xd4>)
 8000c54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <HAL_PCD_MspInit+0xd4>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <HAL_PCD_MspInit+0xd4>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d114      	bne.n	8000c9c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <HAL_PCD_MspInit+0xd4>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c76:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <HAL_PCD_MspInit+0xd4>)
 8000c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_PCD_MspInit+0xd4>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000c8a:	f000 fde5 	bl	8001858 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_PCD_MspInit+0xd4>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <HAL_PCD_MspInit+0xd4>)
 8000c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c9a:	e001      	b.n	8000ca0 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000c9c:	f000 fddc 	bl	8001858 <HAL_PWREx_EnableVddUSB>
}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf8:	f000 f8b6 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <SystemInit+0x64>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a16      	ldr	r2, [pc, #88]	; (8000d64 <SystemInit+0x64>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <SystemInit+0x68>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <SystemInit+0x68>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <SystemInit+0x68>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <SystemInit+0x68>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <SystemInit+0x68>)
 8000d2c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d30:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <SystemInit+0x68>)
 8000d38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d3c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <SystemInit+0x68>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <SystemInit+0x68>)
 8000d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <SystemInit+0x68>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SystemInit+0x64>)
 8000d52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d56:	609a      	str	r2, [r3, #8]
#endif
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00
 8000d68:	40021000 	.word	0x40021000

08000d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff ffc6 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d76:	e003      	b.n	8000d80 <LoopCopyDataInit>

08000d78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d7e:	3104      	adds	r1, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d80:	480a      	ldr	r0, [pc, #40]	; (8000dac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d88:	d3f6      	bcc.n	8000d78 <CopyDataInit>
	ldr	r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d8c:	e002      	b.n	8000d94 <LoopFillZerobss>

08000d8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d90:	f842 3b04 	str.w	r3, [r2], #4

08000d94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <LoopForever+0x16>)
	cmp	r2, r3
 8000d96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d98:	d3f9      	bcc.n	8000d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f003 fa2d 	bl	80041f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9e:	f7ff fbb5 	bl	800050c <main>

08000da2 <LoopForever>:

LoopForever:
    b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000da8:	08004310 	.word	0x08004310
	ldr	r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000db0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000db4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000db8:	200005d8 	.word	0x200005d8

08000dbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_IRQHandler>

08000dbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f941 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f000 f80e 	bl	8000df0 <HAL_InitTick>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	e001      	b.n	8000de4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de0:	f7ff fe0c 	bl	80009fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_InitTick+0x6c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d023      	beq.n	8000e4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_InitTick+0x70>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_InitTick+0x6c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f93f 	bl	800109e <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10f      	bne.n	8000e46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d809      	bhi.n	8000e40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 f917 	bl	8001066 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_InitTick+0x74>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	e007      	b.n	8000e50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e004      	b.n	8000e50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	73fb      	strb	r3, [r7, #15]
 8000e4a:	e001      	b.n	8000e50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000004 	.word	0x20000004

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	200005d4 	.word	0x200005d4

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	200005d4 	.word	0x200005d4

08000ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff ffee 	bl	8000e90 <HAL_GetTick>
 8000eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec0:	d005      	beq.n	8000ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_Delay+0x40>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ece:	bf00      	nop
 8000ed0:	f7ff ffde 	bl	8000e90 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d8f7      	bhi.n	8000ed0 <HAL_Delay+0x28>
  {
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000008 	.word	0x20000008

08000eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f7ff ff8e 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff47 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff5c 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff8e 	bl	8000fa4 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffb0 	bl	800100c <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c6:	e166      	b.n	8001396 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8158 	beq.w	8001390 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d00b      	beq.n	8001100 <HAL_GPIO_Init+0x48>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d007      	beq.n	8001100 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f4:	2b11      	cmp	r3, #17
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b12      	cmp	r3, #18
 80010fe:	d130      	bne.n	8001162 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001136:	2201      	movs	r2, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	f003 0201 	and.w	r2, r3, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0xea>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d123      	bne.n	80011ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	6939      	ldr	r1, [r7, #16]
 80011e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0203 	and.w	r2, r3, #3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80b2 	beq.w	8001390 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122c:	4b61      	ldr	r3, [pc, #388]	; (80013b4 <HAL_GPIO_Init+0x2fc>)
 800122e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001230:	4a60      	ldr	r2, [pc, #384]	; (80013b4 <HAL_GPIO_Init+0x2fc>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6613      	str	r3, [r2, #96]	; 0x60
 8001238:	4b5e      	ldr	r3, [pc, #376]	; (80013b4 <HAL_GPIO_Init+0x2fc>)
 800123a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001244:	4a5c      	ldr	r2, [pc, #368]	; (80013b8 <HAL_GPIO_Init+0x300>)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220f      	movs	r2, #15
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800126e:	d02b      	beq.n	80012c8 <HAL_GPIO_Init+0x210>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a52      	ldr	r2, [pc, #328]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d025      	beq.n	80012c4 <HAL_GPIO_Init+0x20c>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a51      	ldr	r2, [pc, #324]	; (80013c0 <HAL_GPIO_Init+0x308>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d01f      	beq.n	80012c0 <HAL_GPIO_Init+0x208>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a50      	ldr	r2, [pc, #320]	; (80013c4 <HAL_GPIO_Init+0x30c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d019      	beq.n	80012bc <HAL_GPIO_Init+0x204>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a4f      	ldr	r2, [pc, #316]	; (80013c8 <HAL_GPIO_Init+0x310>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d013      	beq.n	80012b8 <HAL_GPIO_Init+0x200>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a4e      	ldr	r2, [pc, #312]	; (80013cc <HAL_GPIO_Init+0x314>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d00d      	beq.n	80012b4 <HAL_GPIO_Init+0x1fc>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a4d      	ldr	r2, [pc, #308]	; (80013d0 <HAL_GPIO_Init+0x318>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d007      	beq.n	80012b0 <HAL_GPIO_Init+0x1f8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a4c      	ldr	r2, [pc, #304]	; (80013d4 <HAL_GPIO_Init+0x31c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d101      	bne.n	80012ac <HAL_GPIO_Init+0x1f4>
 80012a8:	2307      	movs	r3, #7
 80012aa:	e00e      	b.n	80012ca <HAL_GPIO_Init+0x212>
 80012ac:	2308      	movs	r3, #8
 80012ae:	e00c      	b.n	80012ca <HAL_GPIO_Init+0x212>
 80012b0:	2306      	movs	r3, #6
 80012b2:	e00a      	b.n	80012ca <HAL_GPIO_Init+0x212>
 80012b4:	2305      	movs	r3, #5
 80012b6:	e008      	b.n	80012ca <HAL_GPIO_Init+0x212>
 80012b8:	2304      	movs	r3, #4
 80012ba:	e006      	b.n	80012ca <HAL_GPIO_Init+0x212>
 80012bc:	2303      	movs	r3, #3
 80012be:	e004      	b.n	80012ca <HAL_GPIO_Init+0x212>
 80012c0:	2302      	movs	r3, #2
 80012c2:	e002      	b.n	80012ca <HAL_GPIO_Init+0x212>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <HAL_GPIO_Init+0x212>
 80012c8:	2300      	movs	r3, #0
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	f002 0203 	and.w	r2, r2, #3
 80012d0:	0092      	lsls	r2, r2, #2
 80012d2:	4093      	lsls	r3, r2
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012da:	4937      	ldr	r1, [pc, #220]	; (80013b8 <HAL_GPIO_Init+0x300>)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012e8:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <HAL_GPIO_Init+0x320>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800130c:	4a32      	ldr	r2, [pc, #200]	; (80013d8 <HAL_GPIO_Init+0x320>)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <HAL_GPIO_Init+0x320>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001336:	4a28      	ldr	r2, [pc, #160]	; (80013d8 <HAL_GPIO_Init+0x320>)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <HAL_GPIO_Init+0x320>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001360:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <HAL_GPIO_Init+0x320>)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <HAL_GPIO_Init+0x320>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800138a:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <HAL_GPIO_Init+0x320>)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	fa22 f303 	lsr.w	r3, r2, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f47f ae91 	bne.w	80010c8 <HAL_GPIO_Init+0x10>
  }
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000
 80013bc:	48000400 	.word	0x48000400
 80013c0:	48000800 	.word	0x48000800
 80013c4:	48000c00 	.word	0x48000c00
 80013c8:	48001000 	.word	0x48001000
 80013cc:	48001400 	.word	0x48001400
 80013d0:	48001800 	.word	0x48001800
 80013d4:	48001c00 	.word	0x48001c00
 80013d8:	40010400 	.word	0x40010400

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4013      	ands	r3, r2
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43d9      	mvns	r1, r3
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	400b      	ands	r3, r1
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001442:	b08f      	sub	sp, #60	; 0x3c
 8001444:	af0a      	add	r7, sp, #40	; 0x28
 8001446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e116      	b.n	8001680 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d106      	bne.n	8001472 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fbb1 	bl	8000bd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2203      	movs	r2, #3
 8001476:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fc73 	bl	8003d7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	687e      	ldr	r6, [r7, #4]
 800149e:	466d      	mov	r5, sp
 80014a0:	f106 0410 	add.w	r4, r6, #16
 80014a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80014b4:	1d33      	adds	r3, r6, #4
 80014b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b8:	6838      	ldr	r0, [r7, #0]
 80014ba:	f002 fc0d 	bl	8003cd8 <USB_CoreInit>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2202      	movs	r2, #2
 80014c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0d7      	b.n	8001680 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 fc61 	bl	8003d9e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	e04a      	b.n	8001578 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	333d      	adds	r3, #61	; 0x3d
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	333c      	adds	r3, #60	; 0x3c
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	b298      	uxth	r0, r3
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3342      	adds	r3, #66	; 0x42
 800151e:	4602      	mov	r2, r0
 8001520:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	1a9b      	subs	r3, r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	333f      	adds	r3, #63	; 0x3f
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3344      	adds	r3, #68	; 0x44
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	3348      	adds	r3, #72	; 0x48
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	1a9b      	subs	r3, r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3350      	adds	r3, #80	; 0x50
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	3301      	adds	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	d3af      	bcc.n	80014e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	e044      	b.n	8001612 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	1a9b      	subs	r3, r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	3301      	adds	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3b5      	bcc.n	8001588 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	687e      	ldr	r6, [r7, #4]
 8001624:	466d      	mov	r5, sp
 8001626:	f106 0410 	add.w	r4, r6, #16
 800162a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001632:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001636:	e885 0003 	stmia.w	r5, {r0, r1}
 800163a:	1d33      	adds	r3, r6, #4
 800163c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163e:	6838      	ldr	r0, [r7, #0]
 8001640:	f002 fbd8 	bl	8003df4 <USB_DevInit>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e014      	b.n	8001680 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	2b01      	cmp	r3, #1
 800166c:	d102      	bne.n	8001674 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f80a 	bl	8001688 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fd68 	bl	800414e <USB_DevDisconnect>

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001688 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ba:	f043 0303 	orr.w	r3, r3, #3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_PWREx_GetVoltageRange+0x3c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e0:	d102      	bne.n	80016e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80016e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e6:	e00b      	b.n	8001700 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_PWREx_GetVoltageRange+0x3c>)
 80016ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f6:	d102      	bne.n	80016fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80016f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016fc:	e000      	b.n	8001700 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80016fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40007000 	.word	0x40007000

08001710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d141      	bne.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800171e:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172a:	d131      	bne.n	8001790 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800172c:	4b47      	ldr	r3, [pc, #284]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001732:	4a46      	ldr	r2, [pc, #280]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001738:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800173c:	4b43      	ldr	r3, [pc, #268]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001744:	4a41      	ldr	r2, [pc, #260]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800174c:	4b40      	ldr	r3, [pc, #256]	; (8001850 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2232      	movs	r2, #50	; 0x32
 8001752:	fb02 f303 	mul.w	r3, r2, r3
 8001756:	4a3f      	ldr	r2, [pc, #252]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	0c9b      	lsrs	r3, r3, #18
 800175e:	3301      	adds	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001762:	e002      	b.n	800176a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3b01      	subs	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800176a:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001776:	d102      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f2      	bne.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800177e:	4b33      	ldr	r3, [pc, #204]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178a:	d158      	bne.n	800183e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e057      	b.n	8001840 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001790:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001796:	4a2d      	ldr	r2, [pc, #180]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800179c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017a0:	e04d      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a8:	d141      	bne.n	800182e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017aa:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b6:	d131      	bne.n	800181c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017be:	4a23      	ldr	r2, [pc, #140]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c8:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017d0:	4a1e      	ldr	r2, [pc, #120]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2232      	movs	r2, #50	; 0x32
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	0c9b      	lsrs	r3, r3, #18
 80017ea:	3301      	adds	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ee:	e002      	b.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001802:	d102      	bne.n	800180a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f2      	bne.n	80017f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001816:	d112      	bne.n	800183e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e011      	b.n	8001840 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800182c:	e007      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001838:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40007000 	.word	0x40007000
 8001850:	20000000 	.word	0x20000000
 8001854:	431bde83 	.word	0x431bde83

08001858 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_PWREx_EnableVddUSB+0x1c>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001866:	6053      	str	r3, [r2, #4]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40007000 	.word	0x40007000

08001878 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_PWREx_EnableVddIO2+0x1c>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001886:	6053      	str	r3, [r2, #4]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40007000 	.word	0x40007000

08001898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f000 bc16 	b.w	80020d8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ac:	4ba0      	ldr	r3, [pc, #640]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018b6:	4b9e      	ldr	r3, [pc, #632]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80e4 	beq.w	8001a96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4c>
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	f040 808b 	bne.w	80019f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	f040 8087 	bne.w	80019f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018e4:	4b92      	ldr	r3, [pc, #584]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_OscConfig+0x64>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e3ed      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1a      	ldr	r2, [r3, #32]
 8001900:	4b8b      	ldr	r3, [pc, #556]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <HAL_RCC_OscConfig+0x7e>
 800190c:	4b88      	ldr	r3, [pc, #544]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001914:	e005      	b.n	8001922 <HAL_RCC_OscConfig+0x8a>
 8001916:	4b86      	ldr	r3, [pc, #536]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001922:	4293      	cmp	r3, r2
 8001924:	d223      	bcs.n	800196e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fdc8 	bl	80024c0 <RCC_SetFlashLatencyFromMSIRange>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e3ce      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193a:	4b7d      	ldr	r3, [pc, #500]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a7c      	ldr	r2, [pc, #496]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b7a      	ldr	r3, [pc, #488]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4977      	ldr	r1, [pc, #476]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001958:	4b75      	ldr	r3, [pc, #468]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	4972      	ldr	r1, [pc, #456]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
 800196c:	e025      	b.n	80019ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800196e:	4b70      	ldr	r3, [pc, #448]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a6f      	ldr	r2, [pc, #444]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b6d      	ldr	r3, [pc, #436]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	496a      	ldr	r1, [pc, #424]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800198c:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	4965      	ldr	r1, [pc, #404]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 fd88 	bl	80024c0 <RCC_SetFlashLatencyFromMSIRange>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e38e      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ba:	f000 fcbf 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80019be:	4601      	mov	r1, r0
 80019c0:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	4a5a      	ldr	r2, [pc, #360]	; (8001b34 <HAL_RCC_OscConfig+0x29c>)
 80019cc:	5cd3      	ldrb	r3, [r2, r3]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	fa21 f303 	lsr.w	r3, r1, r3
 80019d6:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <HAL_RCC_OscConfig+0x2a0>)
 80019d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019da:	4b58      	ldr	r3, [pc, #352]	; (8001b3c <HAL_RCC_OscConfig+0x2a4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fa06 	bl	8000df0 <HAL_InitTick>
 80019e4:	4603      	mov	r3, r0
 80019e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d052      	beq.n	8001a94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	e372      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d032      	beq.n	8001a60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019fa:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a4c      	ldr	r2, [pc, #304]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a06:	f7ff fa43 	bl	8000e90 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fa3f 	bl	8000e90 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e35b      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a20:	4b43      	ldr	r3, [pc, #268]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2c:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a3f      	ldr	r2, [pc, #252]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	493a      	ldr	r1, [pc, #232]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4a:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	4935      	ldr	r1, [pc, #212]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
 8001a5e:	e01a      	b.n	8001a96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a60:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a32      	ldr	r2, [pc, #200]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a66:	f023 0301 	bic.w	r3, r3, #1
 8001a6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fa10 	bl	8000e90 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a74:	f7ff fa0c 	bl	8000e90 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e328      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x1dc>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d073      	beq.n	8001b8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x21c>
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d10e      	bne.n	8001acc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d10b      	bne.n	8001acc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d063      	beq.n	8001b88 <HAL_RCC_OscConfig+0x2f0>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d15f      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e305      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad4:	d106      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x24c>
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e01d      	b.n	8001b20 <HAL_RCC_OscConfig+0x288>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x270>
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a0f      	ldr	r2, [pc, #60]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e00b      	b.n	8001b20 <HAL_RCC_OscConfig+0x288>
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <HAL_RCC_OscConfig+0x298>)
 8001b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01b      	beq.n	8001b60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff f9b2 	bl	8000e90 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2e:	e010      	b.n	8001b52 <HAL_RCC_OscConfig+0x2ba>
 8001b30:	40021000 	.word	0x40021000
 8001b34:	080042a0 	.word	0x080042a0
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff f9a6 	bl	8000e90 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e2c2      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b52:	4baf      	ldr	r3, [pc, #700]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x2a8>
 8001b5e:	e014      	b.n	8001b8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff f996 	bl	8000e90 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff f992 	bl	8000e90 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e2ae      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7a:	4ba5      	ldr	r3, [pc, #660]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x2d0>
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d060      	beq.n	8001c58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x310>
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d119      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d116      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba8:	4b99      	ldr	r3, [pc, #612]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x328>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e28b      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b93      	ldr	r3, [pc, #588]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	061b      	lsls	r3, r3, #24
 8001bce:	4990      	ldr	r1, [pc, #576]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd4:	e040      	b.n	8001c58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d023      	beq.n	8001c26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bde:	4b8c      	ldr	r3, [pc, #560]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a8b      	ldr	r2, [pc, #556]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff f951 	bl	8000e90 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f94d 	bl	8000e90 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e269      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c04:	4b82      	ldr	r3, [pc, #520]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c10:	4b7f      	ldr	r3, [pc, #508]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	061b      	lsls	r3, r3, #24
 8001c1e:	497c      	ldr	r1, [pc, #496]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
 8001c24:	e018      	b.n	8001c58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c26:	4b7a      	ldr	r3, [pc, #488]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a79      	ldr	r2, [pc, #484]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c32:	f7ff f92d 	bl	8000e90 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3a:	f7ff f929 	bl	8000e90 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e245      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c4c:	4b70      	ldr	r3, [pc, #448]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f0      	bne.n	8001c3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d03c      	beq.n	8001cde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d01c      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6c:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c72:	4a67      	ldr	r2, [pc, #412]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f908 	bl	8000e90 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c84:	f7ff f904 	bl	8000e90 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e220      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c96:	4b5e      	ldr	r3, [pc, #376]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0ef      	beq.n	8001c84 <HAL_RCC_OscConfig+0x3ec>
 8001ca4:	e01b      	b.n	8001cde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca6:	4b5a      	ldr	r3, [pc, #360]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f8eb 	bl	8000e90 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbe:	f7ff f8e7 	bl	8000e90 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e203      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd0:	4b4f      	ldr	r3, [pc, #316]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ef      	bne.n	8001cbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80a6 	beq.w	8001e38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cf0:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10d      	bne.n	8001d18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfc:	4b44      	ldr	r3, [pc, #272]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	4a43      	ldr	r2, [pc, #268]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d06:	6593      	str	r3, [r2, #88]	; 0x58
 8001d08:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d14:	2301      	movs	r3, #1
 8001d16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d18:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <HAL_RCC_OscConfig+0x57c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d118      	bne.n	8001d56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <HAL_RCC_OscConfig+0x57c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a3a      	ldr	r2, [pc, #232]	; (8001e14 <HAL_RCC_OscConfig+0x57c>)
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d30:	f7ff f8ae 	bl	8000e90 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d38:	f7ff f8aa 	bl	8000e90 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1c6      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4a:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_RCC_OscConfig+0x57c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d108      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4d8>
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d64:	4a2a      	ldr	r2, [pc, #168]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d6e:	e024      	b.n	8001dba <HAL_RCC_OscConfig+0x522>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d110      	bne.n	8001d9a <HAL_RCC_OscConfig+0x502>
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7e:	4a24      	ldr	r2, [pc, #144]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d88:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8e:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d98:	e00f      	b.n	8001dba <HAL_RCC_OscConfig+0x522>
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db0:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f023 0304 	bic.w	r3, r3, #4
 8001db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d016      	beq.n	8001df0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc2:	f7ff f865 	bl	8000e90 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff f861 	bl	8000e90 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e17b      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_OscConfig+0x578>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0ed      	beq.n	8001dca <HAL_RCC_OscConfig+0x532>
 8001dee:	e01a      	b.n	8001e26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7ff f84e 	bl	8000e90 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df6:	e00f      	b.n	8001e18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7ff f84a 	bl	8000e90 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d906      	bls.n	8001e18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e164      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e18:	4ba8      	ldr	r3, [pc, #672]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1e8      	bne.n	8001df8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e26:	7ffb      	ldrb	r3, [r7, #31]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2c:	4ba3      	ldr	r3, [pc, #652]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	4aa2      	ldr	r2, [pc, #648]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d03c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e4c:	4b9b      	ldr	r3, [pc, #620]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e52:	4a9a      	ldr	r2, [pc, #616]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7ff f818 	bl	8000e90 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e64:	f7ff f814 	bl	8000e90 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e130      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e76:	4b91      	ldr	r3, [pc, #580]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0ef      	beq.n	8001e64 <HAL_RCC_OscConfig+0x5cc>
 8001e84:	e01b      	b.n	8001ebe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e86:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e8c:	4a8b      	ldr	r2, [pc, #556]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7fe fffb 	bl	8000e90 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9e:	f7fe fff7 	bl	8000e90 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e113      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001eb0:	4b82      	ldr	r3, [pc, #520]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ef      	bne.n	8001e9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8107 	beq.w	80020d6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	f040 80cb 	bne.w	8002068 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ed2:	4b7a      	ldr	r3, [pc, #488]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f003 0203 	and.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d12c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d123      	bne.n	8001f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d11b      	bne.n	8001f40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d113      	bne.n	8001f40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	3b01      	subs	r3, #1
 8001f26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d109      	bne.n	8001f40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	085b      	lsrs	r3, r3, #1
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d06d      	beq.n	800201c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d068      	beq.n	8002018 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d105      	bne.n	8001f5e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f52:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0ba      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f62:	4b56      	ldr	r3, [pc, #344]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a55      	ldr	r2, [pc, #340]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001f68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f6e:	f7fe ff8f 	bl	8000e90 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f76:	f7fe ff8b 	bl	8000e90 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e0a7      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f88:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f0      	bne.n	8001f76 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f94:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <HAL_RCC_OscConfig+0x828>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fa4:	3a01      	subs	r2, #1
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	4311      	orrs	r1, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fae:	0212      	lsls	r2, r2, #8
 8001fb0:	4311      	orrs	r1, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fb6:	0852      	lsrs	r2, r2, #1
 8001fb8:	3a01      	subs	r2, #1
 8001fba:	0552      	lsls	r2, r2, #21
 8001fbc:	4311      	orrs	r1, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fc2:	0852      	lsrs	r2, r2, #1
 8001fc4:	3a01      	subs	r2, #1
 8001fc6:	0652      	lsls	r2, r2, #25
 8001fc8:	4311      	orrs	r1, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fce:	06d2      	lsls	r2, r2, #27
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	493a      	ldr	r1, [pc, #232]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a37      	ldr	r2, [pc, #220]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a34      	ldr	r2, [pc, #208]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ff0:	f7fe ff4e 	bl	8000e90 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7fe ff4a 	bl	8000e90 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e066      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002016:	e05e      	b.n	80020d6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e05d      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d156      	bne.n	80020d6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a23      	ldr	r2, [pc, #140]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800202e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002032:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a20      	ldr	r2, [pc, #128]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800203a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002040:	f7fe ff26 	bl	8000e90 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe ff22 	bl	8000e90 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e03e      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x7b0>
 8002066:	e036      	b.n	80020d6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d031      	beq.n	80020d2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8002074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002078:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d105      	bne.n	8002092 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 800208c:	f023 0303 	bic.w	r3, r3, #3
 8002090:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_RCC_OscConfig+0x824>)
 8002098:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800209c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a2:	f7fe fef5 	bl	8000e90 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a8:	e00c      	b.n	80020c4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020aa:	f7fe fef1 	bl	8000e90 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d905      	bls.n	80020c4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e00d      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_RCC_OscConfig+0x848>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ec      	bne.n	80020aa <HAL_RCC_OscConfig+0x812>
 80020d0:	e001      	b.n	80020d6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e10f      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020fc:	4b89      	ldr	r3, [pc, #548]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d910      	bls.n	800212c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b86      	ldr	r3, [pc, #536]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 020f 	bic.w	r2, r3, #15
 8002112:	4984      	ldr	r1, [pc, #528]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b82      	ldr	r3, [pc, #520]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0f7      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 8089 	beq.w	800224c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d133      	bne.n	80021aa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002142:	4b79      	ldr	r3, [pc, #484]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0e4      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002152:	f000 fa0f 	bl	8002574 <RCC_GetSysClockFreqFromPLLSource>
 8002156:	4602      	mov	r2, r0
 8002158:	4b74      	ldr	r3, [pc, #464]	; (800232c <HAL_RCC_ClockConfig+0x248>)
 800215a:	429a      	cmp	r2, r3
 800215c:	d955      	bls.n	800220a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800215e:	4b72      	ldr	r3, [pc, #456]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10a      	bne.n	8002180 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800216a:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002172:	4a6d      	ldr	r2, [pc, #436]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002178:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e044      	b.n	800220a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d03e      	beq.n	800220a <HAL_RCC_ClockConfig+0x126>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d13a      	bne.n	800220a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002194:	4b64      	ldr	r3, [pc, #400]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800219c:	4a62      	ldr	r2, [pc, #392]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 800219e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e02f      	b.n	800220a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b2:	4b5d      	ldr	r3, [pc, #372]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d115      	bne.n	80021ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0ac      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ca:	4b57      	ldr	r3, [pc, #348]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0a0      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021da:	4b53      	ldr	r3, [pc, #332]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e098      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80021ea:	f000 f8a7 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b4e      	ldr	r3, [pc, #312]	; (800232c <HAL_RCC_ClockConfig+0x248>)
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d909      	bls.n	800220a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021f6:	4b4c      	ldr	r3, [pc, #304]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021fe:	4a4a      	ldr	r2, [pc, #296]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002204:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800220a:	4b47      	ldr	r3, [pc, #284]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4944      	ldr	r1, [pc, #272]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221c:	f7fe fe38 	bl	8000e90 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fe fe34 	bl	8000e90 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e070      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 020c 	and.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d1eb      	bne.n	8002224 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d009      	beq.n	800226c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b33      	ldr	r3, [pc, #204]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4930      	ldr	r1, [pc, #192]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
 800226a:	e008      	b.n	800227e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b80      	cmp	r3, #128	; 0x80
 8002270:	d105      	bne.n	800227e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002272:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4a2c      	ldr	r2, [pc, #176]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 8002278:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800227c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d210      	bcs.n	80022ae <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 020f 	bic.w	r2, r3, #15
 8002294:	4923      	ldr	r1, [pc, #140]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HAL_RCC_ClockConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e036      	b.n	800231c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	4918      	ldr	r1, [pc, #96]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d009      	beq.n	80022ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4910      	ldr	r1, [pc, #64]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ec:	f000 f826 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80022f0:	4601      	mov	r1, r0
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_RCC_ClockConfig+0x244>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	4a0c      	ldr	r2, [pc, #48]	; (8002330 <HAL_RCC_ClockConfig+0x24c>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	fa21 f303 	lsr.w	r3, r1, r3
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x250>)
 800230a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_RCC_ClockConfig+0x254>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fd6d 	bl	8000df0 <HAL_InitTick>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]

  return status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40022000 	.word	0x40022000
 8002328:	40021000 	.word	0x40021000
 800232c:	04c4b400 	.word	0x04c4b400
 8002330:	080042a0 	.word	0x080042a0
 8002334:	20000000 	.word	0x20000000
 8002338:	20000004 	.word	0x20000004

0800233c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002354:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x34>
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d121      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d11e      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002370:	4b33      	ldr	r3, [pc, #204]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d107      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800237c:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 800237e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	e005      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800238c:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002398:	4a2a      	ldr	r2, [pc, #168]	; (8002444 <HAL_RCC_GetSysClockFreq+0x108>)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10d      	bne.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d102      	bne.n	80023ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	e004      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_RCC_GetSysClockFreq+0x110>)
 80023c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d133      	bne.n	8002432 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ca:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d002      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0xa4>
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d003      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0xaa>
 80023de:	e005      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023e2:	617b      	str	r3, [r7, #20]
      break;
 80023e4:	e005      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_GetSysClockFreq+0x110>)
 80023e8:	617b      	str	r3, [r7, #20]
      break;
 80023ea:	e002      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	617b      	str	r3, [r7, #20]
      break;
 80023f0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	3301      	adds	r3, #1
 80023fe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	fb02 f203 	mul.w	r2, r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_GetSysClockFreq+0x104>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	0e5b      	lsrs	r3, r3, #25
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	3301      	adds	r3, #1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002430:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002432:	69bb      	ldr	r3, [r7, #24]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3724      	adds	r7, #36	; 0x24
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40021000 	.word	0x40021000
 8002444:	080042b8 	.word	0x080042b8
 8002448:	00f42400 	.word	0x00f42400
 800244c:	007a1200 	.word	0x007a1200

08002450 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_RCC_GetHCLKFreq+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000000 	.word	0x20000000

08002468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800246c:	f7ff fff0 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8002470:	4601      	mov	r1, r0
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	080042b0 	.word	0x080042b0

08002494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002498:	f7ff ffda 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 800249c:	4601      	mov	r1, r0
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0adb      	lsrs	r3, r3, #11
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	080042b0 	.word	0x080042b0

080024c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024d8:	f7ff f8fa 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 80024dc:	6178      	str	r0, [r7, #20]
 80024de:	e014      	b.n	800250a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	4a21      	ldr	r2, [pc, #132]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ea:	6593      	str	r3, [r2, #88]	; 0x58
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024f8:	f7ff f8ea 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 80024fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	4a1a      	ldr	r2, [pc, #104]	; (800256c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002508:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002510:	d10b      	bne.n	800252a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b80      	cmp	r3, #128	; 0x80
 8002516:	d913      	bls.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2ba0      	cmp	r3, #160	; 0xa0
 800251c:	d902      	bls.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800251e:	2302      	movs	r3, #2
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	e00d      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002524:	2301      	movs	r3, #1
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e00a      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b7f      	cmp	r3, #127	; 0x7f
 800252e:	d902      	bls.n	8002536 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002530:	2302      	movs	r3, #2
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	e004      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b70      	cmp	r3, #112	; 0x70
 800253a:	d101      	bne.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800253c:	2301      	movs	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 020f 	bic.w	r2, r3, #15
 8002548:	4909      	ldr	r1, [pc, #36]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	429a      	cmp	r2, r3
 800255c:	d001      	beq.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	40022000 	.word	0x40022000

08002574 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800257e:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d118      	bne.n	80025bc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800258a:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d107      	bne.n	80025a6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002596:	4b27      	ldr	r3, [pc, #156]	; (8002634 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e005      	b.n	80025b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025b2:	4a21      	ldr	r2, [pc, #132]	; (8002638 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ba:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025bc:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d002      	beq.n	80025d2 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d003      	beq.n	80025d8 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80025d0:	e005      	b.n	80025de <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80025d4:	613b      	str	r3, [r7, #16]
    break;
 80025d6:	e005      	b.n	80025e4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80025da:	613b      	str	r3, [r7, #16]
    break;
 80025dc:	e002      	b.n	80025e4 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	613b      	str	r3, [r7, #16]
    break;
 80025e2:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	3301      	adds	r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	fb02 f203 	mul.w	r2, r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	0e5b      	lsrs	r3, r3, #25
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	3301      	adds	r3, #1
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002624:	683b      	ldr	r3, [r7, #0]
}
 8002626:	4618      	mov	r0, r3
 8002628:	371c      	adds	r7, #28
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	080042b8 	.word	0x080042b8
 800263c:	00f42400 	.word	0x00f42400
 8002640:	007a1200 	.word	0x007a1200

08002644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800264c:	2300      	movs	r3, #0
 800264e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002650:	2300      	movs	r3, #0
 8002652:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800265c:	2b00      	cmp	r3, #0
 800265e:	d03d      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d00b      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d804      	bhi.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00e      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002670:	2b20      	cmp	r3, #32
 8002672:	d015      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002674:	e01d      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002676:	2b60      	cmp	r3, #96	; 0x60
 8002678:	d01e      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800267a:	2b80      	cmp	r3, #128	; 0x80
 800267c:	d01c      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800267e:	e018      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002680:	4b86      	ldr	r3, [pc, #536]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4a85      	ldr	r2, [pc, #532]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800268c:	e015      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3304      	adds	r3, #4
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fafd 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 800269a:	4603      	mov	r3, r0
 800269c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800269e:	e00c      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3320      	adds	r3, #32
 80026a4:	2100      	movs	r1, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fbe4 	bl	8002e74 <RCCEx_PLLSAI2_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026b0:	e003      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	74fb      	strb	r3, [r7, #19]
      break;
 80026b6:	e000      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80026b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10b      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026c0:	4b76      	ldr	r3, [pc, #472]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026c6:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ce:	4973      	ldr	r1, [pc, #460]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80026d6:	e001      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d042      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f0:	d00f      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80026f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f6:	d805      	bhi.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d011      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80026fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002700:	d017      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002702:	e01f      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8002704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002708:	d01f      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	d01c      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002710:	e018      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002712:	4b62      	ldr	r3, [pc, #392]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	4a61      	ldr	r2, [pc, #388]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800271e:	e015      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3304      	adds	r3, #4
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fab4 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 800272c:	4603      	mov	r3, r0
 800272e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002730:	e00c      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3320      	adds	r3, #32
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fb9b 	bl	8002e74 <RCCEx_PLLSAI2_Config>
 800273e:	4603      	mov	r3, r0
 8002740:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002742:	e003      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	74fb      	strb	r3, [r7, #19]
      break;
 8002748:	e000      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800274a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10b      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002752:	4b52      	ldr	r3, [pc, #328]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	494e      	ldr	r1, [pc, #312]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002768:	e001      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 809f 	beq.w	80028ba <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277c:	2300      	movs	r3, #0
 800277e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002780:	4b46      	ldr	r3, [pc, #280]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	4a40      	ldr	r2, [pc, #256]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a0:	6593      	str	r3, [r2, #88]	; 0x58
 80027a2:	4b3e      	ldr	r3, [pc, #248]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ae:	2301      	movs	r3, #1
 80027b0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a3a      	ldr	r2, [pc, #232]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027be:	f7fe fb67 	bl	8000e90 <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027c4:	e009      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c6:	f7fe fb63 	bl	8000e90 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d902      	bls.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	74fb      	strb	r3, [r7, #19]
        break;
 80027d8:	e005      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027da:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ef      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d15b      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027ec:	4b2b      	ldr	r3, [pc, #172]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01f      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	429a      	cmp	r2, r3
 8002808:	d019      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002814:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002816:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	4a1f      	ldr	r2, [pc, #124]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282c:	4a1b      	ldr	r2, [pc, #108]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800282e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002836:	4a19      	ldr	r2, [pc, #100]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d016      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe fb22 	bl	8000e90 <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800284e:	e00b      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002850:	f7fe fb1e 	bl	8000e90 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d902      	bls.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	74fb      	strb	r3, [r7, #19]
            break;
 8002866:	e006      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0ec      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10c      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800287c:	4b07      	ldr	r3, [pc, #28]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288c:	4903      	ldr	r1, [pc, #12]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002894:	e008      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002896:	7cfb      	ldrb	r3, [r7, #19]
 8002898:	74bb      	strb	r3, [r7, #18]
 800289a:	e005      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800289c:	40021000 	.word	0x40021000
 80028a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028a8:	7c7b      	ldrb	r3, [r7, #17]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d105      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ae:	4ba0      	ldr	r3, [pc, #640]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	4a9f      	ldr	r2, [pc, #636]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028c6:	4b9a      	ldr	r3, [pc, #616]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f023 0203 	bic.w	r2, r3, #3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	4996      	ldr	r1, [pc, #600]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028e8:	4b91      	ldr	r3, [pc, #580]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	f023 020c 	bic.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	498e      	ldr	r1, [pc, #568]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800290a:	4b89      	ldr	r3, [pc, #548]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002910:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	4985      	ldr	r1, [pc, #532]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800292c:	4b80      	ldr	r3, [pc, #512]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293a:	497d      	ldr	r1, [pc, #500]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800294e:	4b78      	ldr	r3, [pc, #480]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295c:	4974      	ldr	r1, [pc, #464]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002970:	4b6f      	ldr	r3, [pc, #444]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297e:	496c      	ldr	r1, [pc, #432]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002992:	4b67      	ldr	r3, [pc, #412]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a0:	4963      	ldr	r1, [pc, #396]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029b4:	4b5e      	ldr	r3, [pc, #376]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029c2:	495b      	ldr	r1, [pc, #364]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029d6:	4b56      	ldr	r3, [pc, #344]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	4952      	ldr	r1, [pc, #328]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029f8:	4b4d      	ldr	r3, [pc, #308]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	494a      	ldr	r1, [pc, #296]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a1a:	4b45      	ldr	r3, [pc, #276]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	4941      	ldr	r1, [pc, #260]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a3c:	4b3c      	ldr	r3, [pc, #240]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a42:	f023 0203 	bic.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4a:	4939      	ldr	r1, [pc, #228]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d028      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a5e:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6c:	4930      	ldr	r1, [pc, #192]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4a2b      	ldr	r2, [pc, #172]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a88:	60d3      	str	r3, [r2, #12]
 8002a8a:	e011      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f8f9 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8002aac:	7cfb      	ldrb	r3, [r7, #19]
 8002aae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d04d      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ac4:	d108      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002acc:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002ad6:	e012      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002ad8:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ae4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002af6:	490e      	ldr	r1, [pc, #56]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b06:	d106      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a08      	ldr	r2, [pc, #32]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b12:	60d3      	str	r3, [r2, #12]
 8002b14:	e020      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a02      	ldr	r2, [pc, #8]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2a:	60d3      	str	r3, [r2, #12]
 8002b2c:	e014      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2101      	movs	r1, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 f8a5 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b54:	7cfb      	ldrb	r3, [r7, #19]
 8002b56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d028      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b64:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b72:	4947      	ldr	r1, [pc, #284]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b82:	d106      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b84:	4b42      	ldr	r3, [pc, #264]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a41      	ldr	r2, [pc, #260]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b8e:	60d3      	str	r3, [r2, #12]
 8002b90:	e011      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f876 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01e      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bc2:	4b33      	ldr	r3, [pc, #204]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd2:	492f      	ldr	r1, [pc, #188]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3304      	adds	r3, #4
 8002bea:	2102      	movs	r1, #2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 f851 	bl	8002c94 <RCCEx_PLLSAI1_Config>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bf6:	7cfb      	ldrb	r3, [r7, #19]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c0c:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c12:	f023 0204 	bic.w	r2, r3, #4
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1c:	491c      	ldr	r1, [pc, #112]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00b      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c30:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c36:	f023 0218 	bic.w	r2, r3, #24
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c40:	4913      	ldr	r1, [pc, #76]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d017      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002c54:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c64:	490a      	ldr	r1, [pc, #40]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c76:	d105      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c84:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000

08002c94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ca2:	4b70      	ldr	r3, [pc, #448]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00e      	beq.n	8002ccc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cae:	4b6d      	ldr	r3, [pc, #436]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0203 	and.w	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d103      	bne.n	8002cc6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
       ||
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d13f      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
 8002cca:	e03c      	b.n	8002d46 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d00c      	beq.n	8002cee <RCCEx_PLLSAI1_Config+0x5a>
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d013      	beq.n	8002d00 <RCCEx_PLLSAI1_Config+0x6c>
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d120      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cdc:	4b61      	ldr	r3, [pc, #388]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d11d      	bne.n	8002d24 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cec:	e01a      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cee:	4b5d      	ldr	r3, [pc, #372]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d116      	bne.n	8002d28 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfe:	e013      	b.n	8002d28 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d00:	4b58      	ldr	r3, [pc, #352]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10f      	bne.n	8002d2c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d0c:	4b55      	ldr	r3, [pc, #340]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d1c:	e006      	b.n	8002d2c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
      break;
 8002d22:	e004      	b.n	8002d2e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002d24:	bf00      	nop
 8002d26:	e002      	b.n	8002d2e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002d28:	bf00      	nop
 8002d2a:	e000      	b.n	8002d2e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8002d2c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d108      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002d34:	4b4b      	ldr	r3, [pc, #300]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f023 0203 	bic.w	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4948      	ldr	r1, [pc, #288]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f040 8086 	bne.w	8002e5a <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d4e:	4b45      	ldr	r3, [pc, #276]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a44      	ldr	r2, [pc, #272]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5a:	f7fe f899 	bl	8000e90 <HAL_GetTick>
 8002d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d60:	e009      	b.n	8002d76 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d62:	f7fe f895 	bl	8000e90 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d902      	bls.n	8002d76 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	73fb      	strb	r3, [r7, #15]
        break;
 8002d74:	e005      	b.n	8002d82 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d76:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ef      	bne.n	8002d62 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d168      	bne.n	8002e5a <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d113      	bne.n	8002db6 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d8e:	4b35      	ldr	r3, [pc, #212]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	4b35      	ldr	r3, [pc, #212]	; (8002e68 <RCCEx_PLLSAI1_Config+0x1d4>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6892      	ldr	r2, [r2, #8]
 8002d9a:	0211      	lsls	r1, r2, #8
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	68d2      	ldr	r2, [r2, #12]
 8002da0:	06d2      	lsls	r2, r2, #27
 8002da2:	4311      	orrs	r1, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6852      	ldr	r2, [r2, #4]
 8002da8:	3a01      	subs	r2, #1
 8002daa:	0112      	lsls	r2, r2, #4
 8002dac:	430a      	orrs	r2, r1
 8002dae:	492d      	ldr	r1, [pc, #180]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	610b      	str	r3, [r1, #16]
 8002db4:	e02d      	b.n	8002e12 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d115      	bne.n	8002de8 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dbc:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6892      	ldr	r2, [r2, #8]
 8002dc8:	0211      	lsls	r1, r2, #8
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6912      	ldr	r2, [r2, #16]
 8002dce:	0852      	lsrs	r2, r2, #1
 8002dd0:	3a01      	subs	r2, #1
 8002dd2:	0552      	lsls	r2, r2, #21
 8002dd4:	4311      	orrs	r1, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6852      	ldr	r2, [r2, #4]
 8002dda:	3a01      	subs	r2, #1
 8002ddc:	0112      	lsls	r2, r2, #4
 8002dde:	430a      	orrs	r2, r1
 8002de0:	4920      	ldr	r1, [pc, #128]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	610b      	str	r3, [r1, #16]
 8002de6:	e014      	b.n	8002e12 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6892      	ldr	r2, [r2, #8]
 8002df4:	0211      	lsls	r1, r2, #8
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6952      	ldr	r2, [r2, #20]
 8002dfa:	0852      	lsrs	r2, r2, #1
 8002dfc:	3a01      	subs	r2, #1
 8002dfe:	0652      	lsls	r2, r2, #25
 8002e00:	4311      	orrs	r1, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6852      	ldr	r2, [r2, #4]
 8002e06:	3a01      	subs	r2, #1
 8002e08:	0112      	lsls	r2, r2, #4
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	4915      	ldr	r1, [pc, #84]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fe f837 	bl	8000e90 <HAL_GetTick>
 8002e22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e24:	e009      	b.n	8002e3a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e26:	f7fe f833 	bl	8000e90 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d902      	bls.n	8002e3a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	73fb      	strb	r3, [r7, #15]
          break;
 8002e38:	e005      	b.n	8002e46 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0ef      	beq.n	8002e26 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	4903      	ldr	r1, [pc, #12]	; (8002e64 <RCCEx_PLLSAI1_Config+0x1d0>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	07ff800f 	.word	0x07ff800f
 8002e6c:	ff9f800f 	.word	0xff9f800f
 8002e70:	f9ff800f 	.word	0xf9ff800f

08002e74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e82:	4b70      	ldr	r3, [pc, #448]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00e      	beq.n	8002eac <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e8e:	4b6d      	ldr	r3, [pc, #436]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0203 	and.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d103      	bne.n	8002ea6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d13f      	bne.n	8002f26 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
 8002eaa:	e03c      	b.n	8002f26 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d00c      	beq.n	8002ece <RCCEx_PLLSAI2_Config+0x5a>
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d013      	beq.n	8002ee0 <RCCEx_PLLSAI2_Config+0x6c>
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d120      	bne.n	8002efe <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ebc:	4b61      	ldr	r3, [pc, #388]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d11d      	bne.n	8002f04 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ecc:	e01a      	b.n	8002f04 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ece:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d116      	bne.n	8002f08 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ede:	e013      	b.n	8002f08 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ee0:	4b58      	ldr	r3, [pc, #352]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10f      	bne.n	8002f0c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eec:	4b55      	ldr	r3, [pc, #340]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002efc:	e006      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      break;
 8002f02:	e004      	b.n	8002f0e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002f04:	bf00      	nop
 8002f06:	e002      	b.n	8002f0e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002f08:	bf00      	nop
 8002f0a:	e000      	b.n	8002f0e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8002f0c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d108      	bne.n	8002f26 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002f14:	4b4b      	ldr	r3, [pc, #300]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f023 0203 	bic.w	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4948      	ldr	r1, [pc, #288]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f040 8086 	bne.w	800303a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f2e:	4b45      	ldr	r3, [pc, #276]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a44      	ldr	r2, [pc, #272]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f3a:	f7fd ffa9 	bl	8000e90 <HAL_GetTick>
 8002f3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f40:	e009      	b.n	8002f56 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f42:	f7fd ffa5 	bl	8000e90 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d902      	bls.n	8002f56 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	73fb      	strb	r3, [r7, #15]
        break;
 8002f54:	e005      	b.n	8002f62 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f56:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ef      	bne.n	8002f42 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d168      	bne.n	800303a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d113      	bne.n	8002f96 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f6e:	4b35      	ldr	r3, [pc, #212]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	4b35      	ldr	r3, [pc, #212]	; (8003048 <RCCEx_PLLSAI2_Config+0x1d4>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6892      	ldr	r2, [r2, #8]
 8002f7a:	0211      	lsls	r1, r2, #8
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68d2      	ldr	r2, [r2, #12]
 8002f80:	06d2      	lsls	r2, r2, #27
 8002f82:	4311      	orrs	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6852      	ldr	r2, [r2, #4]
 8002f88:	3a01      	subs	r2, #1
 8002f8a:	0112      	lsls	r2, r2, #4
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	492d      	ldr	r1, [pc, #180]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	614b      	str	r3, [r1, #20]
 8002f94:	e02d      	b.n	8002ff2 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d115      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f9c:	4b29      	ldr	r3, [pc, #164]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	4b2a      	ldr	r3, [pc, #168]	; (800304c <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6892      	ldr	r2, [r2, #8]
 8002fa8:	0211      	lsls	r1, r2, #8
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6912      	ldr	r2, [r2, #16]
 8002fae:	0852      	lsrs	r2, r2, #1
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	0552      	lsls	r2, r2, #21
 8002fb4:	4311      	orrs	r1, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6852      	ldr	r2, [r2, #4]
 8002fba:	3a01      	subs	r2, #1
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	4920      	ldr	r1, [pc, #128]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	614b      	str	r3, [r1, #20]
 8002fc6:	e014      	b.n	8002ff2 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fc8:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6892      	ldr	r2, [r2, #8]
 8002fd4:	0211      	lsls	r1, r2, #8
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6952      	ldr	r2, [r2, #20]
 8002fda:	0852      	lsrs	r2, r2, #1
 8002fdc:	3a01      	subs	r2, #1
 8002fde:	0652      	lsls	r2, r2, #25
 8002fe0:	4311      	orrs	r1, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6852      	ldr	r2, [r2, #4]
 8002fe6:	3a01      	subs	r2, #1
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	430a      	orrs	r2, r1
 8002fec:	4915      	ldr	r1, [pc, #84]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7fd ff47 	bl	8000e90 <HAL_GetTick>
 8003002:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003004:	e009      	b.n	800301a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003006:	f7fd ff43 	bl	8000e90 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d902      	bls.n	800301a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	73fb      	strb	r3, [r7, #15]
          break;
 8003018:	e005      	b.n	8003026 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ef      	beq.n	8003006 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d106      	bne.n	800303a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4903      	ldr	r1, [pc, #12]	; (8003044 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003036:	4313      	orrs	r3, r2
 8003038:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	07ff800f 	.word	0x07ff800f
 800304c:	ff9f800f 	.word	0xff9f800f
 8003050:	f9ff800f 	.word	0xf9ff800f

08003054 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e042      	b.n	80030ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7fd fce3 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2224      	movs	r2, #36	; 0x24
 8003082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f8c4 	bl	8003224 <UART_SetConfig>
 800309c:	4603      	mov	r3, r0
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e022      	b.n	80030ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fb8a 	bl	80037c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fc11 	bl	800390c <UART_CheckIdleState>
 80030ea:	4603      	mov	r3, r0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800310a:	2b20      	cmp	r3, #32
 800310c:	f040 8084 	bne.w	8003218 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_UART_Transmit+0x28>
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e07c      	b.n	800321a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_UART_Transmit+0x3a>
 800312a:	2302      	movs	r3, #2
 800312c:	e075      	b.n	800321a <HAL_UART_Transmit+0x126>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2221      	movs	r2, #33	; 0x21
 8003142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003146:	f7fd fea3 	bl	8000e90 <HAL_GetTick>
 800314a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	88fa      	ldrh	r2, [r7, #6]
 8003150:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	88fa      	ldrh	r2, [r7, #6]
 8003158:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003164:	d108      	bne.n	8003178 <HAL_UART_Transmit+0x84>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d104      	bne.n	8003178 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	e003      	b.n	8003180 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800317c:	2300      	movs	r3, #0
 800317e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003188:	e02d      	b.n	80031e6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	2180      	movs	r1, #128	; 0x80
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fc01 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e03a      	b.n	800321a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10b      	bne.n	80031c2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b6:	b292      	uxth	r2, r2
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	3302      	adds	r3, #2
 80031be:	61bb      	str	r3, [r7, #24]
 80031c0:	e008      	b.n	80031d4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	781a      	ldrb	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	b292      	uxth	r2, r2
 80031cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3301      	adds	r3, #1
 80031d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1cb      	bne.n	800318a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2200      	movs	r2, #0
 80031fa:	2140      	movs	r1, #64	; 0x40
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fbcd 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e006      	b.n	800321a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	e000      	b.n	800321a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003218:	2302      	movs	r3, #2
  }
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003224:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003228:	b088      	sub	sp, #32
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4313      	orrs	r3, r2
 8003248:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	4313      	orrs	r3, r2
 8003252:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	4bb1      	ldr	r3, [pc, #708]	; (8003520 <UART_SetConfig+0x2fc>)
 800325c:	4013      	ands	r3, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	69f9      	ldr	r1, [r7, #28]
 8003264:	430b      	orrs	r3, r1
 8003266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4aa6      	ldr	r2, [pc, #664]	; (8003524 <UART_SetConfig+0x300>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	4313      	orrs	r3, r2
 8003296:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80032a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	69f9      	ldr	r1, [r7, #28]
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	f023 010f 	bic.w	r1, r3, #15
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a97      	ldr	r2, [pc, #604]	; (8003528 <UART_SetConfig+0x304>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d121      	bne.n	8003314 <UART_SetConfig+0xf0>
 80032d0:	4b96      	ldr	r3, [pc, #600]	; (800352c <UART_SetConfig+0x308>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d816      	bhi.n	800330c <UART_SetConfig+0xe8>
 80032de:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <UART_SetConfig+0xc0>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	08003301 	.word	0x08003301
 80032ec:	080032fb 	.word	0x080032fb
 80032f0:	08003307 	.word	0x08003307
 80032f4:	2301      	movs	r3, #1
 80032f6:	76fb      	strb	r3, [r7, #27]
 80032f8:	e0e8      	b.n	80034cc <UART_SetConfig+0x2a8>
 80032fa:	2302      	movs	r3, #2
 80032fc:	76fb      	strb	r3, [r7, #27]
 80032fe:	e0e5      	b.n	80034cc <UART_SetConfig+0x2a8>
 8003300:	2304      	movs	r3, #4
 8003302:	76fb      	strb	r3, [r7, #27]
 8003304:	e0e2      	b.n	80034cc <UART_SetConfig+0x2a8>
 8003306:	2308      	movs	r3, #8
 8003308:	76fb      	strb	r3, [r7, #27]
 800330a:	e0df      	b.n	80034cc <UART_SetConfig+0x2a8>
 800330c:	2310      	movs	r3, #16
 800330e:	76fb      	strb	r3, [r7, #27]
 8003310:	bf00      	nop
 8003312:	e0db      	b.n	80034cc <UART_SetConfig+0x2a8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a85      	ldr	r2, [pc, #532]	; (8003530 <UART_SetConfig+0x30c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d134      	bne.n	8003388 <UART_SetConfig+0x164>
 800331e:	4b83      	ldr	r3, [pc, #524]	; (800352c <UART_SetConfig+0x308>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f003 030c 	and.w	r3, r3, #12
 8003328:	2b0c      	cmp	r3, #12
 800332a:	d829      	bhi.n	8003380 <UART_SetConfig+0x15c>
 800332c:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <UART_SetConfig+0x110>)
 800332e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003332:	bf00      	nop
 8003334:	08003369 	.word	0x08003369
 8003338:	08003381 	.word	0x08003381
 800333c:	08003381 	.word	0x08003381
 8003340:	08003381 	.word	0x08003381
 8003344:	08003375 	.word	0x08003375
 8003348:	08003381 	.word	0x08003381
 800334c:	08003381 	.word	0x08003381
 8003350:	08003381 	.word	0x08003381
 8003354:	0800336f 	.word	0x0800336f
 8003358:	08003381 	.word	0x08003381
 800335c:	08003381 	.word	0x08003381
 8003360:	08003381 	.word	0x08003381
 8003364:	0800337b 	.word	0x0800337b
 8003368:	2300      	movs	r3, #0
 800336a:	76fb      	strb	r3, [r7, #27]
 800336c:	e0ae      	b.n	80034cc <UART_SetConfig+0x2a8>
 800336e:	2302      	movs	r3, #2
 8003370:	76fb      	strb	r3, [r7, #27]
 8003372:	e0ab      	b.n	80034cc <UART_SetConfig+0x2a8>
 8003374:	2304      	movs	r3, #4
 8003376:	76fb      	strb	r3, [r7, #27]
 8003378:	e0a8      	b.n	80034cc <UART_SetConfig+0x2a8>
 800337a:	2308      	movs	r3, #8
 800337c:	76fb      	strb	r3, [r7, #27]
 800337e:	e0a5      	b.n	80034cc <UART_SetConfig+0x2a8>
 8003380:	2310      	movs	r3, #16
 8003382:	76fb      	strb	r3, [r7, #27]
 8003384:	bf00      	nop
 8003386:	e0a1      	b.n	80034cc <UART_SetConfig+0x2a8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a69      	ldr	r2, [pc, #420]	; (8003534 <UART_SetConfig+0x310>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d120      	bne.n	80033d4 <UART_SetConfig+0x1b0>
 8003392:	4b66      	ldr	r3, [pc, #408]	; (800352c <UART_SetConfig+0x308>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800339c:	2b10      	cmp	r3, #16
 800339e:	d00f      	beq.n	80033c0 <UART_SetConfig+0x19c>
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d802      	bhi.n	80033aa <UART_SetConfig+0x186>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <UART_SetConfig+0x190>
 80033a8:	e010      	b.n	80033cc <UART_SetConfig+0x1a8>
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d005      	beq.n	80033ba <UART_SetConfig+0x196>
 80033ae:	2b30      	cmp	r3, #48	; 0x30
 80033b0:	d009      	beq.n	80033c6 <UART_SetConfig+0x1a2>
 80033b2:	e00b      	b.n	80033cc <UART_SetConfig+0x1a8>
 80033b4:	2300      	movs	r3, #0
 80033b6:	76fb      	strb	r3, [r7, #27]
 80033b8:	e088      	b.n	80034cc <UART_SetConfig+0x2a8>
 80033ba:	2302      	movs	r3, #2
 80033bc:	76fb      	strb	r3, [r7, #27]
 80033be:	e085      	b.n	80034cc <UART_SetConfig+0x2a8>
 80033c0:	2304      	movs	r3, #4
 80033c2:	76fb      	strb	r3, [r7, #27]
 80033c4:	e082      	b.n	80034cc <UART_SetConfig+0x2a8>
 80033c6:	2308      	movs	r3, #8
 80033c8:	76fb      	strb	r3, [r7, #27]
 80033ca:	e07f      	b.n	80034cc <UART_SetConfig+0x2a8>
 80033cc:	2310      	movs	r3, #16
 80033ce:	76fb      	strb	r3, [r7, #27]
 80033d0:	bf00      	nop
 80033d2:	e07b      	b.n	80034cc <UART_SetConfig+0x2a8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a57      	ldr	r2, [pc, #348]	; (8003538 <UART_SetConfig+0x314>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d120      	bne.n	8003420 <UART_SetConfig+0x1fc>
 80033de:	4b53      	ldr	r3, [pc, #332]	; (800352c <UART_SetConfig+0x308>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d00f      	beq.n	800340c <UART_SetConfig+0x1e8>
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	d802      	bhi.n	80033f6 <UART_SetConfig+0x1d2>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <UART_SetConfig+0x1dc>
 80033f4:	e010      	b.n	8003418 <UART_SetConfig+0x1f4>
 80033f6:	2b80      	cmp	r3, #128	; 0x80
 80033f8:	d005      	beq.n	8003406 <UART_SetConfig+0x1e2>
 80033fa:	2bc0      	cmp	r3, #192	; 0xc0
 80033fc:	d009      	beq.n	8003412 <UART_SetConfig+0x1ee>
 80033fe:	e00b      	b.n	8003418 <UART_SetConfig+0x1f4>
 8003400:	2300      	movs	r3, #0
 8003402:	76fb      	strb	r3, [r7, #27]
 8003404:	e062      	b.n	80034cc <UART_SetConfig+0x2a8>
 8003406:	2302      	movs	r3, #2
 8003408:	76fb      	strb	r3, [r7, #27]
 800340a:	e05f      	b.n	80034cc <UART_SetConfig+0x2a8>
 800340c:	2304      	movs	r3, #4
 800340e:	76fb      	strb	r3, [r7, #27]
 8003410:	e05c      	b.n	80034cc <UART_SetConfig+0x2a8>
 8003412:	2308      	movs	r3, #8
 8003414:	76fb      	strb	r3, [r7, #27]
 8003416:	e059      	b.n	80034cc <UART_SetConfig+0x2a8>
 8003418:	2310      	movs	r3, #16
 800341a:	76fb      	strb	r3, [r7, #27]
 800341c:	bf00      	nop
 800341e:	e055      	b.n	80034cc <UART_SetConfig+0x2a8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a45      	ldr	r2, [pc, #276]	; (800353c <UART_SetConfig+0x318>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d124      	bne.n	8003474 <UART_SetConfig+0x250>
 800342a:	4b40      	ldr	r3, [pc, #256]	; (800352c <UART_SetConfig+0x308>)
 800342c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003438:	d012      	beq.n	8003460 <UART_SetConfig+0x23c>
 800343a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800343e:	d802      	bhi.n	8003446 <UART_SetConfig+0x222>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <UART_SetConfig+0x230>
 8003444:	e012      	b.n	800346c <UART_SetConfig+0x248>
 8003446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344a:	d006      	beq.n	800345a <UART_SetConfig+0x236>
 800344c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003450:	d009      	beq.n	8003466 <UART_SetConfig+0x242>
 8003452:	e00b      	b.n	800346c <UART_SetConfig+0x248>
 8003454:	2300      	movs	r3, #0
 8003456:	76fb      	strb	r3, [r7, #27]
 8003458:	e038      	b.n	80034cc <UART_SetConfig+0x2a8>
 800345a:	2302      	movs	r3, #2
 800345c:	76fb      	strb	r3, [r7, #27]
 800345e:	e035      	b.n	80034cc <UART_SetConfig+0x2a8>
 8003460:	2304      	movs	r3, #4
 8003462:	76fb      	strb	r3, [r7, #27]
 8003464:	e032      	b.n	80034cc <UART_SetConfig+0x2a8>
 8003466:	2308      	movs	r3, #8
 8003468:	76fb      	strb	r3, [r7, #27]
 800346a:	e02f      	b.n	80034cc <UART_SetConfig+0x2a8>
 800346c:	2310      	movs	r3, #16
 800346e:	76fb      	strb	r3, [r7, #27]
 8003470:	bf00      	nop
 8003472:	e02b      	b.n	80034cc <UART_SetConfig+0x2a8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <UART_SetConfig+0x300>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d124      	bne.n	80034c8 <UART_SetConfig+0x2a4>
 800347e:	4b2b      	ldr	r3, [pc, #172]	; (800352c <UART_SetConfig+0x308>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348c:	d012      	beq.n	80034b4 <UART_SetConfig+0x290>
 800348e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003492:	d802      	bhi.n	800349a <UART_SetConfig+0x276>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <UART_SetConfig+0x284>
 8003498:	e012      	b.n	80034c0 <UART_SetConfig+0x29c>
 800349a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800349e:	d006      	beq.n	80034ae <UART_SetConfig+0x28a>
 80034a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034a4:	d009      	beq.n	80034ba <UART_SetConfig+0x296>
 80034a6:	e00b      	b.n	80034c0 <UART_SetConfig+0x29c>
 80034a8:	2300      	movs	r3, #0
 80034aa:	76fb      	strb	r3, [r7, #27]
 80034ac:	e00e      	b.n	80034cc <UART_SetConfig+0x2a8>
 80034ae:	2302      	movs	r3, #2
 80034b0:	76fb      	strb	r3, [r7, #27]
 80034b2:	e00b      	b.n	80034cc <UART_SetConfig+0x2a8>
 80034b4:	2304      	movs	r3, #4
 80034b6:	76fb      	strb	r3, [r7, #27]
 80034b8:	e008      	b.n	80034cc <UART_SetConfig+0x2a8>
 80034ba:	2308      	movs	r3, #8
 80034bc:	76fb      	strb	r3, [r7, #27]
 80034be:	e005      	b.n	80034cc <UART_SetConfig+0x2a8>
 80034c0:	2310      	movs	r3, #16
 80034c2:	76fb      	strb	r3, [r7, #27]
 80034c4:	bf00      	nop
 80034c6:	e001      	b.n	80034cc <UART_SetConfig+0x2a8>
 80034c8:	2310      	movs	r3, #16
 80034ca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a14      	ldr	r2, [pc, #80]	; (8003524 <UART_SetConfig+0x300>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	f040 80a1 	bne.w	800361a <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034d8:	7efb      	ldrb	r3, [r7, #27]
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d836      	bhi.n	800354c <UART_SetConfig+0x328>
 80034de:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <UART_SetConfig+0x2c0>)
 80034e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e4:	08003509 	.word	0x08003509
 80034e8:	0800354d 	.word	0x0800354d
 80034ec:	08003511 	.word	0x08003511
 80034f0:	0800354d 	.word	0x0800354d
 80034f4:	08003517 	.word	0x08003517
 80034f8:	0800354d 	.word	0x0800354d
 80034fc:	0800354d 	.word	0x0800354d
 8003500:	0800354d 	.word	0x0800354d
 8003504:	08003545 	.word	0x08003545
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003508:	f7fe ffae 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 800350c:	6178      	str	r0, [r7, #20]
        break;
 800350e:	e022      	b.n	8003556 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <UART_SetConfig+0x31c>)
 8003512:	617b      	str	r3, [r7, #20]
        break;
 8003514:	e01f      	b.n	8003556 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003516:	f7fe ff11 	bl	800233c <HAL_RCC_GetSysClockFreq>
 800351a:	6178      	str	r0, [r7, #20]
        break;
 800351c:	e01b      	b.n	8003556 <UART_SetConfig+0x332>
 800351e:	bf00      	nop
 8003520:	cfff69f3 	.word	0xcfff69f3
 8003524:	40008000 	.word	0x40008000
 8003528:	40013800 	.word	0x40013800
 800352c:	40021000 	.word	0x40021000
 8003530:	40004400 	.word	0x40004400
 8003534:	40004800 	.word	0x40004800
 8003538:	40004c00 	.word	0x40004c00
 800353c:	40005000 	.word	0x40005000
 8003540:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003548:	617b      	str	r3, [r7, #20]
        break;
 800354a:	e004      	b.n	8003556 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	76bb      	strb	r3, [r7, #26]
        break;
 8003554:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 811d 	beq.w	8003798 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	4a97      	ldr	r2, [pc, #604]	; (80037c0 <UART_SetConfig+0x59c>)
 8003564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003568:	461a      	mov	r2, r3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003570:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	429a      	cmp	r2, r3
 8003580:	d305      	bcc.n	800358e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	d902      	bls.n	8003594 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	76bb      	strb	r3, [r7, #26]
 8003592:	e101      	b.n	8003798 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	4618      	mov	r0, r3
 8003598:	f04f 0100 	mov.w	r1, #0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	4a87      	ldr	r2, [pc, #540]	; (80037c0 <UART_SetConfig+0x59c>)
 80035a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	f04f 0400 	mov.w	r4, #0
 80035ac:	461a      	mov	r2, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	f7fc fe2c 	bl	800020c <__aeabi_uldivmod>
 80035b4:	4603      	mov	r3, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	4619      	mov	r1, r3
 80035ba:	4622      	mov	r2, r4
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	f04f 0400 	mov.w	r4, #0
 80035c4:	0214      	lsls	r4, r2, #8
 80035c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80035ca:	020b      	lsls	r3, r1, #8
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6852      	ldr	r2, [r2, #4]
 80035d0:	0852      	lsrs	r2, r2, #1
 80035d2:	4611      	mov	r1, r2
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	eb13 0b01 	adds.w	fp, r3, r1
 80035dc:	eb44 0c02 	adc.w	ip, r4, r2
 80035e0:	4658      	mov	r0, fp
 80035e2:	4661      	mov	r1, ip
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f04f 0400 	mov.w	r4, #0
 80035ec:	461a      	mov	r2, r3
 80035ee:	4623      	mov	r3, r4
 80035f0:	f7fc fe0c 	bl	800020c <__aeabi_uldivmod>
 80035f4:	4603      	mov	r3, r0
 80035f6:	460c      	mov	r4, r1
 80035f8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003600:	d308      	bcc.n	8003614 <UART_SetConfig+0x3f0>
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003608:	d204      	bcs.n	8003614 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	e0c1      	b.n	8003798 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	76bb      	strb	r3, [r7, #26]
 8003618:	e0be      	b.n	8003798 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003622:	d164      	bne.n	80036ee <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003624:	7efb      	ldrb	r3, [r7, #27]
 8003626:	2b08      	cmp	r3, #8
 8003628:	d827      	bhi.n	800367a <UART_SetConfig+0x456>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <UART_SetConfig+0x40c>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003655 	.word	0x08003655
 8003634:	0800365d 	.word	0x0800365d
 8003638:	08003665 	.word	0x08003665
 800363c:	0800367b 	.word	0x0800367b
 8003640:	0800366b 	.word	0x0800366b
 8003644:	0800367b 	.word	0x0800367b
 8003648:	0800367b 	.word	0x0800367b
 800364c:	0800367b 	.word	0x0800367b
 8003650:	08003673 	.word	0x08003673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003654:	f7fe ff08 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8003658:	6178      	str	r0, [r7, #20]
        break;
 800365a:	e013      	b.n	8003684 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800365c:	f7fe ff1a 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 8003660:	6178      	str	r0, [r7, #20]
        break;
 8003662:	e00f      	b.n	8003684 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003664:	4b57      	ldr	r3, [pc, #348]	; (80037c4 <UART_SetConfig+0x5a0>)
 8003666:	617b      	str	r3, [r7, #20]
        break;
 8003668:	e00c      	b.n	8003684 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800366a:	f7fe fe67 	bl	800233c <HAL_RCC_GetSysClockFreq>
 800366e:	6178      	str	r0, [r7, #20]
        break;
 8003670:	e008      	b.n	8003684 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003676:	617b      	str	r3, [r7, #20]
        break;
 8003678:	e004      	b.n	8003684 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	76bb      	strb	r3, [r7, #26]
        break;
 8003682:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8086 	beq.w	8003798 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	4a4b      	ldr	r2, [pc, #300]	; (80037c0 <UART_SetConfig+0x59c>)
 8003692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003696:	461a      	mov	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fbb3 f3f2 	udiv	r3, r3, r2
 800369e:	005a      	lsls	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	085b      	lsrs	r3, r3, #1
 80036a6:	441a      	add	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b0f      	cmp	r3, #15
 80036b8:	d916      	bls.n	80036e8 <UART_SetConfig+0x4c4>
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c0:	d212      	bcs.n	80036e8 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	f023 030f 	bic.w	r3, r3, #15
 80036ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	89fb      	ldrh	r3, [r7, #14]
 80036da:	4313      	orrs	r3, r2
 80036dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	89fa      	ldrh	r2, [r7, #14]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	e057      	b.n	8003798 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	76bb      	strb	r3, [r7, #26]
 80036ec:	e054      	b.n	8003798 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036ee:	7efb      	ldrb	r3, [r7, #27]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d828      	bhi.n	8003746 <UART_SetConfig+0x522>
 80036f4:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <UART_SetConfig+0x4d8>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	08003721 	.word	0x08003721
 8003700:	08003729 	.word	0x08003729
 8003704:	08003731 	.word	0x08003731
 8003708:	08003747 	.word	0x08003747
 800370c:	08003737 	.word	0x08003737
 8003710:	08003747 	.word	0x08003747
 8003714:	08003747 	.word	0x08003747
 8003718:	08003747 	.word	0x08003747
 800371c:	0800373f 	.word	0x0800373f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003720:	f7fe fea2 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8003724:	6178      	str	r0, [r7, #20]
        break;
 8003726:	e013      	b.n	8003750 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003728:	f7fe feb4 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 800372c:	6178      	str	r0, [r7, #20]
        break;
 800372e:	e00f      	b.n	8003750 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003730:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <UART_SetConfig+0x5a0>)
 8003732:	617b      	str	r3, [r7, #20]
        break;
 8003734:	e00c      	b.n	8003750 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003736:	f7fe fe01 	bl	800233c <HAL_RCC_GetSysClockFreq>
 800373a:	6178      	str	r0, [r7, #20]
        break;
 800373c:	e008      	b.n	8003750 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003742:	617b      	str	r3, [r7, #20]
        break;
 8003744:	e004      	b.n	8003750 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	76bb      	strb	r3, [r7, #26]
        break;
 800374e:	bf00      	nop
    }

    if (pclk != 0U)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d020      	beq.n	8003798 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <UART_SetConfig+0x59c>)
 800375c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003760:	461a      	mov	r2, r3
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	fbb3 f2f2 	udiv	r2, r3, r2
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	441a      	add	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	b29b      	uxth	r3, r3
 800377a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b0f      	cmp	r3, #15
 8003780:	d908      	bls.n	8003794 <UART_SetConfig+0x570>
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d204      	bcs.n	8003794 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	e001      	b.n	8003798 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80037b4:	7ebb      	ldrb	r3, [r7, #26]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3720      	adds	r7, #32
 80037ba:	46bd      	mov	sp, r7
 80037bc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80037c0:	080042e8 	.word	0x080042e8
 80037c4:	00f42400 	.word	0x00f42400

080037c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01a      	beq.n	80038de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c6:	d10a      	bne.n	80038de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	605a      	str	r2, [r3, #4]
  }
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af02      	add	r7, sp, #8
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800391c:	f7fd fab8 	bl	8000e90 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b08      	cmp	r3, #8
 800392e:	d10e      	bne.n	800394e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f82c 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e022      	b.n	8003994 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b04      	cmp	r3, #4
 800395a:	d10e      	bne.n	800397a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800395c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f816 	bl	800399c <UART_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e00c      	b.n	8003994 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ac:	e062      	b.n	8003a74 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d05e      	beq.n	8003a74 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b6:	f7fd fa6b 	bl	8000e90 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d302      	bcc.n	80039cc <UART_WaitOnFlagUntilTimeout+0x30>
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11d      	bne.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039da:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e045      	b.n	8003a94 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02e      	beq.n	8003a74 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a24:	d126      	bne.n	8003a74 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a2e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a3e:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e00f      	b.n	8003a94 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69da      	ldr	r2, [r3, #28]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d08d      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_UARTEx_DisableFifoMode+0x16>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e027      	b.n	8003b02 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2224      	movs	r2, #36	; 0x24
 8003abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ae0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e02d      	b.n	8003b82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2224      	movs	r2, #36	; 0x24
 8003b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f850 	bl	8003c08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e02d      	b.n	8003bfe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2224      	movs	r2, #36	; 0x24
 8003bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f812 	bl	8003c08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b089      	sub	sp, #36	; 0x24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003c10:	4a2f      	ldr	r2, [pc, #188]	; (8003cd0 <UARTEx_SetNbDataToProcess+0xc8>)
 8003c12:	f107 0314 	add.w	r3, r7, #20
 8003c16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c1a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003c1e:	4a2d      	ldr	r2, [pc, #180]	; (8003cd4 <UARTEx_SetNbDataToProcess+0xcc>)
 8003c20:	f107 030c 	add.w	r3, r7, #12
 8003c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c28:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c44:	e03d      	b.n	8003cc2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c46:	2308      	movs	r3, #8
 8003c48:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	0e5b      	lsrs	r3, r3, #25
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	0f5b      	lsrs	r3, r3, #29
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003c6e:	7fbb      	ldrb	r3, [r7, #30]
 8003c70:	7f3a      	ldrb	r2, [r7, #28]
 8003c72:	f107 0120 	add.w	r1, r7, #32
 8003c76:	440a      	add	r2, r1
 8003c78:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	7f3a      	ldrb	r2, [r7, #28]
 8003c82:	f107 0120 	add.w	r1, r7, #32
 8003c86:	440a      	add	r2, r1
 8003c88:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003c8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003c98:	7ffb      	ldrb	r3, [r7, #31]
 8003c9a:	7f7a      	ldrb	r2, [r7, #29]
 8003c9c:	f107 0120 	add.w	r1, r7, #32
 8003ca0:	440a      	add	r2, r1
 8003ca2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	7f7a      	ldrb	r2, [r7, #29]
 8003cac:	f107 0120 	add.w	r1, r7, #32
 8003cb0:	440a      	add	r2, r1
 8003cb2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003cb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003cc2:	bf00      	nop
 8003cc4:	3724      	adds	r7, #36	; 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	08004290 	.word	0x08004290
 8003cd4:	08004298 	.word	0x08004298

08003cd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cd8:	b084      	sub	sp, #16
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	f107 001c 	add.w	r0, r7, #28
 8003ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d122      	bne.n	8003d36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d105      	bne.n	8003d2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa30 	bl	8004190 <USB_CoreReset>
 8003d30:	4603      	mov	r3, r0
 8003d32:	73fb      	strb	r3, [r7, #15]
 8003d34:	e01a      	b.n	8003d6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa24 	bl	8004190 <USB_CoreReset>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8003d5e:	e005      	b.n	8003d6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d78:	b004      	add	sp, #16
 8003d7a:	4770      	bx	lr

08003d7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f023 0201 	bic.w	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	460b      	mov	r3, r1
 8003da8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d106      	bne.n	8003dca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60da      	str	r2, [r3, #12]
 8003dc8:	e00b      	b.n	8003de2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	60da      	str	r2, [r3, #12]
 8003ddc:	e001      	b.n	8003de2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e003      	b.n	8003dea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003de2:	2032      	movs	r0, #50	; 0x32
 8003de4:	f7fd f860 	bl	8000ea8 <HAL_Delay>

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003df4:	b084      	sub	sp, #16
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	e009      	b.n	8003e28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	3340      	adds	r3, #64	; 0x40
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	2200      	movs	r2, #0
 8003e20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	3301      	adds	r3, #1
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	2b0e      	cmp	r3, #14
 8003e2c:	d9f2      	bls.n	8003e14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d11c      	bne.n	8003e6e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e42:	f043 0302 	orr.w	r3, r3, #2
 8003e46:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e005      	b.n	8003e7a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e80:	461a      	mov	r2, r3
 8003e82:	2300      	movs	r3, #0
 8003e84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e94:	461a      	mov	r2, r3
 8003e96:	680b      	ldr	r3, [r1, #0]
 8003e98:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e9a:	2103      	movs	r1, #3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f93d 	bl	800411c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ea2:	2110      	movs	r1, #16
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f8f1 	bl	800408c <USB_FlushTxFifo>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f90f 	bl	80040d8 <USB_FlushRxFifo>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2300      	movs	r3, #0
 8003eda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ee8:	2300      	movs	r3, #0
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	e043      	b.n	8003f76 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f04:	d118      	bne.n	8003f38 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	e013      	b.n	8003f4a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e008      	b.n	8003f4a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f44:	461a      	mov	r2, r3
 8003f46:	2300      	movs	r3, #0
 8003f48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f56:	461a      	mov	r2, r3
 8003f58:	2300      	movs	r3, #0
 8003f5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	3301      	adds	r3, #1
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d3b7      	bcc.n	8003eee <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	e043      	b.n	800400c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f9a:	d118      	bne.n	8003fce <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	015a      	lsls	r2, r3, #5
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e013      	b.n	8003fe0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	e008      	b.n	8003fe0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2300      	movs	r3, #0
 8003fde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fec:	461a      	mov	r2, r3
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	461a      	mov	r2, r3
 8004000:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004004:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	3301      	adds	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	429a      	cmp	r2, r3
 8004012:	d3b7      	bcc.n	8003f84 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004026:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004034:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f043 0210 	orr.w	r2, r3, #16
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <USB_DevInit+0x294>)
 8004048:	4313      	orrs	r3, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800404e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f043 0208 	orr.w	r2, r3, #8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d107      	bne.n	8004076 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004076:	7dfb      	ldrb	r3, [r7, #23]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004082:	b004      	add	sp, #16
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	803c3800 	.word	0x803c3800

0800408c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	019b      	lsls	r3, r3, #6
 800409e:	f043 0220 	orr.w	r2, r3, #32
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3301      	adds	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a09      	ldr	r2, [pc, #36]	; (80040d4 <USB_FlushTxFifo+0x48>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d901      	bls.n	80040b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e006      	b.n	80040c6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d0f0      	beq.n	80040a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	00030d40 	.word	0x00030d40

080040d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2210      	movs	r2, #16
 80040e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3301      	adds	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4a09      	ldr	r2, [pc, #36]	; (8004118 <USB_FlushRxFifo+0x40>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d901      	bls.n	80040fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e006      	b.n	800410a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b10      	cmp	r3, #16
 8004106:	d0f0      	beq.n	80040ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	00030d40 	.word	0x00030d40

0800411c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800413c:	4313      	orrs	r3, r2
 800413e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004168:	f023 0303 	bic.w	r3, r3, #3
 800416c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800417c:	f043 0302 	orr.w	r3, r3, #2
 8004180:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <USB_CoreReset+0x64>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e01b      	b.n	80041e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	daf2      	bge.n	800419c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f043 0201 	orr.w	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3301      	adds	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <USB_CoreReset+0x64>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e006      	b.n	80041e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d0f0      	beq.n	80041c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	00030d40 	.word	0x00030d40

080041f8 <__libc_init_array>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4e0d      	ldr	r6, [pc, #52]	; (8004230 <__libc_init_array+0x38>)
 80041fc:	4c0d      	ldr	r4, [pc, #52]	; (8004234 <__libc_init_array+0x3c>)
 80041fe:	1ba4      	subs	r4, r4, r6
 8004200:	10a4      	asrs	r4, r4, #2
 8004202:	2500      	movs	r5, #0
 8004204:	42a5      	cmp	r5, r4
 8004206:	d109      	bne.n	800421c <__libc_init_array+0x24>
 8004208:	4e0b      	ldr	r6, [pc, #44]	; (8004238 <__libc_init_array+0x40>)
 800420a:	4c0c      	ldr	r4, [pc, #48]	; (800423c <__libc_init_array+0x44>)
 800420c:	f000 f820 	bl	8004250 <_init>
 8004210:	1ba4      	subs	r4, r4, r6
 8004212:	10a4      	asrs	r4, r4, #2
 8004214:	2500      	movs	r5, #0
 8004216:	42a5      	cmp	r5, r4
 8004218:	d105      	bne.n	8004226 <__libc_init_array+0x2e>
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004220:	4798      	blx	r3
 8004222:	3501      	adds	r5, #1
 8004224:	e7ee      	b.n	8004204 <__libc_init_array+0xc>
 8004226:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800422a:	4798      	blx	r3
 800422c:	3501      	adds	r5, #1
 800422e:	e7f2      	b.n	8004216 <__libc_init_array+0x1e>
 8004230:	08004308 	.word	0x08004308
 8004234:	08004308 	.word	0x08004308
 8004238:	08004308 	.word	0x08004308
 800423c:	0800430c 	.word	0x0800430c

08004240 <memset>:
 8004240:	4402      	add	r2, r0
 8004242:	4603      	mov	r3, r0
 8004244:	4293      	cmp	r3, r2
 8004246:	d100      	bne.n	800424a <memset+0xa>
 8004248:	4770      	bx	lr
 800424a:	f803 1b01 	strb.w	r1, [r3], #1
 800424e:	e7f9      	b.n	8004244 <memset+0x4>

08004250 <_init>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr

0800425c <_fini>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	bf00      	nop
 8004260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004262:	bc08      	pop	{r3}
 8004264:	469e      	mov	lr, r3
 8004266:	4770      	bx	lr
