
NUCLEO_L4R5ZI_MPI_demoV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005ca0  08005ca0  00015ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d2c  08005d2c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d34  08005d34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d34  08005d34  00015d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d38  08005d38  00015d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027d8  20000010  08005d4c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200027e8  08005d4c  000227e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120ca  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023a1  00000000  00000000  0003210a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  000344b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e58  00000000  00000000  00035420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a2c7  00000000  00000000  00036278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c1be  00000000  00000000  0006053f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102259  00000000  00000000  0006c6fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016e956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a4  00000000  00000000  0016e9d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005c88 	.word	0x08005c88

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	08005c88 	.word	0x08005c88

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295
 800021c:	f04f 30ff 	movne.w	r0, #4294967295
 8000220:	f000 b972 	b.w	8000508 <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9e08      	ldr	r6, [sp, #32]
 8000242:	4604      	mov	r4, r0
 8000244:	4688      	mov	r8, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d14b      	bne.n	80002e2 <__udivmoddi4+0xa6>
 800024a:	428a      	cmp	r2, r1
 800024c:	4615      	mov	r5, r2
 800024e:	d967      	bls.n	8000320 <__udivmoddi4+0xe4>
 8000250:	fab2 f282 	clz	r2, r2
 8000254:	b14a      	cbz	r2, 800026a <__udivmoddi4+0x2e>
 8000256:	f1c2 0720 	rsb	r7, r2, #32
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	fa20 f707 	lsr.w	r7, r0, r7
 8000262:	4095      	lsls	r5, r2
 8000264:	ea47 0803 	orr.w	r8, r7, r3
 8000268:	4094      	lsls	r4, r2
 800026a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026e:	0c23      	lsrs	r3, r4, #16
 8000270:	fbb8 f7fe 	udiv	r7, r8, lr
 8000274:	fa1f fc85 	uxth.w	ip, r5
 8000278:	fb0e 8817 	mls	r8, lr, r7, r8
 800027c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000280:	fb07 f10c 	mul.w	r1, r7, ip
 8000284:	4299      	cmp	r1, r3
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x60>
 8000288:	18eb      	adds	r3, r5, r3
 800028a:	f107 30ff 	add.w	r0, r7, #4294967295
 800028e:	f080 811b 	bcs.w	80004c8 <__udivmoddi4+0x28c>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 8118 	bls.w	80004c8 <__udivmoddi4+0x28c>
 8000298:	3f02      	subs	r7, #2
 800029a:	442b      	add	r3, r5
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b0:	45a4      	cmp	ip, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x8c>
 80002b4:	192c      	adds	r4, r5, r4
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x290>
 80002be:	45a4      	cmp	ip, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x290>
 80002c4:	3802      	subs	r0, #2
 80002c6:	442c      	add	r4, r5
 80002c8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002cc:	eba4 040c 	sub.w	r4, r4, ip
 80002d0:	2700      	movs	r7, #0
 80002d2:	b11e      	cbz	r6, 80002dc <__udivmoddi4+0xa0>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c6 4300 	strd	r4, r3, [r6]
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xbe>
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f000 80eb 	beq.w	80004c2 <__udivmoddi4+0x286>
 80002ec:	2700      	movs	r7, #0
 80002ee:	e9c6 0100 	strd	r0, r1, [r6]
 80002f2:	4638      	mov	r0, r7
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f783 	clz	r7, r3
 80002fe:	2f00      	cmp	r7, #0
 8000300:	d147      	bne.n	8000392 <__udivmoddi4+0x156>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd0>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2c4>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4698      	mov	r8, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa0>
 800031a:	e9c6 4800 	strd	r4, r8, [r6]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa0>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xe8>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 808f 	bne.w	800044c <__udivmoddi4+0x210>
 800032e:	1b49      	subs	r1, r1, r5
 8000330:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000334:	fa1f f885 	uxth.w	r8, r5
 8000338:	2701      	movs	r7, #1
 800033a:	fbb1 fcfe 	udiv	ip, r1, lr
 800033e:	0c23      	lsrs	r3, r4, #16
 8000340:	fb0e 111c 	mls	r1, lr, ip, r1
 8000344:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000348:	fb08 f10c 	mul.w	r1, r8, ip
 800034c:	4299      	cmp	r1, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x124>
 8000350:	18eb      	adds	r3, r5, r3
 8000352:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x122>
 8000358:	4299      	cmp	r1, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2bc>
 800035e:	4684      	mov	ip, r0
 8000360:	1a59      	subs	r1, r3, r1
 8000362:	b2a3      	uxth	r3, r4
 8000364:	fbb1 f0fe 	udiv	r0, r1, lr
 8000368:	fb0e 1410 	mls	r4, lr, r0, r1
 800036c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000370:	fb08 f800 	mul.w	r8, r8, r0
 8000374:	45a0      	cmp	r8, r4
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x14c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x14a>
 8000380:	45a0      	cmp	r8, r4
 8000382:	f200 80b6 	bhi.w	80004f2 <__udivmoddi4+0x2b6>
 8000386:	4618      	mov	r0, r3
 8000388:	eba4 0408 	sub.w	r4, r4, r8
 800038c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000390:	e79f      	b.n	80002d2 <__udivmoddi4+0x96>
 8000392:	f1c7 0c20 	rsb	ip, r7, #32
 8000396:	40bb      	lsls	r3, r7
 8000398:	fa22 fe0c 	lsr.w	lr, r2, ip
 800039c:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a0:	fa01 f407 	lsl.w	r4, r1, r7
 80003a4:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a8:	fa21 f30c 	lsr.w	r3, r1, ip
 80003ac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b0:	4325      	orrs	r5, r4
 80003b2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b6:	0c2c      	lsrs	r4, r5, #16
 80003b8:	fb08 3319 	mls	r3, r8, r9, r3
 80003bc:	fa1f fa8e 	uxth.w	sl, lr
 80003c0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c4:	fb09 f40a 	mul.w	r4, r9, sl
 80003c8:	429c      	cmp	r4, r3
 80003ca:	fa02 f207 	lsl.w	r2, r2, r7
 80003ce:	fa00 f107 	lsl.w	r1, r0, r7
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b0>
 80003d4:	eb1e 0303 	adds.w	r3, lr, r3
 80003d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003dc:	f080 8087 	bcs.w	80004ee <__udivmoddi4+0x2b2>
 80003e0:	429c      	cmp	r4, r3
 80003e2:	f240 8084 	bls.w	80004ee <__udivmoddi4+0x2b2>
 80003e6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ea:	4473      	add	r3, lr
 80003ec:	1b1b      	subs	r3, r3, r4
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f4:	fb08 3310 	mls	r3, r8, r0, r3
 80003f8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003fc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000400:	45a2      	cmp	sl, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1da>
 8000404:	eb1e 0404 	adds.w	r4, lr, r4
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295
 800040c:	d26b      	bcs.n	80004e6 <__udivmoddi4+0x2aa>
 800040e:	45a2      	cmp	sl, r4
 8000410:	d969      	bls.n	80004e6 <__udivmoddi4+0x2aa>
 8000412:	3802      	subs	r0, #2
 8000414:	4474      	add	r4, lr
 8000416:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041a:	fba0 8902 	umull	r8, r9, r0, r2
 800041e:	eba4 040a 	sub.w	r4, r4, sl
 8000422:	454c      	cmp	r4, r9
 8000424:	46c2      	mov	sl, r8
 8000426:	464b      	mov	r3, r9
 8000428:	d354      	bcc.n	80004d4 <__udivmoddi4+0x298>
 800042a:	d051      	beq.n	80004d0 <__udivmoddi4+0x294>
 800042c:	2e00      	cmp	r6, #0
 800042e:	d069      	beq.n	8000504 <__udivmoddi4+0x2c8>
 8000430:	ebb1 050a 	subs.w	r5, r1, sl
 8000434:	eb64 0403 	sbc.w	r4, r4, r3
 8000438:	fa04 fc0c 	lsl.w	ip, r4, ip
 800043c:	40fd      	lsrs	r5, r7
 800043e:	40fc      	lsrs	r4, r7
 8000440:	ea4c 0505 	orr.w	r5, ip, r5
 8000444:	e9c6 5400 	strd	r5, r4, [r6]
 8000448:	2700      	movs	r7, #0
 800044a:	e747      	b.n	80002dc <__udivmoddi4+0xa0>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f703 	lsr.w	r7, r0, r3
 8000454:	4095      	lsls	r5, r2
 8000456:	fa01 f002 	lsl.w	r0, r1, r2
 800045a:	fa21 f303 	lsr.w	r3, r1, r3
 800045e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000462:	4338      	orrs	r0, r7
 8000464:	0c01      	lsrs	r1, r0, #16
 8000466:	fbb3 f7fe 	udiv	r7, r3, lr
 800046a:	fa1f f885 	uxth.w	r8, r5
 800046e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb07 f308 	mul.w	r3, r7, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x256>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f107 3cff 	add.w	ip, r7, #4294967295
 8000488:	d22f      	bcs.n	80004ea <__udivmoddi4+0x2ae>
 800048a:	428b      	cmp	r3, r1
 800048c:	d92d      	bls.n	80004ea <__udivmoddi4+0x2ae>
 800048e:	3f02      	subs	r7, #2
 8000490:	4429      	add	r1, r5
 8000492:	1acb      	subs	r3, r1, r3
 8000494:	b281      	uxth	r1, r0
 8000496:	fbb3 f0fe 	udiv	r0, r3, lr
 800049a:	fb0e 3310 	mls	r3, lr, r0, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb00 f308 	mul.w	r3, r0, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x27e>
 80004aa:	1869      	adds	r1, r5, r1
 80004ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b0:	d217      	bcs.n	80004e2 <__udivmoddi4+0x2a6>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d915      	bls.n	80004e2 <__udivmoddi4+0x2a6>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4429      	add	r1, r5
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c0:	e73b      	b.n	800033a <__udivmoddi4+0xfe>
 80004c2:	4637      	mov	r7, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e709      	b.n	80002dc <__udivmoddi4+0xa0>
 80004c8:	4607      	mov	r7, r0
 80004ca:	e6e7      	b.n	800029c <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x8c>
 80004d0:	4541      	cmp	r1, r8
 80004d2:	d2ab      	bcs.n	800042c <__udivmoddi4+0x1f0>
 80004d4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d8:	eb69 020e 	sbc.w	r2, r9, lr
 80004dc:	3801      	subs	r0, #1
 80004de:	4613      	mov	r3, r2
 80004e0:	e7a4      	b.n	800042c <__udivmoddi4+0x1f0>
 80004e2:	4660      	mov	r0, ip
 80004e4:	e7e9      	b.n	80004ba <__udivmoddi4+0x27e>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e795      	b.n	8000416 <__udivmoddi4+0x1da>
 80004ea:	4667      	mov	r7, ip
 80004ec:	e7d1      	b.n	8000492 <__udivmoddi4+0x256>
 80004ee:	4681      	mov	r9, r0
 80004f0:	e77c      	b.n	80003ec <__udivmoddi4+0x1b0>
 80004f2:	3802      	subs	r0, #2
 80004f4:	442c      	add	r4, r5
 80004f6:	e747      	b.n	8000388 <__udivmoddi4+0x14c>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	442b      	add	r3, r5
 80004fe:	e72f      	b.n	8000360 <__udivmoddi4+0x124>
 8000500:	4638      	mov	r0, r7
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xda>
 8000504:	4637      	mov	r7, r6
 8000506:	e6e9      	b.n	80002dc <__udivmoddi4+0xa0>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b5b0      	push	{r4, r5, r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fe6a 	bl	80011ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f8cb 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 fa71 	bl	8000a00 <MX_GPIO_Init>
  MX_DMA_Init();
 800051e:	f000 fa45 	bl	80009ac <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000522:	f000 f943 	bl	80007ac <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000526:	f000 f98d 	bl	8000844 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800052a:	f000 fa15 	bl	8000958 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800052e:	f000 f9d5 	bl	80008dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Send something to UART
	strcpy((char*)uart_buf, "Testing MPI Demo\r\n");
 8000532:	4a54      	ldr	r2, [pc, #336]	; (8000684 <main+0x178>)
 8000534:	4b54      	ldr	r3, [pc, #336]	; (8000688 <main+0x17c>)
 8000536:	4615      	mov	r5, r2
 8000538:	461c      	mov	r4, r3
 800053a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800053c:	6028      	str	r0, [r5, #0]
 800053e:	6069      	str	r1, [r5, #4]
 8000540:	60aa      	str	r2, [r5, #8]
 8000542:	60eb      	str	r3, [r5, #12]
 8000544:	8823      	ldrh	r3, [r4, #0]
 8000546:	78a2      	ldrb	r2, [r4, #2]
 8000548:	822b      	strh	r3, [r5, #16]
 800054a:	4613      	mov	r3, r2
 800054c:	74ab      	strb	r3, [r5, #18]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, strlen((char*)uart_buf), 160);
 800054e:	484d      	ldr	r0, [pc, #308]	; (8000684 <main+0x178>)
 8000550:	f7ff fe54 	bl	80001fc <strlen>
 8000554:	4603      	mov	r3, r0
 8000556:	b29a      	uxth	r2, r3
 8000558:	23a0      	movs	r3, #160	; 0xa0
 800055a:	494a      	ldr	r1, [pc, #296]	; (8000684 <main+0x178>)
 800055c:	484b      	ldr	r0, [pc, #300]	; (800068c <main+0x180>)
 800055e:	f004 f985 	bl	800486c <HAL_UART_Transmit>

	//start DMA
	HAL_UART_Receive_DMA(&hlpuart1, UART1_rxBuffer, 160);
 8000562:	22a0      	movs	r2, #160	; 0xa0
 8000564:	494a      	ldr	r1, [pc, #296]	; (8000690 <main+0x184>)
 8000566:	4849      	ldr	r0, [pc, #292]	; (800068c <main+0x180>)
 8000568:	f004 fa18 	bl	800499c <HAL_UART_Receive_DMA>

	//check to see if status reg
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000572:	4848      	ldr	r0, [pc, #288]	; (8000694 <main+0x188>)
 8000574:	f001 fbe6 	bl	8001d44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 8000578:	2364      	movs	r3, #100	; 0x64
 800057a:	2201      	movs	r2, #1
 800057c:	4946      	ldr	r1, [pc, #280]	; (8000698 <main+0x18c>)
 800057e:	4847      	ldr	r0, [pc, #284]	; (800069c <main+0x190>)
 8000580:	f003 fabf 	bl	8003b02 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 8000584:	2364      	movs	r3, #100	; 0x64
 8000586:	2201      	movs	r2, #1
 8000588:	4945      	ldr	r1, [pc, #276]	; (80006a0 <main+0x194>)
 800058a:	4844      	ldr	r0, [pc, #272]	; (800069c <main+0x190>)
 800058c:	f003 fc27 	bl	8003dde <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000596:	483f      	ldr	r0, [pc, #252]	; (8000694 <main+0x188>)
 8000598:	f001 fbd4 	bl	8001d44 <HAL_GPIO_WritePin>

	//write enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a2:	483c      	ldr	r0, [pc, #240]	; (8000694 <main+0x188>)
 80005a4:	f001 fbce 	bl	8001d44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_WREN, 1, 100);
 80005a8:	2364      	movs	r3, #100	; 0x64
 80005aa:	2201      	movs	r2, #1
 80005ac:	493d      	ldr	r1, [pc, #244]	; (80006a4 <main+0x198>)
 80005ae:	483b      	ldr	r0, [pc, #236]	; (800069c <main+0x190>)
 80005b0:	f003 faa7 	bl	8003b02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ba:	4836      	ldr	r0, [pc, #216]	; (8000694 <main+0x188>)
 80005bc:	f001 fbc2 	bl	8001d44 <HAL_GPIO_WritePin>

	//check to see if status reg
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c6:	4833      	ldr	r0, [pc, #204]	; (8000694 <main+0x188>)
 80005c8:	f001 fbbc 	bl	8001d44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	2201      	movs	r2, #1
 80005d0:	4931      	ldr	r1, [pc, #196]	; (8000698 <main+0x18c>)
 80005d2:	4832      	ldr	r0, [pc, #200]	; (800069c <main+0x190>)
 80005d4:	f003 fa95 	bl	8003b02 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	2201      	movs	r2, #1
 80005dc:	4930      	ldr	r1, [pc, #192]	; (80006a0 <main+0x194>)
 80005de:	482f      	ldr	r0, [pc, #188]	; (800069c <main+0x190>)
 80005e0:	f003 fbfd 	bl	8003dde <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ea:	482a      	ldr	r0, [pc, #168]	; (8000694 <main+0x188>)
 80005ec:	f001 fbaa 	bl	8001d44 <HAL_GPIO_WritePin>

	//erase chip (16 pages)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f6:	4827      	ldr	r0, [pc, #156]	; (8000694 <main+0x188>)
 80005f8:	f001 fba4 	bl	8001d44 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_ERCP, 1, 100);
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	2201      	movs	r2, #1
 8000600:	4929      	ldr	r1, [pc, #164]	; (80006a8 <main+0x19c>)
 8000602:	4826      	ldr	r0, [pc, #152]	; (800069c <main+0x190>)
 8000604:	f003 fa7d 	bl	8003b02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	4821      	ldr	r0, [pc, #132]	; (8000694 <main+0x188>)
 8000610:	f001 fb98 	bl	8001d44 <HAL_GPIO_WritePin>

	uint8_t wip = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	71fb      	strb	r3, [r7, #7]
	while (wip)	//wait will erase is done
 8000618:	e01c      	b.n	8000654 <main+0x148>
	{

		// Read status register
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000620:	481c      	ldr	r0, [pc, #112]	; (8000694 <main+0x188>)
 8000622:	f001 fb8f 	bl	8001d44 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	2201      	movs	r2, #1
 800062a:	491b      	ldr	r1, [pc, #108]	; (8000698 <main+0x18c>)
 800062c:	481b      	ldr	r0, [pc, #108]	; (800069c <main+0x190>)
 800062e:	f003 fa68 	bl	8003b02 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	2201      	movs	r2, #1
 8000636:	491a      	ldr	r1, [pc, #104]	; (80006a0 <main+0x194>)
 8000638:	4818      	ldr	r0, [pc, #96]	; (800069c <main+0x190>)
 800063a:	f003 fbd0 	bl	8003dde <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000644:	4813      	ldr	r0, [pc, #76]	; (8000694 <main+0x188>)
 8000646:	f001 fb7d 	bl	8001d44 <HAL_GPIO_WritePin>

		// Mask out WIP bit
		wip = spiRX_buf[0] & 0b00000001;
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <main+0x194>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	71fb      	strb	r3, [r7, #7]
	while (wip)	//wait will erase is done
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1df      	bne.n	800061a <main+0x10e>
	}


	//turn on frame transmitting TC
	UART1_txBuffer[0] = 0x54;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <main+0x1a0>)
 800065c:	2254      	movs	r2, #84	; 0x54
 800065e:	701a      	strb	r2, [r3, #0]
	UART1_txBuffer[1] = 0x43;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <main+0x1a0>)
 8000662:	2243      	movs	r2, #67	; 0x43
 8000664:	705a      	strb	r2, [r3, #1]
	UART1_txBuffer[2] = 0x9;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <main+0x1a0>)
 8000668:	2209      	movs	r2, #9
 800066a:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)UART1_txBuffer, strlen((char*)UART1_txBuffer), 160);
 800066c:	480f      	ldr	r0, [pc, #60]	; (80006ac <main+0x1a0>)
 800066e:	f7ff fdc5 	bl	80001fc <strlen>
 8000672:	4603      	mov	r3, r0
 8000674:	b29a      	uxth	r2, r3
 8000676:	23a0      	movs	r3, #160	; 0xa0
 8000678:	490c      	ldr	r1, [pc, #48]	; (80006ac <main+0x1a0>)
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <main+0x180>)
 800067c:	f004 f8f6 	bl	800486c <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0x174>
 8000682:	bf00      	nop
 8000684:	200025f4 	.word	0x200025f4
 8000688:	08005ca0 	.word	0x08005ca0
 800068c:	20002694 	.word	0x20002694
 8000690:	2000002c 	.word	0x2000002c
 8000694:	48000c00 	.word	0x48000c00
 8000698:	08005cc8 	.word	0x08005cc8
 800069c:	20002780 	.word	0x20002780
 80006a0:	2000027c 	.word	0x2000027c
 80006a4:	08005cc6 	.word	0x08005cc6
 80006a8:	08005cc7 	.word	0x08005cc7
 80006ac:	200000cc 	.word	0x200000cc

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0bc      	sub	sp, #240	; 0xf0
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006ba:	2244      	movs	r2, #68	; 0x44
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 fada 	bl	8005c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2294      	movs	r2, #148	; 0x94
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f005 facc 	bl	8005c78 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006e0:	2000      	movs	r0, #0
 80006e2:	f001 fcc9 	bl	8002078 <HAL_PWREx_ControlVoltageScaling>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80006ec:	f000 fb6e 	bl	8000dcc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006f0:	2322      	movs	r3, #34	; 0x22
 80006f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006fe:	2301      	movs	r3, #1
 8000700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2340      	movs	r3, #64	; 0x40
 8000706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 800071c:	231e      	movs	r3, #30
 800071e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fd61 	bl	8002200 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000744:	f000 fb42 	bl	8000dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800075e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000768:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800076c:	2105      	movs	r1, #5
 800076e:	4618      	mov	r0, r3
 8000770:	f002 f96c 	bl	8002a4c <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800077a:	f000 fb27 	bl	8000dcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 800077e:	f242 0324 	movw	r3, #8228	; 0x2024
 8000782:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000784:	2300      	movs	r3, #0
 8000786:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000788:	2300      	movs	r3, #0
 800078a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800078c:	2300      	movs	r3, #0
 800078e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fc0a 	bl	8002fac <HAL_RCCEx_PeriphCLKConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800079e:	f000 fb15 	bl	8000dcc <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	37f0      	adds	r7, #240	; 0xf0
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <MX_LPUART1_UART_Init+0x94>)
 80007b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007b8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80007bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007f4:	4811      	ldr	r0, [pc, #68]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 80007f6:	f003 ffe9 	bl	80047cc <HAL_UART_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000800:	f000 fae4 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 8000808:	f004 fe9d 	bl	8005546 <HAL_UARTEx_SetTxFifoThreshold>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000812:	f000 fadb 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 800081a:	f004 fed2 	bl	80055c2 <HAL_UARTEx_SetRxFifoThreshold>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000824:	f000 fad2 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_LPUART1_UART_Init+0x90>)
 800082a:	f004 fe53 	bl	80054d4 <HAL_UARTEx_DisableFifoMode>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000834:	f000 faca 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20002694 	.word	0x20002694
 8000840:	40008000 	.word	0x40008000

08000844 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 800084a:	4a23      	ldr	r2, [pc, #140]	; (80008d8 <MX_USART3_UART_Init+0x94>)
 800084c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088c:	4811      	ldr	r0, [pc, #68]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 800088e:	f003 ff9d 	bl	80047cc <HAL_UART_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000898:	f000 fa98 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 80008a0:	f004 fe51 	bl	8005546 <HAL_UARTEx_SetTxFifoThreshold>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008aa:	f000 fa8f 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4808      	ldr	r0, [pc, #32]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 80008b2:	f004 fe86 	bl	80055c2 <HAL_UARTEx_SetRxFifoThreshold>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008bc:	f000 fa86 	bl	8000dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 80008c2:	f004 fe07 	bl	80054d4 <HAL_UARTEx_DisableFifoMode>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008cc:	f000 fa7e 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20002160 	.word	0x20002160
 80008d8:	40004800 	.word	0x40004800

080008dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_SPI1_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_SPI1_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_SPI1_Init+0x74>)
 80008e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI1_Init+0x74>)
 80008f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_SPI1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI1_Init+0x74>)
 800090a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI1_Init+0x74>)
 8000912:	2208      	movs	r2, #8
 8000914:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_SPI1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI1_Init+0x74>)
 800092a:	2207      	movs	r2, #7
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI1_Init+0x74>)
 8000936:	2208      	movs	r2, #8
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_SPI1_Init+0x74>)
 800093c:	f003 f83e 	bl	80039bc <HAL_SPI_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000946:	f000 fa41 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20002780 	.word	0x20002780
 8000954:	40013000 	.word	0x40013000

08000958 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800095e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000962:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000966:	2206      	movs	r2, #6
 8000968:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800096c:	2202      	movs	r2, #2
 800096e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000972:	2201      	movs	r2, #1
 8000974:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000984:	2201      	movs	r2, #1
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000990:	2201      	movs	r2, #1
 8000992:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000996:	f001 fa07 	bl	8001da8 <HAL_PCD_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80009a0:	f000 fa14 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200021ec 	.word	0x200021ec

080009ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_DMA_Init+0x50>)
 80009b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009b6:	4a11      	ldr	r2, [pc, #68]	; (80009fc <MX_DMA_Init+0x50>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6493      	str	r3, [r2, #72]	; 0x48
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_DMA_Init+0x50>)
 80009c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_DMA_Init+0x50>)
 80009cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <MX_DMA_Init+0x50>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6493      	str	r3, [r2, #72]	; 0x48
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_DMA_Init+0x50>)
 80009d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	200b      	movs	r0, #11
 80009e8:	f000 fd71 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009ec:	200b      	movs	r0, #11
 80009ee:	f000 fd8a 	bl	8001506 <HAL_NVIC_EnableIRQ>

}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	; 0x30
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b52      	ldr	r3, [pc, #328]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a51      	ldr	r2, [pc, #324]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b4f      	ldr	r3, [pc, #316]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	4b4c      	ldr	r3, [pc, #304]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a4b      	ldr	r2, [pc, #300]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b49      	ldr	r3, [pc, #292]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b46      	ldr	r3, [pc, #280]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a45      	ldr	r2, [pc, #276]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b43      	ldr	r3, [pc, #268]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b40      	ldr	r3, [pc, #256]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a3f      	ldr	r2, [pc, #252]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b3d      	ldr	r3, [pc, #244]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a39      	ldr	r2, [pc, #228]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b37      	ldr	r3, [pc, #220]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8e:	4b34      	ldr	r3, [pc, #208]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a33      	ldr	r2, [pc, #204]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <MX_GPIO_Init+0x160>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000aa6:	f001 fb9b 	bl	80021e0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ab0:	482c      	ldr	r0, [pc, #176]	; (8000b64 <MX_GPIO_Init+0x164>)
 8000ab2:	f001 f947 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000abc:	482a      	ldr	r0, [pc, #168]	; (8000b68 <MX_GPIO_Init+0x168>)
 8000abe:	f001 f941 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2120      	movs	r1, #32
 8000ac6:	4829      	ldr	r0, [pc, #164]	; (8000b6c <MX_GPIO_Init+0x16c>)
 8000ac8:	f001 f93c 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad2:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <MX_GPIO_Init+0x170>)
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4824      	ldr	r0, [pc, #144]	; (8000b74 <MX_GPIO_Init+0x174>)
 8000ae2:	f000 ff9d 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ae6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4819      	ldr	r0, [pc, #100]	; (8000b64 <MX_GPIO_Init+0x164>)
 8000b00:	f000 ff8e 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4812      	ldr	r0, [pc, #72]	; (8000b68 <MX_GPIO_Init+0x168>)
 8000b1e:	f000 ff7f 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b22:	2320      	movs	r3, #32
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <MX_GPIO_Init+0x16c>)
 8000b3a:	f000 ff71 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_GPIO_Init+0x16c>)
 8000b52:	f000 ff65 	bl	8001a20 <HAL_GPIO_Init>

}
 8000b56:	bf00      	nop
 8000b58:	3730      	adds	r7, #48	; 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48000400 	.word	0x48000400
 8000b68:	48000c00 	.word	0x48000c00
 8000b6c:	48001800 	.word	0x48001800
 8000b70:	10110000 	.word	0x10110000
 8000b74:	48000800 	.word	0x48000800

08000b78 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	//toggle red to show
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000b80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b84:	4881      	ldr	r0, [pc, #516]	; (8000d8c <HAL_UART_RxCpltCallback+0x214>)
 8000b86:	f001 f8f5 	bl	8001d74 <HAL_GPIO_TogglePin>

	//return what i just got cuz idk whats heppening :/
	HAL_UART_Transmit(hlpuart1, (uint8_t *)UART1_rxBuffer, strlen((char*)UART1_rxBuffer), 160);
 8000b8a:	4881      	ldr	r0, [pc, #516]	; (8000d90 <HAL_UART_RxCpltCallback+0x218>)
 8000b8c:	f7ff fb36 	bl	80001fc <strlen>
 8000b90:	4603      	mov	r3, r0
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	23a0      	movs	r3, #160	; 0xa0
 8000b96:	497e      	ldr	r1, [pc, #504]	; (8000d90 <HAL_UART_RxCpltCallback+0x218>)
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f003 fe67 	bl	800486c <HAL_UART_Transmit>


	//if its a data frame
	if(UART1_rxBuffer[0] == MPI_sync_bytes[0] && UART1_rxBuffer[1] == MPI_sync_bytes[1] && UART1_rxBuffer[2] == MPI_sync_bytes[2] && UART1_rxBuffer[3] == MPI_sync_bytes[3]){
 8000b9e:	4b7c      	ldr	r3, [pc, #496]	; (8000d90 <HAL_UART_RxCpltCallback+0x218>)
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	4b7c      	ldr	r3, [pc, #496]	; (8000d94 <HAL_UART_RxCpltCallback+0x21c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	f040 80e6 	bne.w	8000d78 <HAL_UART_RxCpltCallback+0x200>
 8000bac:	4b78      	ldr	r3, [pc, #480]	; (8000d90 <HAL_UART_RxCpltCallback+0x218>)
 8000bae:	785a      	ldrb	r2, [r3, #1]
 8000bb0:	4b78      	ldr	r3, [pc, #480]	; (8000d94 <HAL_UART_RxCpltCallback+0x21c>)
 8000bb2:	785b      	ldrb	r3, [r3, #1]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	f040 80df 	bne.w	8000d78 <HAL_UART_RxCpltCallback+0x200>
 8000bba:	4b75      	ldr	r3, [pc, #468]	; (8000d90 <HAL_UART_RxCpltCallback+0x218>)
 8000bbc:	789a      	ldrb	r2, [r3, #2]
 8000bbe:	4b75      	ldr	r3, [pc, #468]	; (8000d94 <HAL_UART_RxCpltCallback+0x21c>)
 8000bc0:	789b      	ldrb	r3, [r3, #2]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f040 80d8 	bne.w	8000d78 <HAL_UART_RxCpltCallback+0x200>
 8000bc8:	4b71      	ldr	r3, [pc, #452]	; (8000d90 <HAL_UART_RxCpltCallback+0x218>)
 8000bca:	78da      	ldrb	r2, [r3, #3]
 8000bcc:	4b71      	ldr	r3, [pc, #452]	; (8000d94 <HAL_UART_RxCpltCallback+0x21c>)
 8000bce:	78db      	ldrb	r3, [r3, #3]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	f040 80ce 	bne.w	8000d72 <HAL_UART_RxCpltCallback+0x1fa>

		//calculate address array from page number
		if(page_number == 3){
 8000bd6:	4b70      	ldr	r3, [pc, #448]	; (8000d98 <HAL_UART_RxCpltCallback+0x220>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d109      	bne.n	8000bf2 <HAL_UART_RxCpltCallback+0x7a>
			page_number++;
 8000bde:	4b6e      	ldr	r3, [pc, #440]	; (8000d98 <HAL_UART_RxCpltCallback+0x220>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a6c      	ldr	r2, [pc, #432]	; (8000d98 <HAL_UART_RxCpltCallback+0x220>)
 8000be6:	6013      	str	r3, [r2, #0]
			page_number--;
 8000be8:	4b6b      	ldr	r3, [pc, #428]	; (8000d98 <HAL_UART_RxCpltCallback+0x220>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	4a6a      	ldr	r2, [pc, #424]	; (8000d98 <HAL_UART_RxCpltCallback+0x220>)
 8000bf0:	6013      	str	r3, [r2, #0]
		}
//		uint8_t d = 0xff;
//		uint8_t e = 0x

		address[2] = ((page_number*256) & (uint32_t)0x0000ff);
 8000bf2:	4b6a      	ldr	r3, [pc, #424]	; (8000d9c <HAL_UART_RxCpltCallback+0x224>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	709a      	strb	r2, [r3, #2]
		address[1] = ((page_number*256) & (uint32_t)0x00ff00)>>8;
 8000bf8:	4b67      	ldr	r3, [pc, #412]	; (8000d98 <HAL_UART_RxCpltCallback+0x220>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b66      	ldr	r3, [pc, #408]	; (8000d9c <HAL_UART_RxCpltCallback+0x224>)
 8000c04:	705a      	strb	r2, [r3, #1]
		address[0] = ((page_number*256) & (uint32_t)0xff0000)>>16;
 8000c06:	4b64      	ldr	r3, [pc, #400]	; (8000d98 <HAL_UART_RxCpltCallback+0x220>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	0c1b      	lsrs	r3, r3, #16
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b62      	ldr	r3, [pc, #392]	; (8000d9c <HAL_UART_RxCpltCallback+0x224>)
 8000c12:	701a      	strb	r2, [r3, #0]
//		for(int i = 0; i < 18; i++){
//			MPI_housekeeping[i] = UART1_rxBuffer[4+i];
//		}

		//toggle led blue to show
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	485d      	ldr	r0, [pc, #372]	; (8000d8c <HAL_UART_RxCpltCallback+0x214>)
 8000c18:	f001 f8ac 	bl	8001d74 <HAL_GPIO_TogglePin>

		//store into MPI buffer
		for(int i = 0; i<160; i++){
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e0a2      	b.n	8000d68 <HAL_UART_RxCpltCallback+0x1f0>
			//if buffer if full (time to write a full page)
			if(flash_buffer_capacity == 255){
 8000c22:	4b5f      	ldr	r3, [pc, #380]	; (8000da0 <HAL_UART_RxCpltCallback+0x228>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2bff      	cmp	r3, #255	; 0xff
 8000c28:	f040 8088 	bne.w	8000d3c <HAL_UART_RxCpltCallback+0x1c4>

*/


				//write enable
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c32:	485c      	ldr	r0, [pc, #368]	; (8000da4 <HAL_UART_RxCpltCallback+0x22c>)
 8000c34:	f001 f886 	bl	8001d44 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_WREN, 1, 100);
 8000c38:	2364      	movs	r3, #100	; 0x64
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	495a      	ldr	r1, [pc, #360]	; (8000da8 <HAL_UART_RxCpltCallback+0x230>)
 8000c3e:	485b      	ldr	r0, [pc, #364]	; (8000dac <HAL_UART_RxCpltCallback+0x234>)
 8000c40:	f002 ff5f 	bl	8003b02 <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c4a:	4856      	ldr	r0, [pc, #344]	; (8000da4 <HAL_UART_RxCpltCallback+0x22c>)
 8000c4c:	f001 f87a 	bl	8001d44 <HAL_GPIO_WritePin>

				//write data
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	//cs low
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c56:	4853      	ldr	r0, [pc, #332]	; (8000da4 <HAL_UART_RxCpltCallback+0x22c>)
 8000c58:	f001 f874 	bl	8001d44 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi1, (uint8_t*)&FLASH_WRITE, 1, 100);	//write opcode
 8000c5c:	2364      	movs	r3, #100	; 0x64
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4953      	ldr	r1, [pc, #332]	; (8000db0 <HAL_UART_RxCpltCallback+0x238>)
 8000c62:	4852      	ldr	r0, [pc, #328]	; (8000dac <HAL_UART_RxCpltCallback+0x234>)
 8000c64:	f002 ff4d 	bl	8003b02 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi1, (uint8_t*)&address, 3, 100);			//write address
 8000c68:	2364      	movs	r3, #100	; 0x64
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	494b      	ldr	r1, [pc, #300]	; (8000d9c <HAL_UART_RxCpltCallback+0x224>)
 8000c6e:	484f      	ldr	r0, [pc, #316]	; (8000dac <HAL_UART_RxCpltCallback+0x234>)
 8000c70:	f002 ff47 	bl	8003b02 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi1, (uint8_t*)&flash_buffer, 256, 100);//data
 8000c74:	2364      	movs	r3, #100	; 0x64
 8000c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c7a:	494e      	ldr	r1, [pc, #312]	; (8000db4 <HAL_UART_RxCpltCallback+0x23c>)
 8000c7c:	484b      	ldr	r0, [pc, #300]	; (8000dac <HAL_UART_RxCpltCallback+0x234>)
 8000c7e:	f002 ff40 	bl	8003b02 <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c88:	4846      	ldr	r0, [pc, #280]	; (8000da4 <HAL_UART_RxCpltCallback+0x22c>)
 8000c8a:	f001 f85b 	bl	8001d44 <HAL_GPIO_WritePin>

				//wait till write is done
				uint8_t wip = 1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	72fb      	strb	r3, [r7, #11]
				while (wip)
 8000c92:	e01c      	b.n	8000cce <HAL_UART_RxCpltCallback+0x156>
				{
					// Read status register
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c9a:	4842      	ldr	r0, [pc, #264]	; (8000da4 <HAL_UART_RxCpltCallback+0x22c>)
 8000c9c:	f001 f852 	bl	8001d44 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_STATREG1, 1, 100);	//opcode for read
 8000ca0:	2364      	movs	r3, #100	; 0x64
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4944      	ldr	r1, [pc, #272]	; (8000db8 <HAL_UART_RxCpltCallback+0x240>)
 8000ca6:	4841      	ldr	r0, [pc, #260]	; (8000dac <HAL_UART_RxCpltCallback+0x234>)
 8000ca8:	f002 ff2b 	bl	8003b02 <HAL_SPI_Transmit>
					HAL_SPI_Receive(&hspi1, (uint8_t *)spiRX_buf, 1, 100);	//Receive data
 8000cac:	2364      	movs	r3, #100	; 0x64
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4942      	ldr	r1, [pc, #264]	; (8000dbc <HAL_UART_RxCpltCallback+0x244>)
 8000cb2:	483e      	ldr	r0, [pc, #248]	; (8000dac <HAL_UART_RxCpltCallback+0x234>)
 8000cb4:	f003 f893 	bl	8003dde <HAL_SPI_Receive>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbe:	4839      	ldr	r0, [pc, #228]	; (8000da4 <HAL_UART_RxCpltCallback+0x22c>)
 8000cc0:	f001 f840 	bl	8001d44 <HAL_GPIO_WritePin>

					// Mask out WIP bit
					wip = spiRX_buf[0] & 0b00000001;
 8000cc4:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <HAL_UART_RxCpltCallback+0x244>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	72fb      	strb	r3, [r7, #11]
				while (wip)
 8000cce:	7afb      	ldrb	r3, [r7, #11]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1df      	bne.n	8000c94 <HAL_UART_RxCpltCallback+0x11c>
				}

				page_number+=1;
 8000cd4:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <HAL_UART_RxCpltCallback+0x220>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a2f      	ldr	r2, [pc, #188]	; (8000d98 <HAL_UART_RxCpltCallback+0x220>)
 8000cdc:	6013      	str	r3, [r2, #0]

				if(page_number == 15){	//once 15 pages have been written
 8000cde:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <HAL_UART_RxCpltCallback+0x220>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b0f      	cmp	r3, #15
 8000ce4:	d127      	bne.n	8000d36 <HAL_UART_RxCpltCallback+0x1be>

					read_address[0] = (0*0xff)& 0x000000ff;
 8000ce6:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <HAL_UART_RxCpltCallback+0x248>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
					read_address[1] = (0*0xff)& 0x0000ff00;
 8000cec:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <HAL_UART_RxCpltCallback+0x248>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	705a      	strb	r2, [r3, #1]
					read_address[2] = (0*0xff)& 0x00ff0000;
 8000cf2:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <HAL_UART_RxCpltCallback+0x248>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	709a      	strb	r2, [r3, #2]

					//read the data back
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);	//cs low
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfe:	4829      	ldr	r0, [pc, #164]	; (8000da4 <HAL_UART_RxCpltCallback+0x22c>)
 8000d00:	f001 f820 	bl	8001d44 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, (uint8_t *)&FLASH_READ, 1, 100);	//opcode for read
 8000d04:	2364      	movs	r3, #100	; 0x64
 8000d06:	2201      	movs	r2, #1
 8000d08:	492e      	ldr	r1, [pc, #184]	; (8000dc4 <HAL_UART_RxCpltCallback+0x24c>)
 8000d0a:	4828      	ldr	r0, [pc, #160]	; (8000dac <HAL_UART_RxCpltCallback+0x234>)
 8000d0c:	f002 fef9 	bl	8003b02 <HAL_SPI_Transmit>
					HAL_SPI_Transmit(&hspi1, (uint8_t*)&read_address, 3, 100);			//address to read
 8000d10:	2364      	movs	r3, #100	; 0x64
 8000d12:	2203      	movs	r2, #3
 8000d14:	492a      	ldr	r1, [pc, #168]	; (8000dc0 <HAL_UART_RxCpltCallback+0x248>)
 8000d16:	4825      	ldr	r0, [pc, #148]	; (8000dac <HAL_UART_RxCpltCallback+0x234>)
 8000d18:	f002 fef3 	bl	8003b02 <HAL_SPI_Transmit>
					HAL_SPI_Receive(&hspi1, (uint8_t *)mpi_read_buffer, 7650, 100);	// recive data (should read 7650 bytes of data (30 pages))
 8000d1c:	2364      	movs	r3, #100	; 0x64
 8000d1e:	f641 52e2 	movw	r2, #7650	; 0x1de2
 8000d22:	4929      	ldr	r1, [pc, #164]	; (8000dc8 <HAL_UART_RxCpltCallback+0x250>)
 8000d24:	4821      	ldr	r0, [pc, #132]	; (8000dac <HAL_UART_RxCpltCallback+0x234>)
 8000d26:	f003 f85a 	bl	8003dde <HAL_SPI_Receive>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d30:	481c      	ldr	r0, [pc, #112]	; (8000da4 <HAL_UART_RxCpltCallback+0x22c>)
 8000d32:	f001 f807 	bl	8001d44 <HAL_GPIO_WritePin>

				}
				flash_buffer_capacity = 0;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <HAL_UART_RxCpltCallback+0x228>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
			}

			if(flash_buffer_capacity < 255){	//buffer not full yet...
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_UART_RxCpltCallback+0x228>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2bff      	cmp	r3, #255	; 0xff
 8000d42:	d00e      	beq.n	8000d62 <HAL_UART_RxCpltCallback+0x1ea>
				flash_buffer[flash_buffer_capacity] = UART1_rxBuffer[i];
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <HAL_UART_RxCpltCallback+0x228>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <HAL_UART_RxCpltCallback+0x218>)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	781a      	ldrb	r2, [r3, #0]
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_UART_RxCpltCallback+0x23c>)
 8000d54:	545a      	strb	r2, [r3, r1]
				flash_buffer_capacity++;
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_UART_RxCpltCallback+0x228>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_UART_RxCpltCallback+0x228>)
 8000d60:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i<160; i++){
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3301      	adds	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2b9f      	cmp	r3, #159	; 0x9f
 8000d6c:	f77f af59 	ble.w	8000c22 <HAL_UART_RxCpltCallback+0xaa>
 8000d70:	e002      	b.n	8000d78 <HAL_UART_RxCpltCallback+0x200>
		}
	}



	else if(UART1_rxBuffer[0] == 0x54 && UART1_rxBuffer[1] == 0x43){
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <HAL_UART_RxCpltCallback+0x218>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b54      	cmp	r3, #84	; 0x54
//	for(int i = 0; i<160; i++)
//		UART1_rxBuffer[i] = 0;



    HAL_UART_Receive_DMA(hlpuart1, UART1_rxBuffer, 160);
 8000d78:	22a0      	movs	r2, #160	; 0xa0
 8000d7a:	4905      	ldr	r1, [pc, #20]	; (8000d90 <HAL_UART_RxCpltCallback+0x218>)
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f003 fe0d 	bl	800499c <HAL_UART_Receive_DMA>
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	48000400 	.word	0x48000400
 8000d90:	2000002c 	.word	0x2000002c
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000270 	.word	0x20000270
 8000d9c:	20000274 	.word	0x20000274
 8000da0:	2000026c 	.word	0x2000026c
 8000da4:	48000c00 	.word	0x48000c00
 8000da8:	08005cc6 	.word	0x08005cc6
 8000dac:	20002780 	.word	0x20002780
 8000db0:	08005cc5 	.word	0x08005cc5
 8000db4:	2000016c 	.word	0x2000016c
 8000db8:	08005cc8 	.word	0x08005cc8
 8000dbc:	2000027c 	.word	0x2000027c
 8000dc0:	20000278 	.word	0x20000278
 8000dc4:	08005cc4 	.word	0x08005cc4
 8000dc8:	2000037c 	.word	0x2000037c

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <Error_Handler+0x6>

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_MspInit+0x44>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <HAL_MspInit+0x44>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6613      	str	r3, [r2, #96]	; 0x60
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_MspInit+0x44>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_MspInit+0x44>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <HAL_MspInit+0x44>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_MspInit+0x44>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a44      	ldr	r2, [pc, #272]	; (8000f4c <HAL_UART_MspInit+0x130>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d154      	bne.n	8000ee8 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e3e:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <HAL_UART_MspInit+0x134>)
 8000e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e42:	4a43      	ldr	r2, [pc, #268]	; (8000f50 <HAL_UART_MspInit+0x134>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e4a:	4b41      	ldr	r3, [pc, #260]	; (8000f50 <HAL_UART_MspInit+0x134>)
 8000e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e56:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <HAL_UART_MspInit+0x134>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a3d      	ldr	r2, [pc, #244]	; (8000f50 <HAL_UART_MspInit+0x134>)
 8000e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b3b      	ldr	r3, [pc, #236]	; (8000f50 <HAL_UART_MspInit+0x134>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000e6e:	f001 f9b7 	bl	80021e0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000e72:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e84:	2308      	movs	r3, #8
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4831      	ldr	r0, [pc, #196]	; (8000f54 <HAL_UART_MspInit+0x138>)
 8000e90:	f000 fdc6 	bl	8001a20 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000e94:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <HAL_UART_MspInit+0x13c>)
 8000e96:	4a31      	ldr	r2, [pc, #196]	; (8000f5c <HAL_UART_MspInit+0x140>)
 8000e98:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <HAL_UART_MspInit+0x13c>)
 8000e9c:	2222      	movs	r2, #34	; 0x22
 8000e9e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <HAL_UART_MspInit+0x13c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <HAL_UART_MspInit+0x13c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eac:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <HAL_UART_MspInit+0x13c>)
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb2:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <HAL_UART_MspInit+0x13c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <HAL_UART_MspInit+0x13c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <HAL_UART_MspInit+0x13c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <HAL_UART_MspInit+0x13c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000eca:	4823      	ldr	r0, [pc, #140]	; (8000f58 <HAL_UART_MspInit+0x13c>)
 8000ecc:	f000 fb36 	bl	800153c <HAL_DMA_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000ed6:	f7ff ff79 	bl	8000dcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <HAL_UART_MspInit+0x13c>)
 8000ede:	679a      	str	r2, [r3, #120]	; 0x78
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <HAL_UART_MspInit+0x13c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ee6:	e02d      	b.n	8000f44 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <HAL_UART_MspInit+0x144>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d128      	bne.n	8000f44 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_UART_MspInit+0x134>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <HAL_UART_MspInit+0x134>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efc:	6593      	str	r3, [r2, #88]	; 0x58
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_UART_MspInit+0x134>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_UART_MspInit+0x134>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <HAL_UART_MspInit+0x134>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_UART_MspInit+0x134>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f34:	2307      	movs	r3, #7
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4809      	ldr	r0, [pc, #36]	; (8000f64 <HAL_UART_MspInit+0x148>)
 8000f40:	f000 fd6e 	bl	8001a20 <HAL_GPIO_Init>
}
 8000f44:	bf00      	nop
 8000f46:	3730      	adds	r7, #48	; 0x30
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40008000 	.word	0x40008000
 8000f50:	40021000 	.word	0x40021000
 8000f54:	48001800 	.word	0x48001800
 8000f58:	20002720 	.word	0x20002720
 8000f5c:	40020008 	.word	0x40020008
 8000f60:	40004800 	.word	0x40004800
 8000f64:	48000c00 	.word	0x48000c00

08000f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_SPI_MspInit+0x7c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d128      	bne.n	8000fdc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_SPI_MspInit+0x80>)
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8e:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <HAL_SPI_MspInit+0x80>)
 8000f90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f94:	6613      	str	r3, [r2, #96]	; 0x60
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_SPI_MspInit+0x80>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_SPI_MspInit+0x80>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <HAL_SPI_MspInit+0x80>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_SPI_MspInit+0x80>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fba:	23e0      	movs	r3, #224	; 0xe0
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd8:	f000 fd22 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fdc:	bf00      	nop
 8000fde:	3728      	adds	r7, #40	; 0x28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40013000 	.word	0x40013000
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800100c:	d154      	bne.n	80010b8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <HAL_PCD_MspInit+0xd4>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a2b      	ldr	r2, [pc, #172]	; (80010c0 <HAL_PCD_MspInit+0xd4>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b29      	ldr	r3, [pc, #164]	; (80010c0 <HAL_PCD_MspInit+0xd4>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001026:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001038:	230a      	movs	r3, #10
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f000 fceb 	bl	8001a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800104a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f000 fcdd 	bl	8001a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_PCD_MspInit+0xd4>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <HAL_PCD_MspInit+0xd4>)
 800106c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_PCD_MspInit+0xd4>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_PCD_MspInit+0xd4>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d114      	bne.n	80010b4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_PCD_MspInit+0xd4>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <HAL_PCD_MspInit+0xd4>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6593      	str	r3, [r2, #88]	; 0x58
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_PCD_MspInit+0xd4>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80010a2:	f001 f88d 	bl	80021c0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_PCD_MspInit+0xd4>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <HAL_PCD_MspInit+0xd4>)
 80010ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010b0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010b2:	e001      	b.n	80010b8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80010b4:	f001 f884 	bl	80021c0 <HAL_PWREx_EnableVddUSB>
}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40021000 	.word	0x40021000

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001110:	f000 f8c0 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <DMA1_Channel1_IRQHandler+0x10>)
 800111e:	f000 fb30 	bl	8001782 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20002720 	.word	0x20002720

0800112c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <SystemInit+0x64>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a16      	ldr	r2, [pc, #88]	; (8001190 <SystemInit+0x64>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <SystemInit+0x68>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a13      	ldr	r2, [pc, #76]	; (8001194 <SystemInit+0x68>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <SystemInit+0x68>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <SystemInit+0x68>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <SystemInit+0x68>)
 8001158:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800115c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001160:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <SystemInit+0x68>)
 8001164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001168:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <SystemInit+0x68>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a09      	ldr	r2, [pc, #36]	; (8001194 <SystemInit+0x68>)
 8001170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <SystemInit+0x68>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SystemInit+0x64>)
 800117e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001182:	609a      	str	r2, [r3, #8]
#endif
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00
 8001194:	40021000 	.word	0x40021000

08001198 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800119c:	f7ff ffc6 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011a2:	e003      	b.n	80011ac <LoopCopyDataInit>

080011a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011aa:	3104      	adds	r1, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011ac:	480a      	ldr	r0, [pc, #40]	; (80011d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80011b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011b4:	d3f6      	bcc.n	80011a4 <CopyDataInit>
	ldr	r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011b8:	e002      	b.n	80011c0 <LoopFillZerobss>

080011ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011bc:	f842 3b04 	str.w	r3, [r2], #4

080011c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <LoopForever+0x16>)
	cmp	r2, r3
 80011c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011c4:	d3f9      	bcc.n	80011ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c6:	f004 fd33 	bl	8005c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ca:	f7ff f99f 	bl	800050c <main>

080011ce <LoopForever>:

LoopForever:
    b LoopForever
 80011ce:	e7fe      	b.n	80011ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011d0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80011d4:	08005d3c 	.word	0x08005d3c
	ldr	r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011dc:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80011e0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80011e4:	200027e8 	.word	0x200027e8

080011e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_IRQHandler>

080011ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 f95f 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fa:	2000      	movs	r0, #0
 80011fc:	f000 f80e 	bl	800121c <HAL_InitTick>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	e001      	b.n	8001210 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800120c:	f7ff fde2 	bl	8000dd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001210:	79fb      	ldrb	r3, [r7, #7]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_InitTick+0x6c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d023      	beq.n	8001278 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <HAL_InitTick+0x70>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_InitTick+0x6c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f96b 	bl	8001522 <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10f      	bne.n	8001272 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d809      	bhi.n	800126c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 f935 	bl	80014ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_InitTick+0x74>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e007      	b.n	800127c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e004      	b.n	800127c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	e001      	b.n	800127c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000000c 	.word	0x2000000c
 800128c:	20000004 	.word	0x20000004
 8001290:	20000008 	.word	0x20000008

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000000c 	.word	0x2000000c
 80012b8:	200027e4 	.word	0x200027e4

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200027e4 	.word	0x200027e4

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_Delay+0x40>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2000000c 	.word	0x2000000c

08001318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db0b      	blt.n	80013a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <__NVIC_EnableIRQ+0x38>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	2001      	movs	r0, #1
 800139e:	fa00 f202 	lsl.w	r2, r0, r2
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	; (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff8e 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff29 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff3e 	bl	8001360 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff8e 	bl	800140c <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5d 	bl	80013b8 <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff31 	bl	800137c <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e08d      	b.n	800166a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4b47      	ldr	r3, [pc, #284]	; (8001674 <HAL_DMA_Init+0x138>)
 8001556:	429a      	cmp	r2, r3
 8001558:	d80f      	bhi.n	800157a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	4b45      	ldr	r3, [pc, #276]	; (8001678 <HAL_DMA_Init+0x13c>)
 8001562:	4413      	add	r3, r2
 8001564:	4a45      	ldr	r2, [pc, #276]	; (800167c <HAL_DMA_Init+0x140>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	009a      	lsls	r2, r3, #2
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a42      	ldr	r2, [pc, #264]	; (8001680 <HAL_DMA_Init+0x144>)
 8001576:	641a      	str	r2, [r3, #64]	; 0x40
 8001578:	e00e      	b.n	8001598 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	4b40      	ldr	r3, [pc, #256]	; (8001684 <HAL_DMA_Init+0x148>)
 8001582:	4413      	add	r3, r2
 8001584:	4a3d      	ldr	r2, [pc, #244]	; (800167c <HAL_DMA_Init+0x140>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	009a      	lsls	r2, r3, #2
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a3c      	ldr	r2, [pc, #240]	; (8001688 <HAL_DMA_Init+0x14c>)
 8001596:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f9b6 	bl	800195c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f8:	d102      	bne.n	8001600 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001614:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d010      	beq.n	8001640 <HAL_DMA_Init+0x104>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b04      	cmp	r3, #4
 8001624:	d80c      	bhi.n	8001640 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f9d6 	bl	80019d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	e008      	b.n	8001652 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40020407 	.word	0x40020407
 8001678:	bffdfff8 	.word	0xbffdfff8
 800167c:	cccccccd 	.word	0xcccccccd
 8001680:	40020000 	.word	0x40020000
 8001684:	bffdfbf8 	.word	0xbffdfbf8
 8001688:	40020400 	.word	0x40020400

0800168c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_DMA_Start_IT+0x20>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e066      	b.n	800177a <HAL_DMA_Start_IT+0xee>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d155      	bne.n	800176c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2202      	movs	r2, #2
 80016c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0201 	bic.w	r2, r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 f8fb 	bl	80018e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d008      	beq.n	8001704 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 020e 	orr.w	r2, r2, #14
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e00f      	b.n	8001724 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0204 	bic.w	r2, r2, #4
 8001712:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 020a 	orr.w	r2, r2, #10
 8001722:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001740:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001758:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0201 	orr.w	r2, r2, #1
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e005      	b.n	8001778 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001774:	2302      	movs	r3, #2
 8001776:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001778:	7dfb      	ldrb	r3, [r7, #23]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f003 031c 	and.w	r3, r3, #28
 80017a2:	2204      	movs	r2, #4
 80017a4:	409a      	lsls	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d026      	beq.n	80017fc <HAL_DMA_IRQHandler+0x7a>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d021      	beq.n	80017fc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0320 	and.w	r3, r3, #32
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d107      	bne.n	80017d6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0204 	bic.w	r2, r2, #4
 80017d4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f003 021c 	and.w	r2, r3, #28
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2104      	movs	r1, #4
 80017e4:	fa01 f202 	lsl.w	r2, r1, r2
 80017e8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d071      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80017fa:	e06c      	b.n	80018d6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f003 031c 	and.w	r3, r3, #28
 8001804:	2202      	movs	r2, #2
 8001806:	409a      	lsls	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d02e      	beq.n	800186e <HAL_DMA_IRQHandler+0xec>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d029      	beq.n	800186e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0320 	and.w	r3, r3, #32
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10b      	bne.n	8001840 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 020a 	bic.w	r2, r2, #10
 8001836:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001844:	f003 021c 	and.w	r2, r3, #28
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	2102      	movs	r1, #2
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	2b00      	cmp	r3, #0
 8001862:	d038      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800186c:	e033      	b.n	80018d6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f003 031c 	and.w	r3, r3, #28
 8001876:	2208      	movs	r2, #8
 8001878:	409a      	lsls	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4013      	ands	r3, r2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d02a      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x156>
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d025      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 020e 	bic.w	r2, r2, #14
 800189a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	f003 021c 	and.w	r2, r3, #28
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	2101      	movs	r1, #1
 80018aa:	fa01 f202 	lsl.w	r2, r1, r2
 80018ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d004      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
}
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018f6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001908:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f003 021c 	and.w	r2, r3, #28
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f202 	lsl.w	r2, r1, r2
 800191c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b10      	cmp	r3, #16
 800192c:	d108      	bne.n	8001940 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800193e:	e007      	b.n	8001950 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	60da      	str	r2, [r3, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800196c:	429a      	cmp	r2, r3
 800196e:	d80a      	bhi.n	8001986 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800197c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6493      	str	r3, [r2, #72]	; 0x48
 8001984:	e007      	b.n	8001996 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	009a      	lsls	r2, r3, #2
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001990:	4413      	add	r3, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	3b08      	subs	r3, #8
 800199e:	4a0c      	ldr	r2, [pc, #48]	; (80019d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80019a0:	fba2 2303 	umull	r2, r3, r2, r3
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80019ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2201      	movs	r2, #1
 80019b6:	409a      	lsls	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40020407 	.word	0x40020407
 80019cc:	4002081c 	.word	0x4002081c
 80019d0:	cccccccd 	.word	0xcccccccd
 80019d4:	40020880 	.word	0x40020880

080019d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	461a      	mov	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019fa:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2201      	movs	r2, #1
 8001a06:	409a      	lsls	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	1000823f 	.word	0x1000823f
 8001a1c:	40020940 	.word	0x40020940

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2e:	e166      	b.n	8001cfe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8158 	beq.w	8001cf8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d00b      	beq.n	8001a68 <HAL_GPIO_Init+0x48>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a5c:	2b11      	cmp	r3, #17
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b12      	cmp	r3, #18
 8001a66:	d130      	bne.n	8001aca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f003 0201 	and.w	r2, r3, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0xea>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b12      	cmp	r3, #18
 8001b08:	d123      	bne.n	8001b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	6939      	ldr	r1, [r7, #16]
 8001b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0203 	and.w	r2, r3, #3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80b2 	beq.w	8001cf8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b94:	4b61      	ldr	r3, [pc, #388]	; (8001d1c <HAL_GPIO_Init+0x2fc>)
 8001b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b98:	4a60      	ldr	r2, [pc, #384]	; (8001d1c <HAL_GPIO_Init+0x2fc>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6613      	str	r3, [r2, #96]	; 0x60
 8001ba0:	4b5e      	ldr	r3, [pc, #376]	; (8001d1c <HAL_GPIO_Init+0x2fc>)
 8001ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bac:	4a5c      	ldr	r2, [pc, #368]	; (8001d20 <HAL_GPIO_Init+0x300>)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	220f      	movs	r2, #15
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bd6:	d02b      	beq.n	8001c30 <HAL_GPIO_Init+0x210>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_GPIO_Init+0x304>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d025      	beq.n	8001c2c <HAL_GPIO_Init+0x20c>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a51      	ldr	r2, [pc, #324]	; (8001d28 <HAL_GPIO_Init+0x308>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d01f      	beq.n	8001c28 <HAL_GPIO_Init+0x208>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a50      	ldr	r2, [pc, #320]	; (8001d2c <HAL_GPIO_Init+0x30c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d019      	beq.n	8001c24 <HAL_GPIO_Init+0x204>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a4f      	ldr	r2, [pc, #316]	; (8001d30 <HAL_GPIO_Init+0x310>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_GPIO_Init+0x200>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a4e      	ldr	r2, [pc, #312]	; (8001d34 <HAL_GPIO_Init+0x314>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00d      	beq.n	8001c1c <HAL_GPIO_Init+0x1fc>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a4d      	ldr	r2, [pc, #308]	; (8001d38 <HAL_GPIO_Init+0x318>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d007      	beq.n	8001c18 <HAL_GPIO_Init+0x1f8>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a4c      	ldr	r2, [pc, #304]	; (8001d3c <HAL_GPIO_Init+0x31c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_GPIO_Init+0x1f4>
 8001c10:	2307      	movs	r3, #7
 8001c12:	e00e      	b.n	8001c32 <HAL_GPIO_Init+0x212>
 8001c14:	2308      	movs	r3, #8
 8001c16:	e00c      	b.n	8001c32 <HAL_GPIO_Init+0x212>
 8001c18:	2306      	movs	r3, #6
 8001c1a:	e00a      	b.n	8001c32 <HAL_GPIO_Init+0x212>
 8001c1c:	2305      	movs	r3, #5
 8001c1e:	e008      	b.n	8001c32 <HAL_GPIO_Init+0x212>
 8001c20:	2304      	movs	r3, #4
 8001c22:	e006      	b.n	8001c32 <HAL_GPIO_Init+0x212>
 8001c24:	2303      	movs	r3, #3
 8001c26:	e004      	b.n	8001c32 <HAL_GPIO_Init+0x212>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e002      	b.n	8001c32 <HAL_GPIO_Init+0x212>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <HAL_GPIO_Init+0x212>
 8001c30:	2300      	movs	r3, #0
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	f002 0203 	and.w	r2, r2, #3
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	4093      	lsls	r3, r2
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c42:	4937      	ldr	r1, [pc, #220]	; (8001d20 <HAL_GPIO_Init+0x300>)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	3302      	adds	r3, #2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c50:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <HAL_GPIO_Init+0x320>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c74:	4a32      	ldr	r2, [pc, #200]	; (8001d40 <HAL_GPIO_Init+0x320>)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c7a:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <HAL_GPIO_Init+0x320>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c9e:	4a28      	ldr	r2, [pc, #160]	; (8001d40 <HAL_GPIO_Init+0x320>)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ca4:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <HAL_GPIO_Init+0x320>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cc8:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_GPIO_Init+0x320>)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <HAL_GPIO_Init+0x320>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <HAL_GPIO_Init+0x320>)
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f47f ae91 	bne.w	8001a30 <HAL_GPIO_Init+0x10>
  }
}
 8001d0e:	bf00      	nop
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000
 8001d24:	48000400 	.word	0x48000400
 8001d28:	48000800 	.word	0x48000800
 8001d2c:	48000c00 	.word	0x48000c00
 8001d30:	48001000 	.word	0x48001000
 8001d34:	48001400 	.word	0x48001400
 8001d38:	48001800 	.word	0x48001800
 8001d3c:	48001c00 	.word	0x48001c00
 8001d40:	40010400 	.word	0x40010400

08001d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
 8001d50:	4613      	mov	r3, r2
 8001d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d54:	787b      	ldrb	r3, [r7, #1]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d60:	e002      	b.n	8001d68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43d9      	mvns	r1, r3
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	400b      	ands	r3, r1
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001daa:	b08f      	sub	sp, #60	; 0x3c
 8001dac:	af0a      	add	r7, sp, #40	; 0x28
 8001dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e116      	b.n	8001fe8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d106      	bne.n	8001dda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff f909 	bl	8000fec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 fcdb 	bl	80057b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	687e      	ldr	r6, [r7, #4]
 8001e06:	466d      	mov	r5, sp
 8001e08:	f106 0410 	add.w	r4, r6, #16
 8001e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e18:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e1c:	1d33      	adds	r3, r6, #4
 8001e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e20:	6838      	ldr	r0, [r7, #0]
 8001e22:	f003 fc75 	bl	8005710 <USB_CoreInit>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0d7      	b.n	8001fe8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fcc9 	bl	80057d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e04a      	b.n	8001ee0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	333d      	adds	r3, #61	; 0x3d
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	333c      	adds	r3, #60	; 0x3c
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	b298      	uxth	r0, r3
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	3342      	adds	r3, #66	; 0x42
 8001e86:	4602      	mov	r2, r0
 8001e88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	333f      	adds	r3, #63	; 0x3f
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	3344      	adds	r3, #68	; 0x44
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3348      	adds	r3, #72	; 0x48
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	1a9b      	subs	r3, r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3350      	adds	r3, #80	; 0x50
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	3301      	adds	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d3af      	bcc.n	8001e4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	e044      	b.n	8001f7a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	1a9b      	subs	r3, r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	3301      	adds	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d3b5      	bcc.n	8001ef0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	687e      	ldr	r6, [r7, #4]
 8001f8c:	466d      	mov	r5, sp
 8001f8e:	f106 0410 	add.w	r4, r6, #16
 8001f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fa2:	1d33      	adds	r3, r6, #4
 8001fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa6:	6838      	ldr	r0, [r7, #0]
 8001fa8:	f003 fc40 	bl	800582c <USB_DevInit>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e014      	b.n	8001fe8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d102      	bne.n	8001fdc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f80a 	bl	8001ff0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fdd0 	bl	8005b86 <USB_DevDisconnect>

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ff0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002022:	f043 0303 	orr.w	r3, r3, #3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800203c:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_PWREx_GetVoltageRange+0x3c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002048:	d102      	bne.n	8002050 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204e:	e00b      	b.n	8002068 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800205e:	d102      	bne.n	8002066 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002064:	e000      	b.n	8002068 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002066:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40007000 	.word	0x40007000

08002078 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d141      	bne.n	800210a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002086:	4b4b      	ldr	r3, [pc, #300]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800208e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002092:	d131      	bne.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002094:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800209a:	4a46      	ldr	r2, [pc, #280]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a4:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ac:	4a41      	ldr	r2, [pc, #260]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020b4:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2232      	movs	r2, #50	; 0x32
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	4a3f      	ldr	r2, [pc, #252]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	0c9b      	lsrs	r3, r3, #18
 80020c6:	3301      	adds	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ca:	e002      	b.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020d2:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020de:	d102      	bne.n	80020e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f2      	bne.n	80020cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020e6:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f2:	d158      	bne.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e057      	b.n	80021a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020fe:	4a2d      	ldr	r2, [pc, #180]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002104:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002108:	e04d      	b.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002110:	d141      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002112:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800211a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211e:	d131      	bne.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002120:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002126:	4a23      	ldr	r2, [pc, #140]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002130:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002138:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002140:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2232      	movs	r2, #50	; 0x32
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	0c9b      	lsrs	r3, r3, #18
 8002152:	3301      	adds	r3, #1
 8002154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002156:	e002      	b.n	800215e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3b01      	subs	r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216a:	d102      	bne.n	8002172 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f2      	bne.n	8002158 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217e:	d112      	bne.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e011      	b.n	80021a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002190:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002194:	e007      	b.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	40007000 	.word	0x40007000
 80021b8:	20000004 	.word	0x20000004
 80021bc:	431bde83 	.word	0x431bde83

080021c0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ce:	6053      	str	r3, [r2, #4]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40007000 	.word	0x40007000

080021e0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_PWREx_EnableVddIO2+0x1c>)
 80021ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ee:	6053      	str	r3, [r2, #4]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40007000 	.word	0x40007000

08002200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d102      	bne.n	8002214 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	f000 bc16 	b.w	8002a40 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002214:	4ba0      	ldr	r3, [pc, #640]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800221e:	4b9e      	ldr	r3, [pc, #632]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80e4 	beq.w	80023fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <HAL_RCC_OscConfig+0x4c>
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2b0c      	cmp	r3, #12
 8002240:	f040 808b 	bne.w	800235a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b01      	cmp	r3, #1
 8002248:	f040 8087 	bne.w	800235a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800224c:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_OscConfig+0x64>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e3ed      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1a      	ldr	r2, [r3, #32]
 8002268:	4b8b      	ldr	r3, [pc, #556]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d004      	beq.n	800227e <HAL_RCC_OscConfig+0x7e>
 8002274:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800227c:	e005      	b.n	800228a <HAL_RCC_OscConfig+0x8a>
 800227e:	4b86      	ldr	r3, [pc, #536]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228a:	4293      	cmp	r3, r2
 800228c:	d223      	bcs.n	80022d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fdc8 	bl	8002e28 <RCC_SetFlashLatencyFromMSIRange>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e3ce      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a2:	4b7d      	ldr	r3, [pc, #500]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7c      	ldr	r2, [pc, #496]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022a8:	f043 0308 	orr.w	r3, r3, #8
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4977      	ldr	r1, [pc, #476]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c0:	4b75      	ldr	r3, [pc, #468]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	4972      	ldr	r1, [pc, #456]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
 80022d4:	e025      	b.n	8002322 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d6:	4b70      	ldr	r3, [pc, #448]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6f      	ldr	r2, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b6d      	ldr	r3, [pc, #436]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	496a      	ldr	r1, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f4:	4b68      	ldr	r3, [pc, #416]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	4965      	ldr	r1, [pc, #404]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d109      	bne.n	8002322 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fd88 	bl	8002e28 <RCC_SetFlashLatencyFromMSIRange>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e38e      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002322:	f000 fcbf 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002326:	4601      	mov	r1, r0
 8002328:	4b5b      	ldr	r3, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	4a5a      	ldr	r2, [pc, #360]	; (800249c <HAL_RCC_OscConfig+0x29c>)
 8002334:	5cd3      	ldrb	r3, [r2, r3]
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	fa21 f303 	lsr.w	r3, r1, r3
 800233e:	4a58      	ldr	r2, [pc, #352]	; (80024a0 <HAL_RCC_OscConfig+0x2a0>)
 8002340:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002342:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <HAL_RCC_OscConfig+0x2a4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe ff68 	bl	800121c <HAL_InitTick>
 800234c:	4603      	mov	r3, r0
 800234e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d052      	beq.n	80023fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	e372      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d032      	beq.n	80023c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002362:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800236e:	f7fe ffa5 	bl	80012bc <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002376:	f7fe ffa1 	bl	80012bc <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e35b      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002388:	4b43      	ldr	r3, [pc, #268]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002394:	4b40      	ldr	r3, [pc, #256]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a3f      	ldr	r2, [pc, #252]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800239a:	f043 0308 	orr.w	r3, r3, #8
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	493a      	ldr	r1, [pc, #232]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b2:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	4935      	ldr	r1, [pc, #212]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
 80023c6:	e01a      	b.n	80023fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023c8:	4b33      	ldr	r3, [pc, #204]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a32      	ldr	r2, [pc, #200]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d4:	f7fe ff72 	bl	80012bc <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023dc:	f7fe ff6e 	bl	80012bc <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e328      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023ee:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1dc>
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d073      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d005      	beq.n	800241c <HAL_RCC_OscConfig+0x21c>
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d10e      	bne.n	8002434 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d10b      	bne.n	8002434 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d063      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d15f      	bne.n	80024f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e305      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x24c>
 800243e:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a15      	ldr	r2, [pc, #84]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e01d      	b.n	8002488 <HAL_RCC_OscConfig+0x288>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x270>
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800245c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0x288>
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a08      	ldr	r2, [pc, #32]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a05      	ldr	r2, [pc, #20]	; (8002498 <HAL_RCC_OscConfig+0x298>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01b      	beq.n	80024c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe ff14 	bl	80012bc <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002496:	e010      	b.n	80024ba <HAL_RCC_OscConfig+0x2ba>
 8002498:	40021000 	.word	0x40021000
 800249c:	08005ccc 	.word	0x08005ccc
 80024a0:	20000004 	.word	0x20000004
 80024a4:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7fe ff08 	bl	80012bc <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e2c2      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ba:	4baf      	ldr	r3, [pc, #700]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x2a8>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fef8 	bl	80012bc <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe fef4 	bl	80012bc <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e2ae      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024e2:	4ba5      	ldr	r3, [pc, #660]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2d0>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d060      	beq.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b04      	cmp	r3, #4
 8002502:	d005      	beq.n	8002510 <HAL_RCC_OscConfig+0x310>
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d119      	bne.n	800253e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d116      	bne.n	800253e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002510:	4b99      	ldr	r3, [pc, #612]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_OscConfig+0x328>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e28b      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b93      	ldr	r3, [pc, #588]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	4990      	ldr	r1, [pc, #576]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800253c:	e040      	b.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d023      	beq.n	800258e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002546:	4b8c      	ldr	r3, [pc, #560]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a8b      	ldr	r2, [pc, #556]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7fe feb3 	bl	80012bc <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255a:	f7fe feaf 	bl	80012bc <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e269      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256c:	4b82      	ldr	r3, [pc, #520]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4b7f      	ldr	r3, [pc, #508]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	497c      	ldr	r1, [pc, #496]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
 800258c:	e018      	b.n	80025c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b7a      	ldr	r3, [pc, #488]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a79      	ldr	r2, [pc, #484]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fe8f 	bl	80012bc <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7fe fe8b 	bl	80012bc <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e245      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b4:	4b70      	ldr	r3, [pc, #448]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d03c      	beq.n	8002646 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01c      	beq.n	800260e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d4:	4b68      	ldr	r3, [pc, #416]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80025d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025da:	4a67      	ldr	r2, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7fe fe6a 	bl	80012bc <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7fe fe66 	bl	80012bc <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e220      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025fe:	4b5e      	ldr	r3, [pc, #376]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ef      	beq.n	80025ec <HAL_RCC_OscConfig+0x3ec>
 800260c:	e01b      	b.n	8002646 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260e:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261e:	f7fe fe4d 	bl	80012bc <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002626:	f7fe fe49 	bl	80012bc <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e203      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002638:	4b4f      	ldr	r3, [pc, #316]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800263a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ef      	bne.n	8002626 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80a6 	beq.w	80027a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002658:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10d      	bne.n	8002680 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002664:	4b44      	ldr	r3, [pc, #272]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	4a43      	ldr	r2, [pc, #268]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800266a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266e:	6593      	str	r3, [r2, #88]	; 0x58
 8002670:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267c:	2301      	movs	r3, #1
 800267e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002680:	4b3e      	ldr	r3, [pc, #248]	; (800277c <HAL_RCC_OscConfig+0x57c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d118      	bne.n	80026be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800268c:	4b3b      	ldr	r3, [pc, #236]	; (800277c <HAL_RCC_OscConfig+0x57c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a3a      	ldr	r2, [pc, #232]	; (800277c <HAL_RCC_OscConfig+0x57c>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002696:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002698:	f7fe fe10 	bl	80012bc <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a0:	f7fe fe0c 	bl	80012bc <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e1c6      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b2:	4b32      	ldr	r3, [pc, #200]	; (800277c <HAL_RCC_OscConfig+0x57c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d108      	bne.n	80026d8 <HAL_RCC_OscConfig+0x4d8>
 80026c6:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026cc:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026d6:	e024      	b.n	8002722 <HAL_RCC_OscConfig+0x522>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b05      	cmp	r3, #5
 80026de:	d110      	bne.n	8002702 <HAL_RCC_OscConfig+0x502>
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	4a24      	ldr	r2, [pc, #144]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f0:	4b21      	ldr	r3, [pc, #132]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	4a20      	ldr	r2, [pc, #128]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002700:	e00f      	b.n	8002722 <HAL_RCC_OscConfig+0x522>
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002718:	4a17      	ldr	r2, [pc, #92]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800271a:	f023 0304 	bic.w	r3, r3, #4
 800271e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fe fdc7 	bl	80012bc <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002730:	e00a      	b.n	8002748 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe fdc3 	bl	80012bc <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e17b      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_OscConfig+0x578>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0ed      	beq.n	8002732 <HAL_RCC_OscConfig+0x532>
 8002756:	e01a      	b.n	800278e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7fe fdb0 	bl	80012bc <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800275e:	e00f      	b.n	8002780 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7fe fdac 	bl	80012bc <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d906      	bls.n	8002780 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e164      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002780:	4ba8      	ldr	r3, [pc, #672]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e8      	bne.n	8002760 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800278e:	7ffb      	ldrb	r3, [r7, #31]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002794:	4ba3      	ldr	r3, [pc, #652]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	4aa2      	ldr	r2, [pc, #648]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 800279a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d03c      	beq.n	8002826 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01c      	beq.n	80027ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027b4:	4b9b      	ldr	r3, [pc, #620]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80027b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ba:	4a9a      	ldr	r2, [pc, #616]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7fe fd7a 	bl	80012bc <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027cc:	f7fe fd76 	bl	80012bc <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e130      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027de:	4b91      	ldr	r3, [pc, #580]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80027e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ef      	beq.n	80027cc <HAL_RCC_OscConfig+0x5cc>
 80027ec:	e01b      	b.n	8002826 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027ee:	4b8d      	ldr	r3, [pc, #564]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80027f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027f4:	4a8b      	ldr	r2, [pc, #556]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80027f6:	f023 0301 	bic.w	r3, r3, #1
 80027fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7fe fd5d 	bl	80012bc <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002806:	f7fe fd59 	bl	80012bc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e113      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002818:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 800281a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1ef      	bne.n	8002806 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8107 	beq.w	8002a3e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	2b02      	cmp	r3, #2
 8002836:	f040 80cb 	bne.w	80029d0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800283a:	4b7a      	ldr	r3, [pc, #488]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f003 0203 	and.w	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	429a      	cmp	r2, r3
 800284c:	d12c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	3b01      	subs	r3, #1
 800285a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d123      	bne.n	80028a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d11b      	bne.n	80028a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d113      	bne.n	80028a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	3b01      	subs	r3, #1
 800288e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d109      	bne.n	80028a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	3b01      	subs	r3, #1
 80028a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d06d      	beq.n	8002984 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d068      	beq.n	8002980 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028ae:	4b5d      	ldr	r3, [pc, #372]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028ba:	4b5a      	ldr	r3, [pc, #360]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0ba      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028ca:	4b56      	ldr	r3, [pc, #344]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a55      	ldr	r2, [pc, #340]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80028d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028d6:	f7fe fcf1 	bl	80012bc <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028de:	f7fe fced 	bl	80012bc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e0a7      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f0:	4b4c      	ldr	r3, [pc, #304]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028fc:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	4b49      	ldr	r3, [pc, #292]	; (8002a28 <HAL_RCC_OscConfig+0x828>)
 8002902:	4013      	ands	r3, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800290c:	3a01      	subs	r2, #1
 800290e:	0112      	lsls	r2, r2, #4
 8002910:	4311      	orrs	r1, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002916:	0212      	lsls	r2, r2, #8
 8002918:	4311      	orrs	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800291e:	0852      	lsrs	r2, r2, #1
 8002920:	3a01      	subs	r2, #1
 8002922:	0552      	lsls	r2, r2, #21
 8002924:	4311      	orrs	r1, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800292a:	0852      	lsrs	r2, r2, #1
 800292c:	3a01      	subs	r2, #1
 800292e:	0652      	lsls	r2, r2, #25
 8002930:	4311      	orrs	r1, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002936:	06d2      	lsls	r2, r2, #27
 8002938:	430a      	orrs	r2, r1
 800293a:	493a      	ldr	r1, [pc, #232]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 800293c:	4313      	orrs	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002940:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a37      	ldr	r2, [pc, #220]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800294c:	4b35      	ldr	r3, [pc, #212]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a34      	ldr	r2, [pc, #208]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 8002952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002956:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002958:	f7fe fcb0 	bl	80012bc <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fcac 	bl	80012bc <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e066      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002972:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800297e:	e05e      	b.n	8002a3e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e05d      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d156      	bne.n	8002a3e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002990:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a23      	ldr	r2, [pc, #140]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80029a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029a8:	f7fe fc88 	bl	80012bc <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fc84 	bl	80012bc <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e03e      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x7b0>
 80029ce:	e036      	b.n	8002a3e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d031      	beq.n	8002a3a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80029dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	4a0c      	ldr	r2, [pc, #48]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80029f4:	f023 0303 	bic.w	r3, r3, #3
 80029f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <HAL_RCC_OscConfig+0x824>)
 8002a00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a08:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fc57 	bl	80012bc <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a10:	e00c      	b.n	8002a2c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a12:	f7fe fc53 	bl	80012bc <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d905      	bls.n	8002a2c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e00d      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
 8002a24:	40021000 	.word	0x40021000
 8002a28:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_OscConfig+0x848>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ec      	bne.n	8002a12 <HAL_RCC_OscConfig+0x812>
 8002a38:	e001      	b.n	8002a3e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e10f      	b.n	8002c84 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b89      	ldr	r3, [pc, #548]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d910      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b86      	ldr	r3, [pc, #536]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 020f 	bic.w	r2, r3, #15
 8002a7a:	4984      	ldr	r1, [pc, #528]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b82      	ldr	r3, [pc, #520]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0f7      	b.n	8002c84 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8089 	beq.w	8002bb4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d133      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aaa:	4b79      	ldr	r3, [pc, #484]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0e4      	b.n	8002c84 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002aba:	f000 fa0f 	bl	8002edc <RCC_GetSysClockFreqFromPLLSource>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <HAL_RCC_ClockConfig+0x248>)
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d955      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ac6:	4b72      	ldr	r3, [pc, #456]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10a      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ad2:	4b6f      	ldr	r3, [pc, #444]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ada:	4a6d      	ldr	r2, [pc, #436]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e044      	b.n	8002b72 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d03e      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x126>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d13a      	bne.n	8002b72 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002afc:	4b64      	ldr	r3, [pc, #400]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b04:	4a62      	ldr	r2, [pc, #392]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	e02f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d115      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0ac      	b.n	8002c84 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b32:	4b57      	ldr	r3, [pc, #348]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e0a0      	b.n	8002c84 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b42:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e098      	b.n	8002c84 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002b52:	f000 f8a7 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002b56:	4602      	mov	r2, r0
 8002b58:	4b4e      	ldr	r3, [pc, #312]	; (8002c94 <HAL_RCC_ClockConfig+0x248>)
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d909      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b66:	4a4a      	ldr	r2, [pc, #296]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4944      	ldr	r1, [pc, #272]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe fb9a 	bl	80012bc <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe fb96 	bl	80012bc <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e070      	b.n	8002c84 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc0:	4b33      	ldr	r3, [pc, #204]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4930      	ldr	r1, [pc, #192]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b80      	cmp	r3, #128	; 0x80
 8002bd8:	d105      	bne.n	8002be6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002bda:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4a2c      	ldr	r2, [pc, #176]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002be0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002be4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be6:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d210      	bcs.n	8002c16 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf4:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f023 020f 	bic.w	r2, r3, #15
 8002bfc:	4923      	ldr	r1, [pc, #140]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c04:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_RCC_ClockConfig+0x240>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e036      	b.n	8002c84 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	4918      	ldr	r1, [pc, #96]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c40:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4910      	ldr	r1, [pc, #64]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c54:	f000 f826 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c58:	4601      	mov	r1, r0
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <HAL_RCC_ClockConfig+0x244>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <HAL_RCC_ClockConfig+0x24c>)
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	fa21 f303 	lsr.w	r3, r1, r3
 8002c70:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <HAL_RCC_ClockConfig+0x250>)
 8002c72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_RCC_ClockConfig+0x254>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe facf 	bl	800121c <HAL_InitTick>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40022000 	.word	0x40022000
 8002c90:	40021000 	.word	0x40021000
 8002c94:	04c4b400 	.word	0x04c4b400
 8002c98:	08005ccc 	.word	0x08005ccc
 8002c9c:	20000004 	.word	0x20000004
 8002ca0:	20000008 	.word	0x20000008

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cbc:	4b3a      	ldr	r3, [pc, #232]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d121      	bne.n	8002d16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d11e      	bne.n	8002d16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cd8:	4b33      	ldr	r3, [pc, #204]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ce4:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	e005      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cf4:	4b2c      	ldr	r3, [pc, #176]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d00:	4a2a      	ldr	r2, [pc, #168]	; (8002dac <HAL_RCC_GetSysClockFreq+0x108>)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10d      	bne.n	8002d2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d102      	bne.n	8002d22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d1c:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	e004      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d28:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d133      	bne.n	8002d9a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d32:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d002      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0xa4>
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d003      	beq.n	8002d4e <HAL_RCC_GetSysClockFreq+0xaa>
 8002d46:	e005      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d4a:	617b      	str	r3, [r7, #20]
      break;
 8002d4c:	e005      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d4e:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d50:	617b      	str	r3, [r7, #20]
      break;
 8002d52:	e002      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	617b      	str	r3, [r7, #20]
      break;
 8002d58:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d5a:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	3301      	adds	r3, #1
 8002d66:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	fb02 f203 	mul.w	r2, r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d80:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	0e5b      	lsrs	r3, r3, #25
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3724      	adds	r7, #36	; 0x24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08005ce4 	.word	0x08005ce4
 8002db0:	00f42400 	.word	0x00f42400
 8002db4:	007a1200 	.word	0x007a1200

08002db8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000004 	.word	0x20000004

08002dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dd4:	f7ff fff0 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002dd8:	4601      	mov	r1, r0
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002de6:	5cd3      	ldrb	r3, [r2, r3]
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40021000 	.word	0x40021000
 8002df8:	08005cdc 	.word	0x08005cdc

08002dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e00:	f7ff ffda 	bl	8002db8 <HAL_RCC_GetHCLKFreq>
 8002e04:	4601      	mov	r1, r0
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	0adb      	lsrs	r3, r3, #11
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000
 8002e24:	08005cdc 	.word	0x08005cdc

08002e28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e34:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e40:	f7ff f8fa 	bl	8002038 <HAL_PWREx_GetVoltageRange>
 8002e44:	6178      	str	r0, [r7, #20]
 8002e46:	e014      	b.n	8002e72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e48:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e52:	6593      	str	r3, [r2, #88]	; 0x58
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e60:	f7ff f8ea 	bl	8002038 <HAL_PWREx_GetVoltageRange>
 8002e64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e66:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ed4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e78:	d10b      	bne.n	8002e92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b80      	cmp	r3, #128	; 0x80
 8002e7e:	d913      	bls.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2ba0      	cmp	r3, #160	; 0xa0
 8002e84:	d902      	bls.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e86:	2302      	movs	r3, #2
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	e00d      	b.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	e00a      	b.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b7f      	cmp	r3, #127	; 0x7f
 8002e96:	d902      	bls.n	8002e9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002e98:	2302      	movs	r3, #2
 8002e9a:	613b      	str	r3, [r7, #16]
 8002e9c:	e004      	b.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b70      	cmp	r3, #112	; 0x70
 8002ea2:	d101      	bne.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f023 020f 	bic.w	r2, r3, #15
 8002eb0:	4909      	ldr	r1, [pc, #36]	; (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002eb8:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d001      	beq.n	8002eca <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40022000 	.word	0x40022000

08002edc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002ee6:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d118      	bne.n	8002f24 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ef2:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d107      	bne.n	8002f0e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002efe:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	e005      	b.n	8002f1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f0e:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	091b      	lsrs	r3, r3, #4
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f1a:	4a21      	ldr	r2, [pc, #132]	; (8002fa0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f22:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f24:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d002      	beq.n	8002f3a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d003      	beq.n	8002f40 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002f38:	e005      	b.n	8002f46 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002f3c:	613b      	str	r3, [r7, #16]
    break;
 8002f3e:	e005      	b.n	8002f4c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002f42:	613b      	str	r3, [r7, #16]
    break;
 8002f44:	e002      	b.n	8002f4c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	613b      	str	r3, [r7, #16]
    break;
 8002f4a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	3301      	adds	r3, #1
 8002f58:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f5a:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	fb02 f203 	mul.w	r2, r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f70:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	0e5b      	lsrs	r3, r3, #25
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f8c:	683b      	ldr	r3, [r7, #0]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	08005ce4 	.word	0x08005ce4
 8002fa4:	00f42400 	.word	0x00f42400
 8002fa8:	007a1200 	.word	0x007a1200

08002fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fb8:	2300      	movs	r3, #0
 8002fba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d03d      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d00b      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002fd0:	2b40      	cmp	r3, #64	; 0x40
 8002fd2:	d804      	bhi.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d015      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002fdc:	e01d      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002fde:	2b60      	cmp	r3, #96	; 0x60
 8002fe0:	d01e      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d01c      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fe6:	e018      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fe8:	4b86      	ldr	r3, [pc, #536]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4a85      	ldr	r2, [pc, #532]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ff4:	e015      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fafd 	bl	80035fc <RCCEx_PLLSAI1_Config>
 8003002:	4603      	mov	r3, r0
 8003004:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003006:	e00c      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3320      	adds	r3, #32
 800300c:	2100      	movs	r1, #0
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fbe4 	bl	80037dc <RCCEx_PLLSAI2_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003018:	e003      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	74fb      	strb	r3, [r7, #19]
      break;
 800301e:	e000      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003022:	7cfb      	ldrb	r3, [r7, #19]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10b      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003028:	4b76      	ldr	r3, [pc, #472]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800302a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800302e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003036:	4973      	ldr	r1, [pc, #460]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800303e:	e001      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d042      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003058:	d00f      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800305a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800305e:	d805      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d011      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003068:	d017      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xee>
 800306a:	e01f      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x100>
 800306c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003070:	d01f      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003076:	d01c      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003078:	e018      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800307a:	4b62      	ldr	r3, [pc, #392]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	4a61      	ldr	r2, [pc, #388]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003084:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003086:	e015      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fab4 	bl	80035fc <RCCEx_PLLSAI1_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003098:	e00c      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3320      	adds	r3, #32
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 fb9b 	bl	80037dc <RCCEx_PLLSAI2_Config>
 80030a6:	4603      	mov	r3, r0
 80030a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030aa:	e003      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	74fb      	strb	r3, [r7, #19]
      break;
 80030b0:	e000      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80030b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10b      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030ba:	4b52      	ldr	r3, [pc, #328]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	494e      	ldr	r1, [pc, #312]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80030d0:	e001      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 809f 	beq.w	8003222 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e4:	2300      	movs	r3, #0
 80030e6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030e8:	4b46      	ldr	r3, [pc, #280]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80030f8:	2300      	movs	r3, #0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	4b41      	ldr	r3, [pc, #260]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	4a40      	ldr	r2, [pc, #256]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003108:	6593      	str	r3, [r2, #88]	; 0x58
 800310a:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003116:	2301      	movs	r3, #1
 8003118:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a3a      	ldr	r2, [pc, #232]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003124:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003126:	f7fe f8c9 	bl	80012bc <HAL_GetTick>
 800312a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800312c:	e009      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fe f8c5 	bl	80012bc <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d902      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	74fb      	strb	r3, [r7, #19]
        break;
 8003140:	e005      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003142:	4b31      	ldr	r3, [pc, #196]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ef      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d15b      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003154:	4b2b      	ldr	r3, [pc, #172]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01f      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	429a      	cmp	r2, r3
 8003170:	d019      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800318e:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800319e:	4a19      	ldr	r2, [pc, #100]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d016      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe f884 	bl	80012bc <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b6:	e00b      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fe f880 	bl	80012bc <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d902      	bls.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	74fb      	strb	r3, [r7, #19]
            break;
 80031ce:	e006      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ec      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80031de:	7cfb      	ldrb	r3, [r7, #19]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10c      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	4903      	ldr	r1, [pc, #12]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031fc:	e008      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031fe:	7cfb      	ldrb	r3, [r7, #19]
 8003200:	74bb      	strb	r3, [r7, #18]
 8003202:	e005      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003204:	40021000 	.word	0x40021000
 8003208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003210:	7c7b      	ldrb	r3, [r7, #17]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d105      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003216:	4ba0      	ldr	r3, [pc, #640]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	4a9f      	ldr	r2, [pc, #636]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003220:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800322e:	4b9a      	ldr	r3, [pc, #616]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f023 0203 	bic.w	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	4996      	ldr	r1, [pc, #600]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003250:	4b91      	ldr	r3, [pc, #580]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f023 020c 	bic.w	r2, r3, #12
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	498e      	ldr	r1, [pc, #568]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003272:	4b89      	ldr	r3, [pc, #548]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	4985      	ldr	r1, [pc, #532]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003294:	4b80      	ldr	r3, [pc, #512]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a2:	497d      	ldr	r1, [pc, #500]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032b6:	4b78      	ldr	r3, [pc, #480]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	4974      	ldr	r1, [pc, #464]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032d8:	4b6f      	ldr	r3, [pc, #444]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e6:	496c      	ldr	r1, [pc, #432]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032fa:	4b67      	ldr	r3, [pc, #412]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003308:	4963      	ldr	r1, [pc, #396]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800331c:	4b5e      	ldr	r3, [pc, #376]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800332a:	495b      	ldr	r1, [pc, #364]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800333e:	4b56      	ldr	r3, [pc, #344]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003344:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334c:	4952      	ldr	r1, [pc, #328]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003360:	4b4d      	ldr	r3, [pc, #308]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336e:	494a      	ldr	r1, [pc, #296]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003382:	4b45      	ldr	r3, [pc, #276]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003388:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	4941      	ldr	r1, [pc, #260]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033a4:	4b3c      	ldr	r3, [pc, #240]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b2:	4939      	ldr	r1, [pc, #228]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d028      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c6:	4b34      	ldr	r3, [pc, #208]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d4:	4930      	ldr	r1, [pc, #192]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033e4:	d106      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e6:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	4a2b      	ldr	r2, [pc, #172]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033f0:	60d3      	str	r3, [r2, #12]
 80033f2:	e011      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	2101      	movs	r1, #1
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f8f9 	bl	80035fc <RCCEx_PLLSAI1_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d04d      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800342c:	d108      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800342e:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003434:	4a18      	ldr	r2, [pc, #96]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800343a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800343e:	e012      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003440:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003442:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003446:	4a14      	ldr	r2, [pc, #80]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800344c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345e:	490e      	ldr	r1, [pc, #56]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800346a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800346e:	d106      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4a08      	ldr	r2, [pc, #32]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347a:	60d3      	str	r3, [r2, #12]
 800347c:	e020      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003486:	d109      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003488:	4b03      	ldr	r3, [pc, #12]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4a02      	ldr	r2, [pc, #8]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003492:	60d3      	str	r3, [r2, #12]
 8003494:	e014      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3304      	adds	r3, #4
 80034aa:	2101      	movs	r1, #1
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 f8a5 	bl	80035fc <RCCEx_PLLSAI1_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d028      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034cc:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034da:	4947      	ldr	r1, [pc, #284]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ea:	d106      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ec:	4b42      	ldr	r3, [pc, #264]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a41      	ldr	r2, [pc, #260]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f6:	60d3      	str	r3, [r2, #12]
 80034f8:	e011      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003502:	d10c      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3304      	adds	r3, #4
 8003508:	2101      	movs	r1, #1
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f876 	bl	80035fc <RCCEx_PLLSAI1_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01e      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800352a:	4b33      	ldr	r3, [pc, #204]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800353a:	492f      	ldr	r1, [pc, #188]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003548:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800354c:	d10c      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	2102      	movs	r1, #2
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f851 	bl	80035fc <RCCEx_PLLSAI1_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003574:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800357a:	f023 0204 	bic.w	r2, r3, #4
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003584:	491c      	ldr	r1, [pc, #112]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00b      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003598:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800359a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800359e:	f023 0218 	bic.w	r2, r3, #24
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a8:	4913      	ldr	r1, [pc, #76]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d017      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80035bc:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035cc:	490a      	ldr	r1, [pc, #40]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035de:	d105      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000

080035fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800360a:	4b70      	ldr	r3, [pc, #448]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00e      	beq.n	8003634 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003616:	4b6d      	ldr	r3, [pc, #436]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0203 	and.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d103      	bne.n	800362e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
       ||
 800362a:	2b00      	cmp	r3, #0
 800362c:	d13f      	bne.n	80036ae <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
 8003632:	e03c      	b.n	80036ae <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d00c      	beq.n	8003656 <RCCEx_PLLSAI1_Config+0x5a>
 800363c:	2b03      	cmp	r3, #3
 800363e:	d013      	beq.n	8003668 <RCCEx_PLLSAI1_Config+0x6c>
 8003640:	2b01      	cmp	r3, #1
 8003642:	d120      	bne.n	8003686 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003644:	4b61      	ldr	r3, [pc, #388]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d11d      	bne.n	800368c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003654:	e01a      	b.n	800368c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003656:	4b5d      	ldr	r3, [pc, #372]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365e:	2b00      	cmp	r3, #0
 8003660:	d116      	bne.n	8003690 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003666:	e013      	b.n	8003690 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003668:	4b58      	ldr	r3, [pc, #352]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10f      	bne.n	8003694 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003674:	4b55      	ldr	r3, [pc, #340]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d109      	bne.n	8003694 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003684:	e006      	b.n	8003694 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      break;
 800368a:	e004      	b.n	8003696 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800368c:	bf00      	nop
 800368e:	e002      	b.n	8003696 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003690:	bf00      	nop
 8003692:	e000      	b.n	8003696 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003694:	bf00      	nop
    }

    if(status == HAL_OK)
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d108      	bne.n	80036ae <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800369c:	4b4b      	ldr	r3, [pc, #300]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f023 0203 	bic.w	r2, r3, #3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4948      	ldr	r1, [pc, #288]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f040 8086 	bne.w	80037c2 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036b6:	4b45      	ldr	r3, [pc, #276]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a44      	ldr	r2, [pc, #272]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80036bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c2:	f7fd fdfb 	bl	80012bc <HAL_GetTick>
 80036c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036c8:	e009      	b.n	80036de <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036ca:	f7fd fdf7 	bl	80012bc <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d902      	bls.n	80036de <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	73fb      	strb	r3, [r7, #15]
        break;
 80036dc:	e005      	b.n	80036ea <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036de:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1ef      	bne.n	80036ca <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d168      	bne.n	80037c2 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d113      	bne.n	800371e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036f6:	4b35      	ldr	r3, [pc, #212]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	4b35      	ldr	r3, [pc, #212]	; (80037d0 <RCCEx_PLLSAI1_Config+0x1d4>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6892      	ldr	r2, [r2, #8]
 8003702:	0211      	lsls	r1, r2, #8
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68d2      	ldr	r2, [r2, #12]
 8003708:	06d2      	lsls	r2, r2, #27
 800370a:	4311      	orrs	r1, r2
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6852      	ldr	r2, [r2, #4]
 8003710:	3a01      	subs	r2, #1
 8003712:	0112      	lsls	r2, r2, #4
 8003714:	430a      	orrs	r2, r1
 8003716:	492d      	ldr	r1, [pc, #180]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	610b      	str	r3, [r1, #16]
 800371c:	e02d      	b.n	800377a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d115      	bne.n	8003750 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003724:	4b29      	ldr	r3, [pc, #164]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	4b2a      	ldr	r3, [pc, #168]	; (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800372a:	4013      	ands	r3, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6892      	ldr	r2, [r2, #8]
 8003730:	0211      	lsls	r1, r2, #8
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6912      	ldr	r2, [r2, #16]
 8003736:	0852      	lsrs	r2, r2, #1
 8003738:	3a01      	subs	r2, #1
 800373a:	0552      	lsls	r2, r2, #21
 800373c:	4311      	orrs	r1, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6852      	ldr	r2, [r2, #4]
 8003742:	3a01      	subs	r2, #1
 8003744:	0112      	lsls	r2, r2, #4
 8003746:	430a      	orrs	r2, r1
 8003748:	4920      	ldr	r1, [pc, #128]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 800374a:	4313      	orrs	r3, r2
 800374c:	610b      	str	r3, [r1, #16]
 800374e:	e014      	b.n	800377a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003750:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003756:	4013      	ands	r3, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6892      	ldr	r2, [r2, #8]
 800375c:	0211      	lsls	r1, r2, #8
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6952      	ldr	r2, [r2, #20]
 8003762:	0852      	lsrs	r2, r2, #1
 8003764:	3a01      	subs	r2, #1
 8003766:	0652      	lsls	r2, r2, #25
 8003768:	4311      	orrs	r1, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6852      	ldr	r2, [r2, #4]
 800376e:	3a01      	subs	r2, #1
 8003770:	0112      	lsls	r2, r2, #4
 8003772:	430a      	orrs	r2, r1
 8003774:	4915      	ldr	r1, [pc, #84]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003776:	4313      	orrs	r3, r2
 8003778:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800377a:	4b14      	ldr	r3, [pc, #80]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a13      	ldr	r2, [pc, #76]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003780:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003784:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003786:	f7fd fd99 	bl	80012bc <HAL_GetTick>
 800378a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800378c:	e009      	b.n	80037a2 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800378e:	f7fd fd95 	bl	80012bc <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d902      	bls.n	80037a2 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	73fb      	strb	r3, [r7, #15]
          break;
 80037a0:	e005      	b.n	80037ae <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0ef      	beq.n	800378e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	4903      	ldr	r1, [pc, #12]	; (80037cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000
 80037d0:	07ff800f 	.word	0x07ff800f
 80037d4:	ff9f800f 	.word	0xff9f800f
 80037d8:	f9ff800f 	.word	0xf9ff800f

080037dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ea:	4b70      	ldr	r3, [pc, #448]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037f6:	4b6d      	ldr	r3, [pc, #436]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0203 	and.w	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d103      	bne.n	800380e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
       ||
 800380a:	2b00      	cmp	r3, #0
 800380c:	d13f      	bne.n	800388e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
 8003812:	e03c      	b.n	800388e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d00c      	beq.n	8003836 <RCCEx_PLLSAI2_Config+0x5a>
 800381c:	2b03      	cmp	r3, #3
 800381e:	d013      	beq.n	8003848 <RCCEx_PLLSAI2_Config+0x6c>
 8003820:	2b01      	cmp	r3, #1
 8003822:	d120      	bne.n	8003866 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003824:	4b61      	ldr	r3, [pc, #388]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d11d      	bne.n	800386c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003834:	e01a      	b.n	800386c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003836:	4b5d      	ldr	r3, [pc, #372]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383e:	2b00      	cmp	r3, #0
 8003840:	d116      	bne.n	8003870 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003846:	e013      	b.n	8003870 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003848:	4b58      	ldr	r3, [pc, #352]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10f      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003854:	4b55      	ldr	r3, [pc, #340]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003864:	e006      	b.n	8003874 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
      break;
 800386a:	e004      	b.n	8003876 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800386c:	bf00      	nop
 800386e:	e002      	b.n	8003876 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003870:	bf00      	nop
 8003872:	e000      	b.n	8003876 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003874:	bf00      	nop
    }

    if(status == HAL_OK)
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800387c:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f023 0203 	bic.w	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4948      	ldr	r1, [pc, #288]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f040 8086 	bne.w	80039a2 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003896:	4b45      	ldr	r3, [pc, #276]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a44      	ldr	r2, [pc, #272]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800389c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a2:	f7fd fd0b 	bl	80012bc <HAL_GetTick>
 80038a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038a8:	e009      	b.n	80038be <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038aa:	f7fd fd07 	bl	80012bc <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d902      	bls.n	80038be <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	73fb      	strb	r3, [r7, #15]
        break;
 80038bc:	e005      	b.n	80038ca <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1ef      	bne.n	80038aa <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d168      	bne.n	80039a2 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d113      	bne.n	80038fe <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038d6:	4b35      	ldr	r3, [pc, #212]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	4b35      	ldr	r3, [pc, #212]	; (80039b0 <RCCEx_PLLSAI2_Config+0x1d4>)
 80038dc:	4013      	ands	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6892      	ldr	r2, [r2, #8]
 80038e2:	0211      	lsls	r1, r2, #8
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	68d2      	ldr	r2, [r2, #12]
 80038e8:	06d2      	lsls	r2, r2, #27
 80038ea:	4311      	orrs	r1, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6852      	ldr	r2, [r2, #4]
 80038f0:	3a01      	subs	r2, #1
 80038f2:	0112      	lsls	r2, r2, #4
 80038f4:	430a      	orrs	r2, r1
 80038f6:	492d      	ldr	r1, [pc, #180]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	614b      	str	r3, [r1, #20]
 80038fc:	e02d      	b.n	800395a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d115      	bne.n	8003930 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003904:	4b29      	ldr	r3, [pc, #164]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800390a:	4013      	ands	r3, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6892      	ldr	r2, [r2, #8]
 8003910:	0211      	lsls	r1, r2, #8
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6912      	ldr	r2, [r2, #16]
 8003916:	0852      	lsrs	r2, r2, #1
 8003918:	3a01      	subs	r2, #1
 800391a:	0552      	lsls	r2, r2, #21
 800391c:	4311      	orrs	r1, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6852      	ldr	r2, [r2, #4]
 8003922:	3a01      	subs	r2, #1
 8003924:	0112      	lsls	r2, r2, #4
 8003926:	430a      	orrs	r2, r1
 8003928:	4920      	ldr	r1, [pc, #128]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800392a:	4313      	orrs	r3, r2
 800392c:	614b      	str	r3, [r1, #20]
 800392e:	e014      	b.n	800395a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003930:	4b1e      	ldr	r3, [pc, #120]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003936:	4013      	ands	r3, r2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6892      	ldr	r2, [r2, #8]
 800393c:	0211      	lsls	r1, r2, #8
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6952      	ldr	r2, [r2, #20]
 8003942:	0852      	lsrs	r2, r2, #1
 8003944:	3a01      	subs	r2, #1
 8003946:	0652      	lsls	r2, r2, #25
 8003948:	4311      	orrs	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6852      	ldr	r2, [r2, #4]
 800394e:	3a01      	subs	r2, #1
 8003950:	0112      	lsls	r2, r2, #4
 8003952:	430a      	orrs	r2, r1
 8003954:	4915      	ldr	r1, [pc, #84]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003956:	4313      	orrs	r3, r2
 8003958:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800395a:	4b14      	ldr	r3, [pc, #80]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a13      	ldr	r2, [pc, #76]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003964:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003966:	f7fd fca9 	bl	80012bc <HAL_GetTick>
 800396a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800396c:	e009      	b.n	8003982 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800396e:	f7fd fca5 	bl	80012bc <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d902      	bls.n	8003982 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	73fb      	strb	r3, [r7, #15]
          break;
 8003980:	e005      	b.n	800398e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0ef      	beq.n	800396e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d106      	bne.n	80039a2 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	4903      	ldr	r1, [pc, #12]	; (80039ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	07ff800f 	.word	0x07ff800f
 80039b4:	ff9f800f 	.word	0xff9f800f
 80039b8:	f9ff800f 	.word	0xf9ff800f

080039bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e095      	b.n	8003afa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d108      	bne.n	80039e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039de:	d009      	beq.n	80039f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	61da      	str	r2, [r3, #28]
 80039e6:	e005      	b.n	80039f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd faaa 	bl	8000f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a34:	d902      	bls.n	8003a3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e002      	b.n	8003a42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a4a:	d007      	beq.n	8003a5c <HAL_SPI_Init+0xa0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a54:	d002      	beq.n	8003a5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	ea42 0103 	orr.w	r1, r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	f003 0204 	and.w	r2, r3, #4
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ad8:	ea42 0103 	orr.w	r1, r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b088      	sub	sp, #32
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_SPI_Transmit+0x22>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e158      	b.n	8003dd6 <HAL_SPI_Transmit+0x2d4>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b2c:	f7fd fbc6 	bl	80012bc <HAL_GetTick>
 8003b30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d002      	beq.n	8003b48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
 8003b44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b46:	e13d      	b.n	8003dc4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <HAL_SPI_Transmit+0x52>
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b58:	e134      	b.n	8003dc4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	88fa      	ldrh	r2, [r7, #6]
 8003b72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	88fa      	ldrh	r2, [r7, #6]
 8003b78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba4:	d10f      	bne.n	8003bc6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b40      	cmp	r3, #64	; 0x40
 8003bd2:	d007      	beq.n	8003be4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bec:	d94b      	bls.n	8003c86 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_SPI_Transmit+0xfa>
 8003bf6:	8afb      	ldrh	r3, [r7, #22]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d13e      	bne.n	8003c7a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	881a      	ldrh	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	1c9a      	adds	r2, r3, #2
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c20:	e02b      	b.n	8003c7a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d112      	bne.n	8003c56 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	881a      	ldrh	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	1c9a      	adds	r2, r3, #2
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c54:	e011      	b.n	8003c7a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c56:	f7fd fb31 	bl	80012bc <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d803      	bhi.n	8003c6e <HAL_SPI_Transmit+0x16c>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d102      	bne.n	8003c74 <HAL_SPI_Transmit+0x172>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c78:	e0a4      	b.n	8003dc4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ce      	bne.n	8003c22 <HAL_SPI_Transmit+0x120>
 8003c84:	e07c      	b.n	8003d80 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_SPI_Transmit+0x192>
 8003c8e:	8afb      	ldrh	r3, [r7, #22]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d170      	bne.n	8003d76 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d912      	bls.n	8003cc4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	881a      	ldrh	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	1c9a      	adds	r2, r3, #2
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b02      	subs	r3, #2
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cc2:	e058      	b.n	8003d76 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	7812      	ldrb	r2, [r2, #0]
 8003cd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003cea:	e044      	b.n	8003d76 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d12b      	bne.n	8003d52 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d912      	bls.n	8003d2a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	1c9a      	adds	r2, r3, #2
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b02      	subs	r3, #2
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d28:	e025      	b.n	8003d76 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	7812      	ldrb	r2, [r2, #0]
 8003d36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d50:	e011      	b.n	8003d76 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d52:	f7fd fab3 	bl	80012bc <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d803      	bhi.n	8003d6a <HAL_SPI_Transmit+0x268>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d102      	bne.n	8003d70 <HAL_SPI_Transmit+0x26e>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d74:	e026      	b.n	8003dc4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1b5      	bne.n	8003cec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	6839      	ldr	r1, [r7, #0]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fcdb 	bl	8004740 <SPI_EndRxTxTransaction>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e000      	b.n	8003dc4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003dc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003dd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b088      	sub	sp, #32
 8003de2:	af02      	add	r7, sp, #8
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	603b      	str	r3, [r7, #0]
 8003dea:	4613      	mov	r3, r2
 8003dec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dfa:	d112      	bne.n	8003e22 <HAL_SPI_Receive+0x44>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10e      	bne.n	8003e22 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2204      	movs	r2, #4
 8003e08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e0c:	88fa      	ldrh	r2, [r7, #6]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	4613      	mov	r3, r2
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f910 	bl	800403e <HAL_SPI_TransmitReceive>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	e109      	b.n	8004036 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_SPI_Receive+0x52>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e102      	b.n	8004036 <HAL_SPI_Receive+0x258>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e38:	f7fd fa40 	bl	80012bc <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d002      	beq.n	8003e50 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e4e:	e0e9      	b.n	8004024 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_SPI_Receive+0x7e>
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e60:	e0e0      	b.n	8004024 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2204      	movs	r2, #4
 8003e66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	88fa      	ldrh	r2, [r7, #6]
 8003e82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003eac:	d908      	bls.n	8003ec0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	e007      	b.n	8003ed0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ece:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed8:	d10f      	bne.n	8003efa <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ef8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	2b40      	cmp	r3, #64	; 0x40
 8003f06:	d007      	beq.n	8003f18 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f20:	d867      	bhi.n	8003ff2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f22:	e030      	b.n	8003f86 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d117      	bne.n	8003f62 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f103 020c 	add.w	r2, r3, #12
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	7812      	ldrb	r2, [r2, #0]
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003f60:	e011      	b.n	8003f86 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f62:	f7fd f9ab 	bl	80012bc <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d803      	bhi.n	8003f7a <HAL_SPI_Receive+0x19c>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f78:	d102      	bne.n	8003f80 <HAL_SPI_Receive+0x1a2>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f84:	e04e      	b.n	8004024 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1c8      	bne.n	8003f24 <HAL_SPI_Receive+0x146>
 8003f92:	e034      	b.n	8003ffe <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d115      	bne.n	8003fce <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	b292      	uxth	r2, r2
 8003fae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	1c9a      	adds	r2, r3, #2
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003fcc:	e011      	b.n	8003ff2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fce:	f7fd f975 	bl	80012bc <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d803      	bhi.n	8003fe6 <HAL_SPI_Receive+0x208>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d102      	bne.n	8003fec <HAL_SPI_Receive+0x20e>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ff0:	e018      	b.n	8004024 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1ca      	bne.n	8003f94 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fb44 	bl	8004690 <SPI_EndRxTransaction>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	75fb      	strb	r3, [r7, #23]
 8004020:	e000      	b.n	8004024 <HAL_SPI_Receive+0x246>
  }

error :
 8004022:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004034:	7dfb      	ldrb	r3, [r7, #23]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b08a      	sub	sp, #40	; 0x28
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800404c:	2301      	movs	r3, #1
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x26>
 8004060:	2302      	movs	r3, #2
 8004062:	e1fb      	b.n	800445c <HAL_SPI_TransmitReceive+0x41e>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800406c:	f7fd f926 	bl	80012bc <HAL_GetTick>
 8004070:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004078:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004080:	887b      	ldrh	r3, [r7, #2]
 8004082:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004084:	887b      	ldrh	r3, [r7, #2]
 8004086:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004088:	7efb      	ldrb	r3, [r7, #27]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d00e      	beq.n	80040ac <HAL_SPI_TransmitReceive+0x6e>
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004094:	d106      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x66>
 800409e:	7efb      	ldrb	r3, [r7, #27]
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d003      	beq.n	80040ac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
 80040a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80040aa:	e1cd      	b.n	8004448 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_SPI_TransmitReceive+0x80>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <HAL_SPI_TransmitReceive+0x80>
 80040b8:	887b      	ldrh	r3, [r7, #2]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d103      	bne.n	80040c6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80040c4:	e1c0      	b.n	8004448 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d003      	beq.n	80040da <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2205      	movs	r2, #5
 80040d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	887a      	ldrh	r2, [r7, #2]
 80040ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	887a      	ldrh	r2, [r7, #2]
 80040f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	887a      	ldrh	r2, [r7, #2]
 8004100:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	887a      	ldrh	r2, [r7, #2]
 8004106:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800411c:	d802      	bhi.n	8004124 <HAL_SPI_TransmitReceive+0xe6>
 800411e:	8a3b      	ldrh	r3, [r7, #16]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d908      	bls.n	8004136 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004132:	605a      	str	r2, [r3, #4]
 8004134:	e007      	b.n	8004146 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004144:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d007      	beq.n	8004164 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004162:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800416c:	d97c      	bls.n	8004268 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_SPI_TransmitReceive+0x13e>
 8004176:	8a7b      	ldrh	r3, [r7, #18]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d169      	bne.n	8004250 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	881a      	ldrh	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	1c9a      	adds	r2, r3, #2
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041a0:	e056      	b.n	8004250 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d11b      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x1aa>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d016      	beq.n	80041e8 <HAL_SPI_TransmitReceive+0x1aa>
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d113      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	881a      	ldrh	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	1c9a      	adds	r2, r3, #2
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d11c      	bne.n	8004230 <HAL_SPI_TransmitReceive+0x1f2>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d016      	beq.n	8004230 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	b292      	uxth	r2, r2
 800420e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	1c9a      	adds	r2, r3, #2
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800422c:	2301      	movs	r3, #1
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004230:	f7fd f844 	bl	80012bc <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423c:	429a      	cmp	r2, r3
 800423e:	d807      	bhi.n	8004250 <HAL_SPI_TransmitReceive+0x212>
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004246:	d003      	beq.n	8004250 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800424e:	e0fb      	b.n	8004448 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1a3      	bne.n	80041a2 <HAL_SPI_TransmitReceive+0x164>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d19d      	bne.n	80041a2 <HAL_SPI_TransmitReceive+0x164>
 8004266:	e0df      	b.n	8004428 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x23a>
 8004270:	8a7b      	ldrh	r3, [r7, #18]
 8004272:	2b01      	cmp	r3, #1
 8004274:	f040 80cb 	bne.w	800440e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d912      	bls.n	80042a8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	881a      	ldrh	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	1c9a      	adds	r2, r3, #2
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b02      	subs	r3, #2
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042a6:	e0b2      	b.n	800440e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	7812      	ldrb	r2, [r2, #0]
 80042b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ce:	e09e      	b.n	800440e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d134      	bne.n	8004348 <HAL_SPI_TransmitReceive+0x30a>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d02f      	beq.n	8004348 <HAL_SPI_TransmitReceive+0x30a>
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d12c      	bne.n	8004348 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d912      	bls.n	800431e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	881a      	ldrh	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b02      	subs	r3, #2
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800431c:	e012      	b.n	8004344 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	7812      	ldrb	r2, [r2, #0]
 800432a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b01      	cmp	r3, #1
 8004354:	d148      	bne.n	80043e8 <HAL_SPI_TransmitReceive+0x3aa>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d042      	beq.n	80043e8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b01      	cmp	r3, #1
 800436c:	d923      	bls.n	80043b6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	b292      	uxth	r2, r2
 800437a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b02      	subs	r3, #2
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d81f      	bhi.n	80043e4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043b2:	605a      	str	r2, [r3, #4]
 80043b4:	e016      	b.n	80043e4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f103 020c 	add.w	r2, r3, #12
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	7812      	ldrb	r2, [r2, #0]
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043e4:	2301      	movs	r3, #1
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043e8:	f7fc ff68 	bl	80012bc <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d803      	bhi.n	8004400 <HAL_SPI_TransmitReceive+0x3c2>
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d102      	bne.n	8004406 <HAL_SPI_TransmitReceive+0x3c8>
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	2b00      	cmp	r3, #0
 8004404:	d103      	bne.n	800440e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800440c:	e01c      	b.n	8004448 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	f47f af5b 	bne.w	80042d0 <HAL_SPI_TransmitReceive+0x292>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	f47f af54 	bne.w	80042d0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f987 	bl	8004740 <SPI_EndRxTxTransaction>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d006      	beq.n	8004446 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	661a      	str	r2, [r3, #96]	; 0x60
 8004444:	e000      	b.n	8004448 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004446:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800445c:	4618      	mov	r0, r3
 800445e:	3728      	adds	r7, #40	; 0x28
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004474:	f7fc ff22 	bl	80012bc <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	4413      	add	r3, r2
 8004482:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004484:	f7fc ff1a 	bl	80012bc <HAL_GetTick>
 8004488:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800448a:	4b39      	ldr	r3, [pc, #228]	; (8004570 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	015b      	lsls	r3, r3, #5
 8004490:	0d1b      	lsrs	r3, r3, #20
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800449a:	e054      	b.n	8004546 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a2:	d050      	beq.n	8004546 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a4:	f7fc ff0a 	bl	80012bc <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d902      	bls.n	80044ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d13d      	bne.n	8004536 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044d2:	d111      	bne.n	80044f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044dc:	d004      	beq.n	80044e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e6:	d107      	bne.n	80044f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004500:	d10f      	bne.n	8004522 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004520:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e017      	b.n	8004566 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	3b01      	subs	r3, #1
 8004544:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4013      	ands	r3, r2
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	429a      	cmp	r2, r3
 8004554:	bf0c      	ite	eq
 8004556:	2301      	moveq	r3, #1
 8004558:	2300      	movne	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	429a      	cmp	r2, r3
 8004562:	d19b      	bne.n	800449c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000004 	.word	0x20000004

08004574 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004582:	f7fc fe9b 	bl	80012bc <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	4413      	add	r3, r2
 8004590:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004592:	f7fc fe93 	bl	80012bc <HAL_GetTick>
 8004596:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004598:	4b3c      	ldr	r3, [pc, #240]	; (800468c <SPI_WaitFifoStateUntilTimeout+0x118>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	00da      	lsls	r2, r3, #3
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	0d1b      	lsrs	r3, r3, #20
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80045b0:	e05f      	b.n	8004672 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045b8:	d106      	bne.n	80045c8 <SPI_WaitFifoStateUntilTimeout+0x54>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d103      	bne.n	80045c8 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d050      	beq.n	8004672 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045d0:	f7fc fe74 	bl	80012bc <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d902      	bls.n	80045e6 <SPI_WaitFifoStateUntilTimeout+0x72>
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d13d      	bne.n	8004662 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fe:	d111      	bne.n	8004624 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004608:	d004      	beq.n	8004614 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004612:	d107      	bne.n	8004624 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800462c:	d10f      	bne.n	800464e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800464c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e010      	b.n	8004684 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	3b01      	subs	r3, #1
 8004670:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4013      	ands	r3, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	429a      	cmp	r2, r3
 8004680:	d197      	bne.n	80045b2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3720      	adds	r7, #32
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000004 	.word	0x20000004

08004690 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a4:	d111      	bne.n	80046ca <SPI_EndRxTransaction+0x3a>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ae:	d004      	beq.n	80046ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b8:	d107      	bne.n	80046ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2200      	movs	r2, #0
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7ff fec5 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d007      	beq.n	80046f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e4:	f043 0220 	orr.w	r2, r3, #32
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e023      	b.n	8004738 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f8:	d11d      	bne.n	8004736 <SPI_EndRxTransaction+0xa6>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004702:	d004      	beq.n	800470e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470c:	d113      	bne.n	8004736 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2200      	movs	r2, #0
 8004716:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f7ff ff2a 	bl	8004574 <SPI_WaitFifoStateUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472a:	f043 0220 	orr.w	r2, r3, #32
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e000      	b.n	8004738 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af02      	add	r7, sp, #8
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2200      	movs	r2, #0
 8004754:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f7ff ff0b 	bl	8004574 <SPI_WaitFifoStateUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e027      	b.n	80047c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2200      	movs	r2, #0
 800477c:	2180      	movs	r1, #128	; 0x80
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f7ff fe70 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478e:	f043 0220 	orr.w	r2, r3, #32
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e014      	b.n	80047c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f7ff fee4 	bl	8004574 <SPI_WaitFifoStateUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b6:	f043 0220 	orr.w	r2, r3, #32
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e000      	b.n	80047c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e042      	b.n	8004864 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fc fb13 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2224      	movs	r2, #36	; 0x24
 80047fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f960 	bl	8004ad4 <UART_SetConfig>
 8004814:	4603      	mov	r3, r0
 8004816:	2b01      	cmp	r3, #1
 8004818:	d101      	bne.n	800481e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e022      	b.n	8004864 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fc26 	bl	8005078 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800483a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800484a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fcad 	bl	80051bc <UART_CheckIdleState>
 8004862:	4603      	mov	r3, r0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08a      	sub	sp, #40	; 0x28
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	4613      	mov	r3, r2
 800487a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004882:	2b20      	cmp	r3, #32
 8004884:	f040 8084 	bne.w	8004990 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_UART_Transmit+0x28>
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e07c      	b.n	8004992 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Transmit+0x3a>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e075      	b.n	8004992 <HAL_UART_Transmit+0x126>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2221      	movs	r2, #33	; 0x21
 80048ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80048be:	f7fc fcfd 	bl	80012bc <HAL_GetTick>
 80048c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	88fa      	ldrh	r2, [r7, #6]
 80048c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	88fa      	ldrh	r2, [r7, #6]
 80048d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048dc:	d108      	bne.n	80048f0 <HAL_UART_Transmit+0x84>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d104      	bne.n	80048f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	e003      	b.n	80048f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004900:	e02d      	b.n	800495e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2200      	movs	r2, #0
 800490a:	2180      	movs	r1, #128	; 0x80
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fc9d 	bl	800524c <UART_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e03a      	b.n	8004992 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10b      	bne.n	800493a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	881a      	ldrh	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800492e:	b292      	uxth	r2, r2
 8004930:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	3302      	adds	r3, #2
 8004936:	61bb      	str	r3, [r7, #24]
 8004938:	e008      	b.n	800494c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	781a      	ldrb	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	b292      	uxth	r2, r2
 8004944:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3301      	adds	r3, #1
 800494a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1cb      	bne.n	8004902 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2200      	movs	r2, #0
 8004972:	2140      	movs	r1, #64	; 0x40
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 fc69 	bl	800524c <UART_WaitOnFlagUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e006      	b.n	8004992 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	e000      	b.n	8004992 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
  }
}
 8004992:	4618      	mov	r0, r3
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	4613      	mov	r3, r2
 80049a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d170      	bne.n	8004a96 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_UART_Receive_DMA+0x24>
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e069      	b.n	8004a98 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Receive_DMA+0x36>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e062      	b.n	8004a98 <HAL_UART_Receive_DMA+0xfc>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2222      	movs	r2, #34	; 0x22
 80049f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d02c      	beq.n	8004a5a <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a04:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <HAL_UART_Receive_DMA+0x104>)
 8004a06:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a0c:	4a25      	ldr	r2, [pc, #148]	; (8004aa4 <HAL_UART_Receive_DMA+0x108>)
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a14:	4a24      	ldr	r2, [pc, #144]	; (8004aa8 <HAL_UART_Receive_DMA+0x10c>)
 8004a16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3324      	adds	r3, #36	; 0x24
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a30:	461a      	mov	r2, r3
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	f7fc fe2a 	bl	800168c <HAL_DMA_Start_IT>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2210      	movs	r2, #16
 8004a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e01e      	b.n	8004a98 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a70:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0201 	orr.w	r2, r2, #1
 8004a80:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a90:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	e000      	b.n	8004a98 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
  }
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	080053cf 	.word	0x080053cf
 8004aa4:	08005439 	.word	0x08005439
 8004aa8:	08005455 	.word	0x08005455

08004aac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004ad8:	b088      	sub	sp, #32
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004afe:	69fa      	ldr	r2, [r7, #28]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4bb1      	ldr	r3, [pc, #708]	; (8004dd0 <UART_SetConfig+0x2fc>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	69f9      	ldr	r1, [r7, #28]
 8004b14:	430b      	orrs	r3, r1
 8004b16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4aa6      	ldr	r2, [pc, #664]	; (8004dd4 <UART_SetConfig+0x300>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d004      	beq.n	8004b48 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	69f9      	ldr	r1, [r7, #28]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	f023 010f 	bic.w	r1, r3, #15
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a97      	ldr	r2, [pc, #604]	; (8004dd8 <UART_SetConfig+0x304>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d121      	bne.n	8004bc4 <UART_SetConfig+0xf0>
 8004b80:	4b96      	ldr	r3, [pc, #600]	; (8004ddc <UART_SetConfig+0x308>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d816      	bhi.n	8004bbc <UART_SetConfig+0xe8>
 8004b8e:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <UART_SetConfig+0xc0>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004ba5 	.word	0x08004ba5
 8004b98:	08004bb1 	.word	0x08004bb1
 8004b9c:	08004bab 	.word	0x08004bab
 8004ba0:	08004bb7 	.word	0x08004bb7
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	76fb      	strb	r3, [r7, #27]
 8004ba8:	e0e8      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004baa:	2302      	movs	r3, #2
 8004bac:	76fb      	strb	r3, [r7, #27]
 8004bae:	e0e5      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	76fb      	strb	r3, [r7, #27]
 8004bb4:	e0e2      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	76fb      	strb	r3, [r7, #27]
 8004bba:	e0df      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	76fb      	strb	r3, [r7, #27]
 8004bc0:	bf00      	nop
 8004bc2:	e0db      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a85      	ldr	r2, [pc, #532]	; (8004de0 <UART_SetConfig+0x30c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d134      	bne.n	8004c38 <UART_SetConfig+0x164>
 8004bce:	4b83      	ldr	r3, [pc, #524]	; (8004ddc <UART_SetConfig+0x308>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd4:	f003 030c 	and.w	r3, r3, #12
 8004bd8:	2b0c      	cmp	r3, #12
 8004bda:	d829      	bhi.n	8004c30 <UART_SetConfig+0x15c>
 8004bdc:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <UART_SetConfig+0x110>)
 8004bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004c19 	.word	0x08004c19
 8004be8:	08004c31 	.word	0x08004c31
 8004bec:	08004c31 	.word	0x08004c31
 8004bf0:	08004c31 	.word	0x08004c31
 8004bf4:	08004c25 	.word	0x08004c25
 8004bf8:	08004c31 	.word	0x08004c31
 8004bfc:	08004c31 	.word	0x08004c31
 8004c00:	08004c31 	.word	0x08004c31
 8004c04:	08004c1f 	.word	0x08004c1f
 8004c08:	08004c31 	.word	0x08004c31
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c31 	.word	0x08004c31
 8004c14:	08004c2b 	.word	0x08004c2b
 8004c18:	2300      	movs	r3, #0
 8004c1a:	76fb      	strb	r3, [r7, #27]
 8004c1c:	e0ae      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	76fb      	strb	r3, [r7, #27]
 8004c22:	e0ab      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004c24:	2304      	movs	r3, #4
 8004c26:	76fb      	strb	r3, [r7, #27]
 8004c28:	e0a8      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	76fb      	strb	r3, [r7, #27]
 8004c2e:	e0a5      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004c30:	2310      	movs	r3, #16
 8004c32:	76fb      	strb	r3, [r7, #27]
 8004c34:	bf00      	nop
 8004c36:	e0a1      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a69      	ldr	r2, [pc, #420]	; (8004de4 <UART_SetConfig+0x310>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d120      	bne.n	8004c84 <UART_SetConfig+0x1b0>
 8004c42:	4b66      	ldr	r3, [pc, #408]	; (8004ddc <UART_SetConfig+0x308>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d00f      	beq.n	8004c70 <UART_SetConfig+0x19c>
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d802      	bhi.n	8004c5a <UART_SetConfig+0x186>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <UART_SetConfig+0x190>
 8004c58:	e010      	b.n	8004c7c <UART_SetConfig+0x1a8>
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d005      	beq.n	8004c6a <UART_SetConfig+0x196>
 8004c5e:	2b30      	cmp	r3, #48	; 0x30
 8004c60:	d009      	beq.n	8004c76 <UART_SetConfig+0x1a2>
 8004c62:	e00b      	b.n	8004c7c <UART_SetConfig+0x1a8>
 8004c64:	2300      	movs	r3, #0
 8004c66:	76fb      	strb	r3, [r7, #27]
 8004c68:	e088      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	76fb      	strb	r3, [r7, #27]
 8004c6e:	e085      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004c70:	2304      	movs	r3, #4
 8004c72:	76fb      	strb	r3, [r7, #27]
 8004c74:	e082      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004c76:	2308      	movs	r3, #8
 8004c78:	76fb      	strb	r3, [r7, #27]
 8004c7a:	e07f      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	76fb      	strb	r3, [r7, #27]
 8004c80:	bf00      	nop
 8004c82:	e07b      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a57      	ldr	r2, [pc, #348]	; (8004de8 <UART_SetConfig+0x314>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d120      	bne.n	8004cd0 <UART_SetConfig+0x1fc>
 8004c8e:	4b53      	ldr	r3, [pc, #332]	; (8004ddc <UART_SetConfig+0x308>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c98:	2b40      	cmp	r3, #64	; 0x40
 8004c9a:	d00f      	beq.n	8004cbc <UART_SetConfig+0x1e8>
 8004c9c:	2b40      	cmp	r3, #64	; 0x40
 8004c9e:	d802      	bhi.n	8004ca6 <UART_SetConfig+0x1d2>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <UART_SetConfig+0x1dc>
 8004ca4:	e010      	b.n	8004cc8 <UART_SetConfig+0x1f4>
 8004ca6:	2b80      	cmp	r3, #128	; 0x80
 8004ca8:	d005      	beq.n	8004cb6 <UART_SetConfig+0x1e2>
 8004caa:	2bc0      	cmp	r3, #192	; 0xc0
 8004cac:	d009      	beq.n	8004cc2 <UART_SetConfig+0x1ee>
 8004cae:	e00b      	b.n	8004cc8 <UART_SetConfig+0x1f4>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	76fb      	strb	r3, [r7, #27]
 8004cb4:	e062      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	76fb      	strb	r3, [r7, #27]
 8004cba:	e05f      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	76fb      	strb	r3, [r7, #27]
 8004cc0:	e05c      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004cc2:	2308      	movs	r3, #8
 8004cc4:	76fb      	strb	r3, [r7, #27]
 8004cc6:	e059      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004cc8:	2310      	movs	r3, #16
 8004cca:	76fb      	strb	r3, [r7, #27]
 8004ccc:	bf00      	nop
 8004cce:	e055      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a45      	ldr	r2, [pc, #276]	; (8004dec <UART_SetConfig+0x318>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d124      	bne.n	8004d24 <UART_SetConfig+0x250>
 8004cda:	4b40      	ldr	r3, [pc, #256]	; (8004ddc <UART_SetConfig+0x308>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce8:	d012      	beq.n	8004d10 <UART_SetConfig+0x23c>
 8004cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cee:	d802      	bhi.n	8004cf6 <UART_SetConfig+0x222>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <UART_SetConfig+0x230>
 8004cf4:	e012      	b.n	8004d1c <UART_SetConfig+0x248>
 8004cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cfa:	d006      	beq.n	8004d0a <UART_SetConfig+0x236>
 8004cfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d00:	d009      	beq.n	8004d16 <UART_SetConfig+0x242>
 8004d02:	e00b      	b.n	8004d1c <UART_SetConfig+0x248>
 8004d04:	2300      	movs	r3, #0
 8004d06:	76fb      	strb	r3, [r7, #27]
 8004d08:	e038      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	76fb      	strb	r3, [r7, #27]
 8004d0e:	e035      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004d10:	2304      	movs	r3, #4
 8004d12:	76fb      	strb	r3, [r7, #27]
 8004d14:	e032      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004d16:	2308      	movs	r3, #8
 8004d18:	76fb      	strb	r3, [r7, #27]
 8004d1a:	e02f      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	76fb      	strb	r3, [r7, #27]
 8004d20:	bf00      	nop
 8004d22:	e02b      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a2a      	ldr	r2, [pc, #168]	; (8004dd4 <UART_SetConfig+0x300>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d124      	bne.n	8004d78 <UART_SetConfig+0x2a4>
 8004d2e:	4b2b      	ldr	r3, [pc, #172]	; (8004ddc <UART_SetConfig+0x308>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3c:	d012      	beq.n	8004d64 <UART_SetConfig+0x290>
 8004d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d42:	d802      	bhi.n	8004d4a <UART_SetConfig+0x276>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <UART_SetConfig+0x284>
 8004d48:	e012      	b.n	8004d70 <UART_SetConfig+0x29c>
 8004d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d4e:	d006      	beq.n	8004d5e <UART_SetConfig+0x28a>
 8004d50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d54:	d009      	beq.n	8004d6a <UART_SetConfig+0x296>
 8004d56:	e00b      	b.n	8004d70 <UART_SetConfig+0x29c>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	76fb      	strb	r3, [r7, #27]
 8004d5c:	e00e      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	76fb      	strb	r3, [r7, #27]
 8004d62:	e00b      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004d64:	2304      	movs	r3, #4
 8004d66:	76fb      	strb	r3, [r7, #27]
 8004d68:	e008      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004d6a:	2308      	movs	r3, #8
 8004d6c:	76fb      	strb	r3, [r7, #27]
 8004d6e:	e005      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004d70:	2310      	movs	r3, #16
 8004d72:	76fb      	strb	r3, [r7, #27]
 8004d74:	bf00      	nop
 8004d76:	e001      	b.n	8004d7c <UART_SetConfig+0x2a8>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <UART_SetConfig+0x300>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	f040 80a1 	bne.w	8004eca <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d88:	7efb      	ldrb	r3, [r7, #27]
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d836      	bhi.n	8004dfc <UART_SetConfig+0x328>
 8004d8e:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0x2c0>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004dfd 	.word	0x08004dfd
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004dfd 	.word	0x08004dfd
 8004da4:	08004dc7 	.word	0x08004dc7
 8004da8:	08004dfd 	.word	0x08004dfd
 8004dac:	08004dfd 	.word	0x08004dfd
 8004db0:	08004dfd 	.word	0x08004dfd
 8004db4:	08004df5 	.word	0x08004df5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db8:	f7fe f80a 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8004dbc:	6178      	str	r0, [r7, #20]
        break;
 8004dbe:	e022      	b.n	8004e06 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <UART_SetConfig+0x31c>)
 8004dc2:	617b      	str	r3, [r7, #20]
        break;
 8004dc4:	e01f      	b.n	8004e06 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc6:	f7fd ff6d 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8004dca:	6178      	str	r0, [r7, #20]
        break;
 8004dcc:	e01b      	b.n	8004e06 <UART_SetConfig+0x332>
 8004dce:	bf00      	nop
 8004dd0:	cfff69f3 	.word	0xcfff69f3
 8004dd4:	40008000 	.word	0x40008000
 8004dd8:	40013800 	.word	0x40013800
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40004400 	.word	0x40004400
 8004de4:	40004800 	.word	0x40004800
 8004de8:	40004c00 	.word	0x40004c00
 8004dec:	40005000 	.word	0x40005000
 8004df0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004df4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004df8:	617b      	str	r3, [r7, #20]
        break;
 8004dfa:	e004      	b.n	8004e06 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	76bb      	strb	r3, [r7, #26]
        break;
 8004e04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 811d 	beq.w	8005048 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	4a97      	ldr	r2, [pc, #604]	; (8005070 <UART_SetConfig+0x59c>)
 8004e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e20:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d305      	bcc.n	8004e3e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d902      	bls.n	8004e44 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	76bb      	strb	r3, [r7, #26]
 8004e42:	e101      	b.n	8005048 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f04f 0100 	mov.w	r1, #0
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	4a87      	ldr	r2, [pc, #540]	; (8005070 <UART_SetConfig+0x59c>)
 8004e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f04f 0400 	mov.w	r4, #0
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4623      	mov	r3, r4
 8004e60:	f7fb f9d4 	bl	800020c <__aeabi_uldivmod>
 8004e64:	4603      	mov	r3, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	f04f 0400 	mov.w	r4, #0
 8004e74:	0214      	lsls	r4, r2, #8
 8004e76:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004e7a:	020b      	lsls	r3, r1, #8
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6852      	ldr	r2, [r2, #4]
 8004e80:	0852      	lsrs	r2, r2, #1
 8004e82:	4611      	mov	r1, r2
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	eb13 0b01 	adds.w	fp, r3, r1
 8004e8c:	eb44 0c02 	adc.w	ip, r4, r2
 8004e90:	4658      	mov	r0, fp
 8004e92:	4661      	mov	r1, ip
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f04f 0400 	mov.w	r4, #0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	f7fb f9b4 	bl	800020c <__aeabi_uldivmod>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb0:	d308      	bcc.n	8004ec4 <UART_SetConfig+0x3f0>
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb8:	d204      	bcs.n	8004ec4 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	60da      	str	r2, [r3, #12]
 8004ec2:	e0c1      	b.n	8005048 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	76bb      	strb	r3, [r7, #26]
 8004ec8:	e0be      	b.n	8005048 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed2:	d164      	bne.n	8004f9e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004ed4:	7efb      	ldrb	r3, [r7, #27]
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d827      	bhi.n	8004f2a <UART_SetConfig+0x456>
 8004eda:	a201      	add	r2, pc, #4	; (adr r2, 8004ee0 <UART_SetConfig+0x40c>)
 8004edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee0:	08004f05 	.word	0x08004f05
 8004ee4:	08004f0d 	.word	0x08004f0d
 8004ee8:	08004f15 	.word	0x08004f15
 8004eec:	08004f2b 	.word	0x08004f2b
 8004ef0:	08004f1b 	.word	0x08004f1b
 8004ef4:	08004f2b 	.word	0x08004f2b
 8004ef8:	08004f2b 	.word	0x08004f2b
 8004efc:	08004f2b 	.word	0x08004f2b
 8004f00:	08004f23 	.word	0x08004f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f04:	f7fd ff64 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8004f08:	6178      	str	r0, [r7, #20]
        break;
 8004f0a:	e013      	b.n	8004f34 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f0c:	f7fd ff76 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
 8004f10:	6178      	str	r0, [r7, #20]
        break;
 8004f12:	e00f      	b.n	8004f34 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f14:	4b57      	ldr	r3, [pc, #348]	; (8005074 <UART_SetConfig+0x5a0>)
 8004f16:	617b      	str	r3, [r7, #20]
        break;
 8004f18:	e00c      	b.n	8004f34 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f1a:	f7fd fec3 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8004f1e:	6178      	str	r0, [r7, #20]
        break;
 8004f20:	e008      	b.n	8004f34 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f26:	617b      	str	r3, [r7, #20]
        break;
 8004f28:	e004      	b.n	8004f34 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	76bb      	strb	r3, [r7, #26]
        break;
 8004f32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8086 	beq.w	8005048 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	4a4b      	ldr	r2, [pc, #300]	; (8005070 <UART_SetConfig+0x59c>)
 8004f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f46:	461a      	mov	r2, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f4e:	005a      	lsls	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	441a      	add	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	d916      	bls.n	8004f98 <UART_SetConfig+0x4c4>
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f70:	d212      	bcs.n	8004f98 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	f023 030f 	bic.w	r3, r3, #15
 8004f7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	085b      	lsrs	r3, r3, #1
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	89fb      	ldrh	r3, [r7, #14]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	89fa      	ldrh	r2, [r7, #14]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	e057      	b.n	8005048 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	76bb      	strb	r3, [r7, #26]
 8004f9c:	e054      	b.n	8005048 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f9e:	7efb      	ldrb	r3, [r7, #27]
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d828      	bhi.n	8004ff6 <UART_SetConfig+0x522>
 8004fa4:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <UART_SetConfig+0x4d8>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	08004fd1 	.word	0x08004fd1
 8004fb0:	08004fd9 	.word	0x08004fd9
 8004fb4:	08004fe1 	.word	0x08004fe1
 8004fb8:	08004ff7 	.word	0x08004ff7
 8004fbc:	08004fe7 	.word	0x08004fe7
 8004fc0:	08004ff7 	.word	0x08004ff7
 8004fc4:	08004ff7 	.word	0x08004ff7
 8004fc8:	08004ff7 	.word	0x08004ff7
 8004fcc:	08004fef 	.word	0x08004fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd0:	f7fd fefe 	bl	8002dd0 <HAL_RCC_GetPCLK1Freq>
 8004fd4:	6178      	str	r0, [r7, #20]
        break;
 8004fd6:	e013      	b.n	8005000 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fd8:	f7fd ff10 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
 8004fdc:	6178      	str	r0, [r7, #20]
        break;
 8004fde:	e00f      	b.n	8005000 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe0:	4b24      	ldr	r3, [pc, #144]	; (8005074 <UART_SetConfig+0x5a0>)
 8004fe2:	617b      	str	r3, [r7, #20]
        break;
 8004fe4:	e00c      	b.n	8005000 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fe6:	f7fd fe5d 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8004fea:	6178      	str	r0, [r7, #20]
        break;
 8004fec:	e008      	b.n	8005000 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff2:	617b      	str	r3, [r7, #20]
        break;
 8004ff4:	e004      	b.n	8005000 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	76bb      	strb	r3, [r7, #26]
        break;
 8004ffe:	bf00      	nop
    }

    if (pclk != 0U)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d020      	beq.n	8005048 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	4a19      	ldr	r2, [pc, #100]	; (8005070 <UART_SetConfig+0x59c>)
 800500c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005010:	461a      	mov	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	fbb3 f2f2 	udiv	r2, r3, r2
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	441a      	add	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	fbb2 f3f3 	udiv	r3, r2, r3
 8005028:	b29b      	uxth	r3, r3
 800502a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2b0f      	cmp	r3, #15
 8005030:	d908      	bls.n	8005044 <UART_SetConfig+0x570>
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005038:	d204      	bcs.n	8005044 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	60da      	str	r2, [r3, #12]
 8005042:	e001      	b.n	8005048 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005064:	7ebb      	ldrb	r3, [r7, #26]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005070:	08005d14 	.word	0x08005d14
 8005074:	00f42400 	.word	0x00f42400

08005078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01a      	beq.n	800518e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005176:	d10a      	bne.n	800518e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	605a      	str	r2, [r3, #4]
  }
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80051cc:	f7fc f876 	bl	80012bc <HAL_GetTick>
 80051d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d10e      	bne.n	80051fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f82c 	bl	800524c <UART_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e022      	b.n	8005244 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b04      	cmp	r3, #4
 800520a:	d10e      	bne.n	800522a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800520c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f816 	bl	800524c <UART_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e00c      	b.n	8005244 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800525c:	e062      	b.n	8005324 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005264:	d05e      	beq.n	8005324 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005266:	f7fc f829 	bl	80012bc <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	429a      	cmp	r2, r3
 8005274:	d302      	bcc.n	800527c <UART_WaitOnFlagUntilTimeout+0x30>
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d11d      	bne.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800528a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0201 	bic.w	r2, r2, #1
 800529a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e045      	b.n	8005344 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d02e      	beq.n	8005324 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d4:	d126      	bne.n	8005324 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052ee:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e00f      	b.n	8005344 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69da      	ldr	r2, [r3, #28]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4013      	ands	r3, r2
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	429a      	cmp	r2, r3
 8005332:	bf0c      	ite	eq
 8005334:	2301      	moveq	r3, #1
 8005336:	2300      	movne	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	429a      	cmp	r2, r3
 8005340:	d08d      	beq.n	800525e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005362:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005372:	609a      	str	r2, [r3, #8]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800539e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053da:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d11f      	bne.n	800542a <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005400:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005420:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7fb fba4 	bl	8000b78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f7ff fb30 	bl	8004aac <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800544c:	bf00      	nop
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005468:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005470:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547c:	2b80      	cmp	r3, #128	; 0x80
 800547e:	d109      	bne.n	8005494 <UART_DMAError+0x40>
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b21      	cmp	r3, #33	; 0x21
 8005484:	d106      	bne.n	8005494 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2200      	movs	r2, #0
 800548a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800548e:	6978      	ldr	r0, [r7, #20]
 8005490:	f7ff ff5c 	bl	800534c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	d109      	bne.n	80054b6 <UART_DMAError+0x62>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b22      	cmp	r3, #34	; 0x22
 80054a6:	d106      	bne.n	80054b6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80054b0:	6978      	ldr	r0, [r7, #20]
 80054b2:	f7ff ff69 	bl	8005388 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054bc:	f043 0210 	orr.w	r2, r3, #16
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054c6:	6978      	ldr	r0, [r7, #20]
 80054c8:	f7ff fafa 	bl	8004ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054cc:	bf00      	nop
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_UARTEx_DisableFifoMode+0x16>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e027      	b.n	800553a <HAL_UARTEx_DisableFifoMode+0x66>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2224      	movs	r2, #36	; 0x24
 80054f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0201 	bic.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005518:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2220      	movs	r2, #32
 800552c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800555a:	2302      	movs	r3, #2
 800555c:	e02d      	b.n	80055ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2224      	movs	r2, #36	; 0x24
 800556a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f850 	bl	8005640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e02d      	b.n	8005636 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2224      	movs	r2, #36	; 0x24
 80055e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0201 	bic.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f812 	bl	8005640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b089      	sub	sp, #36	; 0x24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005648:	4a2f      	ldr	r2, [pc, #188]	; (8005708 <UARTEx_SetNbDataToProcess+0xc8>)
 800564a:	f107 0314 	add.w	r3, r7, #20
 800564e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005652:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005656:	4a2d      	ldr	r2, [pc, #180]	; (800570c <UARTEx_SetNbDataToProcess+0xcc>)
 8005658:	f107 030c 	add.w	r3, r7, #12
 800565c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005660:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005668:	2b00      	cmp	r3, #0
 800566a:	d108      	bne.n	800567e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800567c:	e03d      	b.n	80056fa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800567e:	2308      	movs	r3, #8
 8005680:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005682:	2308      	movs	r3, #8
 8005684:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	0e5b      	lsrs	r3, r3, #25
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	0f5b      	lsrs	r3, r3, #29
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80056a6:	7fbb      	ldrb	r3, [r7, #30]
 80056a8:	7f3a      	ldrb	r2, [r7, #28]
 80056aa:	f107 0120 	add.w	r1, r7, #32
 80056ae:	440a      	add	r2, r1
 80056b0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
 80056b8:	7f3a      	ldrb	r2, [r7, #28]
 80056ba:	f107 0120 	add.w	r1, r7, #32
 80056be:	440a      	add	r2, r1
 80056c0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80056c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80056d0:	7ffb      	ldrb	r3, [r7, #31]
 80056d2:	7f7a      	ldrb	r2, [r7, #29]
 80056d4:	f107 0120 	add.w	r1, r7, #32
 80056d8:	440a      	add	r2, r1
 80056da:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	7f7a      	ldrb	r2, [r7, #29]
 80056e4:	f107 0120 	add.w	r1, r7, #32
 80056e8:	440a      	add	r2, r1
 80056ea:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80056ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056fa:	bf00      	nop
 80056fc:	3724      	adds	r7, #36	; 0x24
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	08005cb4 	.word	0x08005cb4
 800570c:	08005cbc 	.word	0x08005cbc

08005710 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005710:	b084      	sub	sp, #16
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	f107 001c 	add.w	r0, r7, #28
 800571e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	2b01      	cmp	r3, #1
 8005726:	d122      	bne.n	800576e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800573c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005752:	2b01      	cmp	r3, #1
 8005754:	d105      	bne.n	8005762 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa30 	bl	8005bc8 <USB_CoreReset>
 8005768:	4603      	mov	r3, r0
 800576a:	73fb      	strb	r3, [r7, #15]
 800576c:	e01a      	b.n	80057a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fa24 	bl	8005bc8 <USB_CoreReset>
 8005780:	4603      	mov	r3, r0
 8005782:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
 8005796:	e005      	b.n	80057a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057b0:	b004      	add	sp, #16
 80057b2:	4770      	bx	lr

080057b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f023 0201 	bic.w	r2, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	460b      	mov	r3, r1
 80057e0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d106      	bne.n	8005802 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	60da      	str	r2, [r3, #12]
 8005800:	e00b      	b.n	800581a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d106      	bne.n	8005816 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	60da      	str	r2, [r3, #12]
 8005814:	e001      	b.n	800581a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e003      	b.n	8005822 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800581a:	2032      	movs	r0, #50	; 0x32
 800581c:	f7fb fd5a 	bl	80012d4 <HAL_Delay>

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800582c:	b084      	sub	sp, #16
 800582e:	b580      	push	{r7, lr}
 8005830:	b086      	sub	sp, #24
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800583a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	e009      	b.n	8005860 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	3340      	adds	r3, #64	; 0x40
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	2200      	movs	r2, #0
 8005858:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	3301      	adds	r3, #1
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	2b0e      	cmp	r3, #14
 8005864:	d9f2      	bls.n	800584c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005868:	2b00      	cmp	r3, #0
 800586a:	d11c      	bne.n	80058a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800587a:	f043 0302 	orr.w	r3, r3, #2
 800587e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	e005      	b.n	80058b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058b8:	461a      	mov	r2, r3
 80058ba:	2300      	movs	r3, #0
 80058bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	4619      	mov	r1, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058cc:	461a      	mov	r2, r3
 80058ce:	680b      	ldr	r3, [r1, #0]
 80058d0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058d2:	2103      	movs	r1, #3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f93d 	bl	8005b54 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058da:	2110      	movs	r1, #16
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f8f1 	bl	8005ac4 <USB_FlushTxFifo>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f90f 	bl	8005b10 <USB_FlushRxFifo>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005902:	461a      	mov	r2, r3
 8005904:	2300      	movs	r3, #0
 8005906:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590e:	461a      	mov	r2, r3
 8005910:	2300      	movs	r3, #0
 8005912:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	461a      	mov	r2, r3
 800591c:	2300      	movs	r3, #0
 800591e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005920:	2300      	movs	r3, #0
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	e043      	b.n	80059ae <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800593c:	d118      	bne.n	8005970 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	461a      	mov	r2, r3
 8005952:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	e013      	b.n	8005982 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	461a      	mov	r2, r3
 8005968:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	e008      	b.n	8005982 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597c:	461a      	mov	r2, r3
 800597e:	2300      	movs	r3, #0
 8005980:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598e:	461a      	mov	r2, r3
 8005990:	2300      	movs	r3, #0
 8005992:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a0:	461a      	mov	r2, r3
 80059a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	3301      	adds	r3, #1
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d3b7      	bcc.n	8005926 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059b6:	2300      	movs	r3, #0
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	e043      	b.n	8005a44 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059d2:	d118      	bne.n	8005a06 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e6:	461a      	mov	r2, r3
 80059e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e013      	b.n	8005a18 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fc:	461a      	mov	r2, r3
 80059fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	e008      	b.n	8005a18 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	461a      	mov	r2, r3
 8005a14:	2300      	movs	r3, #0
 8005a16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	461a      	mov	r2, r3
 8005a26:	2300      	movs	r3, #0
 8005a28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a36:	461a      	mov	r2, r3
 8005a38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	3301      	adds	r3, #1
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d3b7      	bcc.n	80059bc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f043 0210 	orr.w	r2, r3, #16
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <USB_DevInit+0x294>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	f043 0208 	orr.w	r2, r3, #8
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d107      	bne.n	8005aae <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aa6:	f043 0304 	orr.w	r3, r3, #4
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aba:	b004      	add	sp, #16
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	803c3800 	.word	0x803c3800

08005ac4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	019b      	lsls	r3, r3, #6
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a09      	ldr	r2, [pc, #36]	; (8005b0c <USB_FlushTxFifo+0x48>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d901      	bls.n	8005af0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e006      	b.n	8005afe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f003 0320 	and.w	r3, r3, #32
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d0f0      	beq.n	8005ade <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	00030d40 	.word	0x00030d40

08005b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2210      	movs	r2, #16
 8005b20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3301      	adds	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <USB_FlushRxFifo+0x40>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d901      	bls.n	8005b34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e006      	b.n	8005b42 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d0f0      	beq.n	8005b22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	00030d40 	.word	0x00030d40

08005b54 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	68f9      	ldr	r1, [r7, #12]
 8005b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b74:	4313      	orrs	r3, r2
 8005b76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b085      	sub	sp, #20
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ba0:	f023 0303 	bic.w	r3, r3, #3
 8005ba4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bb4:	f043 0302 	orr.w	r3, r3, #2
 8005bb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <USB_CoreReset+0x64>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d901      	bls.n	8005be6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e01b      	b.n	8005c1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	daf2      	bge.n	8005bd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f043 0201 	orr.w	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3301      	adds	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4a09      	ldr	r2, [pc, #36]	; (8005c2c <USB_CoreReset+0x64>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d901      	bls.n	8005c10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e006      	b.n	8005c1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d0f0      	beq.n	8005bfe <USB_CoreReset+0x36>

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	00030d40 	.word	0x00030d40

08005c30 <__libc_init_array>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	4e0d      	ldr	r6, [pc, #52]	; (8005c68 <__libc_init_array+0x38>)
 8005c34:	4c0d      	ldr	r4, [pc, #52]	; (8005c6c <__libc_init_array+0x3c>)
 8005c36:	1ba4      	subs	r4, r4, r6
 8005c38:	10a4      	asrs	r4, r4, #2
 8005c3a:	2500      	movs	r5, #0
 8005c3c:	42a5      	cmp	r5, r4
 8005c3e:	d109      	bne.n	8005c54 <__libc_init_array+0x24>
 8005c40:	4e0b      	ldr	r6, [pc, #44]	; (8005c70 <__libc_init_array+0x40>)
 8005c42:	4c0c      	ldr	r4, [pc, #48]	; (8005c74 <__libc_init_array+0x44>)
 8005c44:	f000 f820 	bl	8005c88 <_init>
 8005c48:	1ba4      	subs	r4, r4, r6
 8005c4a:	10a4      	asrs	r4, r4, #2
 8005c4c:	2500      	movs	r5, #0
 8005c4e:	42a5      	cmp	r5, r4
 8005c50:	d105      	bne.n	8005c5e <__libc_init_array+0x2e>
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c58:	4798      	blx	r3
 8005c5a:	3501      	adds	r5, #1
 8005c5c:	e7ee      	b.n	8005c3c <__libc_init_array+0xc>
 8005c5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c62:	4798      	blx	r3
 8005c64:	3501      	adds	r5, #1
 8005c66:	e7f2      	b.n	8005c4e <__libc_init_array+0x1e>
 8005c68:	08005d34 	.word	0x08005d34
 8005c6c:	08005d34 	.word	0x08005d34
 8005c70:	08005d34 	.word	0x08005d34
 8005c74:	08005d38 	.word	0x08005d38

08005c78 <memset>:
 8005c78:	4402      	add	r2, r0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d100      	bne.n	8005c82 <memset+0xa>
 8005c80:	4770      	bx	lr
 8005c82:	f803 1b01 	strb.w	r1, [r3], #1
 8005c86:	e7f9      	b.n	8005c7c <memset+0x4>

08005c88 <_init>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	bf00      	nop
 8005c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8e:	bc08      	pop	{r3}
 8005c90:	469e      	mov	lr, r3
 8005c92:	4770      	bx	lr

08005c94 <_fini>:
 8005c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c96:	bf00      	nop
 8005c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9a:	bc08      	pop	{r3}
 8005c9c:	469e      	mov	lr, r3
 8005c9e:	4770      	bx	lr
