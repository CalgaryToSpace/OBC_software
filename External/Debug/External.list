
External.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e74  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c4  080050c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080050c4  080050c4  000150c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050cc  080050cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050cc  080050cc  000150cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050d0  080050d0  000150d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080050d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a4  2000000c  080050e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  080050e0  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001497a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026cf  00000000  00000000  000349b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00037088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  000380a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a16b  00000000  00000000  00038fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c81  00000000  00000000  0006313b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001013d3  00000000  00000000  00076dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017818f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004410  00000000  00000000  001781e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005018 	.word	0x08005018

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005018 	.word	0x08005018

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295
 800021c:	f04f 30ff 	movne.w	r0, #4294967295
 8000220:	f000 b974 	b.w	800050c <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9d08      	ldr	r5, [sp, #32]
 8000242:	4604      	mov	r4, r0
 8000244:	468e      	mov	lr, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d14d      	bne.n	80002e6 <__udivmoddi4+0xaa>
 800024a:	428a      	cmp	r2, r1
 800024c:	4694      	mov	ip, r2
 800024e:	d969      	bls.n	8000324 <__udivmoddi4+0xe8>
 8000250:	fab2 f282 	clz	r2, r2
 8000254:	b152      	cbz	r2, 800026c <__udivmoddi4+0x30>
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	f1c2 0120 	rsb	r1, r2, #32
 800025e:	fa20 f101 	lsr.w	r1, r0, r1
 8000262:	fa0c fc02 	lsl.w	ip, ip, r2
 8000266:	ea41 0e03 	orr.w	lr, r1, r3
 800026a:	4094      	lsls	r4, r2
 800026c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000270:	0c21      	lsrs	r1, r4, #16
 8000272:	fbbe f6f8 	udiv	r6, lr, r8
 8000276:	fa1f f78c 	uxth.w	r7, ip
 800027a:	fb08 e316 	mls	r3, r8, r6, lr
 800027e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000282:	fb06 f107 	mul.w	r1, r6, r7
 8000286:	4299      	cmp	r1, r3
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x64>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 811f 	bcs.w	80004d4 <__udivmoddi4+0x298>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 811c 	bls.w	80004d4 <__udivmoddi4+0x298>
 800029c:	3e02      	subs	r6, #2
 800029e:	4463      	add	r3, ip
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 f707 	mul.w	r7, r0, r7
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	d90a      	bls.n	80002ce <__udivmoddi4+0x92>
 80002b8:	eb1c 0404 	adds.w	r4, ip, r4
 80002bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c0:	f080 810a 	bcs.w	80004d8 <__udivmoddi4+0x29c>
 80002c4:	42a7      	cmp	r7, r4
 80002c6:	f240 8107 	bls.w	80004d8 <__udivmoddi4+0x29c>
 80002ca:	4464      	add	r4, ip
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d2:	1be4      	subs	r4, r4, r7
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa4>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xc2>
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	f000 80ef 	beq.w	80004ce <__udivmoddi4+0x292>
 80002f0:	2600      	movs	r6, #0
 80002f2:	e9c5 0100 	strd	r0, r1, [r5]
 80002f6:	4630      	mov	r0, r6
 80002f8:	4631      	mov	r1, r6
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f683 	clz	r6, r3
 8000302:	2e00      	cmp	r6, #0
 8000304:	d14a      	bne.n	800039c <__udivmoddi4+0x160>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd4>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80f9 	bhi.w	8000502 <__udivmoddi4+0x2c6>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	469e      	mov	lr, r3
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa4>
 800031e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa4>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xec>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 8092 	bne.w	8000456 <__udivmoddi4+0x21a>
 8000332:	eba1 010c 	sub.w	r1, r1, ip
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2601      	movs	r6, #1
 8000340:	0c20      	lsrs	r0, r4, #16
 8000342:	fbb1 f3f7 	udiv	r3, r1, r7
 8000346:	fb07 1113 	mls	r1, r7, r3, r1
 800034a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034e:	fb0e f003 	mul.w	r0, lr, r3
 8000352:	4288      	cmp	r0, r1
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x12c>
 8000356:	eb1c 0101 	adds.w	r1, ip, r1
 800035a:	f103 38ff 	add.w	r8, r3, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x12a>
 8000360:	4288      	cmp	r0, r1
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2c0>
 8000366:	4643      	mov	r3, r8
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000370:	fb07 1110 	mls	r1, r7, r0, r1
 8000374:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x156>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 31ff 	add.w	r1, r0, #4294967295
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x154>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2ca>
 8000390:	4608      	mov	r0, r1
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039a:	e79c      	b.n	80002d6 <__udivmoddi4+0x9a>
 800039c:	f1c6 0720 	rsb	r7, r6, #32
 80003a0:	40b3      	lsls	r3, r6
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa20 f407 	lsr.w	r4, r0, r7
 80003ae:	fa01 f306 	lsl.w	r3, r1, r6
 80003b2:	431c      	orrs	r4, r3
 80003b4:	40f9      	lsrs	r1, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fa00 f306 	lsl.w	r3, r0, r6
 80003be:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c2:	0c20      	lsrs	r0, r4, #16
 80003c4:	fa1f fe8c 	uxth.w	lr, ip
 80003c8:	fb09 1118 	mls	r1, r9, r8, r1
 80003cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	4288      	cmp	r0, r1
 80003d6:	fa02 f206 	lsl.w	r2, r2, r6
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b8>
 80003dc:	eb1c 0101 	adds.w	r1, ip, r1
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2bc>
 80003e8:	4288      	cmp	r0, r1
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2bc>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4461      	add	r1, ip
 80003f4:	1a09      	subs	r1, r1, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000400:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000404:	fb00 fe0e 	mul.w	lr, r0, lr
 8000408:	458e      	cmp	lr, r1
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1e2>
 800040c:	eb1c 0101 	adds.w	r1, ip, r1
 8000410:	f100 34ff 	add.w	r4, r0, #4294967295
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2b4>
 8000416:	458e      	cmp	lr, r1
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2b4>
 800041a:	3802      	subs	r0, #2
 800041c:	4461      	add	r1, ip
 800041e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000422:	fba0 9402 	umull	r9, r4, r0, r2
 8000426:	eba1 010e 	sub.w	r1, r1, lr
 800042a:	42a1      	cmp	r1, r4
 800042c:	46c8      	mov	r8, r9
 800042e:	46a6      	mov	lr, r4
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x2a4>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x2a0>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x212>
 8000436:	ebb3 0208 	subs.w	r2, r3, r8
 800043a:	eb61 010e 	sbc.w	r1, r1, lr
 800043e:	fa01 f707 	lsl.w	r7, r1, r7
 8000442:	fa22 f306 	lsr.w	r3, r2, r6
 8000446:	40f1      	lsrs	r1, r6
 8000448:	431f      	orrs	r7, r3
 800044a:	e9c5 7100 	strd	r7, r1, [r5]
 800044e:	2600      	movs	r6, #0
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	f1c2 0320 	rsb	r3, r2, #32
 800045a:	40d8      	lsrs	r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa21 f303 	lsr.w	r3, r1, r3
 8000464:	4091      	lsls	r1, r2
 8000466:	4301      	orrs	r1, r0
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb3 f0f7 	udiv	r0, r3, r7
 8000474:	fb07 3610 	mls	r6, r7, r0, r3
 8000478:	0c0b      	lsrs	r3, r1, #16
 800047a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047e:	fb00 f60e 	mul.w	r6, r0, lr
 8000482:	429e      	cmp	r6, r3
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x260>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b8>
 8000494:	429e      	cmp	r6, r3
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b8>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1b9b      	subs	r3, r3, r6
 800049e:	b289      	uxth	r1, r1
 80004a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a4:	fb07 3316 	mls	r3, r7, r6, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb06 f30e 	mul.w	r3, r6, lr
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x28a>
 80004b4:	eb1c 0101 	adds.w	r1, ip, r1
 80004b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2b0>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2b0>
 80004c2:	3e02      	subs	r6, #2
 80004c4:	4461      	add	r1, ip
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0x104>
 80004ce:	462e      	mov	r6, r5
 80004d0:	4628      	mov	r0, r5
 80004d2:	e705      	b.n	80002e0 <__udivmoddi4+0xa4>
 80004d4:	4606      	mov	r6, r0
 80004d6:	e6e3      	b.n	80002a0 <__udivmoddi4+0x64>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6f8      	b.n	80002ce <__udivmoddi4+0x92>
 80004dc:	454b      	cmp	r3, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f8>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e8:	3801      	subs	r0, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f8>
 80004ec:	4646      	mov	r6, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x28a>
 80004f0:	4620      	mov	r0, r4
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1e2>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x260>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b8>
 80004fc:	3b02      	subs	r3, #2
 80004fe:	4461      	add	r1, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x12c>
 8000502:	4630      	mov	r0, r6
 8000504:	e709      	b.n	800031a <__udivmoddi4+0xde>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x156>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fd32 	bl	8000f7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f8f9 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 fa4f 	bl	80009c0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000522:	f000 f989 	bl	8000838 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000526:	f000 f9d5 	bl	80008d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800052a:	f000 fa1f 	bl	800096c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 800052e:	f000 f943 	bl	80007b8 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  strcpy((char*)buf, "Stort");
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	4a6c      	ldr	r2, [pc, #432]	; (80006e8 <main+0x1d8>)
 8000536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800053a:	6018      	str	r0, [r3, #0]
 800053c:	3304      	adds	r3, #4
 800053e:	8019      	strh	r1, [r3, #0]

	  	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe5a 	bl	80001fc <strlen>
 8000548:	4603      	mov	r3, r0
 800054a:	b29a      	uxth	r2, r3
 800054c:	1d39      	adds	r1, r7, #4
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	4866      	ldr	r0, [pc, #408]	; (80006ec <main+0x1dc>)
 8000554:	f003 fc32 	bl	8003dbc <HAL_UART_Transmit>
buf[0] = REG_TEMP;
 8000558:	2305      	movs	r3, #5
 800055a:	713b      	strb	r3, [r7, #4]
	  	  	// send acknowledge bit
	  	  		  ACK = HAL_I2C_Master_Transmit(&hi2c2, SENS_ADDR, buf, 1, HAL_MAX_DELAY);
 800055c:	2318      	movs	r3, #24
 800055e:	b299      	uxth	r1, r3
 8000560:	1d3a      	adds	r2, r7, #4
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2301      	movs	r3, #1
 800056a:	4861      	ldr	r0, [pc, #388]	; (80006f0 <main+0x1e0>)
 800056c:	f001 f8c0 	bl	80016f0 <HAL_I2C_Master_Transmit>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	4b5f      	ldr	r3, [pc, #380]	; (80006f4 <main+0x1e4>)
 8000576:	701a      	strb	r2, [r3, #0]
//		  	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);

	  // receive 8 bits
	  UpperByte = HAL_I2C_Master_Receive(&hi2c2, SENS_ADDR, buf, 8, HAL_MAX_DELAY);
 8000578:	2318      	movs	r3, #24
 800057a:	b299      	uxth	r1, r3
 800057c:	1d3a      	adds	r2, r7, #4
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2308      	movs	r3, #8
 8000586:	485a      	ldr	r0, [pc, #360]	; (80006f0 <main+0x1e0>)
 8000588:	f001 f9a6 	bl	80018d8 <HAL_I2C_Master_Receive>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	4b59      	ldr	r3, [pc, #356]	; (80006f8 <main+0x1e8>)
 8000592:	701a      	strb	r2, [r3, #0]
	  if ( UpperByte != HAL_OK ) {
 8000594:	4b58      	ldr	r3, [pc, #352]	; (80006f8 <main+0x1e8>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <main+0xb4>
	          strcpy((char*)buf, "Error Rx\r\n");
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	4a57      	ldr	r2, [pc, #348]	; (80006fc <main+0x1ec>)
 80005a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005a2:	c303      	stmia	r3!, {r0, r1}
 80005a4:	801a      	strh	r2, [r3, #0]
 80005a6:	3302      	adds	r3, #2
 80005a8:	0c12      	lsrs	r2, r2, #16
 80005aa:	701a      	strb	r2, [r3, #0]
	  	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fe24 	bl	80001fc <strlen>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	484b      	ldr	r0, [pc, #300]	; (80006ec <main+0x1dc>)
 80005c0:	f003 fbfc 	bl	8003dbc <HAL_UART_Transmit>
	  }
	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe18 	bl	80001fc <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	1d39      	adds	r1, r7, #4
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	4845      	ldr	r0, [pc, #276]	; (80006ec <main+0x1dc>)
 80005d8:	f003 fbf0 	bl	8003dbc <HAL_UART_Transmit>

	  // receive 8 bits
	  LowerByte = HAL_I2C_Master_Receive(&hi2c2, SENS_ADDR, buf, 8, HAL_MAX_DELAY);
 80005dc:	2318      	movs	r3, #24
 80005de:	b299      	uxth	r1, r3
 80005e0:	1d3a      	adds	r2, r7, #4
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2308      	movs	r3, #8
 80005ea:	4841      	ldr	r0, [pc, #260]	; (80006f0 <main+0x1e0>)
 80005ec:	f001 f974 	bl	80018d8 <HAL_I2C_Master_Receive>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b42      	ldr	r3, [pc, #264]	; (8000700 <main+0x1f0>)
 80005f6:	701a      	strb	r2, [r3, #0]
	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fdfe 	bl	80001fc <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	1d39      	adds	r1, r7, #4
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	4838      	ldr	r0, [pc, #224]	; (80006ec <main+0x1dc>)
 800060c:	f003 fbd6 	bl	8003dbc <HAL_UART_Transmit>

	  // send NAK bit
	  NAK = HAL_I2C_Master_Transmit(&hi2c2, SENS_ADDR, buf, 1, HAL_MAX_DELAY);
 8000610:	2318      	movs	r3, #24
 8000612:	b299      	uxth	r1, r3
 8000614:	1d3a      	adds	r2, r7, #4
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2301      	movs	r3, #1
 800061e:	4834      	ldr	r0, [pc, #208]	; (80006f0 <main+0x1e0>)
 8000620:	f001 f866 	bl	80016f0 <HAL_I2C_Master_Transmit>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4b36      	ldr	r3, [pc, #216]	; (8000704 <main+0x1f4>)
 800062a:	701a      	strb	r2, [r3, #0]
	  strcpy((char*)buf, "Hm");
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4a36      	ldr	r2, [pc, #216]	; (8000708 <main+0x1f8>)
 8000630:	6812      	ldr	r2, [r2, #0]
 8000632:	4611      	mov	r1, r2
 8000634:	8019      	strh	r1, [r3, #0]
 8000636:	3302      	adds	r3, #2
 8000638:	0c12      	lsrs	r2, r2, #16
 800063a:	701a      	strb	r2, [r3, #0]

	  	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fddc 	bl	80001fc <strlen>
 8000644:	4603      	mov	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	1d39      	adds	r1, r7, #4
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	4827      	ldr	r0, [pc, #156]	; (80006ec <main+0x1dc>)
 8000650:	f003 fbb4 	bl	8003dbc <HAL_UART_Transmit>
	  }
	  if ((UpperByte & 0x40) == 0x40){ //TA > TUPPER
	  }
	  if ((UpperByte & 0x20) == 0x20){ //TA < TLOWER
	  }
	  UpperByte = UpperByte & 0x1F; //Clear flag bits
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <main+0x1e8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <main+0x1e8>)
 8000660:	701a      	strb	r2, [r3, #0]
	  if ((UpperByte & 0x10) == 0x10){ //TA < 0°C
 8000662:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <main+0x1e8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	2b00      	cmp	r3, #0
 800066c:	d017      	beq.n	800069e <main+0x18e>
	  UpperByte = UpperByte & 0x0F; //Clear SIGN
 800066e:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <main+0x1e8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	f003 030f 	and.w	r3, r3, #15
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <main+0x1e8>)
 800067a:	701a      	strb	r2, [r3, #0]
	  Temperature = 256 - (UpperByte * 16 + LowerByte / 16);
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <main+0x1e8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <main+0x1f0>)
 8000684:	7812      	ldrb	r2, [r2, #0]
 8000686:	0912      	lsrs	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	4413      	add	r3, r2
 800068c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000690:	ee07 3a90 	vmov	s15, r3
 8000694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000698:	edc7 7a05 	vstr	s15, [r7, #20]
 800069c:	e00d      	b.n	80006ba <main+0x1aa>
	  }else{ //TA ³ 0°C
	  Temperature = (UpperByte * 16 + LowerByte / 16);
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <main+0x1e8>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	4a16      	ldr	r2, [pc, #88]	; (8000700 <main+0x1f0>)
 80006a6:	7812      	ldrb	r2, [r2, #0]
 80006a8:	0912      	lsrs	r2, r2, #4
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	4413      	add	r3, r2
 80006ae:	ee07 3a90 	vmov	s15, r3
 80006b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006b6:	edc7 7a05 	vstr	s15, [r7, #20]
	  }
	  //Temperature = Ambient Temperature (°C)

	  strcpy((char*)buf, "ERRRRRROR");
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4a13      	ldr	r2, [pc, #76]	; (800070c <main+0x1fc>)
 80006be:	ca07      	ldmia	r2, {r0, r1, r2}
 80006c0:	c303      	stmia	r3!, {r0, r1}
 80006c2:	801a      	strh	r2, [r3, #0]

	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fd98 	bl	80001fc <strlen>
 80006cc:	4603      	mov	r3, r0
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	1d39      	adds	r1, r7, #4
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <main+0x1dc>)
 80006d8:	f003 fb70 	bl	8003dbc <HAL_UART_Transmit>
	  	  HAL_Delay(750);
 80006dc:	f240 20ee 	movw	r0, #750	; 0x2ee
 80006e0:	f000 fcc2 	bl	8001068 <HAL_Delay>
	  strcpy((char*)buf, "Stort");
 80006e4:	e725      	b.n	8000532 <main+0x22>
 80006e6:	bf00      	nop
 80006e8:	08005030 	.word	0x08005030
 80006ec:	2000007c 	.word	0x2000007c
 80006f0:	20000028 	.word	0x20000028
 80006f4:	200006a8 	.word	0x200006a8
 80006f8:	200006aa 	.word	0x200006aa
 80006fc:	08005038 	.word	0x08005038
 8000700:	200006ab 	.word	0x200006ab
 8000704:	200006a9 	.word	0x200006a9
 8000708:	08005044 	.word	0x08005044
 800070c:	08005048 	.word	0x08005048

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	; 0x58
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2244      	movs	r2, #68	; 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fc72 	bl	8005008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000732:	2000      	movs	r0, #0
 8000734:	f001 fe3e 	bl	80023b4 <HAL_PWREx_ControlVoltageScaling>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800073e:	f000 f9ff 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000742:	2322      	movs	r3, #34	; 0x22
 8000744:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2340      	movs	r3, #64	; 0x40
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000760:	231e      	movs	r3, #30
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fee1 	bl	800253c <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000780:	f000 f9de 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2303      	movs	r3, #3
 800078a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	2105      	movs	r1, #5
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fae6 	bl	8002d70 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007aa:	f000 f9c9 	bl	8000b40 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3758      	adds	r7, #88	; 0x58
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_I2C2_Init+0x74>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_I2C2_Init+0x78>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x107075B0;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_I2C2_Init+0x74>)
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <MX_I2C2_Init+0x7c>)
 80007c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_I2C2_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_I2C2_Init+0x74>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_I2C2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2C2_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_I2C2_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_I2C2_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <MX_I2C2_Init+0x74>)
 80007f4:	f000 feec 	bl	80015d0 <HAL_I2C_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007fe:	f000 f99f 	bl	8000b40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <MX_I2C2_Init+0x74>)
 8000806:	f001 fbd5 	bl	8001fb4 <HAL_I2CEx_ConfigAnalogFilter>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 f996 	bl	8000b40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_I2C2_Init+0x74>)
 8000818:	f001 fc17 	bl	800204a <HAL_I2CEx_ConfigDigitalFilter>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000822:	f000 f98d 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000028 	.word	0x20000028
 8000830:	40005800 	.word	0x40005800
 8000834:	107075b0 	.word	0x107075b0

08000838 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800083c:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 800083e:	4a23      	ldr	r2, [pc, #140]	; (80008cc <MX_LPUART1_UART_Init+0x94>)
 8000840:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 8000844:	4a22      	ldr	r2, [pc, #136]	; (80008d0 <MX_LPUART1_UART_Init+0x98>)
 8000846:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 800085c:	220c      	movs	r2, #12
 800085e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 800087a:	2200      	movs	r2, #0
 800087c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800087e:	4812      	ldr	r0, [pc, #72]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 8000880:	f003 fa4c 	bl	8003d1c <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800088a:	f000 f959 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 8000892:	f004 f815 	bl	80048c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 800089c:	f000 f950 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 80008a4:	f004 f84a 	bl	800493c <HAL_UARTEx_SetRxFifoThreshold>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80008ae:	f000 f947 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_LPUART1_UART_Init+0x90>)
 80008b4:	f003 ffcb 	bl	800484e <HAL_UARTEx_DisableFifoMode>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80008be:	f000 f93f 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000007c 	.word	0x2000007c
 80008cc:	40008000 	.word	0x40008000
 80008d0:	00033324 	.word	0x00033324

080008d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <MX_USART3_UART_Init+0x94>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_USART3_UART_Init+0x90>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_USART3_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <MX_USART3_UART_Init+0x90>)
 800091e:	f003 f9fd 	bl	8003d1c <HAL_UART_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 f90a 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000930:	f003 ffc6 	bl	80048c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800093a:	f000 f901 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	4808      	ldr	r0, [pc, #32]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000942:	f003 fffb 	bl	800493c <HAL_UARTEx_SetRxFifoThreshold>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800094c:	f000 f8f8 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_USART3_UART_Init+0x90>)
 8000952:	f003 ff7c 	bl	800484e <HAL_UARTEx_DisableFifoMode>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800095c:	f000 f8f0 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000010c 	.word	0x2000010c
 8000968:	40004800 	.word	0x40004800

0800096c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000972:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000976:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x50>)
 800097a:	2206      	movs	r2, #6
 800097c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000980:	2202      	movs	r2, #2
 8000982:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000986:	2201      	movs	r2, #1
 8000988:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000998:	2201      	movs	r2, #1
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80009aa:	f001 fb9a 	bl	80020e2 <HAL_PCD_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f000 f8c4 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000019c 	.word	0x2000019c

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	; 0x30
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b56      	ldr	r3, [pc, #344]	; (8000b30 <MX_GPIO_Init+0x170>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a55      	ldr	r2, [pc, #340]	; (8000b30 <MX_GPIO_Init+0x170>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b53      	ldr	r3, [pc, #332]	; (8000b30 <MX_GPIO_Init+0x170>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ee:	4b50      	ldr	r3, [pc, #320]	; (8000b30 <MX_GPIO_Init+0x170>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a4f      	ldr	r2, [pc, #316]	; (8000b30 <MX_GPIO_Init+0x170>)
 80009f4:	f043 0320 	orr.w	r3, r3, #32
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b4d      	ldr	r3, [pc, #308]	; (8000b30 <MX_GPIO_Init+0x170>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0320 	and.w	r3, r3, #32
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	4b4a      	ldr	r3, [pc, #296]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a49      	ldr	r2, [pc, #292]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b47      	ldr	r3, [pc, #284]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a43      	ldr	r2, [pc, #268]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4b3e      	ldr	r3, [pc, #248]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a3d      	ldr	r2, [pc, #244]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b3b      	ldr	r3, [pc, #236]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	4b38      	ldr	r3, [pc, #224]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a37      	ldr	r2, [pc, #220]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a66:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <MX_GPIO_Init+0x170>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000a7e:	f001 fd4d 	bl	800251c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a88:	482a      	ldr	r0, [pc, #168]	; (8000b34 <MX_GPIO_Init+0x174>)
 8000a8a:	f000 fd89 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	4829      	ldr	r0, [pc, #164]	; (8000b38 <MX_GPIO_Init+0x178>)
 8000a94:	f000 fd84 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4823      	ldr	r0, [pc, #140]	; (8000b3c <MX_GPIO_Init+0x17c>)
 8000ab0:	f000 fbe4 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f000 fbd3 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ad6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4811      	ldr	r0, [pc, #68]	; (8000b34 <MX_GPIO_Init+0x174>)
 8000af0:	f000 fbc4 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000af4:	2320      	movs	r3, #32
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <MX_GPIO_Init+0x178>)
 8000b0c:	f000 fbb6 	bl	800127c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b10:	2340      	movs	r3, #64	; 0x40
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_GPIO_Init+0x178>)
 8000b24:	f000 fbaa 	bl	800127c <HAL_GPIO_Init>

}
 8000b28:	bf00      	nop
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48000400 	.word	0x48000400
 8000b38:	48001800 	.word	0x48001800
 8000b3c:	48000800 	.word	0x48000800

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0ae      	sub	sp, #184	; 0xb8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2294      	movs	r2, #148	; 0x94
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f004 fa27 	bl	8005008 <memset>
  if(hi2c->Instance==I2C2)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <HAL_I2C_MspInit+0xb0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d13a      	bne.n	8000c3a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 fb8b 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bdc:	f7ff ffb0 	bl	8000b40 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_I2C_MspInit+0xb4>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <HAL_I2C_MspInit+0xb4>)
 8000be6:	f043 0320 	orr.w	r3, r3, #32
 8000bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_I2C_MspInit+0xb4>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf0:	f003 0320 	and.w	r3, r3, #32
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfe:	2312      	movs	r3, #18
 8000c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c10:	2304      	movs	r3, #4
 8000c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480b      	ldr	r0, [pc, #44]	; (8000c4c <HAL_I2C_MspInit+0xb8>)
 8000c1e:	f000 fb2d 	bl	800127c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_I2C_MspInit+0xb4>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_I2C_MspInit+0xb4>)
 8000c28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_I2C_MspInit+0xb4>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	37b8      	adds	r7, #184	; 0xb8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40005800 	.word	0x40005800
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48001400 	.word	0x48001400

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0b0      	sub	sp, #192	; 0xc0
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	2294      	movs	r2, #148	; 0x94
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 f9c9 	bl	8005008 <memset>
  if(huart->Instance==LPUART1)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a43      	ldr	r2, [pc, #268]	; (8000d88 <HAL_UART_MspInit+0x138>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d13e      	bne.n	8000cfe <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c80:	2320      	movs	r3, #32
 8000c82:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	f107 0318 	add.w	r3, r7, #24
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 fb2d 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c98:	f7ff ff52 	bl	8000b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c9c:	4b3b      	ldr	r3, [pc, #236]	; (8000d8c <HAL_UART_MspInit+0x13c>)
 8000c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ca0:	4a3a      	ldr	r2, [pc, #232]	; (8000d8c <HAL_UART_MspInit+0x13c>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ca8:	4b38      	ldr	r3, [pc, #224]	; (8000d8c <HAL_UART_MspInit+0x13c>)
 8000caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb4:	4b35      	ldr	r3, [pc, #212]	; (8000d8c <HAL_UART_MspInit+0x13c>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	4a34      	ldr	r2, [pc, #208]	; (8000d8c <HAL_UART_MspInit+0x13c>)
 8000cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc0:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <HAL_UART_MspInit+0x13c>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000ccc:	f001 fc26 	bl	800251c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000cd0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000cea:	2308      	movs	r3, #8
 8000cec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4826      	ldr	r0, [pc, #152]	; (8000d90 <HAL_UART_MspInit+0x140>)
 8000cf8:	f000 fac0 	bl	800127c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cfc:	e040      	b.n	8000d80 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a24      	ldr	r2, [pc, #144]	; (8000d94 <HAL_UART_MspInit+0x144>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d13b      	bne.n	8000d80 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d10:	f107 0318 	add.w	r3, r7, #24
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fae9 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000d20:	f7ff ff0e 	bl	8000b40 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_UART_MspInit+0x13c>)
 8000d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d28:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <HAL_UART_MspInit+0x13c>)
 8000d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_UART_MspInit+0x13c>)
 8000d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_UART_MspInit+0x13c>)
 8000d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d40:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <HAL_UART_MspInit+0x13c>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <HAL_UART_MspInit+0x13c>)
 8000d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d6e:	2307      	movs	r3, #7
 8000d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4807      	ldr	r0, [pc, #28]	; (8000d98 <HAL_UART_MspInit+0x148>)
 8000d7c:	f000 fa7e 	bl	800127c <HAL_GPIO_Init>
}
 8000d80:	bf00      	nop
 8000d82:	37c0      	adds	r7, #192	; 0xc0
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40008000 	.word	0x40008000
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	48001800 	.word	0x48001800
 8000d94:	40004800 	.word	0x40004800
 8000d98:	48000c00 	.word	0x48000c00

08000d9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0b0      	sub	sp, #192	; 0xc0
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	2294      	movs	r2, #148	; 0x94
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f004 f923 	bl	8005008 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dca:	d16c      	bne.n	8000ea6 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 fa85 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000de8:	f7ff feaa 	bl	8000b40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <HAL_PCD_MspInit+0x114>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	4a2f      	ldr	r2, [pc, #188]	; (8000eb0 <HAL_PCD_MspInit+0x114>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <HAL_PCD_MspInit+0x114>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e04:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e1e:	230a      	movs	r3, #10
 8000e20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f000 fa25 	bl	800127c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f000 fa14 	bl	800127c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_PCD_MspInit+0x114>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e58:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <HAL_PCD_MspInit+0x114>)
 8000e5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_PCD_MspInit+0x114>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_PCD_MspInit+0x114>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d114      	bne.n	8000ea2 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_PCD_MspInit+0x114>)
 8000e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <HAL_PCD_MspInit+0x114>)
 8000e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e82:	6593      	str	r3, [r2, #88]	; 0x58
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_PCD_MspInit+0x114>)
 8000e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000e90:	f001 fb34 	bl	80024fc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_PCD_MspInit+0x114>)
 8000e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e98:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <HAL_PCD_MspInit+0x114>)
 8000e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ea0:	e001      	b.n	8000ea6 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000ea2:	f001 fb2b 	bl	80024fc <HAL_PWREx_EnableVddUSB>
}
 8000ea6:	bf00      	nop
 8000ea8:	37c0      	adds	r7, #192	; 0xc0
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f000 f892 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <SystemInit+0x20>)
 8000f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <SystemInit+0x20>)
 8000f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f30:	f7ff ffea 	bl	8000f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f34:	480c      	ldr	r0, [pc, #48]	; (8000f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f36:	490d      	ldr	r1, [pc, #52]	; (8000f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f38:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <LoopForever+0xe>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f3c:	e002      	b.n	8000f44 <LoopCopyDataInit>

08000f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f42:	3304      	adds	r3, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f48:	d3f9      	bcc.n	8000f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f4c:	4c0a      	ldr	r4, [pc, #40]	; (8000f78 <LoopForever+0x16>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f50:	e001      	b.n	8000f56 <LoopFillZerobss>

08000f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f54:	3204      	adds	r2, #4

08000f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f58:	d3fb      	bcc.n	8000f52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f004 f831 	bl	8004fc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f5e:	f7ff fad7 	bl	8000510 <main>

08000f62 <LoopForever>:

LoopForever:
    b LoopForever
 8000f62:	e7fe      	b.n	8000f62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f64:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f70:	080050d4 	.word	0x080050d4
  ldr r2, =_sbss
 8000f74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f78:	200006b0 	.word	0x200006b0

08000f7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC1_IRQHandler>

08000f7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 f943 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 f80e 	bl	8000fb0 <HAL_InitTick>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	e001      	b.n	8000fa4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa0:	f7ff fdd4 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_InitTick+0x6c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d023      	beq.n	800100c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <HAL_InitTick+0x70>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_InitTick+0x6c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f941 	bl	8001262 <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10f      	bne.n	8001006 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b0f      	cmp	r3, #15
 8000fea:	d809      	bhi.n	8001000 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fec:	2200      	movs	r2, #0
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f000 f919 	bl	800122a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_InitTick+0x74>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e007      	b.n	8001010 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e004      	b.n	8001010 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e001      	b.n	8001010 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	20000000 	.word	0x20000000
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	200006ac 	.word	0x200006ac

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200006ac 	.word	0x200006ac

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_Delay+0x44>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffde 	bl	8001050 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff47 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff5c 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff8e 	bl	8001168 <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5d 	bl	8001114 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffb0 	bl	80011d0 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128a:	e166      	b.n	800155a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8158 	beq.w	8001554 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d005      	beq.n	80012bc <HAL_GPIO_Init+0x40>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d130      	bne.n	800131e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f2:	2201      	movs	r2, #1
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	f003 0201 	and.w	r2, r3, #1
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b03      	cmp	r3, #3
 8001328:	d017      	beq.n	800135a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d123      	bne.n	80013ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	6939      	ldr	r1, [r7, #16]
 80013aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0203 	and.w	r2, r3, #3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 80b2 	beq.w	8001554 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f0:	4b61      	ldr	r3, [pc, #388]	; (8001578 <HAL_GPIO_Init+0x2fc>)
 80013f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f4:	4a60      	ldr	r2, [pc, #384]	; (8001578 <HAL_GPIO_Init+0x2fc>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6613      	str	r3, [r2, #96]	; 0x60
 80013fc:	4b5e      	ldr	r3, [pc, #376]	; (8001578 <HAL_GPIO_Init+0x2fc>)
 80013fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001408:	4a5c      	ldr	r2, [pc, #368]	; (800157c <HAL_GPIO_Init+0x300>)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001432:	d02b      	beq.n	800148c <HAL_GPIO_Init+0x210>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a52      	ldr	r2, [pc, #328]	; (8001580 <HAL_GPIO_Init+0x304>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d025      	beq.n	8001488 <HAL_GPIO_Init+0x20c>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a51      	ldr	r2, [pc, #324]	; (8001584 <HAL_GPIO_Init+0x308>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d01f      	beq.n	8001484 <HAL_GPIO_Init+0x208>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a50      	ldr	r2, [pc, #320]	; (8001588 <HAL_GPIO_Init+0x30c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d019      	beq.n	8001480 <HAL_GPIO_Init+0x204>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a4f      	ldr	r2, [pc, #316]	; (800158c <HAL_GPIO_Init+0x310>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d013      	beq.n	800147c <HAL_GPIO_Init+0x200>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a4e      	ldr	r2, [pc, #312]	; (8001590 <HAL_GPIO_Init+0x314>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d00d      	beq.n	8001478 <HAL_GPIO_Init+0x1fc>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4d      	ldr	r2, [pc, #308]	; (8001594 <HAL_GPIO_Init+0x318>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d007      	beq.n	8001474 <HAL_GPIO_Init+0x1f8>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a4c      	ldr	r2, [pc, #304]	; (8001598 <HAL_GPIO_Init+0x31c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d101      	bne.n	8001470 <HAL_GPIO_Init+0x1f4>
 800146c:	2307      	movs	r3, #7
 800146e:	e00e      	b.n	800148e <HAL_GPIO_Init+0x212>
 8001470:	2308      	movs	r3, #8
 8001472:	e00c      	b.n	800148e <HAL_GPIO_Init+0x212>
 8001474:	2306      	movs	r3, #6
 8001476:	e00a      	b.n	800148e <HAL_GPIO_Init+0x212>
 8001478:	2305      	movs	r3, #5
 800147a:	e008      	b.n	800148e <HAL_GPIO_Init+0x212>
 800147c:	2304      	movs	r3, #4
 800147e:	e006      	b.n	800148e <HAL_GPIO_Init+0x212>
 8001480:	2303      	movs	r3, #3
 8001482:	e004      	b.n	800148e <HAL_GPIO_Init+0x212>
 8001484:	2302      	movs	r3, #2
 8001486:	e002      	b.n	800148e <HAL_GPIO_Init+0x212>
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <HAL_GPIO_Init+0x212>
 800148c:	2300      	movs	r3, #0
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	f002 0203 	and.w	r2, r2, #3
 8001494:	0092      	lsls	r2, r2, #2
 8001496:	4093      	lsls	r3, r2
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800149e:	4937      	ldr	r1, [pc, #220]	; (800157c <HAL_GPIO_Init+0x300>)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ac:	4b3b      	ldr	r3, [pc, #236]	; (800159c <HAL_GPIO_Init+0x320>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014d0:	4a32      	ldr	r2, [pc, #200]	; (800159c <HAL_GPIO_Init+0x320>)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_GPIO_Init+0x320>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014fa:	4a28      	ldr	r2, [pc, #160]	; (800159c <HAL_GPIO_Init+0x320>)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <HAL_GPIO_Init+0x320>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HAL_GPIO_Init+0x320>)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_GPIO_Init+0x320>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800154e:	4a13      	ldr	r2, [pc, #76]	; (800159c <HAL_GPIO_Init+0x320>)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3301      	adds	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	f47f ae91 	bne.w	800128c <HAL_GPIO_Init+0x10>
  }
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40021000 	.word	0x40021000
 800157c:	40010000 	.word	0x40010000
 8001580:	48000400 	.word	0x48000400
 8001584:	48000800 	.word	0x48000800
 8001588:	48000c00 	.word	0x48000c00
 800158c:	48001000 	.word	0x48001000
 8001590:	48001400 	.word	0x48001400
 8001594:	48001800 	.word	0x48001800
 8001598:	48001c00 	.word	0x48001c00
 800159c:	40010400 	.word	0x40010400

080015a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015bc:	e002      	b.n	80015c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e081      	b.n	80016e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff facc 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2224      	movs	r2, #36	; 0x24
 8001600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0201 	bic.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001620:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001630:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d107      	bne.n	800164a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	e006      	b.n	8001658 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001656:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d104      	bne.n	800166a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001668:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800167c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800168c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69d9      	ldr	r1, [r3, #28]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1a      	ldr	r2, [r3, #32]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0201 	orr.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2220      	movs	r2, #32
 80016d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	461a      	mov	r2, r3
 80016fc:	460b      	mov	r3, r1
 80016fe:	817b      	strh	r3, [r7, #10]
 8001700:	4613      	mov	r3, r2
 8001702:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b20      	cmp	r3, #32
 800170e:	f040 80da 	bne.w	80018c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_I2C_Master_Transmit+0x30>
 800171c:	2302      	movs	r3, #2
 800171e:	e0d3      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1d8>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001728:	f7ff fc92 	bl	8001050 <HAL_GetTick>
 800172c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2319      	movs	r3, #25
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f9e6 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0be      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2221      	movs	r2, #33	; 0x21
 800174e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2210      	movs	r2, #16
 8001756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	893a      	ldrh	r2, [r7, #8]
 800176a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001776:	b29b      	uxth	r3, r3
 8001778:	2bff      	cmp	r3, #255	; 0xff
 800177a:	d90e      	bls.n	800179a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	22ff      	movs	r2, #255	; 0xff
 8001780:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001786:	b2da      	uxtb	r2, r3
 8001788:	8979      	ldrh	r1, [r7, #10]
 800178a:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 fbdc 	bl	8001f50 <I2C_TransferConfig>
 8001798:	e06c      	b.n	8001874 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	8979      	ldrh	r1, [r7, #10]
 80017ac:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fbcb 	bl	8001f50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80017ba:	e05b      	b.n	8001874 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	6a39      	ldr	r1, [r7, #32]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f9e3 	bl	8001b8c <I2C_WaitOnTXISFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e07b      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d034      	beq.n	8001874 <HAL_I2C_Master_Transmit+0x184>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180e:	2b00      	cmp	r3, #0
 8001810:	d130      	bne.n	8001874 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	2200      	movs	r2, #0
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 f975 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e04d      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001830:	b29b      	uxth	r3, r3
 8001832:	2bff      	cmp	r3, #255	; 0xff
 8001834:	d90e      	bls.n	8001854 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	22ff      	movs	r2, #255	; 0xff
 800183a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	b2da      	uxtb	r2, r3
 8001842:	8979      	ldrh	r1, [r7, #10]
 8001844:	2300      	movs	r3, #0
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 fb7f 	bl	8001f50 <I2C_TransferConfig>
 8001852:	e00f      	b.n	8001874 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001862:	b2da      	uxtb	r2, r3
 8001864:	8979      	ldrh	r1, [r7, #10]
 8001866:	2300      	movs	r3, #0
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 fb6e 	bl	8001f50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001878:	b29b      	uxth	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d19e      	bne.n	80017bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	6a39      	ldr	r1, [r7, #32]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 f9c2 	bl	8001c0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e01a      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2220      	movs	r2, #32
 8001898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80018a6:	400b      	ands	r3, r1
 80018a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2220      	movs	r2, #32
 80018ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80018c6:	2302      	movs	r3, #2
  }
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	80002000 	.word	0x80002000
 80018d4:	fe00e800 	.word	0xfe00e800

080018d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	461a      	mov	r2, r3
 80018e4:	460b      	mov	r3, r1
 80018e6:	817b      	strh	r3, [r7, #10]
 80018e8:	4613      	mov	r3, r2
 80018ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b20      	cmp	r3, #32
 80018f6:	f040 80db 	bne.w	8001ab0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_I2C_Master_Receive+0x30>
 8001904:	2302      	movs	r3, #2
 8001906:	e0d4      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1da>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001910:	f7ff fb9e 	bl	8001050 <HAL_GetTick>
 8001914:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2319      	movs	r3, #25
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 f8f2 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0bf      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2222      	movs	r2, #34	; 0x22
 8001936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2210      	movs	r2, #16
 800193e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	893a      	ldrh	r2, [r7, #8]
 8001952:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	2bff      	cmp	r3, #255	; 0xff
 8001962:	d90e      	bls.n	8001982 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196e:	b2da      	uxtb	r2, r3
 8001970:	8979      	ldrh	r1, [r7, #10]
 8001972:	4b52      	ldr	r3, [pc, #328]	; (8001abc <HAL_I2C_Master_Receive+0x1e4>)
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 fae8 	bl	8001f50 <I2C_TransferConfig>
 8001980:	e06d      	b.n	8001a5e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001990:	b2da      	uxtb	r2, r3
 8001992:	8979      	ldrh	r1, [r7, #10]
 8001994:	4b49      	ldr	r3, [pc, #292]	; (8001abc <HAL_I2C_Master_Receive+0x1e4>)
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 fad7 	bl	8001f50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80019a2:	e05c      	b.n	8001a5e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	6a39      	ldr	r1, [r7, #32]
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 f96b 	bl	8001c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e07c      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d034      	beq.n	8001a5e <HAL_I2C_Master_Receive+0x186>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d130      	bne.n	8001a5e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	2200      	movs	r2, #0
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f880 	bl	8001b0c <I2C_WaitOnFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e04d      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	2bff      	cmp	r3, #255	; 0xff
 8001a1e:	d90e      	bls.n	8001a3e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	22ff      	movs	r2, #255	; 0xff
 8001a24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	8979      	ldrh	r1, [r7, #10]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 fa8a 	bl	8001f50 <I2C_TransferConfig>
 8001a3c:	e00f      	b.n	8001a5e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	8979      	ldrh	r1, [r7, #10]
 8001a50:	2300      	movs	r3, #0
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 fa79 	bl	8001f50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d19d      	bne.n	80019a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	6a39      	ldr	r1, [r7, #32]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f8cd 	bl	8001c0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e01a      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2220      	movs	r2, #32
 8001a82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6859      	ldr	r1, [r3, #4]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_I2C_Master_Receive+0x1e8>)
 8001a90:	400b      	ands	r3, r1
 8001a92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	e000      	b.n	8001ab2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ab0:	2302      	movs	r3, #2
  }
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	80002400 	.word	0x80002400
 8001ac0:	fe00e800 	.word	0xfe00e800

08001ac4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d103      	bne.n	8001ae2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d007      	beq.n	8001b00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	619a      	str	r2, [r3, #24]
  }
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b1c:	e022      	b.n	8001b64 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d01e      	beq.n	8001b64 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b26:	f7ff fa93 	bl	8001050 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d302      	bcc.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d113      	bne.n	8001b64 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f043 0220 	orr.w	r2, r3, #32
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e00f      	b.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d0cd      	beq.n	8001b1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b98:	e02c      	b.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f8ea 	bl	8001d78 <I2C_IsErrorOccurred>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e02a      	b.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d01e      	beq.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb6:	f7ff fa4b 	bl	8001050 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d302      	bcc.n	8001bcc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d113      	bne.n	8001bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f043 0220 	orr.w	r2, r3, #32
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e007      	b.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d1cb      	bne.n	8001b9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c18:	e028      	b.n	8001c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f8aa 	bl	8001d78 <I2C_IsErrorOccurred>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e026      	b.n	8001c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c2e:	f7ff fa0f 	bl	8001050 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d302      	bcc.n	8001c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d113      	bne.n	8001c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	f043 0220 	orr.w	r2, r3, #32
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2220      	movs	r2, #32
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e007      	b.n	8001c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d1cf      	bne.n	8001c1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c90:	e064      	b.n	8001d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 f86e 	bl	8001d78 <I2C_IsErrorOccurred>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e062      	b.n	8001d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0320 	and.w	r3, r3, #32
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	d138      	bne.n	8001d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d105      	bne.n	8001cce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e04e      	b.n	8001d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b10      	cmp	r3, #16
 8001cda:	d107      	bne.n	8001cec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
 8001cea:	e002      	b.n	8001cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001d06:	400b      	ands	r3, r1
 8001d08:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e022      	b.n	8001d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d26:	f7ff f993 	bl	8001050 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d302      	bcc.n	8001d3c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10f      	bne.n	8001d5c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	f043 0220 	orr.w	r2, r3, #32
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e007      	b.n	8001d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d193      	bne.n	8001c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	fe00e800 	.word	0xfe00e800

08001d78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d075      	beq.n	8001e90 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2210      	movs	r2, #16
 8001daa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dac:	e056      	b.n	8001e5c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d052      	beq.n	8001e5c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001db6:	f7ff f94b 	bl	8001050 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d302      	bcc.n	8001dcc <I2C_IsErrorOccurred+0x54>
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d147      	bne.n	8001e5c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dee:	d12e      	bne.n	8001e4e <I2C_IsErrorOccurred+0xd6>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df6:	d02a      	beq.n	8001e4e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001df8:	7cfb      	ldrb	r3, [r7, #19]
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d027      	beq.n	8001e4e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e0e:	f7ff f91f 	bl	8001050 <HAL_GetTick>
 8001e12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e14:	e01b      	b.n	8001e4e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e16:	f7ff f91b 	bl	8001050 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b19      	cmp	r3, #25
 8001e22:	d914      	bls.n	8001e4e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	f043 0220 	orr.w	r2, r3, #32
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d1dc      	bne.n	8001e16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	d003      	beq.n	8001e72 <I2C_IsErrorOccurred+0xfa>
 8001e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d09d      	beq.n	8001dae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00b      	beq.n	8001edc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	f043 0308 	orr.w	r3, r3, #8
 8001eca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01c      	beq.n	8001f40 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f7ff fddc 	bl	8001ac4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6859      	ldr	r1, [r3, #4]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <I2C_IsErrorOccurred+0x1d4>)
 8001f18:	400b      	ands	r3, r1
 8001f1a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3728      	adds	r7, #40	; 0x28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	fe00e800 	.word	0xfe00e800

08001f50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	817b      	strh	r3, [r7, #10]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f62:	897b      	ldrh	r3, [r7, #10]
 8001f64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f68:	7a7b      	ldrb	r3, [r7, #9]
 8001f6a:	041b      	lsls	r3, r3, #16
 8001f6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	0d5b      	lsrs	r3, r3, #21
 8001f8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <I2C_TransferConfig+0x60>)
 8001f90:	430b      	orrs	r3, r1
 8001f92:	43db      	mvns	r3, r3
 8001f94:	ea02 0103 	and.w	r1, r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fa2:	bf00      	nop
 8001fa4:	371c      	adds	r7, #28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	03ff63ff 	.word	0x03ff63ff

08001fb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d138      	bne.n	800203c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e032      	b.n	800203e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2224      	movs	r2, #36	; 0x24
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002006:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6819      	ldr	r1, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	e000      	b.n	800203e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800203c:	2302      	movs	r3, #2
  }
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800204a:	b480      	push	{r7}
 800204c:	b085      	sub	sp, #20
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b20      	cmp	r3, #32
 800205e:	d139      	bne.n	80020d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800206a:	2302      	movs	r3, #2
 800206c:	e033      	b.n	80020d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2224      	movs	r2, #36	; 0x24
 800207a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800209c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e000      	b.n	80020d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020d4:	2302      	movs	r3, #2
  }
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e4:	b08f      	sub	sp, #60	; 0x3c
 80020e6:	af0a      	add	r7, sp, #40	; 0x28
 80020e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e116      	b.n	8002322 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe fe44 	bl	8000d9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2203      	movs	r2, #3
 8002118:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f002 fcba 	bl	8004aac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	687e      	ldr	r6, [r7, #4]
 8002140:	466d      	mov	r5, sp
 8002142:	f106 0410 	add.w	r4, r6, #16
 8002146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002152:	e885 0003 	stmia.w	r5, {r0, r1}
 8002156:	1d33      	adds	r3, r6, #4
 8002158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800215a:	6838      	ldr	r0, [r7, #0]
 800215c:	f002 fc7a 	bl	8004a54 <USB_CoreInit>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2202      	movs	r2, #2
 800216a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0d7      	b.n	8002322 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f002 fca8 	bl	8004ace <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	e04a      	b.n	800221a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	333d      	adds	r3, #61	; 0x3d
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	333c      	adds	r3, #60	; 0x3c
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	b298      	uxth	r0, r3
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	3344      	adds	r3, #68	; 0x44
 80021c0:	4602      	mov	r2, r0
 80021c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	3340      	adds	r3, #64	; 0x40
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3348      	adds	r3, #72	; 0x48
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	334c      	adds	r3, #76	; 0x4c
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	3354      	adds	r3, #84	; 0x54
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	3301      	adds	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d3af      	bcc.n	8002184 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e044      	b.n	80022b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800222a:	7bfa      	ldrb	r2, [r7, #15]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4413      	add	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	3301      	adds	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d3b5      	bcc.n	800222a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	687e      	ldr	r6, [r7, #4]
 80022c6:	466d      	mov	r5, sp
 80022c8:	f106 0410 	add.w	r4, r6, #16
 80022cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80022dc:	1d33      	adds	r3, r6, #4
 80022de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e0:	6838      	ldr	r0, [r7, #0]
 80022e2:	f002 fc41 	bl	8004b68 <USB_DevInit>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e014      	b.n	8002322 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	2b01      	cmp	r3, #1
 800230e:	d102      	bne.n	8002316 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f80a 	bl	800232a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fded 	bl	8004efa <USB_DevDisconnect>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800232a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235c:	f043 0303 	orr.w	r3, r3, #3
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002384:	d102      	bne.n	800238c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800238a:	e00b      	b.n	80023a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800238e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800239a:	d102      	bne.n	80023a2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800239c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a0:	e000      	b.n	80023a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80023a2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40007000 	.word	0x40007000

080023b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d141      	bne.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023c2:	4b4b      	ldr	r3, [pc, #300]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ce:	d131      	bne.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023d0:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023d6:	4a46      	ldr	r2, [pc, #280]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023e0:	4b43      	ldr	r3, [pc, #268]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023e8:	4a41      	ldr	r2, [pc, #260]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023f0:	4b40      	ldr	r3, [pc, #256]	; (80024f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2232      	movs	r2, #50	; 0x32
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	4a3f      	ldr	r2, [pc, #252]	; (80024f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002400:	0c9b      	lsrs	r3, r3, #18
 8002402:	3301      	adds	r3, #1
 8002404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002406:	e002      	b.n	800240e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3b01      	subs	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800240e:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241a:	d102      	bne.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f2      	bne.n	8002408 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002422:	4b33      	ldr	r3, [pc, #204]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242e:	d158      	bne.n	80024e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e057      	b.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002434:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800243a:	4a2d      	ldr	r2, [pc, #180]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002440:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002444:	e04d      	b.n	80024e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800244c:	d141      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800244e:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245a:	d131      	bne.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800245c:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002462:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800246c:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002474:	4a1e      	ldr	r2, [pc, #120]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800247a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800247c:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2232      	movs	r2, #50	; 0x32
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002488:	fba2 2303 	umull	r2, r3, r2, r3
 800248c:	0c9b      	lsrs	r3, r3, #18
 800248e:	3301      	adds	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002492:	e002      	b.n	800249a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3b01      	subs	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a6:	d102      	bne.n	80024ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f2      	bne.n	8002494 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ba:	d112      	bne.n	80024e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e011      	b.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80024d0:	e007      	b.n	80024e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024e0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40007000 	.word	0x40007000
 80024f4:	20000000 	.word	0x20000000
 80024f8:	431bde83 	.word	0x431bde83

080024fc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4a04      	ldr	r2, [pc, #16]	; (8002518 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800250a:	6053      	str	r3, [r2, #4]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40007000 	.word	0x40007000

0800251c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800252a:	6053      	str	r3, [r2, #4]
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40007000 	.word	0x40007000

0800253c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	f000 bc08 	b.w	8002d60 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002550:	4b96      	ldr	r3, [pc, #600]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800255a:	4b94      	ldr	r3, [pc, #592]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80e4 	beq.w	800273a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_RCC_OscConfig+0x4c>
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	f040 808b 	bne.w	8002696 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b01      	cmp	r3, #1
 8002584:	f040 8087 	bne.w	8002696 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002588:	4b88      	ldr	r3, [pc, #544]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_OscConfig+0x64>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e3df      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1a      	ldr	r2, [r3, #32]
 80025a4:	4b81      	ldr	r3, [pc, #516]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <HAL_RCC_OscConfig+0x7e>
 80025b0:	4b7e      	ldr	r3, [pc, #504]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b8:	e005      	b.n	80025c6 <HAL_RCC_OscConfig+0x8a>
 80025ba:	4b7c      	ldr	r3, [pc, #496]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80025bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d223      	bcs.n	8002612 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fdcc 	bl	800316c <RCC_SetFlashLatencyFromMSIRange>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e3c0      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025de:	4b73      	ldr	r3, [pc, #460]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a72      	ldr	r2, [pc, #456]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80025e4:	f043 0308 	orr.w	r3, r3, #8
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b70      	ldr	r3, [pc, #448]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	496d      	ldr	r1, [pc, #436]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025fc:	4b6b      	ldr	r3, [pc, #428]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	4968      	ldr	r1, [pc, #416]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
 8002610:	e025      	b.n	800265e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002612:	4b66      	ldr	r3, [pc, #408]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a65      	ldr	r2, [pc, #404]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 8002618:	f043 0308 	orr.w	r3, r3, #8
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	4b63      	ldr	r3, [pc, #396]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4960      	ldr	r1, [pc, #384]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002630:	4b5e      	ldr	r3, [pc, #376]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	495b      	ldr	r1, [pc, #364]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fd8c 	bl	800316c <RCC_SetFlashLatencyFromMSIRange>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e380      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800265e:	f000 fcc1 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 8002662:	4602      	mov	r2, r0
 8002664:	4b51      	ldr	r3, [pc, #324]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	4950      	ldr	r1, [pc, #320]	; (80027b0 <HAL_RCC_OscConfig+0x274>)
 8002670:	5ccb      	ldrb	r3, [r1, r3]
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	fa22 f303 	lsr.w	r3, r2, r3
 800267a:	4a4e      	ldr	r2, [pc, #312]	; (80027b4 <HAL_RCC_OscConfig+0x278>)
 800267c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800267e:	4b4e      	ldr	r3, [pc, #312]	; (80027b8 <HAL_RCC_OscConfig+0x27c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fc94 	bl	8000fb0 <HAL_InitTick>
 8002688:	4603      	mov	r3, r0
 800268a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d052      	beq.n	8002738 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	e364      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d032      	beq.n	8002704 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800269e:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a42      	ldr	r2, [pc, #264]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026aa:	f7fe fcd1 	bl	8001050 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026b2:	f7fe fccd 	bl	8001050 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e34d      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026c4:	4b39      	ldr	r3, [pc, #228]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d0:	4b36      	ldr	r3, [pc, #216]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a35      	ldr	r2, [pc, #212]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80026d6:	f043 0308 	orr.w	r3, r3, #8
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b33      	ldr	r3, [pc, #204]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4930      	ldr	r1, [pc, #192]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ee:	4b2f      	ldr	r3, [pc, #188]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	492b      	ldr	r1, [pc, #172]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
 8002702:	e01a      	b.n	800273a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a28      	ldr	r2, [pc, #160]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002710:	f7fe fc9e 	bl	8001050 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002718:	f7fe fc9a 	bl	8001050 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e31a      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x1dc>
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002738:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d073      	beq.n	800282e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d005      	beq.n	8002758 <HAL_RCC_OscConfig+0x21c>
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d10e      	bne.n	8002770 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d10b      	bne.n	8002770 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	4b14      	ldr	r3, [pc, #80]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d063      	beq.n	800282c <HAL_RCC_OscConfig+0x2f0>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d15f      	bne.n	800282c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e2f7      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002778:	d106      	bne.n	8002788 <HAL_RCC_OscConfig+0x24c>
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e025      	b.n	80027d4 <HAL_RCC_OscConfig+0x298>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002790:	d114      	bne.n	80027bc <HAL_RCC_OscConfig+0x280>
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 8002798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a02      	ldr	r2, [pc, #8]	; (80027ac <HAL_RCC_OscConfig+0x270>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e013      	b.n	80027d4 <HAL_RCC_OscConfig+0x298>
 80027ac:	40021000 	.word	0x40021000
 80027b0:	08005054 	.word	0x08005054
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000004 	.word	0x20000004
 80027bc:	4ba0      	ldr	r3, [pc, #640]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a9f      	ldr	r2, [pc, #636]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80027c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b9d      	ldr	r3, [pc, #628]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a9c      	ldr	r2, [pc, #624]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80027ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d013      	beq.n	8002804 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fc38 	bl	8001050 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e4:	f7fe fc34 	bl	8001050 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	; 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e2b4      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f6:	4b92      	ldr	r3, [pc, #584]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x2a8>
 8002802:	e014      	b.n	800282e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fc24 	bl	8001050 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800280c:	f7fe fc20 	bl	8001050 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e2a0      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800281e:	4b88      	ldr	r3, [pc, #544]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x2d0>
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d060      	beq.n	80028fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d005      	beq.n	800284c <HAL_RCC_OscConfig+0x310>
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b0c      	cmp	r3, #12
 8002844:	d119      	bne.n	800287a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d116      	bne.n	800287a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800284c:	4b7c      	ldr	r3, [pc, #496]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_OscConfig+0x328>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e27d      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002864:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	061b      	lsls	r3, r3, #24
 8002872:	4973      	ldr	r1, [pc, #460]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002878:	e040      	b.n	80028fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d023      	beq.n	80028ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002882:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6e      	ldr	r2, [pc, #440]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7fe fbdf 	bl	8001050 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe fbdb 	bl	8001050 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e25b      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a8:	4b65      	ldr	r3, [pc, #404]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b4:	4b62      	ldr	r3, [pc, #392]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	061b      	lsls	r3, r3, #24
 80028c2:	495f      	ldr	r1, [pc, #380]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
 80028c8:	e018      	b.n	80028fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ca:	4b5d      	ldr	r3, [pc, #372]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a5c      	ldr	r2, [pc, #368]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80028d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7fe fbbb 	bl	8001050 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028de:	f7fe fbb7 	bl	8001050 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e237      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f0:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d03c      	beq.n	8002982 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01c      	beq.n	800294a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002910:	4b4b      	ldr	r3, [pc, #300]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002916:	4a4a      	ldr	r2, [pc, #296]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe fb96 	bl	8001050 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002928:	f7fe fb92 	bl	8001050 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e212      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 800293c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ef      	beq.n	8002928 <HAL_RCC_OscConfig+0x3ec>
 8002948:	e01b      	b.n	8002982 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800294a:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 800294c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002950:	4a3b      	ldr	r2, [pc, #236]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295a:	f7fe fb79 	bl	8001050 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002962:	f7fe fb75 	bl	8001050 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1f5      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1ef      	bne.n	8002962 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80a6 	beq.w	8002adc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002990:	2300      	movs	r3, #0
 8002992:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002994:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10d      	bne.n	80029bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a0:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	4a26      	ldr	r2, [pc, #152]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80029a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029aa:	6593      	str	r3, [r2, #88]	; 0x58
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b8:	2301      	movs	r3, #1
 80029ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029bc:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <HAL_RCC_OscConfig+0x508>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d118      	bne.n	80029fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029c8:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <HAL_RCC_OscConfig+0x508>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_RCC_OscConfig+0x508>)
 80029ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d4:	f7fe fb3c 	bl	8001050 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029dc:	f7fe fb38 	bl	8001050 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1b8      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_RCC_OscConfig+0x508>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d108      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4d8>
 8002a02:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a08:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a12:	e029      	b.n	8002a68 <HAL_RCC_OscConfig+0x52c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d115      	bne.n	8002a48 <HAL_RCC_OscConfig+0x50c>
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a22:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a32:	4a03      	ldr	r2, [pc, #12]	; (8002a40 <HAL_RCC_OscConfig+0x504>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a3c:	e014      	b.n	8002a68 <HAL_RCC_OscConfig+0x52c>
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40007000 	.word	0x40007000
 8002a48:	4b9d      	ldr	r3, [pc, #628]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	4a9c      	ldr	r2, [pc, #624]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a58:	4b99      	ldr	r3, [pc, #612]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	4a98      	ldr	r2, [pc, #608]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d016      	beq.n	8002a9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe faee 	bl	8001050 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a78:	f7fe faea 	bl	8001050 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e168      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8e:	4b8c      	ldr	r3, [pc, #560]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ed      	beq.n	8002a78 <HAL_RCC_OscConfig+0x53c>
 8002a9c:	e015      	b.n	8002aca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7fe fad7 	bl	8001050 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fe fad3 	bl	8001050 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e151      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002abc:	4b80      	ldr	r3, [pc, #512]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1ed      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aca:	7ffb      	ldrb	r3, [r7, #31]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d105      	bne.n	8002adc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad0:	4b7b      	ldr	r3, [pc, #492]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad4:	4a7a      	ldr	r2, [pc, #488]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ada:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d03c      	beq.n	8002b62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01c      	beq.n	8002b2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002af0:	4b73      	ldr	r3, [pc, #460]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002af2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002af6:	4a72      	ldr	r2, [pc, #456]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe faa6 	bl	8001050 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b08:	f7fe faa2 	bl	8001050 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e122      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b1a:	4b69      	ldr	r3, [pc, #420]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002b1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0ef      	beq.n	8002b08 <HAL_RCC_OscConfig+0x5cc>
 8002b28:	e01b      	b.n	8002b62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b2a:	4b65      	ldr	r3, [pc, #404]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b30:	4a63      	ldr	r2, [pc, #396]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fa89 	bl	8001050 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b42:	f7fe fa85 	bl	8001050 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e105      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b54:	4b5a      	ldr	r3, [pc, #360]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1ef      	bne.n	8002b42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80f9 	beq.w	8002d5e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	f040 80cf 	bne.w	8002d14 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b76:	4b52      	ldr	r3, [pc, #328]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f003 0203 	and.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d12c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	3b01      	subs	r3, #1
 8002b96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d123      	bne.n	8002be4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d11b      	bne.n	8002be4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d113      	bne.n	8002be4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d109      	bne.n	8002be4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	085b      	lsrs	r3, r3, #1
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d071      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	d068      	beq.n	8002cbc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bea:	4b35      	ldr	r3, [pc, #212]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d105      	bne.n	8002c02 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bf6:	4b32      	ldr	r3, [pc, #200]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0ac      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c06:	4b2e      	ldr	r3, [pc, #184]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2d      	ldr	r2, [pc, #180]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002c0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c12:	f7fe fa1d 	bl	8001050 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe fa19 	bl	8001050 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e099      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c2c:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f0      	bne.n	8002c1a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c38:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <HAL_RCC_OscConfig+0x788>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c48:	3a01      	subs	r2, #1
 8002c4a:	0112      	lsls	r2, r2, #4
 8002c4c:	4311      	orrs	r1, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c52:	0212      	lsls	r2, r2, #8
 8002c54:	4311      	orrs	r1, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c5a:	0852      	lsrs	r2, r2, #1
 8002c5c:	3a01      	subs	r2, #1
 8002c5e:	0552      	lsls	r2, r2, #21
 8002c60:	4311      	orrs	r1, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c66:	0852      	lsrs	r2, r2, #1
 8002c68:	3a01      	subs	r2, #1
 8002c6a:	0652      	lsls	r2, r2, #25
 8002c6c:	4311      	orrs	r1, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c72:	06d2      	lsls	r2, r2, #27
 8002c74:	430a      	orrs	r2, r1
 8002c76:	4912      	ldr	r1, [pc, #72]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c7c:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c88:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c94:	f7fe f9dc 	bl	8001050 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fe f9d8 	bl	8001050 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e058      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <HAL_RCC_OscConfig+0x784>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cba:	e050      	b.n	8002d5e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e04f      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc8:	4b27      	ldr	r3, [pc, #156]	; (8002d68 <HAL_RCC_OscConfig+0x82c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d144      	bne.n	8002d5e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_RCC_OscConfig+0x82c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a23      	ldr	r2, [pc, #140]	; (8002d68 <HAL_RCC_OscConfig+0x82c>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce0:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <HAL_RCC_OscConfig+0x82c>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a20      	ldr	r2, [pc, #128]	; (8002d68 <HAL_RCC_OscConfig+0x82c>)
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cec:	f7fe f9b0 	bl	8001050 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe f9ac 	bl	8001050 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e02c      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d06:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <HAL_RCC_OscConfig+0x82c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x7b8>
 8002d12:	e024      	b.n	8002d5e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d01f      	beq.n	8002d5a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_RCC_OscConfig+0x82c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <HAL_RCC_OscConfig+0x82c>)
 8002d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe f993 	bl	8001050 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fe f98f 	bl	8001050 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e00f      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_OscConfig+0x82c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_RCC_OscConfig+0x82c>)
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	4905      	ldr	r1, [pc, #20]	; (8002d68 <HAL_RCC_OscConfig+0x82c>)
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_RCC_OscConfig+0x830>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	60cb      	str	r3, [r1, #12]
 8002d58:	e001      	b.n	8002d5e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	feeefffc 	.word	0xfeeefffc

08002d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e11d      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d88:	4b90      	ldr	r3, [pc, #576]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d910      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d96:	4b8d      	ldr	r3, [pc, #564]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 020f 	bic.w	r2, r3, #15
 8002d9e:	498b      	ldr	r1, [pc, #556]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b89      	ldr	r3, [pc, #548]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e105      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	4b81      	ldr	r3, [pc, #516]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d908      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd4:	4b7e      	ldr	r3, [pc, #504]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	497b      	ldr	r1, [pc, #492]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d079      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d11e      	bne.n	8002e38 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dfa:	4b75      	ldr	r3, [pc, #468]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0dc      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002e0a:	f000 fa09 	bl	8003220 <RCC_GetSysClockFreqFromPLLSource>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4a70      	ldr	r2, [pc, #448]	; (8002fd4 <HAL_RCC_ClockConfig+0x264>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d946      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e16:	4b6e      	ldr	r3, [pc, #440]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d140      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e22:	4b6b      	ldr	r3, [pc, #428]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e2a:	4a69      	ldr	r2, [pc, #420]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	e035      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e40:	4b63      	ldr	r3, [pc, #396]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d115      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0b9      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e58:	4b5d      	ldr	r3, [pc, #372]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0ad      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e68:	4b59      	ldr	r3, [pc, #356]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0a5      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e78:	f000 f8b4 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4a55      	ldr	r2, [pc, #340]	; (8002fd4 <HAL_RCC_ClockConfig+0x264>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d90f      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e84:	4b52      	ldr	r3, [pc, #328]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e90:	4b4f      	ldr	r3, [pc, #316]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e98:	4a4d      	ldr	r2, [pc, #308]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f023 0203 	bic.w	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4947      	ldr	r1, [pc, #284]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb6:	f7fe f8cb 	bl	8001050 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebe:	f7fe f8c7 	bl	8001050 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e077      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed4:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 020c 	and.w	r2, r3, #12
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d1eb      	bne.n	8002ebe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b80      	cmp	r3, #128	; 0x80
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002eec:	4b38      	ldr	r3, [pc, #224]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a37      	ldr	r2, [pc, #220]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d010      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d208      	bcs.n	8002f26 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f14:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	492b      	ldr	r1, [pc, #172]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f26:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d210      	bcs.n	8002f56 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f34:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f023 020f 	bic.w	r2, r3, #15
 8002f3c:	4923      	ldr	r1, [pc, #140]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f44:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <HAL_RCC_ClockConfig+0x25c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e036      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f62:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	4918      	ldr	r1, [pc, #96]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d009      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f80:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4910      	ldr	r1, [pc, #64]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f94:	f000 f826 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <HAL_RCC_ClockConfig+0x260>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <HAL_RCC_ClockConfig+0x268>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <HAL_RCC_ClockConfig+0x26c>)
 8002fb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <HAL_RCC_ClockConfig+0x270>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fd fff9 	bl	8000fb0 <HAL_InitTick>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40022000 	.word	0x40022000
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	04c4b400 	.word	0x04c4b400
 8002fd8:	08005054 	.word	0x08005054
 8002fdc:	20000000 	.word	0x20000000
 8002fe0:	20000004 	.word	0x20000004

08002fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	; 0x24
 8002fe8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff2:	4b3e      	ldr	r3, [pc, #248]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ffc:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x34>
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d121      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d11e      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003018:	4b34      	ldr	r3, [pc, #208]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003024:	4b31      	ldr	r3, [pc, #196]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302a:	0a1b      	lsrs	r3, r3, #8
 800302c:	f003 030f 	and.w	r3, r3, #15
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	e005      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003034:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003040:	4a2b      	ldr	r2, [pc, #172]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003048:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10d      	bne.n	800306c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003054:	e00a      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d102      	bne.n	8003062 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800305c:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	e004      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d101      	bne.n	800306c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003068:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800306a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d134      	bne.n	80030dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003072:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d003      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0xa6>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d003      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0xac>
 8003088:	e005      	b.n	8003096 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800308c:	617b      	str	r3, [r7, #20]
      break;
 800308e:	e005      	b.n	800309c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003092:	617b      	str	r3, [r7, #20]
      break;
 8003094:	e002      	b.n	800309c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	617b      	str	r3, [r7, #20]
      break;
 800309a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	3301      	adds	r3, #1
 80030a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	fb03 f202 	mul.w	r2, r3, r2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <HAL_RCC_GetSysClockFreq+0x108>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	0e5b      	lsrs	r3, r3, #25
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	3301      	adds	r3, #1
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030dc:	69bb      	ldr	r3, [r7, #24]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	; 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	0800506c 	.word	0x0800506c
 80030f4:	00f42400 	.word	0x00f42400
 80030f8:	007a1200 	.word	0x007a1200

080030fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <HAL_RCC_GetHCLKFreq+0x14>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20000000 	.word	0x20000000

08003114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003118:	f7ff fff0 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4904      	ldr	r1, [pc, #16]	; (800313c <HAL_RCC_GetPCLK1Freq+0x28>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40021000 	.word	0x40021000
 800313c:	08005064 	.word	0x08005064

08003140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003144:	f7ff ffda 	bl	80030fc <HAL_RCC_GetHCLKFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	0adb      	lsrs	r3, r3, #11
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	4904      	ldr	r1, [pc, #16]	; (8003168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021000 	.word	0x40021000
 8003168:	08005064 	.word	0x08005064

0800316c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003178:	4b27      	ldr	r3, [pc, #156]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003184:	f7ff f8f6 	bl	8002374 <HAL_PWREx_GetVoltageRange>
 8003188:	6178      	str	r0, [r7, #20]
 800318a:	e014      	b.n	80031b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800318c:	4b22      	ldr	r3, [pc, #136]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	4a21      	ldr	r2, [pc, #132]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003196:	6593      	str	r3, [r2, #88]	; 0x58
 8003198:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031a4:	f7ff f8e6 	bl	8002374 <HAL_PWREx_GetVoltageRange>
 80031a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031aa:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	4a1a      	ldr	r2, [pc, #104]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031bc:	d10b      	bne.n	80031d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b80      	cmp	r3, #128	; 0x80
 80031c2:	d913      	bls.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2ba0      	cmp	r3, #160	; 0xa0
 80031c8:	d902      	bls.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ca:	2302      	movs	r3, #2
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	e00d      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031d0:	2301      	movs	r3, #1
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	e00a      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b7f      	cmp	r3, #127	; 0x7f
 80031da:	d902      	bls.n	80031e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80031dc:	2302      	movs	r3, #2
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	e004      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b70      	cmp	r3, #112	; 0x70
 80031e6:	d101      	bne.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e8:	2301      	movs	r3, #1
 80031ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 020f 	bic.w	r2, r3, #15
 80031f4:	4909      	ldr	r1, [pc, #36]	; (800321c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	429a      	cmp	r2, r3
 8003208:	d001      	beq.n	800320e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	40022000 	.word	0x40022000

08003220 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003226:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d00b      	beq.n	800324e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d825      	bhi.n	8003288 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d008      	beq.n	8003254 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d11f      	bne.n	8003288 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003248:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800324a:	613b      	str	r3, [r7, #16]
    break;
 800324c:	e01f      	b.n	800328e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003250:	613b      	str	r3, [r7, #16]
    break;
 8003252:	e01c      	b.n	800328e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003254:	4b21      	ldr	r3, [pc, #132]	; (80032dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d107      	bne.n	8003270 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003260:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	e005      	b.n	800327c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003270:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800327c:	4a1a      	ldr	r2, [pc, #104]	; (80032e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003284:	613b      	str	r3, [r7, #16]
    break;
 8003286:	e002      	b.n	800328e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
    break;
 800328c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800328e:	4b13      	ldr	r3, [pc, #76]	; (80032dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	3301      	adds	r3, #1
 800329a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	fb03 f202 	mul.w	r2, r3, r2
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	0e5b      	lsrs	r3, r3, #25
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	3301      	adds	r3, #1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032ce:	683b      	ldr	r3, [r7, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40021000 	.word	0x40021000
 80032e0:	00f42400 	.word	0x00f42400
 80032e4:	007a1200 	.word	0x007a1200
 80032e8:	0800506c 	.word	0x0800506c

080032ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032f4:	2300      	movs	r3, #0
 80032f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032f8:	2300      	movs	r3, #0
 80032fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003304:	2b00      	cmp	r3, #0
 8003306:	d040      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330c:	2b80      	cmp	r3, #128	; 0x80
 800330e:	d02a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d825      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003314:	2b60      	cmp	r3, #96	; 0x60
 8003316:	d026      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003318:	2b60      	cmp	r3, #96	; 0x60
 800331a:	d821      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d006      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	d81d      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003328:	2b20      	cmp	r3, #32
 800332a:	d010      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800332c:	e018      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800332e:	4b89      	ldr	r3, [pc, #548]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	4a88      	ldr	r2, [pc, #544]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003338:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800333a:	e015      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fb02 	bl	800394c <RCCEx_PLLSAI1_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800334c:	e00c      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3320      	adds	r3, #32
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fbed 	bl	8003b34 <RCCEx_PLLSAI2_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800335e:	e003      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	74fb      	strb	r3, [r7, #19]
      break;
 8003364:	e000      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10b      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800336e:	4b79      	ldr	r3, [pc, #484]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003370:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003374:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800337c:	4975      	ldr	r1, [pc, #468]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003384:	e001      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003386:	7cfb      	ldrb	r3, [r7, #19]
 8003388:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d047      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339e:	d030      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a4:	d82a      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033aa:	d02a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80033ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b0:	d824      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b6:	d008      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033bc:	d81e      	bhi.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80033c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c6:	d010      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033c8:	e018      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033ca:	4b62      	ldr	r3, [pc, #392]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	4a61      	ldr	r2, [pc, #388]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033d6:	e015      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fab4 	bl	800394c <RCCEx_PLLSAI1_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033e8:	e00c      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3320      	adds	r3, #32
 80033ee:	2100      	movs	r1, #0
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fb9f 	bl	8003b34 <RCCEx_PLLSAI2_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033fa:	e003      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	74fb      	strb	r3, [r7, #19]
      break;
 8003400:	e000      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10b      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800340a:	4b52      	ldr	r3, [pc, #328]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800340c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	494e      	ldr	r1, [pc, #312]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003420:	e001      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 809f 	beq.w	8003572 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003434:	2300      	movs	r3, #0
 8003436:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003438:	4b46      	ldr	r3, [pc, #280]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	4a40      	ldr	r2, [pc, #256]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003458:	6593      	str	r3, [r2, #88]	; 0x58
 800345a:	4b3e      	ldr	r3, [pc, #248]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003466:	2301      	movs	r3, #1
 8003468:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800346a:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a3a      	ldr	r2, [pc, #232]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003474:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003476:	f7fd fdeb 	bl	8001050 <HAL_GetTick>
 800347a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800347c:	e009      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347e:	f7fd fde7 	bl	8001050 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d902      	bls.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	74fb      	strb	r3, [r7, #19]
        break;
 8003490:	e005      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003492:	4b31      	ldr	r3, [pc, #196]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0ef      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d15b      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034a4:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d01f      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d019      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034ce:	4b21      	ldr	r3, [pc, #132]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	4a1f      	ldr	r2, [pc, #124]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034de:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034ee:	4a19      	ldr	r2, [pc, #100]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d016      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fd fda6 	bl	8001050 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003506:	e00b      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003508:	f7fd fda2 	bl	8001050 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d902      	bls.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	74fb      	strb	r3, [r7, #19]
            break;
 800351e:	e006      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0ec      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800352e:	7cfb      	ldrb	r3, [r7, #19]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10c      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003534:	4b07      	ldr	r3, [pc, #28]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003544:	4903      	ldr	r1, [pc, #12]	; (8003554 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800354c:	e008      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	74bb      	strb	r3, [r7, #18]
 8003552:	e005      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003554:	40021000 	.word	0x40021000
 8003558:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355c:	7cfb      	ldrb	r3, [r7, #19]
 800355e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003560:	7c7b      	ldrb	r3, [r7, #17]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d105      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003566:	4ba0      	ldr	r3, [pc, #640]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	4a9f      	ldr	r2, [pc, #636]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003570:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800357e:	4b9a      	ldr	r3, [pc, #616]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f023 0203 	bic.w	r2, r3, #3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	4996      	ldr	r1, [pc, #600]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035a0:	4b91      	ldr	r3, [pc, #580]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f023 020c 	bic.w	r2, r3, #12
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	498e      	ldr	r1, [pc, #568]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035c2:	4b89      	ldr	r3, [pc, #548]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	4985      	ldr	r1, [pc, #532]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035e4:	4b80      	ldr	r3, [pc, #512]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	497d      	ldr	r1, [pc, #500]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003606:	4b78      	ldr	r3, [pc, #480]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003614:	4974      	ldr	r1, [pc, #464]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003628:	4b6f      	ldr	r3, [pc, #444]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003636:	496c      	ldr	r1, [pc, #432]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800364a:	4b67      	ldr	r3, [pc, #412]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003658:	4963      	ldr	r1, [pc, #396]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800366c:	4b5e      	ldr	r3, [pc, #376]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800367a:	495b      	ldr	r1, [pc, #364]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800368e:	4b56      	ldr	r3, [pc, #344]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369c:	4952      	ldr	r1, [pc, #328]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036b0:	4b4d      	ldr	r3, [pc, #308]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036be:	494a      	ldr	r1, [pc, #296]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036d2:	4b45      	ldr	r3, [pc, #276]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	4941      	ldr	r1, [pc, #260]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036f4:	4b3c      	ldr	r3, [pc, #240]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036fa:	f023 0203 	bic.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003702:	4939      	ldr	r1, [pc, #228]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d028      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003716:	4b34      	ldr	r3, [pc, #208]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003724:	4930      	ldr	r1, [pc, #192]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003734:	d106      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003736:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	4a2b      	ldr	r2, [pc, #172]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003740:	60d3      	str	r3, [r2, #12]
 8003742:	e011      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003748:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800374c:	d10c      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3304      	adds	r3, #4
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f8f9 	bl	800394c <RCCEx_PLLSAI1_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d04d      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800377c:	d108      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003780:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003784:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800378a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800378e:	e012      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003790:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003792:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003796:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800379c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ae:	490e      	ldr	r1, [pc, #56]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037be:	d106      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c0:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ca:	60d3      	str	r3, [r2, #12]
 80037cc:	e020      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d6:	d109      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a02      	ldr	r2, [pc, #8]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e2:	60d3      	str	r3, [r2, #12]
 80037e4:	e014      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037f4:	d10c      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3304      	adds	r3, #4
 80037fa:	2101      	movs	r1, #1
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 f8a5 	bl	800394c <RCCEx_PLLSAI1_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d028      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800381c:	4b4a      	ldr	r3, [pc, #296]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800382a:	4947      	ldr	r1, [pc, #284]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800383a:	d106      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800383c:	4b42      	ldr	r3, [pc, #264]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a41      	ldr	r2, [pc, #260]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003846:	60d3      	str	r3, [r2, #12]
 8003848:	e011      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003852:	d10c      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	2101      	movs	r1, #1
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f876 	bl	800394c <RCCEx_PLLSAI1_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800386a:	7cfb      	ldrb	r3, [r7, #19]
 800386c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01e      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003880:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800388a:	492f      	ldr	r1, [pc, #188]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	2102      	movs	r1, #2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 f851 	bl	800394c <RCCEx_PLLSAI1_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00b      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038c4:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ca:	f023 0204 	bic.w	r2, r3, #4
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d4:	491c      	ldr	r1, [pc, #112]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00b      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80038e8:	4b17      	ldr	r3, [pc, #92]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ee:	f023 0218 	bic.w	r2, r3, #24
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f8:	4913      	ldr	r1, [pc, #76]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d017      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800390e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003912:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391c:	490a      	ldr	r1, [pc, #40]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800392e:	d105      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4a04      	ldr	r2, [pc, #16]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800393a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800393c:	7cbb      	ldrb	r3, [r7, #18]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000

0800394c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800395a:	4b72      	ldr	r3, [pc, #456]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00e      	beq.n	8003984 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003966:	4b6f      	ldr	r3, [pc, #444]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0203 	and.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d103      	bne.n	800397e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
       ||
 800397a:	2b00      	cmp	r3, #0
 800397c:	d142      	bne.n	8003a04 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
 8003982:	e03f      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d018      	beq.n	80039be <RCCEx_PLLSAI1_Config+0x72>
 800398c:	2b03      	cmp	r3, #3
 800398e:	d825      	bhi.n	80039dc <RCCEx_PLLSAI1_Config+0x90>
 8003990:	2b01      	cmp	r3, #1
 8003992:	d002      	beq.n	800399a <RCCEx_PLLSAI1_Config+0x4e>
 8003994:	2b02      	cmp	r3, #2
 8003996:	d009      	beq.n	80039ac <RCCEx_PLLSAI1_Config+0x60>
 8003998:	e020      	b.n	80039dc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800399a:	4b62      	ldr	r3, [pc, #392]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d11d      	bne.n	80039e2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039aa:	e01a      	b.n	80039e2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039ac:	4b5d      	ldr	r3, [pc, #372]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d116      	bne.n	80039e6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039bc:	e013      	b.n	80039e6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039be:	4b59      	ldr	r3, [pc, #356]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10f      	bne.n	80039ea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039ca:	4b56      	ldr	r3, [pc, #344]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039da:	e006      	b.n	80039ea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
      break;
 80039e0:	e004      	b.n	80039ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039e2:	bf00      	nop
 80039e4:	e002      	b.n	80039ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d108      	bne.n	8003a04 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80039f2:	4b4c      	ldr	r3, [pc, #304]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4949      	ldr	r1, [pc, #292]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f040 8086 	bne.w	8003b18 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a0c:	4b45      	ldr	r3, [pc, #276]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a44      	ldr	r2, [pc, #272]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fd fb1a 	bl	8001050 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a1e:	e009      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a20:	f7fd fb16 	bl	8001050 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	73fb      	strb	r3, [r7, #15]
        break;
 8003a32:	e005      	b.n	8003a40 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a34:	4b3b      	ldr	r3, [pc, #236]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1ef      	bne.n	8003a20 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d168      	bne.n	8003b18 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d113      	bne.n	8003a74 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a4c:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6892      	ldr	r2, [r2, #8]
 8003a58:	0211      	lsls	r1, r2, #8
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68d2      	ldr	r2, [r2, #12]
 8003a5e:	06d2      	lsls	r2, r2, #27
 8003a60:	4311      	orrs	r1, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6852      	ldr	r2, [r2, #4]
 8003a66:	3a01      	subs	r2, #1
 8003a68:	0112      	lsls	r2, r2, #4
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	492d      	ldr	r1, [pc, #180]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	610b      	str	r3, [r1, #16]
 8003a72:	e02d      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d115      	bne.n	8003aa6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a7a:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6892      	ldr	r2, [r2, #8]
 8003a86:	0211      	lsls	r1, r2, #8
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6912      	ldr	r2, [r2, #16]
 8003a8c:	0852      	lsrs	r2, r2, #1
 8003a8e:	3a01      	subs	r2, #1
 8003a90:	0552      	lsls	r2, r2, #21
 8003a92:	4311      	orrs	r1, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6852      	ldr	r2, [r2, #4]
 8003a98:	3a01      	subs	r2, #1
 8003a9a:	0112      	lsls	r2, r2, #4
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	4921      	ldr	r1, [pc, #132]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	610b      	str	r3, [r1, #16]
 8003aa4:	e014      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aa6:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6892      	ldr	r2, [r2, #8]
 8003ab2:	0211      	lsls	r1, r2, #8
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6952      	ldr	r2, [r2, #20]
 8003ab8:	0852      	lsrs	r2, r2, #1
 8003aba:	3a01      	subs	r2, #1
 8003abc:	0652      	lsls	r2, r2, #25
 8003abe:	4311      	orrs	r1, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6852      	ldr	r2, [r2, #4]
 8003ac4:	3a01      	subs	r2, #1
 8003ac6:	0112      	lsls	r2, r2, #4
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	4916      	ldr	r1, [pc, #88]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ad0:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ad6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ada:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003adc:	f7fd fab8 	bl	8001050 <HAL_GetTick>
 8003ae0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ae2:	e009      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ae4:	f7fd fab4 	bl	8001050 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d902      	bls.n	8003af8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	73fb      	strb	r3, [r7, #15]
          break;
 8003af6:	e005      	b.n	8003b04 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ef      	beq.n	8003ae4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	4904      	ldr	r1, [pc, #16]	; (8003b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	07ff800f 	.word	0x07ff800f
 8003b2c:	ff9f800f 	.word	0xff9f800f
 8003b30:	f9ff800f 	.word	0xf9ff800f

08003b34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b42:	4b72      	ldr	r3, [pc, #456]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00e      	beq.n	8003b6c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b4e:	4b6f      	ldr	r3, [pc, #444]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0203 	and.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d103      	bne.n	8003b66 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
       ||
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d142      	bne.n	8003bec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
 8003b6a:	e03f      	b.n	8003bec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d018      	beq.n	8003ba6 <RCCEx_PLLSAI2_Config+0x72>
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d825      	bhi.n	8003bc4 <RCCEx_PLLSAI2_Config+0x90>
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d002      	beq.n	8003b82 <RCCEx_PLLSAI2_Config+0x4e>
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d009      	beq.n	8003b94 <RCCEx_PLLSAI2_Config+0x60>
 8003b80:	e020      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b82:	4b62      	ldr	r3, [pc, #392]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11d      	bne.n	8003bca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b92:	e01a      	b.n	8003bca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b94:	4b5d      	ldr	r3, [pc, #372]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d116      	bne.n	8003bce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba4:	e013      	b.n	8003bce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ba6:	4b59      	ldr	r3, [pc, #356]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10f      	bne.n	8003bd2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bb2:	4b56      	ldr	r3, [pc, #344]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bc2:	e006      	b.n	8003bd2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc8:	e004      	b.n	8003bd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e002      	b.n	8003bd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003bd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d108      	bne.n	8003bec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003bda:	4b4c      	ldr	r3, [pc, #304]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f023 0203 	bic.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4949      	ldr	r1, [pc, #292]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f040 8086 	bne.w	8003d00 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bf4:	4b45      	ldr	r3, [pc, #276]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a44      	ldr	r2, [pc, #272]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c00:	f7fd fa26 	bl	8001050 <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c06:	e009      	b.n	8003c1c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c08:	f7fd fa22 	bl	8001050 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d902      	bls.n	8003c1c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	73fb      	strb	r3, [r7, #15]
        break;
 8003c1a:	e005      	b.n	8003c28 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c1c:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ef      	bne.n	8003c08 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d168      	bne.n	8003d00 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d113      	bne.n	8003c5c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c34:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6892      	ldr	r2, [r2, #8]
 8003c40:	0211      	lsls	r1, r2, #8
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68d2      	ldr	r2, [r2, #12]
 8003c46:	06d2      	lsls	r2, r2, #27
 8003c48:	4311      	orrs	r1, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6852      	ldr	r2, [r2, #4]
 8003c4e:	3a01      	subs	r2, #1
 8003c50:	0112      	lsls	r2, r2, #4
 8003c52:	430a      	orrs	r2, r1
 8003c54:	492d      	ldr	r1, [pc, #180]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	614b      	str	r3, [r1, #20]
 8003c5a:	e02d      	b.n	8003cb8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d115      	bne.n	8003c8e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c62:	4b2a      	ldr	r3, [pc, #168]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	4b2b      	ldr	r3, [pc, #172]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6892      	ldr	r2, [r2, #8]
 8003c6e:	0211      	lsls	r1, r2, #8
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6912      	ldr	r2, [r2, #16]
 8003c74:	0852      	lsrs	r2, r2, #1
 8003c76:	3a01      	subs	r2, #1
 8003c78:	0552      	lsls	r2, r2, #21
 8003c7a:	4311      	orrs	r1, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6852      	ldr	r2, [r2, #4]
 8003c80:	3a01      	subs	r2, #1
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	430a      	orrs	r2, r1
 8003c86:	4921      	ldr	r1, [pc, #132]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	614b      	str	r3, [r1, #20]
 8003c8c:	e014      	b.n	8003cb8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c8e:	4b1f      	ldr	r3, [pc, #124]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6892      	ldr	r2, [r2, #8]
 8003c9a:	0211      	lsls	r1, r2, #8
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6952      	ldr	r2, [r2, #20]
 8003ca0:	0852      	lsrs	r2, r2, #1
 8003ca2:	3a01      	subs	r2, #1
 8003ca4:	0652      	lsls	r2, r2, #25
 8003ca6:	4311      	orrs	r1, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6852      	ldr	r2, [r2, #4]
 8003cac:	3a01      	subs	r2, #1
 8003cae:	0112      	lsls	r2, r2, #4
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	4916      	ldr	r1, [pc, #88]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cb8:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a13      	ldr	r2, [pc, #76]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fd f9c4 	bl	8001050 <HAL_GetTick>
 8003cc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cca:	e009      	b.n	8003ce0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ccc:	f7fd f9c0 	bl	8001050 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d902      	bls.n	8003ce0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cde:	e005      	b.n	8003cec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ef      	beq.n	8003ccc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	4904      	ldr	r1, [pc, #16]	; (8003d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	07ff800f 	.word	0x07ff800f
 8003d14:	ff9f800f 	.word	0xff9f800f
 8003d18:	f9ff800f 	.word	0xf9ff800f

08003d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e042      	b.n	8003db4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fc ff85 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2224      	movs	r2, #36	; 0x24
 8003d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f8c4 	bl	8003eec <UART_SetConfig>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e022      	b.n	8003db4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fbb4 	bl	80044e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fc3b 	bl	8004628 <UART_CheckIdleState>
 8003db2:	4603      	mov	r3, r0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	f040 8084 	bne.w	8003ee0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_UART_Transmit+0x28>
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e07c      	b.n	8003ee2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_UART_Transmit+0x3a>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e075      	b.n	8003ee2 <HAL_UART_Transmit+0x126>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2221      	movs	r2, #33	; 0x21
 8003e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e0e:	f7fd f91f 	bl	8001050 <HAL_GetTick>
 8003e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	88fa      	ldrh	r2, [r7, #6]
 8003e20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2c:	d108      	bne.n	8003e40 <HAL_UART_Transmit+0x84>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d104      	bne.n	8003e40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	e003      	b.n	8003e48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003e50:	e02d      	b.n	8003eae <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2180      	movs	r1, #128	; 0x80
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fc2e 	bl	80046be <UART_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e03a      	b.n	8003ee2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	881a      	ldrh	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e7e:	b292      	uxth	r2, r2
 8003e80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	3302      	adds	r3, #2
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	e008      	b.n	8003e9c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	781a      	ldrb	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	b292      	uxth	r2, r2
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1cb      	bne.n	8003e52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2140      	movs	r1, #64	; 0x40
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fbfa 	bl	80046be <UART_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e006      	b.n	8003ee2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003ee0:	2302      	movs	r3, #2
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef0:	b08c      	sub	sp, #48	; 0x30
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4baa      	ldr	r3, [pc, #680]	; (80041c4 <UART_SetConfig+0x2d8>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f24:	430b      	orrs	r3, r1
 8003f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a9f      	ldr	r2, [pc, #636]	; (80041c8 <UART_SetConfig+0x2dc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d004      	beq.n	8003f58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f54:	4313      	orrs	r3, r2
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	f023 010f 	bic.w	r1, r3, #15
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a90      	ldr	r2, [pc, #576]	; (80041cc <UART_SetConfig+0x2e0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d125      	bne.n	8003fdc <UART_SetConfig+0xf0>
 8003f90:	4b8f      	ldr	r3, [pc, #572]	; (80041d0 <UART_SetConfig+0x2e4>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d81a      	bhi.n	8003fd4 <UART_SetConfig+0xe8>
 8003f9e:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <UART_SetConfig+0xb8>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08003fb5 	.word	0x08003fb5
 8003fa8:	08003fc5 	.word	0x08003fc5
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08003fcd 	.word	0x08003fcd
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fba:	e116      	b.n	80041ea <UART_SetConfig+0x2fe>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fc2:	e112      	b.n	80041ea <UART_SetConfig+0x2fe>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fca:	e10e      	b.n	80041ea <UART_SetConfig+0x2fe>
 8003fcc:	2308      	movs	r3, #8
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fd2:	e10a      	b.n	80041ea <UART_SetConfig+0x2fe>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fda:	e106      	b.n	80041ea <UART_SetConfig+0x2fe>
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a7c      	ldr	r2, [pc, #496]	; (80041d4 <UART_SetConfig+0x2e8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d138      	bne.n	8004058 <UART_SetConfig+0x16c>
 8003fe6:	4b7a      	ldr	r3, [pc, #488]	; (80041d0 <UART_SetConfig+0x2e4>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f003 030c 	and.w	r3, r3, #12
 8003ff0:	2b0c      	cmp	r3, #12
 8003ff2:	d82d      	bhi.n	8004050 <UART_SetConfig+0x164>
 8003ff4:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <UART_SetConfig+0x110>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	08004031 	.word	0x08004031
 8004000:	08004051 	.word	0x08004051
 8004004:	08004051 	.word	0x08004051
 8004008:	08004051 	.word	0x08004051
 800400c:	08004041 	.word	0x08004041
 8004010:	08004051 	.word	0x08004051
 8004014:	08004051 	.word	0x08004051
 8004018:	08004051 	.word	0x08004051
 800401c:	08004039 	.word	0x08004039
 8004020:	08004051 	.word	0x08004051
 8004024:	08004051 	.word	0x08004051
 8004028:	08004051 	.word	0x08004051
 800402c:	08004049 	.word	0x08004049
 8004030:	2300      	movs	r3, #0
 8004032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004036:	e0d8      	b.n	80041ea <UART_SetConfig+0x2fe>
 8004038:	2302      	movs	r3, #2
 800403a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800403e:	e0d4      	b.n	80041ea <UART_SetConfig+0x2fe>
 8004040:	2304      	movs	r3, #4
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004046:	e0d0      	b.n	80041ea <UART_SetConfig+0x2fe>
 8004048:	2308      	movs	r3, #8
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404e:	e0cc      	b.n	80041ea <UART_SetConfig+0x2fe>
 8004050:	2310      	movs	r3, #16
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004056:	e0c8      	b.n	80041ea <UART_SetConfig+0x2fe>
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a5e      	ldr	r2, [pc, #376]	; (80041d8 <UART_SetConfig+0x2ec>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d125      	bne.n	80040ae <UART_SetConfig+0x1c2>
 8004062:	4b5b      	ldr	r3, [pc, #364]	; (80041d0 <UART_SetConfig+0x2e4>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800406c:	2b30      	cmp	r3, #48	; 0x30
 800406e:	d016      	beq.n	800409e <UART_SetConfig+0x1b2>
 8004070:	2b30      	cmp	r3, #48	; 0x30
 8004072:	d818      	bhi.n	80040a6 <UART_SetConfig+0x1ba>
 8004074:	2b20      	cmp	r3, #32
 8004076:	d00a      	beq.n	800408e <UART_SetConfig+0x1a2>
 8004078:	2b20      	cmp	r3, #32
 800407a:	d814      	bhi.n	80040a6 <UART_SetConfig+0x1ba>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <UART_SetConfig+0x19a>
 8004080:	2b10      	cmp	r3, #16
 8004082:	d008      	beq.n	8004096 <UART_SetConfig+0x1aa>
 8004084:	e00f      	b.n	80040a6 <UART_SetConfig+0x1ba>
 8004086:	2300      	movs	r3, #0
 8004088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800408c:	e0ad      	b.n	80041ea <UART_SetConfig+0x2fe>
 800408e:	2302      	movs	r3, #2
 8004090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004094:	e0a9      	b.n	80041ea <UART_SetConfig+0x2fe>
 8004096:	2304      	movs	r3, #4
 8004098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800409c:	e0a5      	b.n	80041ea <UART_SetConfig+0x2fe>
 800409e:	2308      	movs	r3, #8
 80040a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040a4:	e0a1      	b.n	80041ea <UART_SetConfig+0x2fe>
 80040a6:	2310      	movs	r3, #16
 80040a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ac:	e09d      	b.n	80041ea <UART_SetConfig+0x2fe>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a4a      	ldr	r2, [pc, #296]	; (80041dc <UART_SetConfig+0x2f0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d125      	bne.n	8004104 <UART_SetConfig+0x218>
 80040b8:	4b45      	ldr	r3, [pc, #276]	; (80041d0 <UART_SetConfig+0x2e4>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040c2:	2bc0      	cmp	r3, #192	; 0xc0
 80040c4:	d016      	beq.n	80040f4 <UART_SetConfig+0x208>
 80040c6:	2bc0      	cmp	r3, #192	; 0xc0
 80040c8:	d818      	bhi.n	80040fc <UART_SetConfig+0x210>
 80040ca:	2b80      	cmp	r3, #128	; 0x80
 80040cc:	d00a      	beq.n	80040e4 <UART_SetConfig+0x1f8>
 80040ce:	2b80      	cmp	r3, #128	; 0x80
 80040d0:	d814      	bhi.n	80040fc <UART_SetConfig+0x210>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <UART_SetConfig+0x1f0>
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	d008      	beq.n	80040ec <UART_SetConfig+0x200>
 80040da:	e00f      	b.n	80040fc <UART_SetConfig+0x210>
 80040dc:	2300      	movs	r3, #0
 80040de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040e2:	e082      	b.n	80041ea <UART_SetConfig+0x2fe>
 80040e4:	2302      	movs	r3, #2
 80040e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ea:	e07e      	b.n	80041ea <UART_SetConfig+0x2fe>
 80040ec:	2304      	movs	r3, #4
 80040ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040f2:	e07a      	b.n	80041ea <UART_SetConfig+0x2fe>
 80040f4:	2308      	movs	r3, #8
 80040f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040fa:	e076      	b.n	80041ea <UART_SetConfig+0x2fe>
 80040fc:	2310      	movs	r3, #16
 80040fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004102:	e072      	b.n	80041ea <UART_SetConfig+0x2fe>
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a35      	ldr	r2, [pc, #212]	; (80041e0 <UART_SetConfig+0x2f4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d12a      	bne.n	8004164 <UART_SetConfig+0x278>
 800410e:	4b30      	ldr	r3, [pc, #192]	; (80041d0 <UART_SetConfig+0x2e4>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411c:	d01a      	beq.n	8004154 <UART_SetConfig+0x268>
 800411e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004122:	d81b      	bhi.n	800415c <UART_SetConfig+0x270>
 8004124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004128:	d00c      	beq.n	8004144 <UART_SetConfig+0x258>
 800412a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412e:	d815      	bhi.n	800415c <UART_SetConfig+0x270>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <UART_SetConfig+0x250>
 8004134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004138:	d008      	beq.n	800414c <UART_SetConfig+0x260>
 800413a:	e00f      	b.n	800415c <UART_SetConfig+0x270>
 800413c:	2300      	movs	r3, #0
 800413e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004142:	e052      	b.n	80041ea <UART_SetConfig+0x2fe>
 8004144:	2302      	movs	r3, #2
 8004146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800414a:	e04e      	b.n	80041ea <UART_SetConfig+0x2fe>
 800414c:	2304      	movs	r3, #4
 800414e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004152:	e04a      	b.n	80041ea <UART_SetConfig+0x2fe>
 8004154:	2308      	movs	r3, #8
 8004156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800415a:	e046      	b.n	80041ea <UART_SetConfig+0x2fe>
 800415c:	2310      	movs	r3, #16
 800415e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004162:	e042      	b.n	80041ea <UART_SetConfig+0x2fe>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a17      	ldr	r2, [pc, #92]	; (80041c8 <UART_SetConfig+0x2dc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d13a      	bne.n	80041e4 <UART_SetConfig+0x2f8>
 800416e:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <UART_SetConfig+0x2e4>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004174:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800417c:	d01a      	beq.n	80041b4 <UART_SetConfig+0x2c8>
 800417e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004182:	d81b      	bhi.n	80041bc <UART_SetConfig+0x2d0>
 8004184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004188:	d00c      	beq.n	80041a4 <UART_SetConfig+0x2b8>
 800418a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418e:	d815      	bhi.n	80041bc <UART_SetConfig+0x2d0>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <UART_SetConfig+0x2b0>
 8004194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004198:	d008      	beq.n	80041ac <UART_SetConfig+0x2c0>
 800419a:	e00f      	b.n	80041bc <UART_SetConfig+0x2d0>
 800419c:	2300      	movs	r3, #0
 800419e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041a2:	e022      	b.n	80041ea <UART_SetConfig+0x2fe>
 80041a4:	2302      	movs	r3, #2
 80041a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041aa:	e01e      	b.n	80041ea <UART_SetConfig+0x2fe>
 80041ac:	2304      	movs	r3, #4
 80041ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041b2:	e01a      	b.n	80041ea <UART_SetConfig+0x2fe>
 80041b4:	2308      	movs	r3, #8
 80041b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ba:	e016      	b.n	80041ea <UART_SetConfig+0x2fe>
 80041bc:	2310      	movs	r3, #16
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041c2:	e012      	b.n	80041ea <UART_SetConfig+0x2fe>
 80041c4:	cfff69f3 	.word	0xcfff69f3
 80041c8:	40008000 	.word	0x40008000
 80041cc:	40013800 	.word	0x40013800
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40004400 	.word	0x40004400
 80041d8:	40004800 	.word	0x40004800
 80041dc:	40004c00 	.word	0x40004c00
 80041e0:	40005000 	.word	0x40005000
 80041e4:	2310      	movs	r3, #16
 80041e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4aae      	ldr	r2, [pc, #696]	; (80044a8 <UART_SetConfig+0x5bc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	f040 8097 	bne.w	8004324 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d823      	bhi.n	8004246 <UART_SetConfig+0x35a>
 80041fe:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <UART_SetConfig+0x318>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004229 	.word	0x08004229
 8004208:	08004247 	.word	0x08004247
 800420c:	08004231 	.word	0x08004231
 8004210:	08004247 	.word	0x08004247
 8004214:	08004237 	.word	0x08004237
 8004218:	08004247 	.word	0x08004247
 800421c:	08004247 	.word	0x08004247
 8004220:	08004247 	.word	0x08004247
 8004224:	0800423f 	.word	0x0800423f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004228:	f7fe ff74 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 800422c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800422e:	e010      	b.n	8004252 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004230:	4b9e      	ldr	r3, [pc, #632]	; (80044ac <UART_SetConfig+0x5c0>)
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004234:	e00d      	b.n	8004252 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004236:	f7fe fed5 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 800423a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800423c:	e009      	b.n	8004252 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800423e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004244:	e005      	b.n	8004252 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004250:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8130 	beq.w	80044ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	4a94      	ldr	r2, [pc, #592]	; (80044b0 <UART_SetConfig+0x5c4>)
 8004260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004264:	461a      	mov	r2, r3
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	fbb3 f3f2 	udiv	r3, r3, r2
 800426c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	4413      	add	r3, r2
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	429a      	cmp	r2, r3
 800427c:	d305      	bcc.n	800428a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	429a      	cmp	r2, r3
 8004288:	d903      	bls.n	8004292 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004290:	e113      	b.n	80044ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	2200      	movs	r2, #0
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	60fa      	str	r2, [r7, #12]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	4a84      	ldr	r2, [pc, #528]	; (80044b0 <UART_SetConfig+0x5c4>)
 80042a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2200      	movs	r2, #0
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042b4:	f7fb ffaa 	bl	800020c <__aeabi_uldivmod>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	020b      	lsls	r3, r1, #8
 80042ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042ce:	0202      	lsls	r2, r0, #8
 80042d0:	6979      	ldr	r1, [r7, #20]
 80042d2:	6849      	ldr	r1, [r1, #4]
 80042d4:	0849      	lsrs	r1, r1, #1
 80042d6:	2000      	movs	r0, #0
 80042d8:	460c      	mov	r4, r1
 80042da:	4605      	mov	r5, r0
 80042dc:	eb12 0804 	adds.w	r8, r2, r4
 80042e0:	eb43 0905 	adc.w	r9, r3, r5
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	469a      	mov	sl, r3
 80042ec:	4693      	mov	fp, r2
 80042ee:	4652      	mov	r2, sl
 80042f0:	465b      	mov	r3, fp
 80042f2:	4640      	mov	r0, r8
 80042f4:	4649      	mov	r1, r9
 80042f6:	f7fb ff89 	bl	800020c <__aeabi_uldivmod>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4613      	mov	r3, r2
 8004300:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004308:	d308      	bcc.n	800431c <UART_SetConfig+0x430>
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004310:	d204      	bcs.n	800431c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6a3a      	ldr	r2, [r7, #32]
 8004318:	60da      	str	r2, [r3, #12]
 800431a:	e0ce      	b.n	80044ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004322:	e0ca      	b.n	80044ba <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432c:	d166      	bne.n	80043fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800432e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004332:	2b08      	cmp	r3, #8
 8004334:	d827      	bhi.n	8004386 <UART_SetConfig+0x49a>
 8004336:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0x450>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	08004361 	.word	0x08004361
 8004340:	08004369 	.word	0x08004369
 8004344:	08004371 	.word	0x08004371
 8004348:	08004387 	.word	0x08004387
 800434c:	08004377 	.word	0x08004377
 8004350:	08004387 	.word	0x08004387
 8004354:	08004387 	.word	0x08004387
 8004358:	08004387 	.word	0x08004387
 800435c:	0800437f 	.word	0x0800437f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004360:	f7fe fed8 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 8004364:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004366:	e014      	b.n	8004392 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004368:	f7fe feea 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
 800436c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800436e:	e010      	b.n	8004392 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004370:	4b4e      	ldr	r3, [pc, #312]	; (80044ac <UART_SetConfig+0x5c0>)
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004374:	e00d      	b.n	8004392 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004376:	f7fe fe35 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 800437a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800437c:	e009      	b.n	8004392 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004384:	e005      	b.n	8004392 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8090 	beq.w	80044ba <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	4a44      	ldr	r2, [pc, #272]	; (80044b0 <UART_SetConfig+0x5c4>)
 80043a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80043ac:	005a      	lsls	r2, r3, #1
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	085b      	lsrs	r3, r3, #1
 80043b4:	441a      	add	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	d916      	bls.n	80043f4 <UART_SetConfig+0x508>
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d212      	bcs.n	80043f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f023 030f 	bic.w	r3, r3, #15
 80043d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	8bfb      	ldrh	r3, [r7, #30]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	8bfa      	ldrh	r2, [r7, #30]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	e062      	b.n	80044ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043fa:	e05e      	b.n	80044ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004400:	2b08      	cmp	r3, #8
 8004402:	d828      	bhi.n	8004456 <UART_SetConfig+0x56a>
 8004404:	a201      	add	r2, pc, #4	; (adr r2, 800440c <UART_SetConfig+0x520>)
 8004406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440a:	bf00      	nop
 800440c:	08004431 	.word	0x08004431
 8004410:	08004439 	.word	0x08004439
 8004414:	08004441 	.word	0x08004441
 8004418:	08004457 	.word	0x08004457
 800441c:	08004447 	.word	0x08004447
 8004420:	08004457 	.word	0x08004457
 8004424:	08004457 	.word	0x08004457
 8004428:	08004457 	.word	0x08004457
 800442c:	0800444f 	.word	0x0800444f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004430:	f7fe fe70 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 8004434:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004436:	e014      	b.n	8004462 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004438:	f7fe fe82 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
 800443c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800443e:	e010      	b.n	8004462 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004440:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <UART_SetConfig+0x5c0>)
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004444:	e00d      	b.n	8004462 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004446:	f7fe fdcd 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 800444a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800444c:	e009      	b.n	8004462 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800444e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004454:	e005      	b.n	8004462 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004460:	bf00      	nop
    }

    if (pclk != 0U)
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	2b00      	cmp	r3, #0
 8004466:	d028      	beq.n	80044ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	4a10      	ldr	r2, [pc, #64]	; (80044b0 <UART_SetConfig+0x5c4>)
 800446e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004472:	461a      	mov	r2, r3
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	fbb3 f2f2 	udiv	r2, r3, r2
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	085b      	lsrs	r3, r3, #1
 8004480:	441a      	add	r2, r3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	fbb2 f3f3 	udiv	r3, r2, r3
 800448a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	2b0f      	cmp	r3, #15
 8004490:	d910      	bls.n	80044b4 <UART_SetConfig+0x5c8>
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004498:	d20c      	bcs.n	80044b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	b29a      	uxth	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60da      	str	r2, [r3, #12]
 80044a4:	e009      	b.n	80044ba <UART_SetConfig+0x5ce>
 80044a6:	bf00      	nop
 80044a8:	40008000 	.word	0x40008000
 80044ac:	00f42400 	.word	0x00f42400
 80044b0:	0800509c 	.word	0x0800509c
      }
      else
      {
        ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2201      	movs	r2, #1
 80044be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2200      	movs	r2, #0
 80044d4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80044d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3730      	adds	r7, #48	; 0x30
 80044de:	46bd      	mov	sp, r7
 80044e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080044e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d01a      	beq.n	80045fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e2:	d10a      	bne.n	80045fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	605a      	str	r2, [r3, #4]
  }
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af02      	add	r7, sp, #8
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004638:	f7fc fd0a 	bl	8001050 <HAL_GetTick>
 800463c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b08      	cmp	r3, #8
 800464a:	d10e      	bne.n	800466a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800464c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f82f 	bl	80046be <UART_WaitOnFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e025      	b.n	80046b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b04      	cmp	r3, #4
 8004676:	d10e      	bne.n	8004696 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f819 	bl	80046be <UART_WaitOnFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e00f      	b.n	80046b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b09c      	sub	sp, #112	; 0x70
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	4613      	mov	r3, r2
 80046cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ce:	e0a9      	b.n	8004824 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	f000 80a5 	beq.w	8004824 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046da:	f7fc fcb9 	bl	8001050 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d302      	bcc.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80046ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d140      	bne.n	8004772 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004700:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004704:	667b      	str	r3, [r7, #100]	; 0x64
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800470e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004710:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004714:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800471c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e6      	bne.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3308      	adds	r3, #8
 8004728:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	663b      	str	r3, [r7, #96]	; 0x60
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3308      	adds	r3, #8
 8004740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004742:	64ba      	str	r2, [r7, #72]	; 0x48
 8004744:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004748:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e5      	bne.n	8004722 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e069      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d051      	beq.n	8004824 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478e:	d149      	bne.n	8004824 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004798:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e6      	bne.n	800479a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3308      	adds	r3, #8
 80047d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	613b      	str	r3, [r7, #16]
   return(result);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3308      	adds	r3, #8
 80047ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047ec:	623a      	str	r2, [r7, #32]
 80047ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	69f9      	ldr	r1, [r7, #28]
 80047f2:	6a3a      	ldr	r2, [r7, #32]
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e010      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69da      	ldr	r2, [r3, #28]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4013      	ands	r3, r2
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	429a      	cmp	r2, r3
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	429a      	cmp	r2, r3
 8004840:	f43f af46 	beq.w	80046d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3770      	adds	r7, #112	; 0x70
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800484e:	b480      	push	{r7}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_UARTEx_DisableFifoMode+0x16>
 8004860:	2302      	movs	r3, #2
 8004862:	e027      	b.n	80048b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	; 0x24
 8004870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004892:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e02d      	b.n	8004934 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2224      	movs	r2, #36	; 0x24
 80048e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0201 	bic.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f84f 	bl	80049b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004950:	2302      	movs	r3, #2
 8004952:	e02d      	b.n	80049b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2224      	movs	r2, #36	; 0x24
 8004960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f811 	bl	80049b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d108      	bne.n	80049da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80049d8:	e031      	b.n	8004a3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80049da:	2308      	movs	r3, #8
 80049dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80049de:	2308      	movs	r3, #8
 80049e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	0e5b      	lsrs	r3, r3, #25
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	0f5b      	lsrs	r3, r3, #29
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a02:	7bbb      	ldrb	r3, [r7, #14]
 8004a04:	7b3a      	ldrb	r2, [r7, #12]
 8004a06:	4911      	ldr	r1, [pc, #68]	; (8004a4c <UARTEx_SetNbDataToProcess+0x94>)
 8004a08:	5c8a      	ldrb	r2, [r1, r2]
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a0e:	7b3a      	ldrb	r2, [r7, #12]
 8004a10:	490f      	ldr	r1, [pc, #60]	; (8004a50 <UARTEx_SetNbDataToProcess+0x98>)
 8004a12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a14:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	7b7a      	ldrb	r2, [r7, #13]
 8004a24:	4909      	ldr	r1, [pc, #36]	; (8004a4c <UARTEx_SetNbDataToProcess+0x94>)
 8004a26:	5c8a      	ldrb	r2, [r1, r2]
 8004a28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a2c:	7b7a      	ldrb	r2, [r7, #13]
 8004a2e:	4908      	ldr	r1, [pc, #32]	; (8004a50 <UARTEx_SetNbDataToProcess+0x98>)
 8004a30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a32:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	080050b4 	.word	0x080050b4
 8004a50:	080050bc 	.word	0x080050bc

08004a54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a54:	b084      	sub	sp, #16
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	f107 001c 	add.w	r0, r7, #28
 8004a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fa70 	bl	8004f58 <USB_CoreReset>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a8e:	e005      	b.n	8004a9c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aa8:	b004      	add	sp, #16
 8004aaa:	4770      	bx	lr

08004aac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 0201 	bic.w	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d115      	bne.n	8004b1c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004afc:	2001      	movs	r0, #1
 8004afe:	f7fc fab3 	bl	8001068 <HAL_Delay>
      ms++;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3301      	adds	r3, #1
 8004b06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fa17 	bl	8004f3c <USB_GetMode>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d01e      	beq.n	8004b52 <USB_SetCurrentMode+0x84>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b31      	cmp	r3, #49	; 0x31
 8004b18:	d9f0      	bls.n	8004afc <USB_SetCurrentMode+0x2e>
 8004b1a:	e01a      	b.n	8004b52 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d115      	bne.n	8004b4e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b2e:	2001      	movs	r0, #1
 8004b30:	f7fc fa9a 	bl	8001068 <HAL_Delay>
      ms++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3301      	adds	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f9fe 	bl	8004f3c <USB_GetMode>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <USB_SetCurrentMode+0x84>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b31      	cmp	r3, #49	; 0x31
 8004b4a:	d9f0      	bls.n	8004b2e <USB_SetCurrentMode+0x60>
 8004b4c:	e001      	b.n	8004b52 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e005      	b.n	8004b5e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b32      	cmp	r3, #50	; 0x32
 8004b56:	d101      	bne.n	8004b5c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b68:	b084      	sub	sp, #16
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b086      	sub	sp, #24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b82:	2300      	movs	r3, #0
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	e009      	b.n	8004b9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	3340      	adds	r3, #64	; 0x40
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	2200      	movs	r2, #0
 8004b94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b0e      	cmp	r3, #14
 8004ba0:	d9f2      	bls.n	8004b88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d11c      	bne.n	8004be2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bb6:	f043 0302 	orr.w	r3, r3, #2
 8004bba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	e005      	b.n	8004bee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c00:	4619      	mov	r1, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c08:	461a      	mov	r2, r3
 8004c0a:	680b      	ldr	r3, [r1, #0]
 8004c0c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c0e:	2103      	movs	r1, #3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f959 	bl	8004ec8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c16:	2110      	movs	r1, #16
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8f1 	bl	8004e00 <USB_FlushTxFifo>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f91d 	bl	8004e68 <USB_FlushRxFifo>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	461a      	mov	r2, r3
 8004c40:	2300      	movs	r3, #0
 8004c42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c56:	461a      	mov	r2, r3
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	e043      	b.n	8004cea <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c78:	d118      	bne.n	8004cac <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	e013      	b.n	8004cbe <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e008      	b.n	8004cbe <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	461a      	mov	r2, r3
 8004cba:	2300      	movs	r3, #0
 8004cbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cca:	461a      	mov	r2, r3
 8004ccc:	2300      	movs	r3, #0
 8004cce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ce2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d3b7      	bcc.n	8004c62 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	e043      	b.n	8004d80 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d0e:	d118      	bne.n	8004d42 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	461a      	mov	r2, r3
 8004d24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e013      	b.n	8004d54 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	e008      	b.n	8004d54 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2300      	movs	r3, #0
 8004d52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	461a      	mov	r2, r3
 8004d62:	2300      	movs	r3, #0
 8004d64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	461a      	mov	r2, r3
 8004d74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d3b7      	bcc.n	8004cf8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004da8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f043 0210 	orr.w	r2, r3, #16
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <USB_DevInit+0x294>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f043 0208 	orr.w	r2, r3, #8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d107      	bne.n	8004dea <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004de2:	f043 0304 	orr.w	r3, r3, #4
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004df6:	b004      	add	sp, #16
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	803c3800 	.word	0x803c3800

08004e00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4a13      	ldr	r2, [pc, #76]	; (8004e64 <USB_FlushTxFifo+0x64>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e01b      	b.n	8004e58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	daf2      	bge.n	8004e0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	019b      	lsls	r3, r3, #6
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <USB_FlushTxFifo+0x64>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e006      	b.n	8004e58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d0f0      	beq.n	8004e38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	00030d40 	.word	0x00030d40

08004e68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3301      	adds	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4a11      	ldr	r2, [pc, #68]	; (8004ec4 <USB_FlushRxFifo+0x5c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e018      	b.n	8004eb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	daf2      	bge.n	8004e74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2210      	movs	r2, #16
 8004e96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <USB_FlushRxFifo+0x5c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e006      	b.n	8004eb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b10      	cmp	r3, #16
 8004eb4:	d0f0      	beq.n	8004e98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	00030d40 	.word	0x00030d40

08004ec8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	68f9      	ldr	r1, [r7, #12]
 8004ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f14:	f023 0303 	bic.w	r3, r3, #3
 8004f18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f28:	f043 0302 	orr.w	r3, r3, #2
 8004f2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f003 0301 	and.w	r3, r3, #1
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3301      	adds	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4a13      	ldr	r2, [pc, #76]	; (8004fbc <USB_CoreReset+0x64>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e01b      	b.n	8004fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	daf2      	bge.n	8004f64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f043 0201 	orr.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3301      	adds	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a09      	ldr	r2, [pc, #36]	; (8004fbc <USB_CoreReset+0x64>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d901      	bls.n	8004fa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e006      	b.n	8004fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d0f0      	beq.n	8004f8e <USB_CoreReset+0x36>

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	00030d40 	.word	0x00030d40

08004fc0 <__libc_init_array>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	4d0d      	ldr	r5, [pc, #52]	; (8004ff8 <__libc_init_array+0x38>)
 8004fc4:	4c0d      	ldr	r4, [pc, #52]	; (8004ffc <__libc_init_array+0x3c>)
 8004fc6:	1b64      	subs	r4, r4, r5
 8004fc8:	10a4      	asrs	r4, r4, #2
 8004fca:	2600      	movs	r6, #0
 8004fcc:	42a6      	cmp	r6, r4
 8004fce:	d109      	bne.n	8004fe4 <__libc_init_array+0x24>
 8004fd0:	4d0b      	ldr	r5, [pc, #44]	; (8005000 <__libc_init_array+0x40>)
 8004fd2:	4c0c      	ldr	r4, [pc, #48]	; (8005004 <__libc_init_array+0x44>)
 8004fd4:	f000 f820 	bl	8005018 <_init>
 8004fd8:	1b64      	subs	r4, r4, r5
 8004fda:	10a4      	asrs	r4, r4, #2
 8004fdc:	2600      	movs	r6, #0
 8004fde:	42a6      	cmp	r6, r4
 8004fe0:	d105      	bne.n	8004fee <__libc_init_array+0x2e>
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}
 8004fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe8:	4798      	blx	r3
 8004fea:	3601      	adds	r6, #1
 8004fec:	e7ee      	b.n	8004fcc <__libc_init_array+0xc>
 8004fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff2:	4798      	blx	r3
 8004ff4:	3601      	adds	r6, #1
 8004ff6:	e7f2      	b.n	8004fde <__libc_init_array+0x1e>
 8004ff8:	080050cc 	.word	0x080050cc
 8004ffc:	080050cc 	.word	0x080050cc
 8005000:	080050cc 	.word	0x080050cc
 8005004:	080050d0 	.word	0x080050d0

08005008 <memset>:
 8005008:	4402      	add	r2, r0
 800500a:	4603      	mov	r3, r0
 800500c:	4293      	cmp	r3, r2
 800500e:	d100      	bne.n	8005012 <memset+0xa>
 8005010:	4770      	bx	lr
 8005012:	f803 1b01 	strb.w	r1, [r3], #1
 8005016:	e7f9      	b.n	800500c <memset+0x4>

08005018 <_init>:
 8005018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501a:	bf00      	nop
 800501c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501e:	bc08      	pop	{r3}
 8005020:	469e      	mov	lr, r3
 8005022:	4770      	bx	lr

08005024 <_fini>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	bf00      	nop
 8005028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502a:	bc08      	pop	{r3}
 800502c:	469e      	mov	lr, r3
 800502e:	4770      	bx	lr
