
PizzaPizza.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dfc  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004fb8  08004fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800504c  0800504c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005054  08005054  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005054  08005054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800505c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  2000000c  08005068  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  08005068  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d0d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002714  00000000  00000000  00036d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00039460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  0003a478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a56e  00000000  00000000  0003b3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e01  00000000  00000000  00065916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102738  00000000  00000000  00079717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017be4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004408  00000000  00000000  0017bea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004fa0 	.word	0x08004fa0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004fa0 	.word	0x08004fa0

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295
 800021c:	f04f 30ff 	movne.w	r0, #4294967295
 8000220:	f000 b96e 	b.w	8000500 <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9d08      	ldr	r5, [sp, #32]
 8000242:	4604      	mov	r4, r0
 8000244:	468c      	mov	ip, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	f040 8083 	bne.w	8000352 <__udivmoddi4+0x116>
 800024c:	428a      	cmp	r2, r1
 800024e:	4617      	mov	r7, r2
 8000250:	d947      	bls.n	80002e2 <__udivmoddi4+0xa6>
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	b142      	cbz	r2, 800026a <__udivmoddi4+0x2e>
 8000258:	f1c2 0020 	rsb	r0, r2, #32
 800025c:	fa24 f000 	lsr.w	r0, r4, r0
 8000260:	4091      	lsls	r1, r2
 8000262:	4097      	lsls	r7, r2
 8000264:	ea40 0c01 	orr.w	ip, r0, r1
 8000268:	4094      	lsls	r4, r2
 800026a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026e:	0c23      	lsrs	r3, r4, #16
 8000270:	fbbc f6f8 	udiv	r6, ip, r8
 8000274:	fa1f fe87 	uxth.w	lr, r7
 8000278:	fb08 c116 	mls	r1, r8, r6, ip
 800027c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000280:	fb06 f10e 	mul.w	r1, r6, lr
 8000284:	4299      	cmp	r1, r3
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x60>
 8000288:	18fb      	adds	r3, r7, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 8119 	bcs.w	80004c4 <__udivmoddi4+0x288>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 8116 	bls.w	80004c4 <__udivmoddi4+0x288>
 8000298:	3e02      	subs	r6, #2
 800029a:	443b      	add	r3, r7
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b0:	45a6      	cmp	lr, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x8c>
 80002b4:	193c      	adds	r4, r7, r4
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	f080 8105 	bcs.w	80004c8 <__udivmoddi4+0x28c>
 80002be:	45a6      	cmp	lr, r4
 80002c0:	f240 8102 	bls.w	80004c8 <__udivmoddi4+0x28c>
 80002c4:	3802      	subs	r0, #2
 80002c6:	443c      	add	r4, r7
 80002c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002cc:	eba4 040e 	sub.w	r4, r4, lr
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa0>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xaa>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	2a00      	cmp	r2, #0
 80002ec:	d150      	bne.n	8000390 <__udivmoddi4+0x154>
 80002ee:	1bcb      	subs	r3, r1, r7
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f f887 	uxth.w	r8, r7
 80002f8:	2601      	movs	r6, #1
 80002fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fe:	0c21      	lsrs	r1, r4, #16
 8000300:	fb0e 331c 	mls	r3, lr, ip, r3
 8000304:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000308:	fb08 f30c 	mul.w	r3, r8, ip
 800030c:	428b      	cmp	r3, r1
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0xe4>
 8000310:	1879      	adds	r1, r7, r1
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0xe2>
 8000318:	428b      	cmp	r3, r1
 800031a:	f200 80e9 	bhi.w	80004f0 <__udivmoddi4+0x2b4>
 800031e:	4684      	mov	ip, r0
 8000320:	1ac9      	subs	r1, r1, r3
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1110 	mls	r1, lr, r0, r1
 800032c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x10c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x10a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80d9 	bhi.w	80004f8 <__udivmoddi4+0x2bc>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e7bf      	b.n	80002d2 <__udivmoddi4+0x96>
 8000352:	428b      	cmp	r3, r1
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x12e>
 8000356:	2d00      	cmp	r5, #0
 8000358:	f000 80b1 	beq.w	80004be <__udivmoddi4+0x282>
 800035c:	2600      	movs	r6, #0
 800035e:	e9c5 0100 	strd	r0, r1, [r5]
 8000362:	4630      	mov	r0, r6
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	fab3 f683 	clz	r6, r3
 800036e:	2e00      	cmp	r6, #0
 8000370:	d14a      	bne.n	8000408 <__udivmoddi4+0x1cc>
 8000372:	428b      	cmp	r3, r1
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0x140>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80b8 	bhi.w	80004ec <__udivmoddi4+0x2b0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb61 0103 	sbc.w	r1, r1, r3
 8000382:	2001      	movs	r0, #1
 8000384:	468c      	mov	ip, r1
 8000386:	2d00      	cmp	r5, #0
 8000388:	d0a8      	beq.n	80002dc <__udivmoddi4+0xa0>
 800038a:	e9c5 4c00 	strd	r4, ip, [r5]
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0xa0>
 8000390:	f1c2 0320 	rsb	r3, r2, #32
 8000394:	fa20 f603 	lsr.w	r6, r0, r3
 8000398:	4097      	lsls	r7, r2
 800039a:	fa01 f002 	lsl.w	r0, r1, r2
 800039e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a2:	40d9      	lsrs	r1, r3
 80003a4:	4330      	orrs	r0, r6
 80003a6:	0c03      	lsrs	r3, r0, #16
 80003a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80003ac:	fa1f f887 	uxth.w	r8, r7
 80003b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b8:	fb06 f108 	mul.w	r1, r6, r8
 80003bc:	4299      	cmp	r1, r3
 80003be:	fa04 f402 	lsl.w	r4, r4, r2
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x19c>
 80003c4:	18fb      	adds	r3, r7, r3
 80003c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ca:	f080 808d 	bcs.w	80004e8 <__udivmoddi4+0x2ac>
 80003ce:	4299      	cmp	r1, r3
 80003d0:	f240 808a 	bls.w	80004e8 <__udivmoddi4+0x2ac>
 80003d4:	3e02      	subs	r6, #2
 80003d6:	443b      	add	r3, r7
 80003d8:	1a5b      	subs	r3, r3, r1
 80003da:	b281      	uxth	r1, r0
 80003dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb00 f308 	mul.w	r3, r0, r8
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x1c4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f6:	d273      	bcs.n	80004e0 <__udivmoddi4+0x2a4>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d971      	bls.n	80004e0 <__udivmoddi4+0x2a4>
 80003fc:	3802      	subs	r0, #2
 80003fe:	4439      	add	r1, r7
 8000400:	1acb      	subs	r3, r1, r3
 8000402:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000406:	e778      	b.n	80002fa <__udivmoddi4+0xbe>
 8000408:	f1c6 0c20 	rsb	ip, r6, #32
 800040c:	fa03 f406 	lsl.w	r4, r3, r6
 8000410:	fa22 f30c 	lsr.w	r3, r2, ip
 8000414:	431c      	orrs	r4, r3
 8000416:	fa20 f70c 	lsr.w	r7, r0, ip
 800041a:	fa01 f306 	lsl.w	r3, r1, r6
 800041e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000422:	fa21 f10c 	lsr.w	r1, r1, ip
 8000426:	431f      	orrs	r7, r3
 8000428:	0c3b      	lsrs	r3, r7, #16
 800042a:	fbb1 f9fe 	udiv	r9, r1, lr
 800042e:	fa1f f884 	uxth.w	r8, r4
 8000432:	fb0e 1119 	mls	r1, lr, r9, r1
 8000436:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043a:	fb09 fa08 	mul.w	sl, r9, r8
 800043e:	458a      	cmp	sl, r1
 8000440:	fa02 f206 	lsl.w	r2, r2, r6
 8000444:	fa00 f306 	lsl.w	r3, r0, r6
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x220>
 800044a:	1861      	adds	r1, r4, r1
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	d248      	bcs.n	80004e4 <__udivmoddi4+0x2a8>
 8000452:	458a      	cmp	sl, r1
 8000454:	d946      	bls.n	80004e4 <__udivmoddi4+0x2a8>
 8000456:	f1a9 0902 	sub.w	r9, r9, #2
 800045a:	4421      	add	r1, r4
 800045c:	eba1 010a 	sub.w	r1, r1, sl
 8000460:	b2bf      	uxth	r7, r7
 8000462:	fbb1 f0fe 	udiv	r0, r1, lr
 8000466:	fb0e 1110 	mls	r1, lr, r0, r1
 800046a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046e:	fb00 f808 	mul.w	r8, r0, r8
 8000472:	45b8      	cmp	r8, r7
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x24a>
 8000476:	19e7      	adds	r7, r4, r7
 8000478:	f100 31ff 	add.w	r1, r0, #4294967295
 800047c:	d22e      	bcs.n	80004dc <__udivmoddi4+0x2a0>
 800047e:	45b8      	cmp	r8, r7
 8000480:	d92c      	bls.n	80004dc <__udivmoddi4+0x2a0>
 8000482:	3802      	subs	r0, #2
 8000484:	4427      	add	r7, r4
 8000486:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048a:	eba7 0708 	sub.w	r7, r7, r8
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	454f      	cmp	r7, r9
 8000494:	46c6      	mov	lr, r8
 8000496:	4649      	mov	r1, r9
 8000498:	d31a      	bcc.n	80004d0 <__udivmoddi4+0x294>
 800049a:	d017      	beq.n	80004cc <__udivmoddi4+0x290>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x27a>
 800049e:	ebb3 020e 	subs.w	r2, r3, lr
 80004a2:	eb67 0701 	sbc.w	r7, r7, r1
 80004a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004aa:	40f2      	lsrs	r2, r6
 80004ac:	ea4c 0202 	orr.w	r2, ip, r2
 80004b0:	40f7      	lsrs	r7, r6
 80004b2:	e9c5 2700 	strd	r2, r7, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e70b      	b.n	80002dc <__udivmoddi4+0xa0>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fd      	b.n	80002c8 <__udivmoddi4+0x8c>
 80004cc:	4543      	cmp	r3, r8
 80004ce:	d2e5      	bcs.n	800049c <__udivmoddi4+0x260>
 80004d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d4:	eb69 0104 	sbc.w	r1, r9, r4
 80004d8:	3801      	subs	r0, #1
 80004da:	e7df      	b.n	800049c <__udivmoddi4+0x260>
 80004dc:	4608      	mov	r0, r1
 80004de:	e7d2      	b.n	8000486 <__udivmoddi4+0x24a>
 80004e0:	4660      	mov	r0, ip
 80004e2:	e78d      	b.n	8000400 <__udivmoddi4+0x1c4>
 80004e4:	4681      	mov	r9, r0
 80004e6:	e7b9      	b.n	800045c <__udivmoddi4+0x220>
 80004e8:	4666      	mov	r6, ip
 80004ea:	e775      	b.n	80003d8 <__udivmoddi4+0x19c>
 80004ec:	4630      	mov	r0, r6
 80004ee:	e74a      	b.n	8000386 <__udivmoddi4+0x14a>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	4439      	add	r1, r7
 80004f6:	e713      	b.n	8000320 <__udivmoddi4+0xe4>
 80004f8:	3802      	subs	r0, #2
 80004fa:	443c      	add	r4, r7
 80004fc:	e724      	b.n	8000348 <__udivmoddi4+0x10c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fd32 	bl	8000f72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f8f9 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 fa4f 	bl	80009b4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000516:	f000 f989 	bl	800082c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 800051a:	f000 f9d5 	bl	80008c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051e:	f000 fa1f 	bl	8000960 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000522:	f000 f943 	bl	80007ac <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  strcpy((char*)buf, "Stort");
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	4a6c      	ldr	r2, [pc, #432]	; (80006dc <main+0x1d8>)
 800052a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052e:	6018      	str	r0, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	8019      	strh	r1, [r3, #0]

	  	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe60 	bl	80001fc <strlen>
 800053c:	4603      	mov	r3, r0
 800053e:	b29a      	uxth	r2, r3
 8000540:	1d39      	adds	r1, r7, #4
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	4866      	ldr	r0, [pc, #408]	; (80006e0 <main+0x1dc>)
 8000548:	f003 fc30 	bl	8003dac <HAL_UART_Transmit>
buf[0] = REG_TEMP;
 800054c:	2305      	movs	r3, #5
 800054e:	713b      	strb	r3, [r7, #4]
	  	  	// send acknowledge bit
	  	  		  ACK = HAL_I2C_Master_Transmit(&hi2c2, SENS_ADDR, buf, 1, HAL_MAX_DELAY);
 8000550:	2318      	movs	r3, #24
 8000552:	b299      	uxth	r1, r3
 8000554:	1d3a      	adds	r2, r7, #4
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2301      	movs	r3, #1
 800055e:	4861      	ldr	r0, [pc, #388]	; (80006e4 <main+0x1e0>)
 8000560:	f001 f8c0 	bl	80016e4 <HAL_I2C_Master_Transmit>
 8000564:	4603      	mov	r3, r0
 8000566:	461a      	mov	r2, r3
 8000568:	4b5f      	ldr	r3, [pc, #380]	; (80006e8 <main+0x1e4>)
 800056a:	701a      	strb	r2, [r3, #0]
//		  	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);

	  // receive 8 bits
	  UpperByte = HAL_I2C_Master_Receive(&hi2c2, SENS_ADDR, buf, 8, HAL_MAX_DELAY);
 800056c:	2318      	movs	r3, #24
 800056e:	b299      	uxth	r1, r3
 8000570:	1d3a      	adds	r2, r7, #4
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2308      	movs	r3, #8
 800057a:	485a      	ldr	r0, [pc, #360]	; (80006e4 <main+0x1e0>)
 800057c:	f001 f9a6 	bl	80018cc <HAL_I2C_Master_Receive>
 8000580:	4603      	mov	r3, r0
 8000582:	461a      	mov	r2, r3
 8000584:	4b59      	ldr	r3, [pc, #356]	; (80006ec <main+0x1e8>)
 8000586:	701a      	strb	r2, [r3, #0]
	  if ( UpperByte != HAL_OK ) {
 8000588:	4b58      	ldr	r3, [pc, #352]	; (80006ec <main+0x1e8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d013      	beq.n	80005b8 <main+0xb4>
	          strcpy((char*)buf, "Error Rx\r\n");
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4a57      	ldr	r2, [pc, #348]	; (80006f0 <main+0x1ec>)
 8000594:	ca07      	ldmia	r2, {r0, r1, r2}
 8000596:	c303      	stmia	r3!, {r0, r1}
 8000598:	801a      	strh	r2, [r3, #0]
 800059a:	3302      	adds	r3, #2
 800059c:	0c12      	lsrs	r2, r2, #16
 800059e:	701a      	strb	r2, [r3, #0]
	  	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff fe2a 	bl	80001fc <strlen>
 80005a8:	4603      	mov	r3, r0
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	1d39      	adds	r1, r7, #4
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	484b      	ldr	r0, [pc, #300]	; (80006e0 <main+0x1dc>)
 80005b4:	f003 fbfa 	bl	8003dac <HAL_UART_Transmit>
	  }
	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fe1e 	bl	80001fc <strlen>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	1d39      	adds	r1, r7, #4
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	4845      	ldr	r0, [pc, #276]	; (80006e0 <main+0x1dc>)
 80005cc:	f003 fbee 	bl	8003dac <HAL_UART_Transmit>

	  // receive 8 bits
	  LowerByte = HAL_I2C_Master_Receive(&hi2c2, SENS_ADDR, buf, 8, HAL_MAX_DELAY);
 80005d0:	2318      	movs	r3, #24
 80005d2:	b299      	uxth	r1, r3
 80005d4:	1d3a      	adds	r2, r7, #4
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2308      	movs	r3, #8
 80005de:	4841      	ldr	r0, [pc, #260]	; (80006e4 <main+0x1e0>)
 80005e0:	f001 f974 	bl	80018cc <HAL_I2C_Master_Receive>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b42      	ldr	r3, [pc, #264]	; (80006f4 <main+0x1f0>)
 80005ea:	701a      	strb	r2, [r3, #0]
	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fe04 	bl	80001fc <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	1d39      	adds	r1, r7, #4
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	4838      	ldr	r0, [pc, #224]	; (80006e0 <main+0x1dc>)
 8000600:	f003 fbd4 	bl	8003dac <HAL_UART_Transmit>

	  // send NAK bit
	  NAK = HAL_I2C_Master_Transmit(&hi2c2, SENS_ADDR, buf, 1, HAL_MAX_DELAY);
 8000604:	2318      	movs	r3, #24
 8000606:	b299      	uxth	r1, r3
 8000608:	1d3a      	adds	r2, r7, #4
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	4834      	ldr	r0, [pc, #208]	; (80006e4 <main+0x1e0>)
 8000614:	f001 f866 	bl	80016e4 <HAL_I2C_Master_Transmit>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b36      	ldr	r3, [pc, #216]	; (80006f8 <main+0x1f4>)
 800061e:	701a      	strb	r2, [r3, #0]
	  strcpy((char*)buf, "Hm");
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	4a36      	ldr	r2, [pc, #216]	; (80006fc <main+0x1f8>)
 8000624:	6812      	ldr	r2, [r2, #0]
 8000626:	4611      	mov	r1, r2
 8000628:	8019      	strh	r1, [r3, #0]
 800062a:	3302      	adds	r3, #2
 800062c:	0c12      	lsrs	r2, r2, #16
 800062e:	701a      	strb	r2, [r3, #0]

	  	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fde2 	bl	80001fc <strlen>
 8000638:	4603      	mov	r3, r0
 800063a:	b29a      	uxth	r2, r3
 800063c:	1d39      	adds	r1, r7, #4
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	4827      	ldr	r0, [pc, #156]	; (80006e0 <main+0x1dc>)
 8000644:	f003 fbb2 	bl	8003dac <HAL_UART_Transmit>
	  }
	  if ((UpperByte & 0x40) == 0x40){ //TA > TUPPER
	  }
	  if ((UpperByte & 0x20) == 0x20){ //TA < TLOWER
	  }
	  UpperByte = UpperByte & 0x1F; //Clear flag bits
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <main+0x1e8>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	f003 031f 	and.w	r3, r3, #31
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <main+0x1e8>)
 8000654:	701a      	strb	r2, [r3, #0]
	  if ((UpperByte & 0x10) == 0x10){ //TA < 0°C
 8000656:	4b25      	ldr	r3, [pc, #148]	; (80006ec <main+0x1e8>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	f003 0310 	and.w	r3, r3, #16
 800065e:	2b00      	cmp	r3, #0
 8000660:	d017      	beq.n	8000692 <main+0x18e>
	  UpperByte = UpperByte & 0x0F; //Clear SIGN
 8000662:	4b22      	ldr	r3, [pc, #136]	; (80006ec <main+0x1e8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	f003 030f 	and.w	r3, r3, #15
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <main+0x1e8>)
 800066e:	701a      	strb	r2, [r3, #0]
	  Temperature = 256 - (UpperByte * 16 + LowerByte / 16);
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <main+0x1e8>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <main+0x1f0>)
 8000678:	7812      	ldrb	r2, [r2, #0]
 800067a:	0912      	lsrs	r2, r2, #4
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	4413      	add	r3, r2
 8000680:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000684:	ee07 3a90 	vmov	s15, r3
 8000688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800068c:	edc7 7a05 	vstr	s15, [r7, #20]
 8000690:	e00d      	b.n	80006ae <main+0x1aa>
	  }else{ //TA ³ 0°C
	  Temperature = (UpperByte * 16 + LowerByte / 16);
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <main+0x1e8>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <main+0x1f0>)
 800069a:	7812      	ldrb	r2, [r2, #0]
 800069c:	0912      	lsrs	r2, r2, #4
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	4413      	add	r3, r2
 80006a2:	ee07 3a90 	vmov	s15, r3
 80006a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006aa:	edc7 7a05 	vstr	s15, [r7, #20]
	  }
	  //Temperature = Ambient Temperature (°C)

	  strcpy((char*)buf, "ERRRRRROR");
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4a13      	ldr	r2, [pc, #76]	; (8000700 <main+0x1fc>)
 80006b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80006b4:	c303      	stmia	r3!, {r0, r1}
 80006b6:	801a      	strh	r2, [r3, #0]

	  	  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd9e 	bl	80001fc <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	1d39      	adds	r1, r7, #4
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <main+0x1dc>)
 80006cc:	f003 fb6e 	bl	8003dac <HAL_UART_Transmit>
	  	  HAL_Delay(750);
 80006d0:	f240 20ee 	movw	r0, #750	; 0x2ee
 80006d4:	f000 fcc2 	bl	800105c <HAL_Delay>
	  strcpy((char*)buf, "Stort");
 80006d8:	e725      	b.n	8000526 <main+0x22>
 80006da:	bf00      	nop
 80006dc:	08004fb8 	.word	0x08004fb8
 80006e0:	2000061c 	.word	0x2000061c
 80006e4:	200005c8 	.word	0x200005c8
 80006e8:	200006ae 	.word	0x200006ae
 80006ec:	200006ac 	.word	0x200006ac
 80006f0:	08004fc0 	.word	0x08004fc0
 80006f4:	20000028 	.word	0x20000028
 80006f8:	200006ad 	.word	0x200006ad
 80006fc:	08004fcc 	.word	0x08004fcc
 8000700:	08004fd0 	.word	0x08004fd0

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b096      	sub	sp, #88	; 0x58
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2244      	movs	r2, #68	; 0x44
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f004 fc3c 	bl	8004f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000726:	2000      	movs	r0, #0
 8000728:	f001 fe3e 	bl	80023a8 <HAL_PWREx_ControlVoltageScaling>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000732:	f000 f9ff 	bl	8000b34 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000736:	2322      	movs	r3, #34	; 0x22
 8000738:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2340      	movs	r3, #64	; 0x40
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000754:	231e      	movs	r3, #30
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fee1 	bl	8002530 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000774:	f000 f9de 	bl	8000b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2303      	movs	r3, #3
 800077e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	2105      	movs	r1, #5
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fae4 	bl	8002d60 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800079e:	f000 f9c9 	bl	8000b34 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3758      	adds	r7, #88	; 0x58
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_I2C2_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_I2C2_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x107075B0;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_I2C2_Init+0x74>)
 80007b8:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <MX_I2C2_Init+0x7c>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_I2C2_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_I2C2_Init+0x74>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_I2C2_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_I2C2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_I2C2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_I2C2_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <MX_I2C2_Init+0x74>)
 80007e8:	f000 feec 	bl	80015c4 <HAL_I2C_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007f2:	f000 f99f 	bl	8000b34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <MX_I2C2_Init+0x74>)
 80007fa:	f001 fbd5 	bl	8001fa8 <HAL_I2CEx_ConfigAnalogFilter>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000804:	f000 f996 	bl	8000b34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000808:	2100      	movs	r1, #0
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_I2C2_Init+0x74>)
 800080c:	f001 fc17 	bl	800203e <HAL_I2CEx_ConfigDigitalFilter>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 f98d 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200005c8 	.word	0x200005c8
 8000824:	40005800 	.word	0x40005800
 8000828:	107075b0 	.word	0x107075b0

0800082c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 8000832:	4a23      	ldr	r2, [pc, #140]	; (80008c0 <MX_LPUART1_UART_Init+0x94>)
 8000834:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 8000838:	4a22      	ldr	r2, [pc, #136]	; (80008c4 <MX_LPUART1_UART_Init+0x98>)
 800083a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 8000850:	220c      	movs	r2, #12
 8000852:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000872:	4812      	ldr	r0, [pc, #72]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 8000874:	f003 fa4a 	bl	8003d0c <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800087e:	f000 f959 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 8000886:	f003 ffdf 	bl	8004848 <HAL_UARTEx_SetTxFifoThreshold>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000890:	f000 f950 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000894:	2100      	movs	r1, #0
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 8000898:	f004 f814 	bl	80048c4 <HAL_UARTEx_SetRxFifoThreshold>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80008a2:	f000 f947 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_LPUART1_UART_Init+0x90>)
 80008a8:	f003 ff95 	bl	80047d6 <HAL_UARTEx_DisableFifoMode>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80008b2:	f000 f93f 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000061c 	.word	0x2000061c
 80008c0:	40008000 	.word	0x40008000
 80008c4:	00033324 	.word	0x00033324

080008c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008cc:	4b22      	ldr	r3, [pc, #136]	; (8000958 <MX_USART3_UART_Init+0x90>)
 80008ce:	4a23      	ldr	r2, [pc, #140]	; (800095c <MX_USART3_UART_Init+0x94>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_USART3_UART_Init+0x90>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_USART3_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_USART3_UART_Init+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_USART3_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_USART3_UART_Init+0x90>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_USART3_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_USART3_UART_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_USART3_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_USART3_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_USART3_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000910:	4811      	ldr	r0, [pc, #68]	; (8000958 <MX_USART3_UART_Init+0x90>)
 8000912:	f003 f9fb 	bl	8003d0c <HAL_UART_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800091c:	f000 f90a 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_USART3_UART_Init+0x90>)
 8000924:	f003 ff90 	bl	8004848 <HAL_UARTEx_SetTxFifoThreshold>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800092e:	f000 f901 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4808      	ldr	r0, [pc, #32]	; (8000958 <MX_USART3_UART_Init+0x90>)
 8000936:	f003 ffc5 	bl	80048c4 <HAL_UARTEx_SetRxFifoThreshold>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000940:	f000 f8f8 	bl	8000b34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_USART3_UART_Init+0x90>)
 8000946:	f003 ff46 	bl	80047d6 <HAL_UARTEx_DisableFifoMode>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000950:	f000 f8f0 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000002c 	.word	0x2000002c
 800095c:	40004800 	.word	0x40004800

08000960 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000966:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800096a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800096e:	2206      	movs	r2, #6
 8000970:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000974:	2202      	movs	r2, #2
 8000976:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800097a:	2201      	movs	r2, #1
 800097c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800098c:	2201      	movs	r2, #1
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000998:	2201      	movs	r2, #1
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800099e:	f001 fb9a 	bl	80020d6 <HAL_PCD_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80009a8:	f000 f8c4 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000bc 	.word	0x200000bc

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	; 0x30
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	4b56      	ldr	r3, [pc, #344]	; (8000b24 <MX_GPIO_Init+0x170>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a55      	ldr	r2, [pc, #340]	; (8000b24 <MX_GPIO_Init+0x170>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b53      	ldr	r3, [pc, #332]	; (8000b24 <MX_GPIO_Init+0x170>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	61bb      	str	r3, [r7, #24]
 80009e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e2:	4b50      	ldr	r3, [pc, #320]	; (8000b24 <MX_GPIO_Init+0x170>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a4f      	ldr	r2, [pc, #316]	; (8000b24 <MX_GPIO_Init+0x170>)
 80009e8:	f043 0320 	orr.w	r3, r3, #32
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b4d      	ldr	r3, [pc, #308]	; (8000b24 <MX_GPIO_Init+0x170>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0320 	and.w	r3, r3, #32
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	4b4a      	ldr	r3, [pc, #296]	; (8000b24 <MX_GPIO_Init+0x170>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a49      	ldr	r2, [pc, #292]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b47      	ldr	r3, [pc, #284]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b44      	ldr	r3, [pc, #272]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b41      	ldr	r3, [pc, #260]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b3e      	ldr	r3, [pc, #248]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a3d      	ldr	r2, [pc, #244]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a37      	ldr	r2, [pc, #220]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b35      	ldr	r3, [pc, #212]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5a:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a31      	ldr	r2, [pc, #196]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b2f      	ldr	r3, [pc, #188]	; (8000b24 <MX_GPIO_Init+0x170>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000a72:	f001 fd4d 	bl	8002510 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a7c:	482a      	ldr	r0, [pc, #168]	; (8000b28 <MX_GPIO_Init+0x174>)
 8000a7e:	f000 fd89 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2120      	movs	r1, #32
 8000a86:	4829      	ldr	r0, [pc, #164]	; (8000b2c <MX_GPIO_Init+0x178>)
 8000a88:	f000 fd84 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4823      	ldr	r0, [pc, #140]	; (8000b30 <MX_GPIO_Init+0x17c>)
 8000aa4:	f000 fbe4 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab8:	2307      	movs	r3, #7
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f000 fbd3 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000aca:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4811      	ldr	r0, [pc, #68]	; (8000b28 <MX_GPIO_Init+0x174>)
 8000ae4:	f000 fbc4 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ae8:	2320      	movs	r3, #32
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	480b      	ldr	r0, [pc, #44]	; (8000b2c <MX_GPIO_Init+0x178>)
 8000b00:	f000 fbb6 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b04:	2340      	movs	r3, #64	; 0x40
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_GPIO_Init+0x178>)
 8000b18:	f000 fbaa 	bl	8001270 <HAL_GPIO_Init>

}
 8000b1c:	bf00      	nop
 8000b1e:	3730      	adds	r7, #48	; 0x30
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48001800 	.word	0x48001800
 8000b30:	48000800 	.word	0x48000800

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_MspInit+0x44>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <HAL_MspInit+0x44>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6613      	str	r3, [r2, #96]	; 0x60
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x44>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x44>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0ae      	sub	sp, #184	; 0xb8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	2294      	movs	r2, #148	; 0x94
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 f9f1 	bl	8004f90 <memset>
  if(hi2c->Instance==I2C2)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <HAL_I2C_MspInit+0xb0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d13a      	bne.n	8000c2e <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f002 fb89 	bl	80032dc <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bd0:	f7ff ffb0 	bl	8000b34 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_I2C_MspInit+0xb4>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <HAL_I2C_MspInit+0xb4>)
 8000bda:	f043 0320 	orr.w	r3, r3, #32
 8000bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <HAL_I2C_MspInit+0xb4>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	f003 0320 	and.w	r3, r3, #32
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bec:	2303      	movs	r3, #3
 8000bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf2:	2312      	movs	r3, #18
 8000bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c04:	2304      	movs	r3, #4
 8000c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <HAL_I2C_MspInit+0xb8>)
 8000c12:	f000 fb2d 	bl	8001270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_I2C_MspInit+0xb4>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_I2C_MspInit+0xb4>)
 8000c1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c20:	6593      	str	r3, [r2, #88]	; 0x58
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_I2C_MspInit+0xb4>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	37b8      	adds	r7, #184	; 0xb8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40005800 	.word	0x40005800
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	48001400 	.word	0x48001400

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0b0      	sub	sp, #192	; 0xc0
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	2294      	movs	r2, #148	; 0x94
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 f993 	bl	8004f90 <memset>
  if(huart->Instance==LPUART1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a43      	ldr	r2, [pc, #268]	; (8000d7c <HAL_UART_MspInit+0x138>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d13e      	bne.n	8000cf2 <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c74:	2320      	movs	r3, #32
 8000c76:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 fb2b 	bl	80032dc <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c8c:	f7ff ff52 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c90:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <HAL_UART_MspInit+0x13c>)
 8000c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c94:	4a3a      	ldr	r2, [pc, #232]	; (8000d80 <HAL_UART_MspInit+0x13c>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c9c:	4b38      	ldr	r3, [pc, #224]	; (8000d80 <HAL_UART_MspInit+0x13c>)
 8000c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca8:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <HAL_UART_MspInit+0x13c>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	4a34      	ldr	r2, [pc, #208]	; (8000d80 <HAL_UART_MspInit+0x13c>)
 8000cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <HAL_UART_MspInit+0x13c>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000cc0:	f001 fc26 	bl	8002510 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000cc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000cde:	2308      	movs	r3, #8
 8000ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4826      	ldr	r0, [pc, #152]	; (8000d84 <HAL_UART_MspInit+0x140>)
 8000cec:	f000 fac0 	bl	8001270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cf0:	e040      	b.n	8000d74 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a24      	ldr	r2, [pc, #144]	; (8000d88 <HAL_UART_MspInit+0x144>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d13b      	bne.n	8000d74 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f002 fae7 	bl	80032dc <HAL_RCCEx_PeriphCLKConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000d14:	f7ff ff0e 	bl	8000b34 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_UART_MspInit+0x13c>)
 8000d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1c:	4a18      	ldr	r2, [pc, #96]	; (8000d80 <HAL_UART_MspInit+0x13c>)
 8000d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d22:	6593      	str	r3, [r2, #88]	; 0x58
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <HAL_UART_MspInit+0x13c>)
 8000d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_UART_MspInit+0x13c>)
 8000d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d34:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <HAL_UART_MspInit+0x13c>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_UART_MspInit+0x13c>)
 8000d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d62:	2307      	movs	r3, #7
 8000d64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4807      	ldr	r0, [pc, #28]	; (8000d8c <HAL_UART_MspInit+0x148>)
 8000d70:	f000 fa7e 	bl	8001270 <HAL_GPIO_Init>
}
 8000d74:	bf00      	nop
 8000d76:	37c0      	adds	r7, #192	; 0xc0
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40008000 	.word	0x40008000
 8000d80:	40021000 	.word	0x40021000
 8000d84:	48001800 	.word	0x48001800
 8000d88:	40004800 	.word	0x40004800
 8000d8c:	48000c00 	.word	0x48000c00

08000d90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0b0      	sub	sp, #192	; 0xc0
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da8:	f107 0318 	add.w	r3, r7, #24
 8000dac:	2294      	movs	r2, #148	; 0x94
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 f8ed 	bl	8004f90 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dbe:	d16c      	bne.n	8000e9a <HAL_PCD_MspInit+0x10a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 fa83 	bl	80032dc <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ddc:	f7ff feaa 	bl	8000b34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	4a2f      	ldr	r2, [pc, #188]	; (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000df8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e12:	230a      	movs	r3, #10
 8000e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f000 fa25 	bl	8001270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f000 fa14 	bl	8001270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	4a15      	ldr	r2, [pc, #84]	; (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d114      	bne.n	8000e96 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e70:	4a0c      	ldr	r2, [pc, #48]	; (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e76:	6593      	str	r3, [r2, #88]	; 0x58
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000e84:	f001 fb34 	bl	80024f0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8c:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e92:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e94:	e001      	b.n	8000e9a <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000e96:	f001 fb2b 	bl	80024f0 <HAL_PWREx_EnableVddUSB>
}
 8000e9a:	bf00      	nop
 8000e9c:	37c0      	adds	r7, #192	; 0xc0
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f892 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff ffea 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	; (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	; (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f003 fffb 	bl	8004f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f52:	f7ff fad7 	bl	8000504 <main>

08000f56 <LoopForever>:

LoopForever:
    b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f58:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f64:	0800505c 	.word	0x0800505c
  ldr r2, =_sbss
 8000f68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f6c:	200006b4 	.word	0x200006b4

08000f70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_IRQHandler>

08000f72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f943 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f80e 	bl	8000fa4 <HAL_InitTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	e001      	b.n	8000f98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f94:	f7ff fdd4 	bl	8000b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f98:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_InitTick+0x6c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d023      	beq.n	8001000 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_InitTick+0x70>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_InitTick+0x6c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f941 	bl	8001256 <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10f      	bne.n	8000ffa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d809      	bhi.n	8000ff4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f000 f919 	bl	800121e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_InitTick+0x74>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e007      	b.n	8001004 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e004      	b.n	8001004 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e001      	b.n	8001004 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	20000000 	.word	0x20000000
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	200006b0 	.word	0x200006b0

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200006b0 	.word	0x200006b0

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff47 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff5c 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffb0 	bl	80011c4 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127e:	e166      	b.n	800154e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	2101      	movs	r1, #1
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	4013      	ands	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 8158 	beq.w	8001548 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d005      	beq.n	80012b0 <HAL_GPIO_Init+0x40>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d130      	bne.n	8001312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012e6:	2201      	movs	r2, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f003 0201 	and.w	r2, r3, #1
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b03      	cmp	r3, #3
 800131c:	d017      	beq.n	800134e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d123      	bne.n	80013a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	08da      	lsrs	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3208      	adds	r2, #8
 8001362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	691a      	ldr	r2, [r3, #16]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	6939      	ldr	r1, [r7, #16]
 800139e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0203 	and.w	r2, r3, #3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 80b2 	beq.w	8001548 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e4:	4b61      	ldr	r3, [pc, #388]	; (800156c <HAL_GPIO_Init+0x2fc>)
 80013e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e8:	4a60      	ldr	r2, [pc, #384]	; (800156c <HAL_GPIO_Init+0x2fc>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6613      	str	r3, [r2, #96]	; 0x60
 80013f0:	4b5e      	ldr	r3, [pc, #376]	; (800156c <HAL_GPIO_Init+0x2fc>)
 80013f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013fc:	4a5c      	ldr	r2, [pc, #368]	; (8001570 <HAL_GPIO_Init+0x300>)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	220f      	movs	r2, #15
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001426:	d02b      	beq.n	8001480 <HAL_GPIO_Init+0x210>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a52      	ldr	r2, [pc, #328]	; (8001574 <HAL_GPIO_Init+0x304>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d025      	beq.n	800147c <HAL_GPIO_Init+0x20c>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a51      	ldr	r2, [pc, #324]	; (8001578 <HAL_GPIO_Init+0x308>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d01f      	beq.n	8001478 <HAL_GPIO_Init+0x208>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a50      	ldr	r2, [pc, #320]	; (800157c <HAL_GPIO_Init+0x30c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d019      	beq.n	8001474 <HAL_GPIO_Init+0x204>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a4f      	ldr	r2, [pc, #316]	; (8001580 <HAL_GPIO_Init+0x310>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d013      	beq.n	8001470 <HAL_GPIO_Init+0x200>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a4e      	ldr	r2, [pc, #312]	; (8001584 <HAL_GPIO_Init+0x314>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d00d      	beq.n	800146c <HAL_GPIO_Init+0x1fc>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a4d      	ldr	r2, [pc, #308]	; (8001588 <HAL_GPIO_Init+0x318>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d007      	beq.n	8001468 <HAL_GPIO_Init+0x1f8>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a4c      	ldr	r2, [pc, #304]	; (800158c <HAL_GPIO_Init+0x31c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d101      	bne.n	8001464 <HAL_GPIO_Init+0x1f4>
 8001460:	2307      	movs	r3, #7
 8001462:	e00e      	b.n	8001482 <HAL_GPIO_Init+0x212>
 8001464:	2308      	movs	r3, #8
 8001466:	e00c      	b.n	8001482 <HAL_GPIO_Init+0x212>
 8001468:	2306      	movs	r3, #6
 800146a:	e00a      	b.n	8001482 <HAL_GPIO_Init+0x212>
 800146c:	2305      	movs	r3, #5
 800146e:	e008      	b.n	8001482 <HAL_GPIO_Init+0x212>
 8001470:	2304      	movs	r3, #4
 8001472:	e006      	b.n	8001482 <HAL_GPIO_Init+0x212>
 8001474:	2303      	movs	r3, #3
 8001476:	e004      	b.n	8001482 <HAL_GPIO_Init+0x212>
 8001478:	2302      	movs	r3, #2
 800147a:	e002      	b.n	8001482 <HAL_GPIO_Init+0x212>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <HAL_GPIO_Init+0x212>
 8001480:	2300      	movs	r3, #0
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	f002 0203 	and.w	r2, r2, #3
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	4093      	lsls	r3, r2
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001492:	4937      	ldr	r1, [pc, #220]	; (8001570 <HAL_GPIO_Init+0x300>)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014a0:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <HAL_GPIO_Init+0x320>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014c4:	4a32      	ldr	r2, [pc, #200]	; (8001590 <HAL_GPIO_Init+0x320>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <HAL_GPIO_Init+0x320>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014ee:	4a28      	ldr	r2, [pc, #160]	; (8001590 <HAL_GPIO_Init+0x320>)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <HAL_GPIO_Init+0x320>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001518:	4a1d      	ldr	r2, [pc, #116]	; (8001590 <HAL_GPIO_Init+0x320>)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_GPIO_Init+0x320>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001542:	4a13      	ldr	r2, [pc, #76]	; (8001590 <HAL_GPIO_Init+0x320>)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3301      	adds	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	fa22 f303 	lsr.w	r3, r2, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	f47f ae91 	bne.w	8001280 <HAL_GPIO_Init+0x10>
  }
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000
 8001574:	48000400 	.word	0x48000400
 8001578:	48000800 	.word	0x48000800
 800157c:	48000c00 	.word	0x48000c00
 8001580:	48001000 	.word	0x48001000
 8001584:	48001400 	.word	0x48001400
 8001588:	48001800 	.word	0x48001800
 800158c:	48001c00 	.word	0x48001c00
 8001590:	40010400 	.word	0x40010400

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
 80015a0:	4613      	mov	r3, r2
 80015a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a4:	787b      	ldrb	r3, [r7, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e081      	b.n	80016da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d106      	bne.n	80015f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff facc 	bl	8000b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2224      	movs	r2, #36	; 0x24
 80015f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001614:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001624:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	e006      	b.n	800164c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800164a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d104      	bne.n	800165e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800165c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800166c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001670:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001680:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69d9      	ldr	r1, [r3, #28]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1a      	ldr	r2, [r3, #32]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2220      	movs	r2, #32
 80016c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	461a      	mov	r2, r3
 80016f0:	460b      	mov	r3, r1
 80016f2:	817b      	strh	r3, [r7, #10]
 80016f4:	4613      	mov	r3, r2
 80016f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b20      	cmp	r3, #32
 8001702:	f040 80da 	bne.w	80018ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_I2C_Master_Transmit+0x30>
 8001710:	2302      	movs	r3, #2
 8001712:	e0d3      	b.n	80018bc <HAL_I2C_Master_Transmit+0x1d8>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800171c:	f7ff fc92 	bl	8001044 <HAL_GetTick>
 8001720:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2319      	movs	r3, #25
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 f9e6 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e0be      	b.n	80018bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2221      	movs	r2, #33	; 0x21
 8001742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2210      	movs	r2, #16
 800174a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	893a      	ldrh	r2, [r7, #8]
 800175e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176a:	b29b      	uxth	r3, r3
 800176c:	2bff      	cmp	r3, #255	; 0xff
 800176e:	d90e      	bls.n	800178e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	22ff      	movs	r2, #255	; 0xff
 8001774:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177a:	b2da      	uxtb	r2, r3
 800177c:	8979      	ldrh	r1, [r7, #10]
 800177e:	4b51      	ldr	r3, [pc, #324]	; (80018c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 fbdc 	bl	8001f44 <I2C_TransferConfig>
 800178c:	e06c      	b.n	8001868 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179c:	b2da      	uxtb	r2, r3
 800179e:	8979      	ldrh	r1, [r7, #10]
 80017a0:	4b48      	ldr	r3, [pc, #288]	; (80018c4 <HAL_I2C_Master_Transmit+0x1e0>)
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 fbcb 	bl	8001f44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80017ae:	e05b      	b.n	8001868 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	6a39      	ldr	r1, [r7, #32]
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 f9e3 	bl	8001b80 <I2C_WaitOnTXISFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e07b      	b.n	80018bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	781a      	ldrb	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d034      	beq.n	8001868 <HAL_I2C_Master_Transmit+0x184>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001802:	2b00      	cmp	r3, #0
 8001804:	d130      	bne.n	8001868 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	2200      	movs	r2, #0
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 f975 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e04d      	b.n	80018bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001824:	b29b      	uxth	r3, r3
 8001826:	2bff      	cmp	r3, #255	; 0xff
 8001828:	d90e      	bls.n	8001848 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	22ff      	movs	r2, #255	; 0xff
 800182e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001834:	b2da      	uxtb	r2, r3
 8001836:	8979      	ldrh	r1, [r7, #10]
 8001838:	2300      	movs	r3, #0
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 fb7f 	bl	8001f44 <I2C_TransferConfig>
 8001846:	e00f      	b.n	8001868 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001856:	b2da      	uxtb	r2, r3
 8001858:	8979      	ldrh	r1, [r7, #10]
 800185a:	2300      	movs	r3, #0
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 fb6e 	bl	8001f44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186c:	b29b      	uxth	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d19e      	bne.n	80017b0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	6a39      	ldr	r1, [r7, #32]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f9c2 	bl	8001c00 <I2C_WaitOnSTOPFlagUntilTimeout>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e01a      	b.n	80018bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2220      	movs	r2, #32
 800188c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800189a:	400b      	ands	r3, r1
 800189c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2220      	movs	r2, #32
 80018a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80018ba:	2302      	movs	r3, #2
  }
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	80002000 	.word	0x80002000
 80018c8:	fe00e800 	.word	0xfe00e800

080018cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	461a      	mov	r2, r3
 80018d8:	460b      	mov	r3, r1
 80018da:	817b      	strh	r3, [r7, #10]
 80018dc:	4613      	mov	r3, r2
 80018de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	f040 80db 	bne.w	8001aa4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_I2C_Master_Receive+0x30>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e0d4      	b.n	8001aa6 <HAL_I2C_Master_Receive+0x1da>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001904:	f7ff fb9e 	bl	8001044 <HAL_GetTick>
 8001908:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2319      	movs	r3, #25
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f8f2 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0bf      	b.n	8001aa6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2222      	movs	r2, #34	; 0x22
 800192a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2210      	movs	r2, #16
 8001932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	893a      	ldrh	r2, [r7, #8]
 8001946:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001952:	b29b      	uxth	r3, r3
 8001954:	2bff      	cmp	r3, #255	; 0xff
 8001956:	d90e      	bls.n	8001976 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	22ff      	movs	r2, #255	; 0xff
 800195c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001962:	b2da      	uxtb	r2, r3
 8001964:	8979      	ldrh	r1, [r7, #10]
 8001966:	4b52      	ldr	r3, [pc, #328]	; (8001ab0 <HAL_I2C_Master_Receive+0x1e4>)
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 fae8 	bl	8001f44 <I2C_TransferConfig>
 8001974:	e06d      	b.n	8001a52 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001984:	b2da      	uxtb	r2, r3
 8001986:	8979      	ldrh	r1, [r7, #10]
 8001988:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <HAL_I2C_Master_Receive+0x1e4>)
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 fad7 	bl	8001f44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001996:	e05c      	b.n	8001a52 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	6a39      	ldr	r1, [r7, #32]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f96b 	bl	8001c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e07c      	b.n	8001aa6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d034      	beq.n	8001a52 <HAL_I2C_Master_Receive+0x186>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d130      	bne.n	8001a52 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	2200      	movs	r2, #0
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f880 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e04d      	b.n	8001aa6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	2bff      	cmp	r3, #255	; 0xff
 8001a12:	d90e      	bls.n	8001a32 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	22ff      	movs	r2, #255	; 0xff
 8001a18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	8979      	ldrh	r1, [r7, #10]
 8001a22:	2300      	movs	r3, #0
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 fa8a 	bl	8001f44 <I2C_TransferConfig>
 8001a30:	e00f      	b.n	8001a52 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	8979      	ldrh	r1, [r7, #10]
 8001a44:	2300      	movs	r3, #0
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 fa79 	bl	8001f44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d19d      	bne.n	8001998 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	6a39      	ldr	r1, [r7, #32]
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 f8cd 	bl	8001c00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e01a      	b.n	8001aa6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2220      	movs	r2, #32
 8001a76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6859      	ldr	r1, [r3, #4]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_I2C_Master_Receive+0x1e8>)
 8001a84:	400b      	ands	r3, r1
 8001a86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	e000      	b.n	8001aa6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001aa4:	2302      	movs	r3, #2
  }
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	80002400 	.word	0x80002400
 8001ab4:	fe00e800 	.word	0xfe00e800

08001ab8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d103      	bne.n	8001ad6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d007      	beq.n	8001af4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699a      	ldr	r2, [r3, #24]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	619a      	str	r2, [r3, #24]
  }
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b10:	e022      	b.n	8001b58 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d01e      	beq.n	8001b58 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b1a:	f7ff fa93 	bl	8001044 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d302      	bcc.n	8001b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d113      	bne.n	8001b58 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	f043 0220 	orr.w	r2, r3, #32
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e00f      	b.n	8001b78 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	4013      	ands	r3, r2
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d0cd      	beq.n	8001b12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b8c:	e02c      	b.n	8001be8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f8ea 	bl	8001d6c <I2C_IsErrorOccurred>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e02a      	b.n	8001bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d01e      	beq.n	8001be8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001baa:	f7ff fa4b 	bl	8001044 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d302      	bcc.n	8001bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d113      	bne.n	8001be8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	f043 0220 	orr.w	r2, r3, #32
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e007      	b.n	8001bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d1cb      	bne.n	8001b8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c0c:	e028      	b.n	8001c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f8aa 	bl	8001d6c <I2C_IsErrorOccurred>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e026      	b.n	8001c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c22:	f7ff fa0f 	bl	8001044 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d302      	bcc.n	8001c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d113      	bne.n	8001c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	f043 0220 	orr.w	r2, r3, #32
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e007      	b.n	8001c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	2b20      	cmp	r3, #32
 8001c6c:	d1cf      	bne.n	8001c0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c84:	e064      	b.n	8001d50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 f86e 	bl	8001d6c <I2C_IsErrorOccurred>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e062      	b.n	8001d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d138      	bne.n	8001d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d105      	bne.n	8001cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e04e      	b.n	8001d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b10      	cmp	r3, #16
 8001cce:	d107      	bne.n	8001ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44
 8001cde:	e002      	b.n	8001ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2220      	movs	r2, #32
 8001cec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001cfa:	400b      	ands	r3, r1
 8001cfc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2220      	movs	r2, #32
 8001d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e022      	b.n	8001d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1a:	f7ff f993 	bl	8001044 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d302      	bcc.n	8001d30 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10f      	bne.n	8001d50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	f043 0220 	orr.w	r2, r3, #32
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e007      	b.n	8001d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d193      	bne.n	8001c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	fe00e800 	.word	0xfe00e800

08001d6c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d075      	beq.n	8001e84 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2210      	movs	r2, #16
 8001d9e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001da0:	e056      	b.n	8001e50 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da8:	d052      	beq.n	8001e50 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001daa:	f7ff f94b 	bl	8001044 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d302      	bcc.n	8001dc0 <I2C_IsErrorOccurred+0x54>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d147      	bne.n	8001e50 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dd2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001de2:	d12e      	bne.n	8001e42 <I2C_IsErrorOccurred+0xd6>
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dea:	d02a      	beq.n	8001e42 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001dec:	7cfb      	ldrb	r3, [r7, #19]
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d027      	beq.n	8001e42 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e02:	f7ff f91f 	bl	8001044 <HAL_GetTick>
 8001e06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e08:	e01b      	b.n	8001e42 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e0a:	f7ff f91b 	bl	8001044 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b19      	cmp	r3, #25
 8001e16:	d914      	bls.n	8001e42 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d1dc      	bne.n	8001e0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d003      	beq.n	8001e66 <I2C_IsErrorOccurred+0xfa>
 8001e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d09d      	beq.n	8001da2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2220      	movs	r2, #32
 8001e74:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ea6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00b      	beq.n	8001ed0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	f043 0308 	orr.w	r3, r3, #8
 8001ebe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01c      	beq.n	8001f34 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f7ff fddc 	bl	8001ab8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <I2C_IsErrorOccurred+0x1d4>)
 8001f0c:	400b      	ands	r3, r1
 8001f0e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	fe00e800 	.word	0xfe00e800

08001f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	817b      	strh	r3, [r7, #10]
 8001f52:	4613      	mov	r3, r2
 8001f54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f56:	897b      	ldrh	r3, [r7, #10]
 8001f58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f5c:	7a7b      	ldrb	r3, [r7, #9]
 8001f5e:	041b      	lsls	r3, r3, #16
 8001f60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <I2C_TransferConfig+0x60>)
 8001f84:	430b      	orrs	r3, r1
 8001f86:	43db      	mvns	r3, r3
 8001f88:	ea02 0103 	and.w	r1, r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	03ff63ff 	.word	0x03ff63ff

08001fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d138      	bne.n	8002030 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e032      	b.n	8002032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2224      	movs	r2, #36	; 0x24
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ffa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6819      	ldr	r1, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b20      	cmp	r3, #32
 8002052:	d139      	bne.n	80020c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800205e:	2302      	movs	r3, #2
 8002060:	e033      	b.n	80020ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2224      	movs	r2, #36	; 0x24
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002090:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e000      	b.n	80020ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020c8:	2302      	movs	r3, #2
  }
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d8:	b08f      	sub	sp, #60	; 0x3c
 80020da:	af0a      	add	r7, sp, #40	; 0x28
 80020dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e116      	b.n	8002316 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fe44 	bl	8000d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2203      	movs	r2, #3
 800210c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f002 fc84 	bl	8004a34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	687e      	ldr	r6, [r7, #4]
 8002134:	466d      	mov	r5, sp
 8002136:	f106 0410 	add.w	r4, r6, #16
 800213a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002142:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002146:	e885 0003 	stmia.w	r5, {r0, r1}
 800214a:	1d33      	adds	r3, r6, #4
 800214c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800214e:	6838      	ldr	r0, [r7, #0]
 8002150:	f002 fc44 	bl	80049dc <USB_CoreInit>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0d7      	b.n	8002316 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f002 fc72 	bl	8004a56 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]
 8002176:	e04a      	b.n	800220e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	333d      	adds	r3, #61	; 0x3d
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	333c      	adds	r3, #60	; 0x3c
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	b298      	uxth	r0, r3
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	3344      	adds	r3, #68	; 0x44
 80021b4:	4602      	mov	r2, r0
 80021b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3340      	adds	r3, #64	; 0x40
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	3348      	adds	r3, #72	; 0x48
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	334c      	adds	r3, #76	; 0x4c
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	3354      	adds	r3, #84	; 0x54
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	3301      	adds	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	d3af      	bcc.n	8002178 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002218:	2300      	movs	r3, #0
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e044      	b.n	80022a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002246:	7bfa      	ldrb	r2, [r7, #15]
 8002248:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	3301      	adds	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d3b5      	bcc.n	800221e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	687e      	ldr	r6, [r7, #4]
 80022ba:	466d      	mov	r5, sp
 80022bc:	f106 0410 	add.w	r4, r6, #16
 80022c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80022d0:	1d33      	adds	r3, r6, #4
 80022d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022d4:	6838      	ldr	r0, [r7, #0]
 80022d6:	f002 fc0b 	bl	8004af0 <USB_DevInit>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e014      	b.n	8002316 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	2b01      	cmp	r3, #1
 8002302:	d102      	bne.n	800230a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f80a 	bl	800231e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f002 fdb7 	bl	8004e82 <USB_DevDisconnect>

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800231e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	f043 0303 	orr.w	r3, r3, #3
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800236c:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002378:	d102      	bne.n	8002380 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800237a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800237e:	e00b      	b.n	8002398 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800238e:	d102      	bne.n	8002396 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002394:	e000      	b.n	8002398 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002396:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40007000 	.word	0x40007000

080023a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d141      	bne.n	800243a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023b6:	4b4b      	ldr	r3, [pc, #300]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c2:	d131      	bne.n	8002428 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c4:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ca:	4a46      	ldr	r2, [pc, #280]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d4:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023dc:	4a41      	ldr	r2, [pc, #260]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023e4:	4b40      	ldr	r3, [pc, #256]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2232      	movs	r2, #50	; 0x32
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	4a3f      	ldr	r2, [pc, #252]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	0c9b      	lsrs	r3, r3, #18
 80023f6:	3301      	adds	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023fa:	e002      	b.n	8002402 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3b01      	subs	r3, #1
 8002400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002402:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240e:	d102      	bne.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f2      	bne.n	80023fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002416:	4b33      	ldr	r3, [pc, #204]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002422:	d158      	bne.n	80024d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e057      	b.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002428:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800242e:	4a2d      	ldr	r2, [pc, #180]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002434:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002438:	e04d      	b.n	80024d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002440:	d141      	bne.n	80024c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002442:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800244a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244e:	d131      	bne.n	80024b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002450:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002456:	4a23      	ldr	r2, [pc, #140]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002468:	4a1e      	ldr	r2, [pc, #120]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800246e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2232      	movs	r2, #50	; 0x32
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	4a1c      	ldr	r2, [pc, #112]	; (80024ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	0c9b      	lsrs	r3, r3, #18
 8002482:	3301      	adds	r3, #1
 8002484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002486:	e002      	b.n	800248e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3b01      	subs	r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249a:	d102      	bne.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f2      	bne.n	8002488 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ae:	d112      	bne.n	80024d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e011      	b.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80024c4:	e007      	b.n	80024d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024ce:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024d4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	40007000 	.word	0x40007000
 80024e8:	20000000 	.word	0x20000000
 80024ec:	431bde83 	.word	0x431bde83

080024f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_PWREx_EnableVddUSB+0x1c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_PWREx_EnableVddUSB+0x1c>)
 80024fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024fe:	6053      	str	r3, [r2, #4]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40007000 	.word	0x40007000

08002510 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_PWREx_EnableVddIO2+0x1c>)
 800251a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800251e:	6053      	str	r3, [r2, #4]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40007000 	.word	0x40007000

08002530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d102      	bne.n	8002544 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	f000 bc04 	b.w	8002d4c <HAL_RCC_OscConfig+0x81c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002544:	4ba0      	ldr	r3, [pc, #640]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800254e:	4b9e      	ldr	r3, [pc, #632]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80e4 	beq.w	800272e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <HAL_RCC_OscConfig+0x4c>
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b0c      	cmp	r3, #12
 8002570:	f040 808b 	bne.w	800268a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b01      	cmp	r3, #1
 8002578:	f040 8087 	bne.w	800268a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800257c:	4b92      	ldr	r3, [pc, #584]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_OscConfig+0x64>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e3db      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1a      	ldr	r2, [r3, #32]
 8002598:	4b8b      	ldr	r3, [pc, #556]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d004      	beq.n	80025ae <HAL_RCC_OscConfig+0x7e>
 80025a4:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ac:	e005      	b.n	80025ba <HAL_RCC_OscConfig+0x8a>
 80025ae:	4b86      	ldr	r3, [pc, #536]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d223      	bcs.n	8002606 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fdca 	bl	800315c <RCC_SetFlashLatencyFromMSIRange>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e3bc      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d2:	4b7d      	ldr	r3, [pc, #500]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7c      	ldr	r2, [pc, #496]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b7a      	ldr	r3, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	4977      	ldr	r1, [pc, #476]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f0:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	4972      	ldr	r1, [pc, #456]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
 8002604:	e025      	b.n	8002652 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002606:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6f      	ldr	r2, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800260c:	f043 0308 	orr.w	r3, r3, #8
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4b6d      	ldr	r3, [pc, #436]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	496a      	ldr	r1, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002624:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	4965      	ldr	r1, [pc, #404]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fd8a 	bl	800315c <RCC_SetFlashLatencyFromMSIRange>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e37c      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002652:	f000 fcbf 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002656:	4602      	mov	r2, r0
 8002658:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	495a      	ldr	r1, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x29c>)
 8002664:	5ccb      	ldrb	r3, [r1, r3]
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	4a58      	ldr	r2, [pc, #352]	; (80027d0 <HAL_RCC_OscConfig+0x2a0>)
 8002670:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002672:	4b58      	ldr	r3, [pc, #352]	; (80027d4 <HAL_RCC_OscConfig+0x2a4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fc94 	bl	8000fa4 <HAL_InitTick>
 800267c:	4603      	mov	r3, r0
 800267e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d052      	beq.n	800272c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	e360      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d032      	beq.n	80026f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002692:	4b4d      	ldr	r3, [pc, #308]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a4c      	ldr	r2, [pc, #304]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800269e:	f7fe fcd1 	bl	8001044 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a6:	f7fe fccd 	bl	8001044 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e349      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026b8:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c4:	4b40      	ldr	r3, [pc, #256]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a3f      	ldr	r2, [pc, #252]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026ca:	f043 0308 	orr.w	r3, r3, #8
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	493a      	ldr	r1, [pc, #232]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	4935      	ldr	r1, [pc, #212]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
 80026f6:	e01a      	b.n	800272e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026f8:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a32      	ldr	r2, [pc, #200]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002704:	f7fe fc9e 	bl	8001044 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800270c:	f7fe fc9a 	bl	8001044 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e316      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x1dc>
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800272c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d073      	beq.n	8002822 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d005      	beq.n	800274c <HAL_RCC_OscConfig+0x21c>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d10e      	bne.n	8002764 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d10b      	bne.n	8002764 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d063      	beq.n	8002820 <HAL_RCC_OscConfig+0x2f0>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d15f      	bne.n	8002820 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e2f3      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276c:	d106      	bne.n	800277c <HAL_RCC_OscConfig+0x24c>
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e01d      	b.n	80027b8 <HAL_RCC_OscConfig+0x288>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x270>
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a0f      	ldr	r2, [pc, #60]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0x288>
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a05      	ldr	r2, [pc, #20]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01b      	beq.n	80027f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe fc40 	bl	8001044 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	e010      	b.n	80027ea <HAL_RCC_OscConfig+0x2ba>
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08004fdc 	.word	0x08004fdc
 80027d0:	20000000 	.word	0x20000000
 80027d4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fc34 	bl	8001044 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e2b0      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ea:	4baf      	ldr	r3, [pc, #700]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x2a8>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fc24 	bl	8001044 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fc20 	bl	8001044 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e29c      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002812:	4ba5      	ldr	r3, [pc, #660]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x2d0>
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d060      	beq.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d005      	beq.n	8002840 <HAL_RCC_OscConfig+0x310>
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d119      	bne.n	800286e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d116      	bne.n	800286e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002840:	4b99      	ldr	r3, [pc, #612]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_OscConfig+0x328>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e279      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	4b93      	ldr	r3, [pc, #588]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	4990      	ldr	r1, [pc, #576]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800286c:	e040      	b.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d023      	beq.n	80028be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002876:	4b8c      	ldr	r3, [pc, #560]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a8b      	ldr	r2, [pc, #556]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe fbdf 	bl	8001044 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe fbdb 	bl	8001044 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e257      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800289c:	4b82      	ldr	r3, [pc, #520]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	4b7f      	ldr	r3, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	497c      	ldr	r1, [pc, #496]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
 80028bc:	e018      	b.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028be:	4b7a      	ldr	r3, [pc, #488]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a79      	ldr	r2, [pc, #484]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7fe fbbb 	bl	8001044 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d2:	f7fe fbb7 	bl	8001044 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e233      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e4:	4b70      	ldr	r3, [pc, #448]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d03c      	beq.n	8002976 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01c      	beq.n	800293e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002904:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe fb96 	bl	8001044 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291c:	f7fe fb92 	bl	8001044 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e20e      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800292e:	4b5e      	ldr	r3, [pc, #376]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ef      	beq.n	800291c <HAL_RCC_OscConfig+0x3ec>
 800293c:	e01b      	b.n	8002976 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800293e:	4b5a      	ldr	r3, [pc, #360]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002944:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7fe fb79 	bl	8001044 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002956:	f7fe fb75 	bl	8001044 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e1f1      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002968:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1ef      	bne.n	8002956 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80a6 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002988:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10d      	bne.n	80029b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	4b44      	ldr	r3, [pc, #272]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	4a43      	ldr	r2, [pc, #268]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800299a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299e:	6593      	str	r3, [r2, #88]	; 0x58
 80029a0:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ac:	2301      	movs	r3, #1
 80029ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b0:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_RCC_OscConfig+0x57c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d118      	bne.n	80029ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCC_OscConfig+0x57c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a3a      	ldr	r2, [pc, #232]	; (8002aac <HAL_RCC_OscConfig+0x57c>)
 80029c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c8:	f7fe fb3c 	bl	8001044 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d0:	f7fe fb38 	bl	8001044 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1b4      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e2:	4b32      	ldr	r3, [pc, #200]	; (8002aac <HAL_RCC_OscConfig+0x57c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d108      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4d8>
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a06:	e024      	b.n	8002a52 <HAL_RCC_OscConfig+0x522>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d110      	bne.n	8002a32 <HAL_RCC_OscConfig+0x502>
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a30:	e00f      	b.n	8002a52 <HAL_RCC_OscConfig+0x522>
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a4a:	f023 0304 	bic.w	r3, r3, #4
 8002a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fe faf3 	bl	8001044 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe faef 	bl	8001044 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e169      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ed      	beq.n	8002a62 <HAL_RCC_OscConfig+0x532>
 8002a86:	e01a      	b.n	8002abe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe fadc 	bl	8001044 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a8e:	e00f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe fad8 	bl	8001044 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d906      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e152      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab0:	4ba8      	ldr	r3, [pc, #672]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e8      	bne.n	8002a90 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002abe:	7ffb      	ldrb	r3, [r7, #31]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac4:	4ba3      	ldr	r3, [pc, #652]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	4aa2      	ldr	r2, [pc, #648]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ace:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d03c      	beq.n	8002b56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01c      	beq.n	8002b1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ae4:	4b9b      	ldr	r3, [pc, #620]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aea:	4a9a      	ldr	r2, [pc, #616]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe faa6 	bl	8001044 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002afc:	f7fe faa2 	bl	8001044 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e11e      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b0e:	4b91      	ldr	r3, [pc, #580]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ef      	beq.n	8002afc <HAL_RCC_OscConfig+0x5cc>
 8002b1c:	e01b      	b.n	8002b56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b1e:	4b8d      	ldr	r3, [pc, #564]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b24:	4a8b      	ldr	r2, [pc, #556]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fa89 	bl	8001044 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b36:	f7fe fa85 	bl	8001044 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e101      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b48:	4b82      	ldr	r3, [pc, #520]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ef      	bne.n	8002b36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80f5 	beq.w	8002d4a <HAL_RCC_OscConfig+0x81a>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	f040 80cb 	bne.w	8002d00 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b6a:	4b7a      	ldr	r3, [pc, #488]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 0203 	and.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d12c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d123      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d113      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d109      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d06d      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	d068      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bde:	4b5d      	ldr	r3, [pc, #372]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bea:	4b5a      	ldr	r3, [pc, #360]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e0a8      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b56      	ldr	r3, [pc, #344]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a55      	ldr	r2, [pc, #340]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c04:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c06:	f7fe fa1d 	bl	8001044 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7fe fa19 	bl	8001044 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e095      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c20:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c2c:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	4b49      	ldr	r3, [pc, #292]	; (8002d58 <HAL_RCC_OscConfig+0x828>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	4311      	orrs	r1, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c46:	0212      	lsls	r2, r2, #8
 8002c48:	4311      	orrs	r1, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c4e:	0852      	lsrs	r2, r2, #1
 8002c50:	3a01      	subs	r2, #1
 8002c52:	0552      	lsls	r2, r2, #21
 8002c54:	4311      	orrs	r1, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c5a:	0852      	lsrs	r2, r2, #1
 8002c5c:	3a01      	subs	r2, #1
 8002c5e:	0652      	lsls	r2, r2, #25
 8002c60:	4311      	orrs	r1, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c66:	06d2      	lsls	r2, r2, #27
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	493a      	ldr	r1, [pc, #232]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c70:	4b38      	ldr	r3, [pc, #224]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a37      	ldr	r2, [pc, #220]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c7c:	4b35      	ldr	r3, [pc, #212]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c88:	f7fe f9dc 	bl	8001044 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fe f9d8 	bl	8001044 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e054      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca2:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cae:	e04c      	b.n	8002d4a <HAL_RCC_OscConfig+0x81a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e04b      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb4:	4b27      	ldr	r3, [pc, #156]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d144      	bne.n	8002d4a <HAL_RCC_OscConfig+0x81a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a23      	ldr	r2, [pc, #140]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4a20      	ldr	r2, [pc, #128]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cd8:	f7fe f9b4 	bl	8001044 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe f9b0 	bl	8001044 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e02c      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x7b0>
 8002cfe:	e024      	b.n	8002d4a <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d01f      	beq.n	8002d46 <HAL_RCC_OscConfig+0x816>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002d0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7fe f997 	bl	8001044 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7fe f993 	bl	8001044 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x7fc>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e00f      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f0      	bne.n	8002d1a <HAL_RCC_OscConfig+0x7ea>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	4905      	ldr	r1, [pc, #20]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <HAL_RCC_OscConfig+0x82c>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	60cb      	str	r3, [r1, #12]
 8002d44:	e001      	b.n	8002d4a <HAL_RCC_OscConfig+0x81a>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_RCC_OscConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	019d800c 	.word	0x019d800c
 8002d5c:	feeefffc 	.word	0xfeeefffc

08002d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e11d      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b90      	ldr	r3, [pc, #576]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d910      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b8d      	ldr	r3, [pc, #564]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 020f 	bic.w	r2, r3, #15
 8002d8e:	498b      	ldr	r1, [pc, #556]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b89      	ldr	r3, [pc, #548]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e105      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d010      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	4b81      	ldr	r3, [pc, #516]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d908      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc4:	4b7e      	ldr	r3, [pc, #504]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	497b      	ldr	r1, [pc, #492]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d079      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d11e      	bne.n	8002e28 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dea:	4b75      	ldr	r3, [pc, #468]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0dc      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002dfa:	f000 fa09 	bl	8003210 <RCC_GetSysClockFreqFromPLLSource>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4a70      	ldr	r2, [pc, #448]	; (8002fc4 <HAL_RCC_ClockConfig+0x264>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d946      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e06:	4b6e      	ldr	r3, [pc, #440]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d140      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e12:	4b6b      	ldr	r3, [pc, #428]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e1a:	4a69      	ldr	r2, [pc, #420]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e035      	b.n	8002e94 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e30:	4b63      	ldr	r3, [pc, #396]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d115      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b9      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e48:	4b5d      	ldr	r3, [pc, #372]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d109      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0ad      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0a5      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e68:	f000 f8b4 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4a55      	ldr	r2, [pc, #340]	; (8002fc4 <HAL_RCC_ClockConfig+0x264>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d90f      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e74:	4b52      	ldr	r3, [pc, #328]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e80:	4b4f      	ldr	r3, [pc, #316]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e88:	4a4d      	ldr	r2, [pc, #308]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e94:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f023 0203 	bic.w	r2, r3, #3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4947      	ldr	r1, [pc, #284]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea6:	f7fe f8cd 	bl	8001044 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eae:	f7fe f8c9 	bl	8001044 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e077      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec4:	4b3e      	ldr	r3, [pc, #248]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 020c 	and.w	r2, r3, #12
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d1eb      	bne.n	8002eae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b80      	cmp	r3, #128	; 0x80
 8002eda:	d105      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002edc:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4a37      	ldr	r2, [pc, #220]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ee6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d010      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d208      	bcs.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f04:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	492b      	ldr	r1, [pc, #172]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f16:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d210      	bcs.n	8002f46 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 020f 	bic.w	r2, r3, #15
 8002f2c:	4923      	ldr	r1, [pc, #140]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f34:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_RCC_ClockConfig+0x25c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e036      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f52:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4918      	ldr	r1, [pc, #96]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4910      	ldr	r1, [pc, #64]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f84:	f000 f826 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <HAL_RCC_ClockConfig+0x260>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	490c      	ldr	r1, [pc, #48]	; (8002fc8 <HAL_RCC_ClockConfig+0x268>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa0:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <HAL_RCC_ClockConfig+0x26c>)
 8002fa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_RCC_ClockConfig+0x270>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd fffb 	bl	8000fa4 <HAL_InitTick>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	04c4b400 	.word	0x04c4b400
 8002fc8:	08004fdc 	.word	0x08004fdc
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	20000004 	.word	0x20000004

08002fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	; 0x24
 8002fd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe2:	4b3e      	ldr	r3, [pc, #248]	; (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fec:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x34>
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b0c      	cmp	r3, #12
 8003000:	d121      	bne.n	8003046 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d11e      	bne.n	8003046 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003008:	4b34      	ldr	r3, [pc, #208]	; (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d107      	bne.n	8003024 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003014:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e005      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003030:	4a2b      	ldr	r2, [pc, #172]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003038:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10d      	bne.n	800305c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003044:	e00a      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d102      	bne.n	8003052 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800304c:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	e004      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d101      	bne.n	800305c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003058:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800305a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d134      	bne.n	80030cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003062:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d003      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0xa6>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d003      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0xac>
 8003078:	e005      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800307c:	617b      	str	r3, [r7, #20]
      break;
 800307e:	e005      	b.n	800308c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003082:	617b      	str	r3, [r7, #20]
      break;
 8003084:	e002      	b.n	800308c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	617b      	str	r3, [r7, #20]
      break;
 800308a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800308c:	4b13      	ldr	r3, [pc, #76]	; (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	3301      	adds	r3, #1
 8003098:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	0a1b      	lsrs	r3, r3, #8
 80030a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	fb02 f203 	mul.w	r2, r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_RCC_GetSysClockFreq+0x108>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	0e5b      	lsrs	r3, r3, #25
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	3301      	adds	r3, #1
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030cc:	69bb      	ldr	r3, [r7, #24]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08004ff4 	.word	0x08004ff4
 80030e4:	00f42400 	.word	0x00f42400
 80030e8:	007a1200 	.word	0x007a1200

080030ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000000 	.word	0x20000000

08003104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003108:	f7ff fff0 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4904      	ldr	r1, [pc, #16]	; (800312c <HAL_RCC_GetPCLK1Freq+0x28>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	08004fec 	.word	0x08004fec

08003130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003134:	f7ff ffda 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	0adb      	lsrs	r3, r3, #11
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4904      	ldr	r1, [pc, #16]	; (8003158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	08004fec 	.word	0x08004fec

0800315c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003168:	4b27      	ldr	r3, [pc, #156]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003174:	f7ff f8f8 	bl	8002368 <HAL_PWREx_GetVoltageRange>
 8003178:	6178      	str	r0, [r7, #20]
 800317a:	e014      	b.n	80031a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800317c:	4b22      	ldr	r3, [pc, #136]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	4a21      	ldr	r2, [pc, #132]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003186:	6593      	str	r3, [r2, #88]	; 0x58
 8003188:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003194:	f7ff f8e8 	bl	8002368 <HAL_PWREx_GetVoltageRange>
 8003198:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800319a:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	4a1a      	ldr	r2, [pc, #104]	; (8003208 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80031a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ac:	d10b      	bne.n	80031c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b80      	cmp	r3, #128	; 0x80
 80031b2:	d913      	bls.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2ba0      	cmp	r3, #160	; 0xa0
 80031b8:	d902      	bls.n	80031c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ba:	2302      	movs	r3, #2
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	e00d      	b.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c0:	2301      	movs	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	e00a      	b.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b7f      	cmp	r3, #127	; 0x7f
 80031ca:	d902      	bls.n	80031d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80031cc:	2302      	movs	r3, #2
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	e004      	b.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b70      	cmp	r3, #112	; 0x70
 80031d6:	d101      	bne.n	80031dc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031d8:	2301      	movs	r3, #1
 80031da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 020f 	bic.w	r2, r3, #15
 80031e4:	4909      	ldr	r1, [pc, #36]	; (800320c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d001      	beq.n	80031fe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	40022000 	.word	0x40022000

08003210 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003216:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d00b      	beq.n	800323e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d825      	bhi.n	8003278 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d008      	beq.n	8003244 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d11f      	bne.n	8003278 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003238:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800323a:	613b      	str	r3, [r7, #16]
    break;
 800323c:	e01f      	b.n	800327e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800323e:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003240:	613b      	str	r3, [r7, #16]
    break;
 8003242:	e01c      	b.n	800327e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003244:	4b21      	ldr	r3, [pc, #132]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d107      	bne.n	8003260 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003250:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003256:	0a1b      	lsrs	r3, r3, #8
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e005      	b.n	800326c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003260:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800326c:	4a1a      	ldr	r2, [pc, #104]	; (80032d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003274:	613b      	str	r3, [r7, #16]
    break;
 8003276:	e002      	b.n	800327e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
    break;
 800327c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800327e:	4b13      	ldr	r3, [pc, #76]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	091b      	lsrs	r3, r3, #4
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	3301      	adds	r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	0a1b      	lsrs	r3, r3, #8
 8003292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	fb02 f203 	mul.w	r2, r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	0e5b      	lsrs	r3, r3, #25
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	3301      	adds	r3, #1
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032bc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032be:	683b      	ldr	r3, [r7, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	40021000 	.word	0x40021000
 80032d0:	00f42400 	.word	0x00f42400
 80032d4:	007a1200 	.word	0x007a1200
 80032d8:	08004ff4 	.word	0x08004ff4

080032dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032e4:	2300      	movs	r3, #0
 80032e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032e8:	2300      	movs	r3, #0
 80032ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d040      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fc:	2b80      	cmp	r3, #128	; 0x80
 80032fe:	d02a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003300:	2b80      	cmp	r3, #128	; 0x80
 8003302:	d825      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003304:	2b60      	cmp	r3, #96	; 0x60
 8003306:	d026      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003308:	2b60      	cmp	r3, #96	; 0x60
 800330a:	d821      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d006      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003310:	2b40      	cmp	r3, #64	; 0x40
 8003312:	d81d      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003318:	2b20      	cmp	r3, #32
 800331a:	d010      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800331c:	e018      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800331e:	4b89      	ldr	r3, [pc, #548]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	4a88      	ldr	r2, [pc, #544]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003328:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800332a:	e015      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3304      	adds	r3, #4
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fb02 	bl	800393c <RCCEx_PLLSAI1_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800333c:	e00c      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3320      	adds	r3, #32
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fbed 	bl	8003b24 <RCCEx_PLLSAI2_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800334e:	e003      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	74fb      	strb	r3, [r7, #19]
      break;
 8003354:	e000      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10b      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800335e:	4b79      	ldr	r3, [pc, #484]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003360:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003364:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800336c:	4975      	ldr	r1, [pc, #468]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003374:	e001      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d047      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800338e:	d030      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003394:	d82a      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800339a:	d02a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800339c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a0:	d824      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a6:	d008      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xde>
 80033a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ac:	d81e      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80033b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b6:	d010      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033b8:	e018      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033ba:	4b62      	ldr	r3, [pc, #392]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	4a61      	ldr	r2, [pc, #388]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033c6:	e015      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fab4 	bl	800393c <RCCEx_PLLSAI1_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033d8:	e00c      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3320      	adds	r3, #32
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fb9f 	bl	8003b24 <RCCEx_PLLSAI2_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ea:	e003      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	74fb      	strb	r3, [r7, #19]
      break;
 80033f0:	e000      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80033f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f4:	7cfb      	ldrb	r3, [r7, #19]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033fa:	4b52      	ldr	r3, [pc, #328]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	494e      	ldr	r1, [pc, #312]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003410:	e001      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003412:	7cfb      	ldrb	r3, [r7, #19]
 8003414:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 809f 	beq.w	8003562 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003424:	2300      	movs	r3, #0
 8003426:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003428:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003438:	2300      	movs	r3, #0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343e:	4b41      	ldr	r3, [pc, #260]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	4a40      	ldr	r2, [pc, #256]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003448:	6593      	str	r3, [r2, #88]	; 0x58
 800344a:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003456:	2301      	movs	r3, #1
 8003458:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a3a      	ldr	r2, [pc, #232]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003464:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003466:	f7fd fded 	bl	8001044 <HAL_GetTick>
 800346a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800346c:	e009      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346e:	f7fd fde9 	bl	8001044 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d902      	bls.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	74fb      	strb	r3, [r7, #19]
        break;
 8003480:	e005      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003482:	4b31      	ldr	r3, [pc, #196]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0ef      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d15b      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01f      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d019      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034be:	4b21      	ldr	r3, [pc, #132]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034de:	4a19      	ldr	r2, [pc, #100]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d016      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fd fda8 	bl	8001044 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f6:	e00b      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fd fda4 	bl	8001044 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d902      	bls.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	74fb      	strb	r3, [r7, #19]
            break;
 800350e:	e006      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0ec      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10c      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003524:	4b07      	ldr	r3, [pc, #28]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	4903      	ldr	r1, [pc, #12]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800353c:	e008      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800353e:	7cfb      	ldrb	r3, [r7, #19]
 8003540:	74bb      	strb	r3, [r7, #18]
 8003542:	e005      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003550:	7c7b      	ldrb	r3, [r7, #17]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003556:	4ba0      	ldr	r3, [pc, #640]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	4a9f      	ldr	r2, [pc, #636]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003560:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800356e:	4b9a      	ldr	r3, [pc, #616]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f023 0203 	bic.w	r2, r3, #3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357c:	4996      	ldr	r1, [pc, #600]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003590:	4b91      	ldr	r3, [pc, #580]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f023 020c 	bic.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	498e      	ldr	r1, [pc, #568]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035b2:	4b89      	ldr	r3, [pc, #548]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c0:	4985      	ldr	r1, [pc, #532]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035d4:	4b80      	ldr	r3, [pc, #512]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e2:	497d      	ldr	r1, [pc, #500]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035f6:	4b78      	ldr	r3, [pc, #480]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003604:	4974      	ldr	r1, [pc, #464]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003618:	4b6f      	ldr	r3, [pc, #444]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003626:	496c      	ldr	r1, [pc, #432]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800363a:	4b67      	ldr	r3, [pc, #412]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003648:	4963      	ldr	r1, [pc, #396]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800365c:	4b5e      	ldr	r3, [pc, #376]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800366a:	495b      	ldr	r1, [pc, #364]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800367e:	4b56      	ldr	r3, [pc, #344]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003684:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	4952      	ldr	r1, [pc, #328]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036a0:	4b4d      	ldr	r3, [pc, #308]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	494a      	ldr	r1, [pc, #296]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036c2:	4b45      	ldr	r3, [pc, #276]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	4941      	ldr	r1, [pc, #260]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036e4:	4b3c      	ldr	r3, [pc, #240]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ea:	f023 0203 	bic.w	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f2:	4939      	ldr	r1, [pc, #228]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d028      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003706:	4b34      	ldr	r3, [pc, #208]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003714:	4930      	ldr	r1, [pc, #192]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003724:	d106      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003726:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	4a2b      	ldr	r2, [pc, #172]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800372c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003730:	60d3      	str	r3, [r2, #12]
 8003732:	e011      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800373c:	d10c      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3304      	adds	r3, #4
 8003742:	2101      	movs	r1, #1
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f8f9 	bl	800393c <RCCEx_PLLSAI1_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d04d      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800376c:	d108      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800376e:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003770:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003774:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800377a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800377e:	e012      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003780:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003786:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800378c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003790:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800379e:	490e      	ldr	r1, [pc, #56]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ae:	d106      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ba:	60d3      	str	r3, [r2, #12]
 80037bc:	e020      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037c6:	d109      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037c8:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a02      	ldr	r2, [pc, #8]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d2:	60d3      	str	r3, [r2, #12]
 80037d4:	e014      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	2101      	movs	r1, #1
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 f8a5 	bl	800393c <RCCEx_PLLSAI1_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80037fc:	7cfb      	ldrb	r3, [r7, #19]
 80037fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d028      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800380c:	4b4a      	ldr	r3, [pc, #296]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003812:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800381a:	4947      	ldr	r1, [pc, #284]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800382a:	d106      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800382c:	4b42      	ldr	r3, [pc, #264]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4a41      	ldr	r2, [pc, #260]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003836:	60d3      	str	r3, [r2, #12]
 8003838:	e011      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003842:	d10c      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
 8003848:	2101      	movs	r1, #1
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f876 	bl	800393c <RCCEx_PLLSAI1_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01e      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800386a:	4b33      	ldr	r3, [pc, #204]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800387a:	492f      	ldr	r1, [pc, #188]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003888:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800388c:	d10c      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3304      	adds	r3, #4
 8003892:	2102      	movs	r1, #2
 8003894:	4618      	mov	r0, r3
 8003896:	f000 f851 	bl	800393c <RCCEx_PLLSAI1_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800389e:	7cfb      	ldrb	r3, [r7, #19]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80038a4:	7cfb      	ldrb	r3, [r7, #19]
 80038a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00b      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038b4:	4b20      	ldr	r3, [pc, #128]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ba:	f023 0204 	bic.w	r2, r3, #4
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c4:	491c      	ldr	r1, [pc, #112]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80038d8:	4b17      	ldr	r3, [pc, #92]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038de:	f023 0218 	bic.w	r2, r3, #24
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	4913      	ldr	r1, [pc, #76]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d017      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003902:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800390c:	490a      	ldr	r1, [pc, #40]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800391e:	d105      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4a04      	ldr	r2, [pc, #16]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800392a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800392c:	7cbb      	ldrb	r3, [r7, #18]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000

0800393c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800394a:	4b72      	ldr	r3, [pc, #456]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00e      	beq.n	8003974 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003956:	4b6f      	ldr	r3, [pc, #444]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0203 	and.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d103      	bne.n	800396e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
       ||
 800396a:	2b00      	cmp	r3, #0
 800396c:	d142      	bne.n	80039f4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
 8003972:	e03f      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b03      	cmp	r3, #3
 800397a:	d018      	beq.n	80039ae <RCCEx_PLLSAI1_Config+0x72>
 800397c:	2b03      	cmp	r3, #3
 800397e:	d825      	bhi.n	80039cc <RCCEx_PLLSAI1_Config+0x90>
 8003980:	2b01      	cmp	r3, #1
 8003982:	d002      	beq.n	800398a <RCCEx_PLLSAI1_Config+0x4e>
 8003984:	2b02      	cmp	r3, #2
 8003986:	d009      	beq.n	800399c <RCCEx_PLLSAI1_Config+0x60>
 8003988:	e020      	b.n	80039cc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800398a:	4b62      	ldr	r3, [pc, #392]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11d      	bne.n	80039d2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800399a:	e01a      	b.n	80039d2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800399c:	4b5d      	ldr	r3, [pc, #372]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d116      	bne.n	80039d6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ac:	e013      	b.n	80039d6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039ae:	4b59      	ldr	r3, [pc, #356]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039ba:	4b56      	ldr	r3, [pc, #344]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ca:	e006      	b.n	80039da <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      break;
 80039d0:	e004      	b.n	80039dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039d2:	bf00      	nop
 80039d4:	e002      	b.n	80039dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80039da:	bf00      	nop
    }

    if(status == HAL_OK)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d108      	bne.n	80039f4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80039e2:	4b4c      	ldr	r3, [pc, #304]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f023 0203 	bic.w	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4949      	ldr	r1, [pc, #292]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f040 8086 	bne.w	8003b08 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039fc:	4b45      	ldr	r3, [pc, #276]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a44      	ldr	r2, [pc, #272]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a08:	f7fd fb1c 	bl	8001044 <HAL_GetTick>
 8003a0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a0e:	e009      	b.n	8003a24 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a10:	f7fd fb18 	bl	8001044 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d902      	bls.n	8003a24 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	73fb      	strb	r3, [r7, #15]
        break;
 8003a22:	e005      	b.n	8003a30 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a24:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ef      	bne.n	8003a10 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d168      	bne.n	8003b08 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d113      	bne.n	8003a64 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a3c:	4b35      	ldr	r3, [pc, #212]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	4b35      	ldr	r3, [pc, #212]	; (8003b18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6892      	ldr	r2, [r2, #8]
 8003a48:	0211      	lsls	r1, r2, #8
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68d2      	ldr	r2, [r2, #12]
 8003a4e:	06d2      	lsls	r2, r2, #27
 8003a50:	4311      	orrs	r1, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6852      	ldr	r2, [r2, #4]
 8003a56:	3a01      	subs	r2, #1
 8003a58:	0112      	lsls	r2, r2, #4
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	492d      	ldr	r1, [pc, #180]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	610b      	str	r3, [r1, #16]
 8003a62:	e02d      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d115      	bne.n	8003a96 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a6a:	4b2a      	ldr	r3, [pc, #168]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	4b2b      	ldr	r3, [pc, #172]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6892      	ldr	r2, [r2, #8]
 8003a76:	0211      	lsls	r1, r2, #8
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6912      	ldr	r2, [r2, #16]
 8003a7c:	0852      	lsrs	r2, r2, #1
 8003a7e:	3a01      	subs	r2, #1
 8003a80:	0552      	lsls	r2, r2, #21
 8003a82:	4311      	orrs	r1, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6852      	ldr	r2, [r2, #4]
 8003a88:	3a01      	subs	r2, #1
 8003a8a:	0112      	lsls	r2, r2, #4
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	4921      	ldr	r1, [pc, #132]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	610b      	str	r3, [r1, #16]
 8003a94:	e014      	b.n	8003ac0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a96:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6892      	ldr	r2, [r2, #8]
 8003aa2:	0211      	lsls	r1, r2, #8
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6952      	ldr	r2, [r2, #20]
 8003aa8:	0852      	lsrs	r2, r2, #1
 8003aaa:	3a01      	subs	r2, #1
 8003aac:	0652      	lsls	r2, r2, #25
 8003aae:	4311      	orrs	r1, r2
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6852      	ldr	r2, [r2, #4]
 8003ab4:	3a01      	subs	r2, #1
 8003ab6:	0112      	lsls	r2, r2, #4
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	4916      	ldr	r1, [pc, #88]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ac6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003acc:	f7fd faba 	bl	8001044 <HAL_GetTick>
 8003ad0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ad2:	e009      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ad4:	f7fd fab6 	bl	8001044 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d902      	bls.n	8003ae8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ae6:	e005      	b.n	8003af4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ef      	beq.n	8003ad4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	4904      	ldr	r1, [pc, #16]	; (8003b14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	07ff800f 	.word	0x07ff800f
 8003b1c:	ff9f800f 	.word	0xff9f800f
 8003b20:	f9ff800f 	.word	0xf9ff800f

08003b24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b32:	4b72      	ldr	r3, [pc, #456]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00e      	beq.n	8003b5c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b3e:	4b6f      	ldr	r3, [pc, #444]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0203 	and.w	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d103      	bne.n	8003b56 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
       ||
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d142      	bne.n	8003bdc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
 8003b5a:	e03f      	b.n	8003bdc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d018      	beq.n	8003b96 <RCCEx_PLLSAI2_Config+0x72>
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d825      	bhi.n	8003bb4 <RCCEx_PLLSAI2_Config+0x90>
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d002      	beq.n	8003b72 <RCCEx_PLLSAI2_Config+0x4e>
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d009      	beq.n	8003b84 <RCCEx_PLLSAI2_Config+0x60>
 8003b70:	e020      	b.n	8003bb4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b72:	4b62      	ldr	r3, [pc, #392]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d11d      	bne.n	8003bba <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b82:	e01a      	b.n	8003bba <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b84:	4b5d      	ldr	r3, [pc, #372]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d116      	bne.n	8003bbe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b94:	e013      	b.n	8003bbe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b96:	4b59      	ldr	r3, [pc, #356]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ba2:	4b56      	ldr	r3, [pc, #344]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bb2:	e006      	b.n	8003bc2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb8:	e004      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e002      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003bc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d108      	bne.n	8003bdc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003bca:	4b4c      	ldr	r3, [pc, #304]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f023 0203 	bic.w	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4949      	ldr	r1, [pc, #292]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f040 8086 	bne.w	8003cf0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003be4:	4b45      	ldr	r3, [pc, #276]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a44      	ldr	r2, [pc, #272]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf0:	f7fd fa28 	bl	8001044 <HAL_GetTick>
 8003bf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bf6:	e009      	b.n	8003c0c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bf8:	f7fd fa24 	bl	8001044 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d902      	bls.n	8003c0c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	73fb      	strb	r3, [r7, #15]
        break;
 8003c0a:	e005      	b.n	8003c18 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c0c:	4b3b      	ldr	r3, [pc, #236]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ef      	bne.n	8003bf8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d168      	bne.n	8003cf0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d113      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c24:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	4b35      	ldr	r3, [pc, #212]	; (8003d00 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6892      	ldr	r2, [r2, #8]
 8003c30:	0211      	lsls	r1, r2, #8
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68d2      	ldr	r2, [r2, #12]
 8003c36:	06d2      	lsls	r2, r2, #27
 8003c38:	4311      	orrs	r1, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6852      	ldr	r2, [r2, #4]
 8003c3e:	3a01      	subs	r2, #1
 8003c40:	0112      	lsls	r2, r2, #4
 8003c42:	430a      	orrs	r2, r1
 8003c44:	492d      	ldr	r1, [pc, #180]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	614b      	str	r3, [r1, #20]
 8003c4a:	e02d      	b.n	8003ca8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d115      	bne.n	8003c7e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c52:	4b2a      	ldr	r3, [pc, #168]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6892      	ldr	r2, [r2, #8]
 8003c5e:	0211      	lsls	r1, r2, #8
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6912      	ldr	r2, [r2, #16]
 8003c64:	0852      	lsrs	r2, r2, #1
 8003c66:	3a01      	subs	r2, #1
 8003c68:	0552      	lsls	r2, r2, #21
 8003c6a:	4311      	orrs	r1, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6852      	ldr	r2, [r2, #4]
 8003c70:	3a01      	subs	r2, #1
 8003c72:	0112      	lsls	r2, r2, #4
 8003c74:	430a      	orrs	r2, r1
 8003c76:	4921      	ldr	r1, [pc, #132]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	614b      	str	r3, [r1, #20]
 8003c7c:	e014      	b.n	8003ca8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c7e:	4b1f      	ldr	r3, [pc, #124]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6892      	ldr	r2, [r2, #8]
 8003c8a:	0211      	lsls	r1, r2, #8
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6952      	ldr	r2, [r2, #20]
 8003c90:	0852      	lsrs	r2, r2, #1
 8003c92:	3a01      	subs	r2, #1
 8003c94:	0652      	lsls	r2, r2, #25
 8003c96:	4311      	orrs	r1, r2
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6852      	ldr	r2, [r2, #4]
 8003c9c:	3a01      	subs	r2, #1
 8003c9e:	0112      	lsls	r2, r2, #4
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	4916      	ldr	r1, [pc, #88]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ca8:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb4:	f7fd f9c6 	bl	8001044 <HAL_GetTick>
 8003cb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cba:	e009      	b.n	8003cd0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cbc:	f7fd f9c2 	bl	8001044 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d902      	bls.n	8003cd0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cce:	e005      	b.n	8003cdc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0ef      	beq.n	8003cbc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	4904      	ldr	r1, [pc, #16]	; (8003cfc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	07ff800f 	.word	0x07ff800f
 8003d04:	ff9f800f 	.word	0xff9f800f
 8003d08:	f9ff800f 	.word	0xf9ff800f

08003d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e042      	b.n	8003da4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7fc ff87 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2224      	movs	r2, #36	; 0x24
 8003d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8c4 	bl	8003edc <UART_SetConfig>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e022      	b.n	8003da4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fb80 	bl	800446c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fc07 	bl	80045b0 <UART_CheckIdleState>
 8003da2:	4603      	mov	r3, r0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	f040 8084 	bne.w	8003ed0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_UART_Transmit+0x28>
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e07c      	b.n	8003ed2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Transmit+0x3a>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e075      	b.n	8003ed2 <HAL_UART_Transmit+0x126>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2221      	movs	r2, #33	; 0x21
 8003dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dfe:	f7fd f921 	bl	8001044 <HAL_GetTick>
 8003e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1c:	d108      	bne.n	8003e30 <HAL_UART_Transmit+0x84>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d104      	bne.n	8003e30 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	e003      	b.n	8003e38 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003e40:	e02d      	b.n	8003e9e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2180      	movs	r1, #128	; 0x80
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fbfa 	bl	8004646 <UART_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e03a      	b.n	8003ed2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	881a      	ldrh	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e6e:	b292      	uxth	r2, r2
 8003e70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	3302      	adds	r3, #2
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	e008      	b.n	8003e8c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	781a      	ldrb	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	b292      	uxth	r2, r2
 8003e84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1cb      	bne.n	8003e42 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2140      	movs	r1, #64	; 0x40
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fbc6 	bl	8004646 <UART_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e006      	b.n	8003ed2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e000      	b.n	8003ed2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
  }
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003edc:	b5b0      	push	{r4, r5, r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4bb1      	ldr	r3, [pc, #708]	; (80041cc <UART_SetConfig+0x2f0>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	69f9      	ldr	r1, [r7, #28]
 8003f10:	430b      	orrs	r3, r1
 8003f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4aa6      	ldr	r2, [pc, #664]	; (80041d0 <UART_SetConfig+0x2f4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f4e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	69f9      	ldr	r1, [r7, #28]
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	f023 010f 	bic.w	r1, r3, #15
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a97      	ldr	r2, [pc, #604]	; (80041d4 <UART_SetConfig+0x2f8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d120      	bne.n	8003fbe <UART_SetConfig+0xe2>
 8003f7c:	4b96      	ldr	r3, [pc, #600]	; (80041d8 <UART_SetConfig+0x2fc>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d816      	bhi.n	8003fb8 <UART_SetConfig+0xdc>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <UART_SetConfig+0xb4>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fa1 	.word	0x08003fa1
 8003f94:	08003fad 	.word	0x08003fad
 8003f98:	08003fa7 	.word	0x08003fa7
 8003f9c:	08003fb3 	.word	0x08003fb3
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	76fb      	strb	r3, [r7, #27]
 8003fa4:	e0e7      	b.n	8004176 <UART_SetConfig+0x29a>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	76fb      	strb	r3, [r7, #27]
 8003faa:	e0e4      	b.n	8004176 <UART_SetConfig+0x29a>
 8003fac:	2304      	movs	r3, #4
 8003fae:	76fb      	strb	r3, [r7, #27]
 8003fb0:	e0e1      	b.n	8004176 <UART_SetConfig+0x29a>
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	76fb      	strb	r3, [r7, #27]
 8003fb6:	e0de      	b.n	8004176 <UART_SetConfig+0x29a>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	76fb      	strb	r3, [r7, #27]
 8003fbc:	e0db      	b.n	8004176 <UART_SetConfig+0x29a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a86      	ldr	r2, [pc, #536]	; (80041dc <UART_SetConfig+0x300>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d132      	bne.n	800402e <UART_SetConfig+0x152>
 8003fc8:	4b83      	ldr	r3, [pc, #524]	; (80041d8 <UART_SetConfig+0x2fc>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b0c      	cmp	r3, #12
 8003fd4:	d828      	bhi.n	8004028 <UART_SetConfig+0x14c>
 8003fd6:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <UART_SetConfig+0x100>)
 8003fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fdc:	08004011 	.word	0x08004011
 8003fe0:	08004029 	.word	0x08004029
 8003fe4:	08004029 	.word	0x08004029
 8003fe8:	08004029 	.word	0x08004029
 8003fec:	0800401d 	.word	0x0800401d
 8003ff0:	08004029 	.word	0x08004029
 8003ff4:	08004029 	.word	0x08004029
 8003ff8:	08004029 	.word	0x08004029
 8003ffc:	08004017 	.word	0x08004017
 8004000:	08004029 	.word	0x08004029
 8004004:	08004029 	.word	0x08004029
 8004008:	08004029 	.word	0x08004029
 800400c:	08004023 	.word	0x08004023
 8004010:	2300      	movs	r3, #0
 8004012:	76fb      	strb	r3, [r7, #27]
 8004014:	e0af      	b.n	8004176 <UART_SetConfig+0x29a>
 8004016:	2302      	movs	r3, #2
 8004018:	76fb      	strb	r3, [r7, #27]
 800401a:	e0ac      	b.n	8004176 <UART_SetConfig+0x29a>
 800401c:	2304      	movs	r3, #4
 800401e:	76fb      	strb	r3, [r7, #27]
 8004020:	e0a9      	b.n	8004176 <UART_SetConfig+0x29a>
 8004022:	2308      	movs	r3, #8
 8004024:	76fb      	strb	r3, [r7, #27]
 8004026:	e0a6      	b.n	8004176 <UART_SetConfig+0x29a>
 8004028:	2310      	movs	r3, #16
 800402a:	76fb      	strb	r3, [r7, #27]
 800402c:	e0a3      	b.n	8004176 <UART_SetConfig+0x29a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a6b      	ldr	r2, [pc, #428]	; (80041e0 <UART_SetConfig+0x304>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d120      	bne.n	800407a <UART_SetConfig+0x19e>
 8004038:	4b67      	ldr	r3, [pc, #412]	; (80041d8 <UART_SetConfig+0x2fc>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004042:	2b30      	cmp	r3, #48	; 0x30
 8004044:	d013      	beq.n	800406e <UART_SetConfig+0x192>
 8004046:	2b30      	cmp	r3, #48	; 0x30
 8004048:	d814      	bhi.n	8004074 <UART_SetConfig+0x198>
 800404a:	2b20      	cmp	r3, #32
 800404c:	d009      	beq.n	8004062 <UART_SetConfig+0x186>
 800404e:	2b20      	cmp	r3, #32
 8004050:	d810      	bhi.n	8004074 <UART_SetConfig+0x198>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <UART_SetConfig+0x180>
 8004056:	2b10      	cmp	r3, #16
 8004058:	d006      	beq.n	8004068 <UART_SetConfig+0x18c>
 800405a:	e00b      	b.n	8004074 <UART_SetConfig+0x198>
 800405c:	2300      	movs	r3, #0
 800405e:	76fb      	strb	r3, [r7, #27]
 8004060:	e089      	b.n	8004176 <UART_SetConfig+0x29a>
 8004062:	2302      	movs	r3, #2
 8004064:	76fb      	strb	r3, [r7, #27]
 8004066:	e086      	b.n	8004176 <UART_SetConfig+0x29a>
 8004068:	2304      	movs	r3, #4
 800406a:	76fb      	strb	r3, [r7, #27]
 800406c:	e083      	b.n	8004176 <UART_SetConfig+0x29a>
 800406e:	2308      	movs	r3, #8
 8004070:	76fb      	strb	r3, [r7, #27]
 8004072:	e080      	b.n	8004176 <UART_SetConfig+0x29a>
 8004074:	2310      	movs	r3, #16
 8004076:	76fb      	strb	r3, [r7, #27]
 8004078:	e07d      	b.n	8004176 <UART_SetConfig+0x29a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a59      	ldr	r2, [pc, #356]	; (80041e4 <UART_SetConfig+0x308>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d120      	bne.n	80040c6 <UART_SetConfig+0x1ea>
 8004084:	4b54      	ldr	r3, [pc, #336]	; (80041d8 <UART_SetConfig+0x2fc>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800408e:	2bc0      	cmp	r3, #192	; 0xc0
 8004090:	d013      	beq.n	80040ba <UART_SetConfig+0x1de>
 8004092:	2bc0      	cmp	r3, #192	; 0xc0
 8004094:	d814      	bhi.n	80040c0 <UART_SetConfig+0x1e4>
 8004096:	2b80      	cmp	r3, #128	; 0x80
 8004098:	d009      	beq.n	80040ae <UART_SetConfig+0x1d2>
 800409a:	2b80      	cmp	r3, #128	; 0x80
 800409c:	d810      	bhi.n	80040c0 <UART_SetConfig+0x1e4>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <UART_SetConfig+0x1cc>
 80040a2:	2b40      	cmp	r3, #64	; 0x40
 80040a4:	d006      	beq.n	80040b4 <UART_SetConfig+0x1d8>
 80040a6:	e00b      	b.n	80040c0 <UART_SetConfig+0x1e4>
 80040a8:	2300      	movs	r3, #0
 80040aa:	76fb      	strb	r3, [r7, #27]
 80040ac:	e063      	b.n	8004176 <UART_SetConfig+0x29a>
 80040ae:	2302      	movs	r3, #2
 80040b0:	76fb      	strb	r3, [r7, #27]
 80040b2:	e060      	b.n	8004176 <UART_SetConfig+0x29a>
 80040b4:	2304      	movs	r3, #4
 80040b6:	76fb      	strb	r3, [r7, #27]
 80040b8:	e05d      	b.n	8004176 <UART_SetConfig+0x29a>
 80040ba:	2308      	movs	r3, #8
 80040bc:	76fb      	strb	r3, [r7, #27]
 80040be:	e05a      	b.n	8004176 <UART_SetConfig+0x29a>
 80040c0:	2310      	movs	r3, #16
 80040c2:	76fb      	strb	r3, [r7, #27]
 80040c4:	e057      	b.n	8004176 <UART_SetConfig+0x29a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a47      	ldr	r2, [pc, #284]	; (80041e8 <UART_SetConfig+0x30c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d125      	bne.n	800411c <UART_SetConfig+0x240>
 80040d0:	4b41      	ldr	r3, [pc, #260]	; (80041d8 <UART_SetConfig+0x2fc>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040de:	d017      	beq.n	8004110 <UART_SetConfig+0x234>
 80040e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e4:	d817      	bhi.n	8004116 <UART_SetConfig+0x23a>
 80040e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ea:	d00b      	beq.n	8004104 <UART_SetConfig+0x228>
 80040ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f0:	d811      	bhi.n	8004116 <UART_SetConfig+0x23a>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <UART_SetConfig+0x222>
 80040f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fa:	d006      	beq.n	800410a <UART_SetConfig+0x22e>
 80040fc:	e00b      	b.n	8004116 <UART_SetConfig+0x23a>
 80040fe:	2300      	movs	r3, #0
 8004100:	76fb      	strb	r3, [r7, #27]
 8004102:	e038      	b.n	8004176 <UART_SetConfig+0x29a>
 8004104:	2302      	movs	r3, #2
 8004106:	76fb      	strb	r3, [r7, #27]
 8004108:	e035      	b.n	8004176 <UART_SetConfig+0x29a>
 800410a:	2304      	movs	r3, #4
 800410c:	76fb      	strb	r3, [r7, #27]
 800410e:	e032      	b.n	8004176 <UART_SetConfig+0x29a>
 8004110:	2308      	movs	r3, #8
 8004112:	76fb      	strb	r3, [r7, #27]
 8004114:	e02f      	b.n	8004176 <UART_SetConfig+0x29a>
 8004116:	2310      	movs	r3, #16
 8004118:	76fb      	strb	r3, [r7, #27]
 800411a:	e02c      	b.n	8004176 <UART_SetConfig+0x29a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2b      	ldr	r2, [pc, #172]	; (80041d0 <UART_SetConfig+0x2f4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d125      	bne.n	8004172 <UART_SetConfig+0x296>
 8004126:	4b2c      	ldr	r3, [pc, #176]	; (80041d8 <UART_SetConfig+0x2fc>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004134:	d017      	beq.n	8004166 <UART_SetConfig+0x28a>
 8004136:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800413a:	d817      	bhi.n	800416c <UART_SetConfig+0x290>
 800413c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004140:	d00b      	beq.n	800415a <UART_SetConfig+0x27e>
 8004142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004146:	d811      	bhi.n	800416c <UART_SetConfig+0x290>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <UART_SetConfig+0x278>
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004150:	d006      	beq.n	8004160 <UART_SetConfig+0x284>
 8004152:	e00b      	b.n	800416c <UART_SetConfig+0x290>
 8004154:	2300      	movs	r3, #0
 8004156:	76fb      	strb	r3, [r7, #27]
 8004158:	e00d      	b.n	8004176 <UART_SetConfig+0x29a>
 800415a:	2302      	movs	r3, #2
 800415c:	76fb      	strb	r3, [r7, #27]
 800415e:	e00a      	b.n	8004176 <UART_SetConfig+0x29a>
 8004160:	2304      	movs	r3, #4
 8004162:	76fb      	strb	r3, [r7, #27]
 8004164:	e007      	b.n	8004176 <UART_SetConfig+0x29a>
 8004166:	2308      	movs	r3, #8
 8004168:	76fb      	strb	r3, [r7, #27]
 800416a:	e004      	b.n	8004176 <UART_SetConfig+0x29a>
 800416c:	2310      	movs	r3, #16
 800416e:	76fb      	strb	r3, [r7, #27]
 8004170:	e001      	b.n	8004176 <UART_SetConfig+0x29a>
 8004172:	2310      	movs	r3, #16
 8004174:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a15      	ldr	r2, [pc, #84]	; (80041d0 <UART_SetConfig+0x2f4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	f040 809f 	bne.w	80042c0 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004182:	7efb      	ldrb	r3, [r7, #27]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d837      	bhi.n	80041f8 <UART_SetConfig+0x31c>
 8004188:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <UART_SetConfig+0x2b4>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041b5 	.word	0x080041b5
 8004194:	080041f9 	.word	0x080041f9
 8004198:	080041bd 	.word	0x080041bd
 800419c:	080041f9 	.word	0x080041f9
 80041a0:	080041c3 	.word	0x080041c3
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	080041f9 	.word	0x080041f9
 80041ac:	080041f9 	.word	0x080041f9
 80041b0:	080041f1 	.word	0x080041f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b4:	f7fe ffa6 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 80041b8:	6178      	str	r0, [r7, #20]
        break;
 80041ba:	e022      	b.n	8004202 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <UART_SetConfig+0x310>)
 80041be:	617b      	str	r3, [r7, #20]
        break;
 80041c0:	e01f      	b.n	8004202 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c2:	f7fe ff07 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 80041c6:	6178      	str	r0, [r7, #20]
        break;
 80041c8:	e01b      	b.n	8004202 <UART_SetConfig+0x326>
 80041ca:	bf00      	nop
 80041cc:	cfff69f3 	.word	0xcfff69f3
 80041d0:	40008000 	.word	0x40008000
 80041d4:	40013800 	.word	0x40013800
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40004400 	.word	0x40004400
 80041e0:	40004800 	.word	0x40004800
 80041e4:	40004c00 	.word	0x40004c00
 80041e8:	40005000 	.word	0x40005000
 80041ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f4:	617b      	str	r3, [r7, #20]
        break;
 80041f6:	e004      	b.n	8004202 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	76bb      	strb	r3, [r7, #26]
        break;
 8004200:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8119 	beq.w	800443c <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	4a95      	ldr	r2, [pc, #596]	; (8004464 <UART_SetConfig+0x588>)
 8004210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004214:	461a      	mov	r2, r3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	fbb3 f3f2 	udiv	r3, r3, r2
 800421c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	4413      	add	r3, r2
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	429a      	cmp	r2, r3
 800422c:	d305      	bcc.n	800423a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	429a      	cmp	r2, r3
 8004238:	d902      	bls.n	8004240 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	76bb      	strb	r3, [r7, #26]
 800423e:	e0fd      	b.n	800443c <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	4618      	mov	r0, r3
 8004244:	f04f 0100 	mov.w	r1, #0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	4a85      	ldr	r2, [pc, #532]	; (8004464 <UART_SetConfig+0x588>)
 800424e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004252:	b29a      	uxth	r2, r3
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	f7fb ffd8 	bl	800020c <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	020b      	lsls	r3, r1, #8
 800426e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004272:	0202      	lsls	r2, r0, #8
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	6849      	ldr	r1, [r1, #4]
 8004278:	0849      	lsrs	r1, r1, #1
 800427a:	4608      	mov	r0, r1
 800427c:	f04f 0100 	mov.w	r1, #0
 8004280:	1814      	adds	r4, r2, r0
 8004282:	eb43 0501 	adc.w	r5, r3, r1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	461a      	mov	r2, r3
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	4620      	mov	r0, r4
 8004292:	4629      	mov	r1, r5
 8004294:	f7fb ffba 	bl	800020c <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4613      	mov	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042a6:	d308      	bcc.n	80042ba <UART_SetConfig+0x3de>
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ae:	d204      	bcs.n	80042ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	60da      	str	r2, [r3, #12]
 80042b8:	e0c0      	b.n	800443c <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	76bb      	strb	r3, [r7, #26]
 80042be:	e0bd      	b.n	800443c <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c8:	d164      	bne.n	8004394 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 80042ca:	7efb      	ldrb	r3, [r7, #27]
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d828      	bhi.n	8004322 <UART_SetConfig+0x446>
 80042d0:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <UART_SetConfig+0x3fc>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	080042fd 	.word	0x080042fd
 80042dc:	08004305 	.word	0x08004305
 80042e0:	0800430d 	.word	0x0800430d
 80042e4:	08004323 	.word	0x08004323
 80042e8:	08004313 	.word	0x08004313
 80042ec:	08004323 	.word	0x08004323
 80042f0:	08004323 	.word	0x08004323
 80042f4:	08004323 	.word	0x08004323
 80042f8:	0800431b 	.word	0x0800431b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042fc:	f7fe ff02 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8004300:	6178      	str	r0, [r7, #20]
        break;
 8004302:	e013      	b.n	800432c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004304:	f7fe ff14 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 8004308:	6178      	str	r0, [r7, #20]
        break;
 800430a:	e00f      	b.n	800432c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800430c:	4b56      	ldr	r3, [pc, #344]	; (8004468 <UART_SetConfig+0x58c>)
 800430e:	617b      	str	r3, [r7, #20]
        break;
 8004310:	e00c      	b.n	800432c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004312:	f7fe fe5f 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8004316:	6178      	str	r0, [r7, #20]
        break;
 8004318:	e008      	b.n	800432c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800431a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800431e:	617b      	str	r3, [r7, #20]
        break;
 8004320:	e004      	b.n	800432c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	76bb      	strb	r3, [r7, #26]
        break;
 800432a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8084 	beq.w	800443c <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	4a4a      	ldr	r2, [pc, #296]	; (8004464 <UART_SetConfig+0x588>)
 800433a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800433e:	461a      	mov	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	fbb3 f3f2 	udiv	r3, r3, r2
 8004346:	005a      	lsls	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	441a      	add	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b0f      	cmp	r3, #15
 800435e:	d916      	bls.n	800438e <UART_SetConfig+0x4b2>
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004366:	d212      	bcs.n	800438e <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f023 030f 	bic.w	r3, r3, #15
 8004370:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	b29b      	uxth	r3, r3
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	b29a      	uxth	r2, r3
 800437e:	89fb      	ldrh	r3, [r7, #14]
 8004380:	4313      	orrs	r3, r2
 8004382:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	89fa      	ldrh	r2, [r7, #14]
 800438a:	60da      	str	r2, [r3, #12]
 800438c:	e056      	b.n	800443c <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	76bb      	strb	r3, [r7, #26]
 8004392:	e053      	b.n	800443c <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004394:	7efb      	ldrb	r3, [r7, #27]
 8004396:	2b08      	cmp	r3, #8
 8004398:	d827      	bhi.n	80043ea <UART_SetConfig+0x50e>
 800439a:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <UART_SetConfig+0x4c4>)
 800439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a0:	080043c5 	.word	0x080043c5
 80043a4:	080043cd 	.word	0x080043cd
 80043a8:	080043d5 	.word	0x080043d5
 80043ac:	080043eb 	.word	0x080043eb
 80043b0:	080043db 	.word	0x080043db
 80043b4:	080043eb 	.word	0x080043eb
 80043b8:	080043eb 	.word	0x080043eb
 80043bc:	080043eb 	.word	0x080043eb
 80043c0:	080043e3 	.word	0x080043e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c4:	f7fe fe9e 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 80043c8:	6178      	str	r0, [r7, #20]
        break;
 80043ca:	e013      	b.n	80043f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043cc:	f7fe feb0 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 80043d0:	6178      	str	r0, [r7, #20]
        break;
 80043d2:	e00f      	b.n	80043f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d4:	4b24      	ldr	r3, [pc, #144]	; (8004468 <UART_SetConfig+0x58c>)
 80043d6:	617b      	str	r3, [r7, #20]
        break;
 80043d8:	e00c      	b.n	80043f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043da:	f7fe fdfb 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 80043de:	6178      	str	r0, [r7, #20]
        break;
 80043e0:	e008      	b.n	80043f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043e6:	617b      	str	r3, [r7, #20]
        break;
 80043e8:	e004      	b.n	80043f4 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	76bb      	strb	r3, [r7, #26]
        break;
 80043f2:	bf00      	nop
    }

    if (pclk != 0U)
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d020      	beq.n	800443c <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	4a19      	ldr	r2, [pc, #100]	; (8004464 <UART_SetConfig+0x588>)
 8004400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004404:	461a      	mov	r2, r3
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fbb3 f2f2 	udiv	r2, r3, r2
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	085b      	lsrs	r3, r3, #1
 8004412:	441a      	add	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	fbb2 f3f3 	udiv	r3, r2, r3
 800441c:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b0f      	cmp	r3, #15
 8004422:	d909      	bls.n	8004438 <UART_SetConfig+0x55c>
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442a:	d205      	bcs.n	8004438 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	b29a      	uxth	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	e001      	b.n	800443c <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004458:	7ebb      	ldrb	r3, [r7, #26]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bdb0      	pop	{r4, r5, r7, pc}
 8004462:	bf00      	nop
 8004464:	08005024 	.word	0x08005024
 8004468:	00f42400 	.word	0x00f42400

0800446c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01a      	beq.n	8004582 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800456a:	d10a      	bne.n	8004582 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	605a      	str	r2, [r3, #4]
  }
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045c0:	f7fc fd40 	bl	8001044 <HAL_GetTick>
 80045c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d10e      	bne.n	80045f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f82f 	bl	8004646 <UART_WaitOnFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e025      	b.n	800463e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d10e      	bne.n	800461e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f819 	bl	8004646 <UART_WaitOnFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e00f      	b.n	800463e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b09c      	sub	sp, #112	; 0x70
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	603b      	str	r3, [r7, #0]
 8004652:	4613      	mov	r3, r2
 8004654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004656:	e0a9      	b.n	80047ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465e:	f000 80a5 	beq.w	80047ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004662:	f7fc fcef 	bl	8001044 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <UART_WaitOnFlagUntilTimeout+0x32>
 8004672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004674:	2b00      	cmp	r3, #0
 8004676:	d140      	bne.n	80046fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800468c:	667b      	str	r3, [r7, #100]	; 0x64
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004696:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004698:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800469c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e6      	bne.n	8004678 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3308      	adds	r3, #8
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	663b      	str	r3, [r7, #96]	; 0x60
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3308      	adds	r3, #8
 80046c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80046cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046d2:	e841 2300 	strex	r3, r2, [r1]
 80046d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1e5      	bne.n	80046aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e069      	b.n	80047ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d051      	beq.n	80047ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004716:	d149      	bne.n	80047ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004720:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004736:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004740:	637b      	str	r3, [r7, #52]	; 0x34
 8004742:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e6      	bne.n	8004722 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3308      	adds	r3, #8
 800475a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	613b      	str	r3, [r7, #16]
   return(result);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f023 0301 	bic.w	r3, r3, #1
 800476a:	66bb      	str	r3, [r7, #104]	; 0x68
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3308      	adds	r3, #8
 8004772:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004774:	623a      	str	r2, [r7, #32]
 8004776:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	69f9      	ldr	r1, [r7, #28]
 800477a:	6a3a      	ldr	r2, [r7, #32]
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	61bb      	str	r3, [r7, #24]
   return(result);
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e5      	bne.n	8004754 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2220      	movs	r2, #32
 800478c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e010      	b.n	80047ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4013      	ands	r3, r2
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	f43f af46 	beq.w	8004658 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3770      	adds	r7, #112	; 0x70
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_UARTEx_DisableFifoMode+0x16>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e027      	b.n	800483c <HAL_UARTEx_DisableFifoMode+0x66>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2224      	movs	r2, #36	; 0x24
 80047f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0201 	bic.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800481a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800485c:	2302      	movs	r3, #2
 800485e:	e02d      	b.n	80048bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2224      	movs	r2, #36	; 0x24
 800486c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f84f 	bl	8004940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80048d8:	2302      	movs	r3, #2
 80048da:	e02d      	b.n	8004938 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2224      	movs	r2, #36	; 0x24
 80048e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f811 	bl	8004940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800494c:	2b00      	cmp	r3, #0
 800494e:	d108      	bne.n	8004962 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004960:	e031      	b.n	80049c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004962:	2308      	movs	r3, #8
 8004964:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004966:	2308      	movs	r3, #8
 8004968:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	0e5b      	lsrs	r3, r3, #25
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	0f5b      	lsrs	r3, r3, #29
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800498a:	7bbb      	ldrb	r3, [r7, #14]
 800498c:	7b3a      	ldrb	r2, [r7, #12]
 800498e:	4911      	ldr	r1, [pc, #68]	; (80049d4 <UARTEx_SetNbDataToProcess+0x94>)
 8004990:	5c8a      	ldrb	r2, [r1, r2]
 8004992:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004996:	7b3a      	ldrb	r2, [r7, #12]
 8004998:	490f      	ldr	r1, [pc, #60]	; (80049d8 <UARTEx_SetNbDataToProcess+0x98>)
 800499a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800499c:	fb93 f3f2 	sdiv	r3, r3, r2
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	7b7a      	ldrb	r2, [r7, #13]
 80049ac:	4909      	ldr	r1, [pc, #36]	; (80049d4 <UARTEx_SetNbDataToProcess+0x94>)
 80049ae:	5c8a      	ldrb	r2, [r1, r2]
 80049b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80049b4:	7b7a      	ldrb	r2, [r7, #13]
 80049b6:	4908      	ldr	r1, [pc, #32]	; (80049d8 <UARTEx_SetNbDataToProcess+0x98>)
 80049b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	0800503c 	.word	0x0800503c
 80049d8:	08005044 	.word	0x08005044

080049dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049dc:	b084      	sub	sp, #16
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	f107 001c 	add.w	r0, r7, #28
 80049ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa70 	bl	8004ee0 <USB_CoreReset>
 8004a00:	4603      	mov	r3, r0
 8004a02:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	639a      	str	r2, [r3, #56]	; 0x38
 8004a16:	e005      	b.n	8004a24 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a30:	b004      	add	sp, #16
 8004a32:	4770      	bx	lr

08004a34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f023 0201 	bic.w	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d115      	bne.n	8004aa4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a84:	2001      	movs	r0, #1
 8004a86:	f7fc fae9 	bl	800105c <HAL_Delay>
      ms++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fa17 	bl	8004ec4 <USB_GetMode>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d01e      	beq.n	8004ada <USB_SetCurrentMode+0x84>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b31      	cmp	r3, #49	; 0x31
 8004aa0:	d9f0      	bls.n	8004a84 <USB_SetCurrentMode+0x2e>
 8004aa2:	e01a      	b.n	8004ada <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d115      	bne.n	8004ad6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	f7fc fad0 	bl	800105c <HAL_Delay>
      ms++;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f9fe 	bl	8004ec4 <USB_GetMode>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <USB_SetCurrentMode+0x84>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b31      	cmp	r3, #49	; 0x31
 8004ad2:	d9f0      	bls.n	8004ab6 <USB_SetCurrentMode+0x60>
 8004ad4:	e001      	b.n	8004ada <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e005      	b.n	8004ae6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b32      	cmp	r3, #50	; 0x32
 8004ade:	d101      	bne.n	8004ae4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004af0:	b084      	sub	sp, #16
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b086      	sub	sp, #24
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004afe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	e009      	b.n	8004b24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	3340      	adds	r3, #64	; 0x40
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	3301      	adds	r3, #1
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	2b0e      	cmp	r3, #14
 8004b28:	d9f2      	bls.n	8004b10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d11c      	bne.n	8004b6a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b3e:	f043 0302 	orr.w	r3, r3, #2
 8004b42:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	e005      	b.n	8004b76 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2300      	movs	r3, #0
 8004b80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b88:	4619      	mov	r1, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b90:	461a      	mov	r2, r3
 8004b92:	680b      	ldr	r3, [r1, #0]
 8004b94:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b96:	2103      	movs	r1, #3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f959 	bl	8004e50 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b9e:	2110      	movs	r1, #16
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f8f1 	bl	8004d88 <USB_FlushTxFifo>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f91d 	bl	8004df0 <USB_FlushRxFifo>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2300      	movs	r3, #0
 8004bca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bde:	461a      	mov	r2, r3
 8004be0:	2300      	movs	r3, #0
 8004be2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	e043      	b.n	8004c72 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c00:	d118      	bne.n	8004c34 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c14:	461a      	mov	r2, r3
 8004c16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	e013      	b.n	8004c46 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e008      	b.n	8004c46 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c40:	461a      	mov	r2, r3
 8004c42:	2300      	movs	r3, #0
 8004c44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c52:	461a      	mov	r2, r3
 8004c54:	2300      	movs	r3, #0
 8004c56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	461a      	mov	r2, r3
 8004c66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d3b7      	bcc.n	8004bea <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	e043      	b.n	8004d08 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c96:	d118      	bne.n	8004cca <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	461a      	mov	r2, r3
 8004cac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	e013      	b.n	8004cdc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	e008      	b.n	8004cdc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	2300      	movs	r3, #0
 8004cda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2300      	movs	r3, #0
 8004cec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	3301      	adds	r3, #1
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d3b7      	bcc.n	8004c80 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f043 0210 	orr.w	r2, r3, #16
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <USB_DevInit+0x294>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f043 0208 	orr.w	r2, r3, #8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d107      	bne.n	8004d72 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d6a:	f043 0304 	orr.w	r3, r3, #4
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d7e:	b004      	add	sp, #16
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	803c3800 	.word	0x803c3800

08004d88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4a13      	ldr	r2, [pc, #76]	; (8004dec <USB_FlushTxFifo+0x64>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d901      	bls.n	8004da8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e01b      	b.n	8004de0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	daf2      	bge.n	8004d96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	019b      	lsls	r3, r3, #6
 8004db8:	f043 0220 	orr.w	r2, r3, #32
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4a08      	ldr	r2, [pc, #32]	; (8004dec <USB_FlushTxFifo+0x64>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d901      	bls.n	8004dd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e006      	b.n	8004de0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	d0f0      	beq.n	8004dc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	00030d40 	.word	0x00030d40

08004df0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a11      	ldr	r2, [pc, #68]	; (8004e4c <USB_FlushRxFifo+0x5c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e018      	b.n	8004e40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	daf2      	bge.n	8004dfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2210      	movs	r2, #16
 8004e1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3301      	adds	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4a08      	ldr	r2, [pc, #32]	; (8004e4c <USB_FlushRxFifo+0x5c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d901      	bls.n	8004e32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e006      	b.n	8004e40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	d0f0      	beq.n	8004e20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	00030d40 	.word	0x00030d40

08004e50 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	68f9      	ldr	r1, [r7, #12]
 8004e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e70:	4313      	orrs	r3, r2
 8004e72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b085      	sub	sp, #20
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e9c:	f023 0303 	bic.w	r3, r3, #3
 8004ea0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eb0:	f043 0302 	orr.w	r3, r3, #2
 8004eb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4a13      	ldr	r2, [pc, #76]	; (8004f44 <USB_CoreReset+0x64>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e01b      	b.n	8004f36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	daf2      	bge.n	8004eec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f043 0201 	orr.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <USB_CoreReset+0x64>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d901      	bls.n	8004f28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e006      	b.n	8004f36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d0f0      	beq.n	8004f16 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	00030d40 	.word	0x00030d40

08004f48 <__libc_init_array>:
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	4d0d      	ldr	r5, [pc, #52]	; (8004f80 <__libc_init_array+0x38>)
 8004f4c:	4c0d      	ldr	r4, [pc, #52]	; (8004f84 <__libc_init_array+0x3c>)
 8004f4e:	1b64      	subs	r4, r4, r5
 8004f50:	10a4      	asrs	r4, r4, #2
 8004f52:	2600      	movs	r6, #0
 8004f54:	42a6      	cmp	r6, r4
 8004f56:	d109      	bne.n	8004f6c <__libc_init_array+0x24>
 8004f58:	4d0b      	ldr	r5, [pc, #44]	; (8004f88 <__libc_init_array+0x40>)
 8004f5a:	4c0c      	ldr	r4, [pc, #48]	; (8004f8c <__libc_init_array+0x44>)
 8004f5c:	f000 f820 	bl	8004fa0 <_init>
 8004f60:	1b64      	subs	r4, r4, r5
 8004f62:	10a4      	asrs	r4, r4, #2
 8004f64:	2600      	movs	r6, #0
 8004f66:	42a6      	cmp	r6, r4
 8004f68:	d105      	bne.n	8004f76 <__libc_init_array+0x2e>
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f70:	4798      	blx	r3
 8004f72:	3601      	adds	r6, #1
 8004f74:	e7ee      	b.n	8004f54 <__libc_init_array+0xc>
 8004f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7a:	4798      	blx	r3
 8004f7c:	3601      	adds	r6, #1
 8004f7e:	e7f2      	b.n	8004f66 <__libc_init_array+0x1e>
 8004f80:	08005054 	.word	0x08005054
 8004f84:	08005054 	.word	0x08005054
 8004f88:	08005054 	.word	0x08005054
 8004f8c:	08005058 	.word	0x08005058

08004f90 <memset>:
 8004f90:	4402      	add	r2, r0
 8004f92:	4603      	mov	r3, r0
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d100      	bne.n	8004f9a <memset+0xa>
 8004f98:	4770      	bx	lr
 8004f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9e:	e7f9      	b.n	8004f94 <memset+0x4>

08004fa0 <_init>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	bf00      	nop
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr

08004fac <_fini>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	bf00      	nop
 8004fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb2:	bc08      	pop	{r3}
 8004fb4:	469e      	mov	lr, r3
 8004fb6:	4770      	bx	lr
