
TestingTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004314  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080044d0  080044d0  000144d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004548  08004548  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004550  08004550  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  2000000c  08004564  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  08004564  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001139f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e6  00000000  00000000  000313db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  000336c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  000343f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c76  00000000  00000000  00035050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc1a  00000000  00000000  0005ecc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100320  00000000  00000000  0006e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ec00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036b0  00000000  00000000  0016ec50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080044b8 	.word	0x080044b8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080044b8 	.word	0x080044b8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
int main(void)
 8000506:	f107 0318 	add.w	r3, r7, #24
 800050a:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fc3d 	bl	8000d8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f82c 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f98e 	bl	8000834 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000518:	f000 f87c 	bl	8000614 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 800051c:	f000 f914 	bl	8000748 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000520:	f000 f95e 	bl	80007e0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8000524:	f000 f8c2 	bl	80006ac <MX_USART1_UART_Init>





uint8_t noFT[3] = {3,1,8};
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <main+0x5c>)
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	4611      	mov	r1, r2
 8000530:	8019      	strh	r1, [r3, #0]
 8000532:	3302      	adds	r3, #2
 8000534:	0c12      	lsrs	r2, r2, #16
 8000536:	701a      	strb	r2, [r3, #0]
const char *m = "t";
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <main+0x60>)
 800053a:	60fb      	str	r3, [r7, #12]
    /* USER CODE BEGIN 3 */
//	  HAL_UART_Receive(&hlpuart1, (uint8_t*)dataRec, 4, HAL_MAX_DELAY);



	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)m, 1, HAL_MAX_DELAY);
 800053c:	f04f 33ff 	mov.w	r3, #4294967295
 8000540:	2201      	movs	r2, #1
 8000542:	68f9      	ldr	r1, [r7, #12]
 8000544:	4807      	ldr	r0, [pc, #28]	; (8000564 <main+0x64>)
 8000546:	f002 fdb5 	bl	80030b4 <HAL_UART_Transmit>
	  HAL_UART_Receive(&hlpuart1, (uint8_t*)dataRec, 202, HAL_MAX_DELAY);
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	22ca      	movs	r2, #202	; 0xca
 8000550:	4905      	ldr	r1, [pc, #20]	; (8000568 <main+0x68>)
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <main+0x64>)
 8000554:	f002 fe45 	bl	80031e2 <HAL_UART_Receive>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)m, 1, HAL_MAX_DELAY);
 8000558:	e7f0      	b.n	800053c <main+0x3c>
 800055a:	bf00      	nop
 800055c:	080044d4 	.word	0x080044d4
 8000560:	080044d0 	.word	0x080044d0
 8000564:	20000028 	.word	0x20000028
 8000568:	200006e4 	.word	0x200006e4

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b096      	sub	sp, #88	; 0x58
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2244      	movs	r2, #68	; 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 ff94 	bl	80044a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800058e:	2000      	movs	r0, #0
 8000590:	f001 f88c 	bl	80016ac <HAL_PWREx_ControlVoltageScaling>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800059a:	f000 f9ef 	bl	800097c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800059e:	2322      	movs	r3, #34	; 0x22
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2340      	movs	r3, #64	; 0x40
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005bc:	231e      	movs	r3, #30
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 f92f 	bl	8001834 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005dc:	f000 f9ce 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2303      	movs	r3, #3
 80005e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	2105      	movs	r1, #5
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fd34 	bl	8002068 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000606:	f000 f9b9 	bl	800097c <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3758      	adds	r7, #88	; 0x58
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 800061a:	4a23      	ldr	r2, [pc, #140]	; (80006a8 <MX_LPUART1_UART_Init+0x94>)
 800061c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 8000646:	2200      	movs	r2, #0
 8000648:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 800064c:	2200      	movs	r2, #0
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 8000652:	2200      	movs	r2, #0
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 8000658:	2200      	movs	r2, #0
 800065a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800065c:	4811      	ldr	r0, [pc, #68]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 800065e:	f002 fcd9 	bl	8003014 <HAL_UART_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000668:	f000 f988 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800066c:	2100      	movs	r1, #0
 800066e:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 8000670:	f003 fb76 	bl	8003d60 <HAL_UARTEx_SetTxFifoThreshold>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800067a:	f000 f97f 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800067e:	2100      	movs	r1, #0
 8000680:	4808      	ldr	r0, [pc, #32]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 8000682:	f003 fbab 	bl	8003ddc <HAL_UARTEx_SetRxFifoThreshold>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800068c:	f000 f976 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_LPUART1_UART_Init+0x90>)
 8000692:	f003 fb2c 	bl	8003cee <HAL_UARTEx_DisableFifoMode>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800069c:	f000 f96e 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40008000 	.word	0x40008000

080006ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006b2:	4a23      	ldr	r2, [pc, #140]	; (8000740 <MX_USART1_UART_Init+0x94>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 209700;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006b8:	4a22      	ldr	r2, [pc, #136]	; (8000744 <MX_USART1_UART_Init+0x98>)
 80006ba:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006d0:	220c      	movs	r2, #12
 80006d2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <MX_USART1_UART_Init+0x90>)
 80006f4:	f002 fc8e 	bl	8003014 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80006fe:	f000 f93d 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000702:	2100      	movs	r1, #0
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_USART1_UART_Init+0x90>)
 8000706:	f003 fb2b 	bl	8003d60 <HAL_UARTEx_SetTxFifoThreshold>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000710:	f000 f934 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000714:	2100      	movs	r1, #0
 8000716:	4809      	ldr	r0, [pc, #36]	; (800073c <MX_USART1_UART_Init+0x90>)
 8000718:	f003 fb60 	bl	8003ddc <HAL_UARTEx_SetRxFifoThreshold>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000722:	f000 f92b 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART1_UART_Init+0x90>)
 8000728:	f003 fae1 	bl	8003cee <HAL_UARTEx_DisableFifoMode>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000732:	f000 f923 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000b8 	.word	0x200000b8
 8000740:	40013800 	.word	0x40013800
 8000744:	00033324 	.word	0x00033324

08000748 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 800074e:	4a23      	ldr	r2, [pc, #140]	; (80007dc <MX_USART3_UART_Init+0x94>)
 8000750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 800078c:	2200      	movs	r2, #0
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000790:	4811      	ldr	r0, [pc, #68]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 8000792:	f002 fc3f 	bl	8003014 <HAL_UART_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800079c:	f000 f8ee 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a0:	2100      	movs	r1, #0
 80007a2:	480d      	ldr	r0, [pc, #52]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 80007a4:	f003 fadc 	bl	8003d60 <HAL_UARTEx_SetTxFifoThreshold>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007ae:	f000 f8e5 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b2:	2100      	movs	r1, #0
 80007b4:	4808      	ldr	r0, [pc, #32]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 80007b6:	f003 fb11 	bl	8003ddc <HAL_UARTEx_SetRxFifoThreshold>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007c0:	f000 f8dc 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_USART3_UART_Init+0x90>)
 80007c6:	f003 fa92 	bl	8003cee <HAL_UARTEx_DisableFifoMode>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007d0:	f000 f8d4 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000148 	.word	0x20000148
 80007dc:	40004800 	.word	0x40004800

080007e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007ee:	2206      	movs	r2, #6
 80007f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800080c:	2201      	movs	r2, #1
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000818:	2201      	movs	r2, #1
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800081e:	f000 fddd 	bl	80013dc <HAL_PCD_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000828:	f000 f8a8 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200001d8 	.word	0x200001d8

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b48      	ldr	r3, [pc, #288]	; (800096c <MX_GPIO_Init+0x138>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a47      	ldr	r2, [pc, #284]	; (800096c <MX_GPIO_Init+0x138>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b45      	ldr	r3, [pc, #276]	; (800096c <MX_GPIO_Init+0x138>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b42      	ldr	r3, [pc, #264]	; (800096c <MX_GPIO_Init+0x138>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a41      	ldr	r2, [pc, #260]	; (800096c <MX_GPIO_Init+0x138>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b3f      	ldr	r3, [pc, #252]	; (800096c <MX_GPIO_Init+0x138>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <MX_GPIO_Init+0x138>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a3b      	ldr	r2, [pc, #236]	; (800096c <MX_GPIO_Init+0x138>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b39      	ldr	r3, [pc, #228]	; (800096c <MX_GPIO_Init+0x138>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	4b36      	ldr	r3, [pc, #216]	; (800096c <MX_GPIO_Init+0x138>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a35      	ldr	r2, [pc, #212]	; (800096c <MX_GPIO_Init+0x138>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b33      	ldr	r3, [pc, #204]	; (800096c <MX_GPIO_Init+0x138>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008aa:	4b30      	ldr	r3, [pc, #192]	; (800096c <MX_GPIO_Init+0x138>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a2f      	ldr	r2, [pc, #188]	; (800096c <MX_GPIO_Init+0x138>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_GPIO_Init+0x138>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80008c2:	f000 ffa7 	bl	8001814 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_GPIO_Init+0x138>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <MX_GPIO_Init+0x138>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b26      	ldr	r3, [pc, #152]	; (800096c <MX_GPIO_Init+0x138>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008e4:	4822      	ldr	r0, [pc, #136]	; (8000970 <MX_GPIO_Init+0x13c>)
 80008e6:	f000 fd61 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2120      	movs	r1, #32
 80008ee:	4821      	ldr	r0, [pc, #132]	; (8000974 <MX_GPIO_Init+0x140>)
 80008f0:	f000 fd5c 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	481b      	ldr	r0, [pc, #108]	; (8000978 <MX_GPIO_Init+0x144>)
 800090c:	f000 fbbc 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000910:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_GPIO_Init+0x13c>)
 800092a:	f000 fbad 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800092e:	2320      	movs	r3, #32
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	480b      	ldr	r0, [pc, #44]	; (8000974 <MX_GPIO_Init+0x140>)
 8000946:	f000 fb9f 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800094a:	2340      	movs	r3, #64	; 0x40
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_GPIO_Init+0x140>)
 800095e:	f000 fb93 	bl	8001088 <HAL_GPIO_Init>

}
 8000962:	bf00      	nop
 8000964:	3730      	adds	r7, #48	; 0x30
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	48000400 	.word	0x48000400
 8000974:	48001800 	.word	0x48001800
 8000978:	48000800 	.word	0x48000800

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x44>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_MspInit+0x44>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6613      	str	r3, [r2, #96]	; 0x60
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x44>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x44>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x44>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6593      	str	r3, [r2, #88]	; 0x58
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x44>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b0b2      	sub	sp, #200	; 0xc8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	2294      	movs	r2, #148	; 0x94
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f003 fd59 	bl	80044a8 <memset>
  if(huart->Instance==LPUART1)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a65      	ldr	r2, [pc, #404]	; (8000b90 <HAL_UART_MspInit+0x1c0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d13e      	bne.n	8000a7e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a00:	2320      	movs	r3, #32
 8000a02:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a08:	f107 0320 	add.w	r3, r7, #32
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fde9 	bl	80025e4 <HAL_RCCEx_PeriphCLKConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a18:	f7ff ffb0 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a1c:	4b5d      	ldr	r3, [pc, #372]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a20:	4a5c      	ldr	r2, [pc, #368]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a28:	4b5a      	ldr	r3, [pc, #360]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	61fb      	str	r3, [r7, #28]
 8000a32:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a34:	4b57      	ldr	r3, [pc, #348]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	4a56      	ldr	r2, [pc, #344]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a40:	4b54      	ldr	r3, [pc, #336]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a48:	61bb      	str	r3, [r7, #24]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8000a4c:	f000 fee2 	bl	8001814 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000a50:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000a74:	4619      	mov	r1, r3
 8000a76:	4848      	ldr	r0, [pc, #288]	; (8000b98 <HAL_UART_MspInit+0x1c8>)
 8000a78:	f000 fb06 	bl	8001088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a7c:	e084      	b.n	8000b88 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART1)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a46      	ldr	r2, [pc, #280]	; (8000b9c <HAL_UART_MspInit+0x1cc>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d13e      	bne.n	8000b06 <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a90:	f107 0320 	add.w	r3, r7, #32
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fda5 	bl	80025e4 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000aa0:	f7ff ff6c 	bl	800097c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa4:	4b3b      	ldr	r3, [pc, #236]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa8:	4a3a      	ldr	r2, [pc, #232]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aae:	6613      	str	r3, [r2, #96]	; 0x60
 8000ab0:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000abc:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	4a34      	ldr	r2, [pc, #208]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000ad4:	f000 fe9e 	bl	8001814 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ad8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000af2:	2307      	movs	r3, #7
 8000af4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4826      	ldr	r0, [pc, #152]	; (8000b98 <HAL_UART_MspInit+0x1c8>)
 8000b00:	f000 fac2 	bl	8001088 <HAL_GPIO_Init>
}
 8000b04:	e040      	b.n	8000b88 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART3)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a25      	ldr	r2, [pc, #148]	; (8000ba0 <HAL_UART_MspInit+0x1d0>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d13b      	bne.n	8000b88 <HAL_UART_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b10:	2304      	movs	r3, #4
 8000b12:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fd61 	bl	80025e4 <HAL_RCCEx_PeriphCLKConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8000b28:	f7ff ff28 	bl	800097c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b30:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000b32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b36:	6593      	str	r3, [r2, #88]	; 0x58
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_UART_MspInit+0x1c4>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	f003 0308 	and.w	r3, r3, #8
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b76:	2307      	movs	r3, #7
 8000b78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <HAL_UART_MspInit+0x1d4>)
 8000b84:	f000 fa80 	bl	8001088 <HAL_GPIO_Init>
}
 8000b88:	bf00      	nop
 8000b8a:	37c8      	adds	r7, #200	; 0xc8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40008000 	.word	0x40008000
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48001800 	.word	0x48001800
 8000b9c:	40013800 	.word	0x40013800
 8000ba0:	40004800 	.word	0x40004800
 8000ba4:	48000c00 	.word	0x48000c00

08000ba8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0b0      	sub	sp, #192	; 0xc0
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc0:	f107 0318 	add.w	r3, r7, #24
 8000bc4:	2294      	movs	r2, #148	; 0x94
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fc6d 	bl	80044a8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bd6:	d16c      	bne.n	8000cb2 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bdc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be4:	f107 0318 	add.w	r3, r7, #24
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fcfb 	bl	80025e4 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000bf4:	f7ff fec2 	bl	800097c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <HAL_PCD_MspInit+0x114>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfc:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <HAL_PCD_MspInit+0x114>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <HAL_PCD_MspInit+0x114>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c10:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f000 fa25 	bl	8001088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f000 fa14 	bl	8001088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <HAL_PCD_MspInit+0x114>)
 8000c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c64:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <HAL_PCD_MspInit+0x114>)
 8000c66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <HAL_PCD_MspInit+0x114>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_PCD_MspInit+0x114>)
 8000c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d114      	bne.n	8000cae <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_PCD_MspInit+0x114>)
 8000c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c88:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <HAL_PCD_MspInit+0x114>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_PCD_MspInit+0x114>)
 8000c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000c9c:	f000 fdaa 	bl	80017f4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_PCD_MspInit+0x114>)
 8000ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca4:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <HAL_PCD_MspInit+0x114>)
 8000ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000caa:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cac:	e001      	b.n	8000cb2 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000cae:	f000 fda1 	bl	80017f4 <HAL_PWREx_EnableVddUSB>
}
 8000cb2:	bf00      	nop
 8000cb4:	37c0      	adds	r7, #192	; 0xc0
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f892 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d3c:	f7ff ffea 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	; (8000d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <LoopForever+0xe>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	; (8000d84 <LoopForever+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d66:	f003 fb7b 	bl	8004460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6a:	f7ff fbc9 	bl	8000500 <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d70:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d7c:	08004558 	.word	0x08004558
  ldr r2, =_sbss
 8000d80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d84:	20000814 	.word	0x20000814

08000d88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_IRQHandler>

08000d8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f943 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f80e 	bl	8000dbc <HAL_InitTick>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d002      	beq.n	8000dac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	71fb      	strb	r3, [r7, #7]
 8000daa:	e001      	b.n	8000db0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dac:	f7ff fdec 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db0:	79fb      	ldrb	r3, [r7, #7]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <HAL_InitTick+0x6c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d023      	beq.n	8000e18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_InitTick+0x70>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_InitTick+0x6c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f941 	bl	800106e <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10f      	bne.n	8000e12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d809      	bhi.n	8000e0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 f919 	bl	8001036 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e04:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_InitTick+0x74>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e007      	b.n	8000e1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e004      	b.n	8000e1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	e001      	b.n	8000e1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000810 	.word	0x20000810

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000810 	.word	0x20000810

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff ffee 	bl	8000e5c <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9a:	bf00      	nop
 8000e9c:	f7ff ffde 	bl	8000e5c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fec:	d301      	bcc.n	8000ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00f      	b.n	8001012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <SysTick_Config+0x40>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f7ff ff8e 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SysTick_Config+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <SysTick_Config+0x40>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff47 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff5c 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff8e 	bl	8000f74 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5d 	bl	8000f20 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffb0 	bl	8000fdc <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001096:	e166      	b.n	8001366 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8158 	beq.w	8001360 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d005      	beq.n	80010c8 <HAL_GPIO_Init+0x40>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d130      	bne.n	800112a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010fe:	2201      	movs	r2, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	f003 0201 	and.w	r2, r3, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b03      	cmp	r3, #3
 8001134:	d017      	beq.n	8001166 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d123      	bne.n	80011ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	6939      	ldr	r1, [r7, #16]
 80011b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0203 	and.w	r2, r3, #3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80b2 	beq.w	8001360 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	4b61      	ldr	r3, [pc, #388]	; (8001384 <HAL_GPIO_Init+0x2fc>)
 80011fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001200:	4a60      	ldr	r2, [pc, #384]	; (8001384 <HAL_GPIO_Init+0x2fc>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6613      	str	r3, [r2, #96]	; 0x60
 8001208:	4b5e      	ldr	r3, [pc, #376]	; (8001384 <HAL_GPIO_Init+0x2fc>)
 800120a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001214:	4a5c      	ldr	r2, [pc, #368]	; (8001388 <HAL_GPIO_Init+0x300>)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800123e:	d02b      	beq.n	8001298 <HAL_GPIO_Init+0x210>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_GPIO_Init+0x304>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d025      	beq.n	8001294 <HAL_GPIO_Init+0x20c>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a51      	ldr	r2, [pc, #324]	; (8001390 <HAL_GPIO_Init+0x308>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d01f      	beq.n	8001290 <HAL_GPIO_Init+0x208>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a50      	ldr	r2, [pc, #320]	; (8001394 <HAL_GPIO_Init+0x30c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d019      	beq.n	800128c <HAL_GPIO_Init+0x204>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a4f      	ldr	r2, [pc, #316]	; (8001398 <HAL_GPIO_Init+0x310>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d013      	beq.n	8001288 <HAL_GPIO_Init+0x200>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a4e      	ldr	r2, [pc, #312]	; (800139c <HAL_GPIO_Init+0x314>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00d      	beq.n	8001284 <HAL_GPIO_Init+0x1fc>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a4d      	ldr	r2, [pc, #308]	; (80013a0 <HAL_GPIO_Init+0x318>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d007      	beq.n	8001280 <HAL_GPIO_Init+0x1f8>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a4c      	ldr	r2, [pc, #304]	; (80013a4 <HAL_GPIO_Init+0x31c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d101      	bne.n	800127c <HAL_GPIO_Init+0x1f4>
 8001278:	2307      	movs	r3, #7
 800127a:	e00e      	b.n	800129a <HAL_GPIO_Init+0x212>
 800127c:	2308      	movs	r3, #8
 800127e:	e00c      	b.n	800129a <HAL_GPIO_Init+0x212>
 8001280:	2306      	movs	r3, #6
 8001282:	e00a      	b.n	800129a <HAL_GPIO_Init+0x212>
 8001284:	2305      	movs	r3, #5
 8001286:	e008      	b.n	800129a <HAL_GPIO_Init+0x212>
 8001288:	2304      	movs	r3, #4
 800128a:	e006      	b.n	800129a <HAL_GPIO_Init+0x212>
 800128c:	2303      	movs	r3, #3
 800128e:	e004      	b.n	800129a <HAL_GPIO_Init+0x212>
 8001290:	2302      	movs	r3, #2
 8001292:	e002      	b.n	800129a <HAL_GPIO_Init+0x212>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <HAL_GPIO_Init+0x212>
 8001298:	2300      	movs	r3, #0
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	f002 0203 	and.w	r2, r2, #3
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	4093      	lsls	r3, r2
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012aa:	4937      	ldr	r1, [pc, #220]	; (8001388 <HAL_GPIO_Init+0x300>)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012b8:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <HAL_GPIO_Init+0x320>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012dc:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <HAL_GPIO_Init+0x320>)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <HAL_GPIO_Init+0x320>)
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001306:	4a28      	ldr	r2, [pc, #160]	; (80013a8 <HAL_GPIO_Init+0x320>)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800130c:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <HAL_GPIO_Init+0x320>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_GPIO_Init+0x320>)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <HAL_GPIO_Init+0x320>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800135a:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <HAL_GPIO_Init+0x320>)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	3301      	adds	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	fa22 f303 	lsr.w	r3, r2, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	f47f ae91 	bne.w	8001098 <HAL_GPIO_Init+0x10>
  }
}
 8001376:	bf00      	nop
 8001378:	bf00      	nop
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40021000 	.word	0x40021000
 8001388:	40010000 	.word	0x40010000
 800138c:	48000400 	.word	0x48000400
 8001390:	48000800 	.word	0x48000800
 8001394:	48000c00 	.word	0x48000c00
 8001398:	48001000 	.word	0x48001000
 800139c:	48001400 	.word	0x48001400
 80013a0:	48001800 	.word	0x48001800
 80013a4:	48001c00 	.word	0x48001c00
 80013a8:	40010400 	.word	0x40010400

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013de:	b08f      	sub	sp, #60	; 0x3c
 80013e0:	af0a      	add	r7, sp, #40	; 0x28
 80013e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e116      	b.n	800161c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d106      	bne.n	800140e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fbcd 	bl	8000ba8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2203      	movs	r2, #3
 8001412:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fd8d 	bl	8003f4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	687e      	ldr	r6, [r7, #4]
 800143a:	466d      	mov	r5, sp
 800143c:	f106 0410 	add.w	r4, r6, #16
 8001440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001448:	e894 0003 	ldmia.w	r4, {r0, r1}
 800144c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001450:	1d33      	adds	r3, r6, #4
 8001452:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001454:	6838      	ldr	r0, [r7, #0]
 8001456:	f002 fd4d 	bl	8003ef4 <USB_CoreInit>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2202      	movs	r2, #2
 8001464:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0d7      	b.n	800161c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f002 fd7b 	bl	8003f6e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	e04a      	b.n	8001514 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	333d      	adds	r3, #61	; 0x3d
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	333c      	adds	r3, #60	; 0x3c
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	b298      	uxth	r0, r3
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	3344      	adds	r3, #68	; 0x44
 80014ba:	4602      	mov	r2, r0
 80014bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	3340      	adds	r3, #64	; 0x40
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	3348      	adds	r3, #72	; 0x48
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	334c      	adds	r3, #76	; 0x4c
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	3354      	adds	r3, #84	; 0x54
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	3301      	adds	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	429a      	cmp	r2, r3
 800151c:	d3af      	bcc.n	800147e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800151e:	2300      	movs	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]
 8001522:	e044      	b.n	80015ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4413      	add	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	3301      	adds	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d3b5      	bcc.n	8001524 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	603b      	str	r3, [r7, #0]
 80015be:	687e      	ldr	r6, [r7, #4]
 80015c0:	466d      	mov	r5, sp
 80015c2:	f106 0410 	add.w	r4, r6, #16
 80015c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80015d6:	1d33      	adds	r3, r6, #4
 80015d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f002 fd14 	bl	8004008 <USB_DevInit>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2202      	movs	r2, #2
 80015ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e014      	b.n	800161c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	2b01      	cmp	r3, #1
 8001608:	d102      	bne.n	8001610 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f80a 	bl	8001624 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f002 fec0 	bl	800439a <USB_DevDisconnect>

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001624 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001656:	f043 0303 	orr.w	r3, r3, #3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167c:	d102      	bne.n	8001684 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800167e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001682:	e00b      	b.n	800169c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001692:	d102      	bne.n	800169a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001698:	e000      	b.n	800169c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800169a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40007000 	.word	0x40007000

080016ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d141      	bne.n	800173e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ba:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c6:	d131      	bne.n	800172c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016c8:	4b47      	ldr	r3, [pc, #284]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016ce:	4a46      	ldr	r2, [pc, #280]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d8:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016e0:	4a41      	ldr	r2, [pc, #260]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80016e8:	4b40      	ldr	r3, [pc, #256]	; (80017ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2232      	movs	r2, #50	; 0x32
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	4a3f      	ldr	r2, [pc, #252]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016f4:	fba2 2303 	umull	r2, r3, r2, r3
 80016f8:	0c9b      	lsrs	r3, r3, #18
 80016fa:	3301      	adds	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016fe:	e002      	b.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3b01      	subs	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001706:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001712:	d102      	bne.n	800171a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f2      	bne.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800171a:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001726:	d158      	bne.n	80017da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e057      	b.n	80017dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800172c:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001732:	4a2d      	ldr	r2, [pc, #180]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001738:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800173c:	e04d      	b.n	80017da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001744:	d141      	bne.n	80017ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800174e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001752:	d131      	bne.n	80017b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001754:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800175a:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800176c:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001772:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2232      	movs	r2, #50	; 0x32
 800177a:	fb02 f303 	mul.w	r3, r2, r3
 800177e:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001780:	fba2 2303 	umull	r2, r3, r2, r3
 8001784:	0c9b      	lsrs	r3, r3, #18
 8001786:	3301      	adds	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800178a:	e002      	b.n	8001792 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3b01      	subs	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179e:	d102      	bne.n	80017a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f2      	bne.n	800178c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b2:	d112      	bne.n	80017da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e011      	b.n	80017dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017c8:	e007      	b.n	80017da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40007000 	.word	0x40007000
 80017ec:	20000000 	.word	0x20000000
 80017f0:	431bde83 	.word	0x431bde83

080017f4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_PWREx_EnableVddUSB+0x1c>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_PWREx_EnableVddUSB+0x1c>)
 80017fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001802:	6053      	str	r3, [r2, #4]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40007000 	.word	0x40007000

08001814 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_PWREx_EnableVddIO2+0x1c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <HAL_PWREx_EnableVddIO2+0x1c>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001822:	6053      	str	r3, [r2, #4]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40007000 	.word	0x40007000

08001834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	f000 bc08 	b.w	8002058 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001848:	4b96      	ldr	r3, [pc, #600]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001852:	4b94      	ldr	r3, [pc, #592]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80e4 	beq.w	8001a32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d007      	beq.n	8001880 <HAL_RCC_OscConfig+0x4c>
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b0c      	cmp	r3, #12
 8001874:	f040 808b 	bne.w	800198e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b01      	cmp	r3, #1
 800187c:	f040 8087 	bne.w	800198e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001880:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_OscConfig+0x64>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e3df      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1a      	ldr	r2, [r3, #32]
 800189c:	4b81      	ldr	r3, [pc, #516]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d004      	beq.n	80018b2 <HAL_RCC_OscConfig+0x7e>
 80018a8:	4b7e      	ldr	r3, [pc, #504]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018b0:	e005      	b.n	80018be <HAL_RCC_OscConfig+0x8a>
 80018b2:	4b7c      	ldr	r3, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018be:	4293      	cmp	r3, r2
 80018c0:	d223      	bcs.n	800190a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fdcc 	bl	8002464 <RCC_SetFlashLatencyFromMSIRange>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e3c0      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d6:	4b73      	ldr	r3, [pc, #460]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a72      	ldr	r2, [pc, #456]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	496d      	ldr	r1, [pc, #436]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f4:	4b6b      	ldr	r3, [pc, #428]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	4968      	ldr	r1, [pc, #416]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
 8001908:	e025      	b.n	8001956 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800190a:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a65      	ldr	r2, [pc, #404]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b63      	ldr	r3, [pc, #396]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4960      	ldr	r1, [pc, #384]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001928:	4b5e      	ldr	r3, [pc, #376]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	495b      	ldr	r1, [pc, #364]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4618      	mov	r0, r3
 8001948:	f000 fd8c 	bl	8002464 <RCC_SetFlashLatencyFromMSIRange>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e380      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001956:	f000 fcc1 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800195a:	4602      	mov	r2, r0
 800195c:	4b51      	ldr	r3, [pc, #324]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	4950      	ldr	r1, [pc, #320]	; (8001aa8 <HAL_RCC_OscConfig+0x274>)
 8001968:	5ccb      	ldrb	r3, [r1, r3]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	4a4e      	ldr	r2, [pc, #312]	; (8001aac <HAL_RCC_OscConfig+0x278>)
 8001974:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001976:	4b4e      	ldr	r3, [pc, #312]	; (8001ab0 <HAL_RCC_OscConfig+0x27c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fa1e 	bl	8000dbc <HAL_InitTick>
 8001980:	4603      	mov	r3, r0
 8001982:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d052      	beq.n	8001a30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	e364      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d032      	beq.n	80019fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001996:	4b43      	ldr	r3, [pc, #268]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a42      	ldr	r2, [pc, #264]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019a2:	f7ff fa5b 	bl	8000e5c <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019aa:	f7ff fa57 	bl	8000e5c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e34d      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019bc:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c8:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a35      	ldr	r2, [pc, #212]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4930      	ldr	r1, [pc, #192]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019e6:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	492b      	ldr	r1, [pc, #172]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
 80019fa:	e01a      	b.n	8001a32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019fc:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a28      	ldr	r2, [pc, #160]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fa28 	bl	8000e5c <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a10:	f7ff fa24 	bl	8000e5c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e31a      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x1dc>
 8001a2e:	e000      	b.n	8001a32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d073      	beq.n	8001b26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_OscConfig+0x21c>
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2b0c      	cmp	r3, #12
 8001a48:	d10e      	bne.n	8001a68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d10b      	bne.n	8001a68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d063      	beq.n	8001b24 <HAL_RCC_OscConfig+0x2f0>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d15f      	bne.n	8001b24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e2f7      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a70:	d106      	bne.n	8001a80 <HAL_RCC_OscConfig+0x24c>
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e025      	b.n	8001acc <HAL_RCC_OscConfig+0x298>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a88:	d114      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x280>
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a02      	ldr	r2, [pc, #8]	; (8001aa4 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e013      	b.n	8001acc <HAL_RCC_OscConfig+0x298>
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	080044d8 	.word	0x080044d8
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004
 8001ab4:	4ba0      	ldr	r3, [pc, #640]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a9f      	ldr	r2, [pc, #636]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b9d      	ldr	r3, [pc, #628]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a9c      	ldr	r2, [pc, #624]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d013      	beq.n	8001afc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f9c2 	bl	8000e5c <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff f9be 	bl	8000e5c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e2b4      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aee:	4b92      	ldr	r3, [pc, #584]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x2a8>
 8001afa:	e014      	b.n	8001b26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff f9ae 	bl	8000e5c <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff f9aa 	bl	8000e5c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	; 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e2a0      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b16:	4b88      	ldr	r3, [pc, #544]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x2d0>
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d060      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_OscConfig+0x310>
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2b0c      	cmp	r3, #12
 8001b3c:	d119      	bne.n	8001b72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d116      	bne.n	8001b72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b44:	4b7c      	ldr	r3, [pc, #496]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_OscConfig+0x328>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e27d      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4b76      	ldr	r3, [pc, #472]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	061b      	lsls	r3, r3, #24
 8001b6a:	4973      	ldr	r1, [pc, #460]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b70:	e040      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d023      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b7a:	4b6f      	ldr	r3, [pc, #444]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a6e      	ldr	r2, [pc, #440]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff f969 	bl	8000e5c <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7ff f965 	bl	8000e5c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e25b      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba0:	4b65      	ldr	r3, [pc, #404]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	4b62      	ldr	r3, [pc, #392]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	495f      	ldr	r1, [pc, #380]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
 8001bc0:	e018      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc2:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a5c      	ldr	r2, [pc, #368]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bce:	f7ff f945 	bl	8000e5c <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd6:	f7ff f941 	bl	8000e5c <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e237      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d03c      	beq.n	8001c7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d01c      	beq.n	8001c42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c08:	4b4b      	ldr	r3, [pc, #300]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0e:	4a4a      	ldr	r2, [pc, #296]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7ff f920 	bl	8000e5c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c20:	f7ff f91c 	bl	8000e5c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e212      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c32:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0ef      	beq.n	8001c20 <HAL_RCC_OscConfig+0x3ec>
 8001c40:	e01b      	b.n	8001c7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c42:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c48:	4a3b      	ldr	r2, [pc, #236]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c52:	f7ff f903 	bl	8000e5c <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5a:	f7ff f8ff 	bl	8000e5c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e1f5      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ef      	bne.n	8001c5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80a6 	beq.w	8001dd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10d      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	4a26      	ldr	r2, [pc, #152]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_OscConfig+0x508>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d118      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_RCC_OscConfig+0x508>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <HAL_RCC_OscConfig+0x508>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f8c6 	bl	8000e5c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd4:	f7ff f8c2 	bl	8000e5c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e1b8      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_RCC_OscConfig+0x508>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d108      	bne.n	8001d0c <HAL_RCC_OscConfig+0x4d8>
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d00:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d0a:	e029      	b.n	8001d60 <HAL_RCC_OscConfig+0x52c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d115      	bne.n	8001d40 <HAL_RCC_OscConfig+0x50c>
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1a:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2a:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <HAL_RCC_OscConfig+0x504>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d34:	e014      	b.n	8001d60 <HAL_RCC_OscConfig+0x52c>
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	4b9d      	ldr	r3, [pc, #628]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	4a9c      	ldr	r2, [pc, #624]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d50:	4b99      	ldr	r3, [pc, #612]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d56:	4a98      	ldr	r2, [pc, #608]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001d58:	f023 0304 	bic.w	r3, r3, #4
 8001d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d016      	beq.n	8001d96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff f878 	bl	8000e5c <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff f874 	bl	8000e5c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e168      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d86:	4b8c      	ldr	r3, [pc, #560]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0ed      	beq.n	8001d70 <HAL_RCC_OscConfig+0x53c>
 8001d94:	e015      	b.n	8001dc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f861 	bl	8000e5c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7ff f85d 	bl	8000e5c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e151      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db4:	4b80      	ldr	r3, [pc, #512]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1ed      	bne.n	8001d9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dc2:	7ffb      	ldrb	r3, [r7, #31]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc8:	4b7b      	ldr	r3, [pc, #492]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	4a7a      	ldr	r2, [pc, #488]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d03c      	beq.n	8001e5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001de8:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dee:	4a72      	ldr	r2, [pc, #456]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff f830 	bl	8000e5c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e00:	f7ff f82c 	bl	8000e5c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e122      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e12:	4b69      	ldr	r3, [pc, #420]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0ef      	beq.n	8001e00 <HAL_RCC_OscConfig+0x5cc>
 8001e20:	e01b      	b.n	8001e5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e22:	4b65      	ldr	r3, [pc, #404]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e28:	4a63      	ldr	r2, [pc, #396]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001e2a:	f023 0301 	bic.w	r3, r3, #1
 8001e2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e32:	f7ff f813 	bl	8000e5c <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e3a:	f7ff f80f 	bl	8000e5c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e105      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e4c:	4b5a      	ldr	r3, [pc, #360]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1ef      	bne.n	8001e3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80f9 	beq.w	8002056 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	f040 80cf 	bne.w	800200c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e6e:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f003 0203 	and.w	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d12c      	bne.n	8001edc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d123      	bne.n	8001edc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d11b      	bne.n	8001edc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d113      	bne.n	8001edc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d109      	bne.n	8001edc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d071      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2b0c      	cmp	r3, #12
 8001ee0:	d068      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ee2:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001eee:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0ac      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001efe:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a2d      	ldr	r2, [pc, #180]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001f04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f08:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f0a:	f7fe ffa7 	bl	8000e5c <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f12:	f7fe ffa3 	bl	8000e5c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e099      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x788>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f40:	3a01      	subs	r2, #1
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	4311      	orrs	r1, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f4a:	0212      	lsls	r2, r2, #8
 8001f4c:	4311      	orrs	r1, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f52:	0852      	lsrs	r2, r2, #1
 8001f54:	3a01      	subs	r2, #1
 8001f56:	0552      	lsls	r2, r2, #21
 8001f58:	4311      	orrs	r1, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f5e:	0852      	lsrs	r2, r2, #1
 8001f60:	3a01      	subs	r2, #1
 8001f62:	0652      	lsls	r2, r2, #25
 8001f64:	4311      	orrs	r1, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f6a:	06d2      	lsls	r2, r2, #27
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	4912      	ldr	r1, [pc, #72]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f8c:	f7fe ff66 	bl	8000e5c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe ff62 	bl	8000e5c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e058      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_RCC_OscConfig+0x784>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb2:	e050      	b.n	8002056 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e04f      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_RCC_OscConfig+0x82c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d144      	bne.n	8002056 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fcc:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_OscConfig+0x82c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a23      	ldr	r2, [pc, #140]	; (8002060 <HAL_RCC_OscConfig+0x82c>)
 8001fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <HAL_RCC_OscConfig+0x82c>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a20      	ldr	r2, [pc, #128]	; (8002060 <HAL_RCC_OscConfig+0x82c>)
 8001fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fe4:	f7fe ff3a 	bl	8000e5c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe ff36 	bl	8000e5c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e02c      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_RCC_OscConfig+0x82c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x7b8>
 800200a:	e024      	b.n	8002056 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d01f      	beq.n	8002052 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_RCC_OscConfig+0x82c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <HAL_RCC_OscConfig+0x82c>)
 8002018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7fe ff1d 	bl	8000e5c <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7fe ff19 	bl	8000e5c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e00f      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_RCC_OscConfig+0x82c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCC_OscConfig+0x82c>)
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	4905      	ldr	r1, [pc, #20]	; (8002060 <HAL_RCC_OscConfig+0x82c>)
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_RCC_OscConfig+0x830>)
 800204c:	4013      	ands	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
 8002050:	e001      	b.n	8002056 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	feeefffc 	.word	0xfeeefffc

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e11d      	b.n	80022bc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002080:	4b90      	ldr	r3, [pc, #576]	; (80022c4 <HAL_RCC_ClockConfig+0x25c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d910      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b8d      	ldr	r3, [pc, #564]	; (80022c4 <HAL_RCC_ClockConfig+0x25c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 020f 	bic.w	r2, r3, #15
 8002096:	498b      	ldr	r1, [pc, #556]	; (80022c4 <HAL_RCC_ClockConfig+0x25c>)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b89      	ldr	r3, [pc, #548]	; (80022c4 <HAL_RCC_ClockConfig+0x25c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e105      	b.n	80022bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d010      	beq.n	80020de <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	4b81      	ldr	r3, [pc, #516]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d908      	bls.n	80020de <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020cc:	4b7e      	ldr	r3, [pc, #504]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	497b      	ldr	r1, [pc, #492]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d079      	beq.n	80021de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d11e      	bne.n	8002130 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f2:	4b75      	ldr	r3, [pc, #468]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0dc      	b.n	80022bc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002102:	f000 fa09 	bl	8002518 <RCC_GetSysClockFreqFromPLLSource>
 8002106:	4603      	mov	r3, r0
 8002108:	4a70      	ldr	r2, [pc, #448]	; (80022cc <HAL_RCC_ClockConfig+0x264>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d946      	bls.n	800219c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800210e:	4b6e      	ldr	r3, [pc, #440]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d140      	bne.n	800219c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800211a:	4b6b      	ldr	r3, [pc, #428]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002122:	4a69      	ldr	r2, [pc, #420]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002128:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e035      	b.n	800219c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d107      	bne.n	8002148 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002138:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d115      	bne.n	8002170 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0b9      	b.n	80022bc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002150:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0ad      	b.n	80022bc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002160:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0a5      	b.n	80022bc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002170:	f000 f8b4 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8002174:	4603      	mov	r3, r0
 8002176:	4a55      	ldr	r2, [pc, #340]	; (80022cc <HAL_RCC_ClockConfig+0x264>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d90f      	bls.n	800219c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800217c:	4b52      	ldr	r3, [pc, #328]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002188:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002190:	4a4d      	ldr	r2, [pc, #308]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002196:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800219c:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 0203 	bic.w	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4947      	ldr	r1, [pc, #284]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ae:	f7fe fe55 	bl	8000e5c <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b6:	f7fe fe51 	bl	8000e5c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e077      	b.n	80022bc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021cc:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 020c 	and.w	r2, r3, #12
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	429a      	cmp	r2, r3
 80021dc:	d1eb      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d105      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80021e4:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a37      	ldr	r2, [pc, #220]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 80021ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021ee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d010      	beq.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002208:	429a      	cmp	r2, r3
 800220a:	d208      	bcs.n	800221e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	492b      	ldr	r1, [pc, #172]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800221e:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <HAL_RCC_ClockConfig+0x25c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d210      	bcs.n	800224e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222c:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <HAL_RCC_ClockConfig+0x25c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 020f 	bic.w	r2, r3, #15
 8002234:	4923      	ldr	r1, [pc, #140]	; (80022c4 <HAL_RCC_ClockConfig+0x25c>)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223c:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <HAL_RCC_ClockConfig+0x25c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d001      	beq.n	800224e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e036      	b.n	80022bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	4918      	ldr	r1, [pc, #96]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4910      	ldr	r1, [pc, #64]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002288:	4313      	orrs	r3, r2
 800228a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800228c:	f000 f826 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_RCC_ClockConfig+0x260>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	490c      	ldr	r1, [pc, #48]	; (80022d0 <HAL_RCC_ClockConfig+0x268>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_RCC_ClockConfig+0x26c>)
 80022aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_ClockConfig+0x270>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fd83 	bl	8000dbc <HAL_InitTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	73fb      	strb	r3, [r7, #15]

  return status;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40022000 	.word	0x40022000
 80022c8:	40021000 	.word	0x40021000
 80022cc:	04c4b400 	.word	0x04c4b400
 80022d0:	080044d8 	.word	0x080044d8
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ea:	4b3e      	ldr	r3, [pc, #248]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f4:	4b3b      	ldr	r3, [pc, #236]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x34>
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b0c      	cmp	r3, #12
 8002308:	d121      	bne.n	800234e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d11e      	bne.n	800234e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002310:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d107      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800231c:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800231e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	e005      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002338:	4a2b      	ldr	r2, [pc, #172]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002340:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10d      	bne.n	8002364 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2b04      	cmp	r3, #4
 8002352:	d102      	bne.n	800235a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002354:	4b25      	ldr	r3, [pc, #148]	; (80023ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	e004      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b08      	cmp	r3, #8
 800235e:	d101      	bne.n	8002364 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002360:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002362:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d134      	bne.n	80023d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d003      	beq.n	8002382 <HAL_RCC_GetSysClockFreq+0xa6>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d003      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0xac>
 8002380:	e005      	b.n	800238e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002384:	617b      	str	r3, [r7, #20]
      break;
 8002386:	e005      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800238a:	617b      	str	r3, [r7, #20]
      break;
 800238c:	e002      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	617b      	str	r3, [r7, #20]
      break;
 8002392:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	3301      	adds	r3, #1
 80023a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	fb03 f202 	mul.w	r2, r3, r2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	0e5b      	lsrs	r3, r3, #25
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	3301      	adds	r3, #1
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023d4:	69bb      	ldr	r3, [r7, #24]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	080044f0 	.word	0x080044f0
 80023ec:	00f42400 	.word	0x00f42400
 80023f0:	007a1200 	.word	0x007a1200

080023f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCC_GetHCLKFreq+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000000 	.word	0x20000000

0800240c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002410:	f7ff fff0 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	4904      	ldr	r1, [pc, #16]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	080044e8 	.word	0x080044e8

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800243c:	f7ff ffda 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0adb      	lsrs	r3, r3, #11
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4904      	ldr	r1, [pc, #16]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x28>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	080044e8 	.word	0x080044e8

08002464 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800247c:	f7ff f8f6 	bl	800166c <HAL_PWREx_GetVoltageRange>
 8002480:	6178      	str	r0, [r7, #20]
 8002482:	e014      	b.n	80024ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002484:	4b22      	ldr	r3, [pc, #136]	; (8002510 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	4a21      	ldr	r2, [pc, #132]	; (8002510 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800248a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248e:	6593      	str	r3, [r2, #88]	; 0x58
 8002490:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800249c:	f7ff f8e6 	bl	800166c <HAL_PWREx_GetVoltageRange>
 80024a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024a2:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	4a1a      	ldr	r2, [pc, #104]	; (8002510 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80024a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b4:	d10b      	bne.n	80024ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b80      	cmp	r3, #128	; 0x80
 80024ba:	d913      	bls.n	80024e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2ba0      	cmp	r3, #160	; 0xa0
 80024c0:	d902      	bls.n	80024c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024c2:	2302      	movs	r3, #2
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	e00d      	b.n	80024e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024c8:	2301      	movs	r3, #1
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	e00a      	b.n	80024e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b7f      	cmp	r3, #127	; 0x7f
 80024d2:	d902      	bls.n	80024da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80024d4:	2302      	movs	r3, #2
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	e004      	b.n	80024e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b70      	cmp	r3, #112	; 0x70
 80024de:	d101      	bne.n	80024e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024e0:	2301      	movs	r3, #1
 80024e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f023 020f 	bic.w	r2, r3, #15
 80024ec:	4909      	ldr	r1, [pc, #36]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d001      	beq.n	8002506 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000
 8002514:	40022000 	.word	0x40022000

08002518 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800251e:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d00b      	beq.n	8002546 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d825      	bhi.n	8002580 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d008      	beq.n	800254c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d11f      	bne.n	8002580 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002540:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002542:	613b      	str	r3, [r7, #16]
    break;
 8002544:	e01f      	b.n	8002586 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002546:	4b25      	ldr	r3, [pc, #148]	; (80025dc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002548:	613b      	str	r3, [r7, #16]
    break;
 800254a:	e01c      	b.n	8002586 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800254c:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d107      	bne.n	8002568 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800255a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e005      	b.n	8002574 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002574:	4a1a      	ldr	r2, [pc, #104]	; (80025e0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257c:	613b      	str	r3, [r7, #16]
    break;
 800257e:	e002      	b.n	8002586 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]
    break;
 8002584:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002586:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	3301      	adds	r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	fb03 f202 	mul.w	r2, r3, r2
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0e5b      	lsrs	r3, r3, #25
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	3301      	adds	r3, #1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80025c6:	683b      	ldr	r3, [r7, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40021000 	.word	0x40021000
 80025d8:	00f42400 	.word	0x00f42400
 80025dc:	007a1200 	.word	0x007a1200
 80025e0:	080044f0 	.word	0x080044f0

080025e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025ec:	2300      	movs	r3, #0
 80025ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025f0:	2300      	movs	r3, #0
 80025f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d040      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002604:	2b80      	cmp	r3, #128	; 0x80
 8002606:	d02a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002608:	2b80      	cmp	r3, #128	; 0x80
 800260a:	d825      	bhi.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800260c:	2b60      	cmp	r3, #96	; 0x60
 800260e:	d026      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002610:	2b60      	cmp	r3, #96	; 0x60
 8002612:	d821      	bhi.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002614:	2b40      	cmp	r3, #64	; 0x40
 8002616:	d006      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002618:	2b40      	cmp	r3, #64	; 0x40
 800261a:	d81d      	bhi.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800261c:	2b00      	cmp	r3, #0
 800261e:	d009      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002620:	2b20      	cmp	r3, #32
 8002622:	d010      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002624:	e018      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002626:	4b89      	ldr	r3, [pc, #548]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4a88      	ldr	r2, [pc, #544]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002632:	e015      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fb02 	bl	8002c44 <RCCEx_PLLSAI1_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002644:	e00c      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3320      	adds	r3, #32
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f000 fbed 	bl	8002e2c <RCCEx_PLLSAI2_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002656:	e003      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	74fb      	strb	r3, [r7, #19]
      break;
 800265c:	e000      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800265e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10b      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002666:	4b79      	ldr	r3, [pc, #484]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002668:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800266c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002674:	4975      	ldr	r1, [pc, #468]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800267c:	e001      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d047      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002696:	d030      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269c:	d82a      	bhi.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800269e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026a2:	d02a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 80026a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026a8:	d824      	bhi.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80026aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ae:	d008      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80026b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b4:	d81e      	bhi.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80026ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026be:	d010      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80026c0:	e018      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026c2:	4b62      	ldr	r3, [pc, #392]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	4a61      	ldr	r2, [pc, #388]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026ce:	e015      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3304      	adds	r3, #4
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fab4 	bl	8002c44 <RCCEx_PLLSAI1_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026e0:	e00c      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3320      	adds	r3, #32
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fb9f 	bl	8002e2c <RCCEx_PLLSAI2_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026f2:	e003      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	74fb      	strb	r3, [r7, #19]
      break;
 80026f8:	e000      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80026fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10b      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002702:	4b52      	ldr	r3, [pc, #328]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002704:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	494e      	ldr	r1, [pc, #312]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002718:	e001      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 809f 	beq.w	800286a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272c:	2300      	movs	r3, #0
 800272e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002730:	4b46      	ldr	r3, [pc, #280]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002740:	2300      	movs	r3, #0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00d      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	4a40      	ldr	r2, [pc, #256]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002750:	6593      	str	r3, [r2, #88]	; 0x58
 8002752:	4b3e      	ldr	r3, [pc, #248]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275e:	2301      	movs	r3, #1
 8002760:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002762:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a3a      	ldr	r2, [pc, #232]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800276e:	f7fe fb75 	bl	8000e5c <HAL_GetTick>
 8002772:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002774:	e009      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7fe fb71 	bl	8000e5c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d902      	bls.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	74fb      	strb	r3, [r7, #19]
        break;
 8002788:	e005      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800278a:	4b31      	ldr	r3, [pc, #196]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0ef      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d15b      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01f      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d019      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027ba:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027c6:	4b21      	ldr	r3, [pc, #132]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	4a1f      	ldr	r2, [pc, #124]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027dc:	4a1b      	ldr	r2, [pc, #108]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027e6:	4a19      	ldr	r2, [pc, #100]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d016      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fb30 	bl	8000e5c <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fe:	e00b      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7fe fb2c 	bl	8000e5c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d902      	bls.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	74fb      	strb	r3, [r7, #19]
            break;
 8002816:	e006      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0ec      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002826:	7cfb      	ldrb	r3, [r7, #19]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10c      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800282c:	4b07      	ldr	r3, [pc, #28]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283c:	4903      	ldr	r1, [pc, #12]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002844:	e008      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	74bb      	strb	r3, [r7, #18]
 800284a:	e005      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800284c:	40021000 	.word	0x40021000
 8002850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002854:	7cfb      	ldrb	r3, [r7, #19]
 8002856:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002858:	7c7b      	ldrb	r3, [r7, #17]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d105      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285e:	4ba0      	ldr	r3, [pc, #640]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	4a9f      	ldr	r2, [pc, #636]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002868:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002876:	4b9a      	ldr	r3, [pc, #616]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287c:	f023 0203 	bic.w	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	4996      	ldr	r1, [pc, #600]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002898:	4b91      	ldr	r3, [pc, #580]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f023 020c 	bic.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	498e      	ldr	r1, [pc, #568]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ba:	4b89      	ldr	r3, [pc, #548]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	4985      	ldr	r1, [pc, #532]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028dc:	4b80      	ldr	r3, [pc, #512]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ea:	497d      	ldr	r1, [pc, #500]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028fe:	4b78      	ldr	r3, [pc, #480]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290c:	4974      	ldr	r1, [pc, #464]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002920:	4b6f      	ldr	r3, [pc, #444]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292e:	496c      	ldr	r1, [pc, #432]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002942:	4b67      	ldr	r3, [pc, #412]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002948:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002950:	4963      	ldr	r1, [pc, #396]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002964:	4b5e      	ldr	r3, [pc, #376]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002972:	495b      	ldr	r1, [pc, #364]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002986:	4b56      	ldr	r3, [pc, #344]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	4952      	ldr	r1, [pc, #328]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029a8:	4b4d      	ldr	r3, [pc, #308]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	494a      	ldr	r1, [pc, #296]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ca:	4b45      	ldr	r3, [pc, #276]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	4941      	ldr	r1, [pc, #260]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ec:	4b3c      	ldr	r3, [pc, #240]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029f2:	f023 0203 	bic.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fa:	4939      	ldr	r1, [pc, #228]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d028      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a0e:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	4930      	ldr	r1, [pc, #192]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	4a2b      	ldr	r2, [pc, #172]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a38:	60d3      	str	r3, [r2, #12]
 8002a3a:	e011      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 f8f9 	bl	8002c44 <RCCEx_PLLSAI1_Config>
 8002a52:	4603      	mov	r3, r0
 8002a54:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a56:	7cfb      	ldrb	r3, [r7, #19]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d04d      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a74:	d108      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a7c:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a82:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002a86:	e012      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a8e:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a94:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aa6:	490e      	ldr	r1, [pc, #56]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a08      	ldr	r2, [pc, #32]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac2:	60d3      	str	r3, [r2, #12]
 8002ac4:	e020      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ace:	d109      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a02      	ldr	r2, [pc, #8]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ada:	60d3      	str	r3, [r2, #12]
 8002adc:	e014      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3304      	adds	r3, #4
 8002af2:	2101      	movs	r1, #1
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 f8a5 	bl	8002c44 <RCCEx_PLLSAI1_Config>
 8002afa:	4603      	mov	r3, r0
 8002afc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002afe:	7cfb      	ldrb	r3, [r7, #19]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d028      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b14:	4b4a      	ldr	r3, [pc, #296]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b22:	4947      	ldr	r1, [pc, #284]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b32:	d106      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b34:	4b42      	ldr	r3, [pc, #264]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4a41      	ldr	r2, [pc, #260]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b3e:	60d3      	str	r3, [r2, #12]
 8002b40:	e011      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b4a:	d10c      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	2101      	movs	r1, #1
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f876 	bl	8002c44 <RCCEx_PLLSAI1_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002b62:	7cfb      	ldrb	r3, [r7, #19]
 8002b64:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01e      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b72:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b82:	492f      	ldr	r1, [pc, #188]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 f851 	bl	8002c44 <RCCEx_PLLSAI1_Config>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bbc:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bc2:	f023 0204 	bic.w	r2, r3, #4
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bcc:	491c      	ldr	r1, [pc, #112]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00b      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002be6:	f023 0218 	bic.w	r2, r3, #24
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf0:	4913      	ldr	r1, [pc, #76]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d017      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002c04:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c14:	490a      	ldr	r1, [pc, #40]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c26:	d105      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c34:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000

08002c44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c52:	4b72      	ldr	r3, [pc, #456]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00e      	beq.n	8002c7c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c5e:	4b6f      	ldr	r3, [pc, #444]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0203 	and.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d103      	bne.n	8002c76 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
       ||
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d142      	bne.n	8002cfc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
 8002c7a:	e03f      	b.n	8002cfc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d018      	beq.n	8002cb6 <RCCEx_PLLSAI1_Config+0x72>
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d825      	bhi.n	8002cd4 <RCCEx_PLLSAI1_Config+0x90>
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d002      	beq.n	8002c92 <RCCEx_PLLSAI1_Config+0x4e>
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d009      	beq.n	8002ca4 <RCCEx_PLLSAI1_Config+0x60>
 8002c90:	e020      	b.n	8002cd4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c92:	4b62      	ldr	r3, [pc, #392]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11d      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca2:	e01a      	b.n	8002cda <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ca4:	4b5d      	ldr	r3, [pc, #372]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d116      	bne.n	8002cde <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb4:	e013      	b.n	8002cde <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cb6:	4b59      	ldr	r3, [pc, #356]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cc2:	4b56      	ldr	r3, [pc, #344]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cd2:	e006      	b.n	8002ce2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd8:	e004      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e002      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ce2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d108      	bne.n	8002cfc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002cea:	4b4c      	ldr	r3, [pc, #304]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f023 0203 	bic.w	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4949      	ldr	r1, [pc, #292]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 8086 	bne.w	8002e10 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d04:	4b45      	ldr	r3, [pc, #276]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a44      	ldr	r2, [pc, #272]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d10:	f7fe f8a4 	bl	8000e5c <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d16:	e009      	b.n	8002d2c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d18:	f7fe f8a0 	bl	8000e5c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d902      	bls.n	8002d2c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	73fb      	strb	r3, [r7, #15]
        break;
 8002d2a:	e005      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d2c:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ef      	bne.n	8002d18 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d168      	bne.n	8002e10 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d113      	bne.n	8002d6c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d44:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	4b35      	ldr	r3, [pc, #212]	; (8002e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6892      	ldr	r2, [r2, #8]
 8002d50:	0211      	lsls	r1, r2, #8
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68d2      	ldr	r2, [r2, #12]
 8002d56:	06d2      	lsls	r2, r2, #27
 8002d58:	4311      	orrs	r1, r2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6852      	ldr	r2, [r2, #4]
 8002d5e:	3a01      	subs	r2, #1
 8002d60:	0112      	lsls	r2, r2, #4
 8002d62:	430a      	orrs	r2, r1
 8002d64:	492d      	ldr	r1, [pc, #180]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	610b      	str	r3, [r1, #16]
 8002d6a:	e02d      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d115      	bne.n	8002d9e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d72:	4b2a      	ldr	r3, [pc, #168]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6892      	ldr	r2, [r2, #8]
 8002d7e:	0211      	lsls	r1, r2, #8
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6912      	ldr	r2, [r2, #16]
 8002d84:	0852      	lsrs	r2, r2, #1
 8002d86:	3a01      	subs	r2, #1
 8002d88:	0552      	lsls	r2, r2, #21
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6852      	ldr	r2, [r2, #4]
 8002d90:	3a01      	subs	r2, #1
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	430a      	orrs	r2, r1
 8002d96:	4921      	ldr	r1, [pc, #132]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	610b      	str	r3, [r1, #16]
 8002d9c:	e014      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6892      	ldr	r2, [r2, #8]
 8002daa:	0211      	lsls	r1, r2, #8
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6952      	ldr	r2, [r2, #20]
 8002db0:	0852      	lsrs	r2, r2, #1
 8002db2:	3a01      	subs	r2, #1
 8002db4:	0652      	lsls	r2, r2, #25
 8002db6:	4311      	orrs	r1, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6852      	ldr	r2, [r2, #4]
 8002dbc:	3a01      	subs	r2, #1
 8002dbe:	0112      	lsls	r2, r2, #4
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	4916      	ldr	r1, [pc, #88]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe f842 	bl	8000e5c <HAL_GetTick>
 8002dd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dda:	e009      	b.n	8002df0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ddc:	f7fe f83e 	bl	8000e5c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d902      	bls.n	8002df0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	73fb      	strb	r3, [r7, #15]
          break;
 8002dee:	e005      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ef      	beq.n	8002ddc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	4904      	ldr	r1, [pc, #16]	; (8002e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	07ff800f 	.word	0x07ff800f
 8002e24:	ff9f800f 	.word	0xff9f800f
 8002e28:	f9ff800f 	.word	0xf9ff800f

08002e2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e3a:	4b72      	ldr	r3, [pc, #456]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00e      	beq.n	8002e64 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e46:	4b6f      	ldr	r3, [pc, #444]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0203 	and.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d103      	bne.n	8002e5e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
       ||
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d142      	bne.n	8002ee4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	73fb      	strb	r3, [r7, #15]
 8002e62:	e03f      	b.n	8002ee4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d018      	beq.n	8002e9e <RCCEx_PLLSAI2_Config+0x72>
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d825      	bhi.n	8002ebc <RCCEx_PLLSAI2_Config+0x90>
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d002      	beq.n	8002e7a <RCCEx_PLLSAI2_Config+0x4e>
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d009      	beq.n	8002e8c <RCCEx_PLLSAI2_Config+0x60>
 8002e78:	e020      	b.n	8002ebc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e7a:	4b62      	ldr	r3, [pc, #392]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d11d      	bne.n	8002ec2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8a:	e01a      	b.n	8002ec2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e8c:	4b5d      	ldr	r3, [pc, #372]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d116      	bne.n	8002ec6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9c:	e013      	b.n	8002ec6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e9e:	4b59      	ldr	r3, [pc, #356]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10f      	bne.n	8002eca <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eaa:	4b56      	ldr	r3, [pc, #344]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eba:	e006      	b.n	8002eca <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec0:	e004      	b.n	8002ecc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e002      	b.n	8002ecc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002eca:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d108      	bne.n	8002ee4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002ed2:	4b4c      	ldr	r3, [pc, #304]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f023 0203 	bic.w	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4949      	ldr	r1, [pc, #292]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 8086 	bne.w	8002ff8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002eec:	4b45      	ldr	r3, [pc, #276]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a44      	ldr	r2, [pc, #272]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef8:	f7fd ffb0 	bl	8000e5c <HAL_GetTick>
 8002efc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002efe:	e009      	b.n	8002f14 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f00:	f7fd ffac 	bl	8000e5c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d902      	bls.n	8002f14 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	73fb      	strb	r3, [r7, #15]
        break;
 8002f12:	e005      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f14:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ef      	bne.n	8002f00 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d168      	bne.n	8002ff8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d113      	bne.n	8002f54 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f2c:	4b35      	ldr	r3, [pc, #212]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	4b35      	ldr	r3, [pc, #212]	; (8003008 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6892      	ldr	r2, [r2, #8]
 8002f38:	0211      	lsls	r1, r2, #8
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68d2      	ldr	r2, [r2, #12]
 8002f3e:	06d2      	lsls	r2, r2, #27
 8002f40:	4311      	orrs	r1, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6852      	ldr	r2, [r2, #4]
 8002f46:	3a01      	subs	r2, #1
 8002f48:	0112      	lsls	r2, r2, #4
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	492d      	ldr	r1, [pc, #180]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	614b      	str	r3, [r1, #20]
 8002f52:	e02d      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d115      	bne.n	8002f86 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	4b2b      	ldr	r3, [pc, #172]	; (800300c <RCCEx_PLLSAI2_Config+0x1e0>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6892      	ldr	r2, [r2, #8]
 8002f66:	0211      	lsls	r1, r2, #8
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6912      	ldr	r2, [r2, #16]
 8002f6c:	0852      	lsrs	r2, r2, #1
 8002f6e:	3a01      	subs	r2, #1
 8002f70:	0552      	lsls	r2, r2, #21
 8002f72:	4311      	orrs	r1, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6852      	ldr	r2, [r2, #4]
 8002f78:	3a01      	subs	r2, #1
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	4921      	ldr	r1, [pc, #132]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	614b      	str	r3, [r1, #20]
 8002f84:	e014      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f86:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	4b21      	ldr	r3, [pc, #132]	; (8003010 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6892      	ldr	r2, [r2, #8]
 8002f92:	0211      	lsls	r1, r2, #8
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6952      	ldr	r2, [r2, #20]
 8002f98:	0852      	lsrs	r2, r2, #1
 8002f9a:	3a01      	subs	r2, #1
 8002f9c:	0652      	lsls	r2, r2, #25
 8002f9e:	4311      	orrs	r1, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6852      	ldr	r2, [r2, #4]
 8002fa4:	3a01      	subs	r2, #1
 8002fa6:	0112      	lsls	r2, r2, #4
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	4916      	ldr	r1, [pc, #88]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fb0:	4b14      	ldr	r3, [pc, #80]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a13      	ldr	r2, [pc, #76]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbc:	f7fd ff4e 	bl	8000e5c <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fc2:	e009      	b.n	8002fd8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fc4:	f7fd ff4a 	bl	8000e5c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d902      	bls.n	8002fd8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fd6:	e005      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0ef      	beq.n	8002fc4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	4904      	ldr	r1, [pc, #16]	; (8003004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	07ff800f 	.word	0x07ff800f
 800300c:	ff9f800f 	.word	0xff9f800f
 8003010:	f9ff800f 	.word	0xf9ff800f

08003014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e042      	b.n	80030ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302c:	2b00      	cmp	r3, #0
 800302e:	d106      	bne.n	800303e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fd fcc9 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2224      	movs	r2, #36	; 0x24
 8003042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f998 	bl	800338c <UART_SetConfig>
 800305c:	4603      	mov	r3, r0
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e022      	b.n	80030ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fc88 	bl	8003984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fd0f 	bl	8003ac8 <UART_CheckIdleState>
 80030aa:	4603      	mov	r3, r0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	f040 8084 	bne.w	80031d8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_UART_Transmit+0x28>
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e07c      	b.n	80031da <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Transmit+0x3a>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e075      	b.n	80031da <HAL_UART_Transmit+0x126>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2221      	movs	r2, #33	; 0x21
 8003102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003106:	f7fd fea9 	bl	8000e5c <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	88fa      	ldrh	r2, [r7, #6]
 8003118:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003124:	d108      	bne.n	8003138 <HAL_UART_Transmit+0x84>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d104      	bne.n	8003138 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	e003      	b.n	8003140 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800313c:	2300      	movs	r3, #0
 800313e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003148:	e02d      	b.n	80031a6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2200      	movs	r2, #0
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fd02 	bl	8003b5e <UART_WaitOnFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e03a      	b.n	80031da <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10b      	bne.n	8003182 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	881a      	ldrh	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003176:	b292      	uxth	r2, r2
 8003178:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	3302      	adds	r3, #2
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	e008      	b.n	8003194 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	781a      	ldrb	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	b292      	uxth	r2, r2
 800318c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3301      	adds	r3, #1
 8003192:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1cb      	bne.n	800314a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	2140      	movs	r1, #64	; 0x40
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fcce 	bl	8003b5e <UART_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e006      	b.n	80031da <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	e000      	b.n	80031da <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
  }
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b08a      	sub	sp, #40	; 0x28
 80031e6:	af02      	add	r7, sp, #8
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4613      	mov	r3, r2
 80031f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	f040 80c1 	bne.w	8003380 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <HAL_UART_Receive+0x28>
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0b9      	b.n	8003382 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_UART_Receive+0x3a>
 8003218:	2302      	movs	r3, #2
 800321a:	e0b2      	b.n	8003382 <HAL_UART_Receive+0x1a0>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2222      	movs	r2, #34	; 0x22
 8003230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800323a:	f7fd fe0f 	bl	8000e5c <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	88fa      	ldrh	r2, [r7, #6]
 800324c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003258:	d10e      	bne.n	8003278 <HAL_UART_Receive+0x96>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <HAL_UART_Receive+0x8c>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003268:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800326c:	e02d      	b.n	80032ca <HAL_UART_Receive+0xe8>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	22ff      	movs	r2, #255	; 0xff
 8003272:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003276:	e028      	b.n	80032ca <HAL_UART_Receive+0xe8>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10d      	bne.n	800329c <HAL_UART_Receive+0xba>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d104      	bne.n	8003292 <HAL_UART_Receive+0xb0>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	22ff      	movs	r2, #255	; 0xff
 800328c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003290:	e01b      	b.n	80032ca <HAL_UART_Receive+0xe8>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	227f      	movs	r2, #127	; 0x7f
 8003296:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800329a:	e016      	b.n	80032ca <HAL_UART_Receive+0xe8>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032a4:	d10d      	bne.n	80032c2 <HAL_UART_Receive+0xe0>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d104      	bne.n	80032b8 <HAL_UART_Receive+0xd6>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	227f      	movs	r2, #127	; 0x7f
 80032b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80032b6:	e008      	b.n	80032ca <HAL_UART_Receive+0xe8>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	223f      	movs	r2, #63	; 0x3f
 80032bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80032c0:	e003      	b.n	80032ca <HAL_UART_Receive+0xe8>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80032d0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032da:	d108      	bne.n	80032ee <HAL_UART_Receive+0x10c>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	e003      	b.n	80032f6 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80032fe:	e033      	b.n	8003368 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2200      	movs	r2, #0
 8003308:	2120      	movs	r1, #32
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fc27 	bl	8003b5e <UART_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e033      	b.n	8003382 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10c      	bne.n	800333a <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003326:	b29a      	uxth	r2, r3
 8003328:	8a7b      	ldrh	r3, [r7, #18]
 800332a:	4013      	ands	r3, r2
 800332c:	b29a      	uxth	r2, r3
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	3302      	adds	r3, #2
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	e00d      	b.n	8003356 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003340:	b29b      	uxth	r3, r3
 8003342:	b2da      	uxtb	r2, r3
 8003344:	8a7b      	ldrh	r3, [r7, #18]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	4013      	ands	r3, r2
 800334a:	b2da      	uxtb	r2, r3
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3301      	adds	r3, #1
 8003354:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1c5      	bne.n	8003300 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003390:	b08c      	sub	sp, #48	; 0x30
 8003392:	af00      	add	r7, sp, #0
 8003394:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4baa      	ldr	r3, [pc, #680]	; (8003664 <UART_SetConfig+0x2d8>)
 80033bc:	4013      	ands	r3, r2
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a9f      	ldr	r2, [pc, #636]	; (8003668 <UART_SetConfig+0x2dc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f4:	4313      	orrs	r3, r2
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003402:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800340c:	430b      	orrs	r3, r1
 800340e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	f023 010f 	bic.w	r1, r3, #15
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a90      	ldr	r2, [pc, #576]	; (800366c <UART_SetConfig+0x2e0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d125      	bne.n	800347c <UART_SetConfig+0xf0>
 8003430:	4b8f      	ldr	r3, [pc, #572]	; (8003670 <UART_SetConfig+0x2e4>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b03      	cmp	r3, #3
 800343c:	d81a      	bhi.n	8003474 <UART_SetConfig+0xe8>
 800343e:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <UART_SetConfig+0xb8>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	08003455 	.word	0x08003455
 8003448:	08003465 	.word	0x08003465
 800344c:	0800345d 	.word	0x0800345d
 8003450:	0800346d 	.word	0x0800346d
 8003454:	2301      	movs	r3, #1
 8003456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800345a:	e116      	b.n	800368a <UART_SetConfig+0x2fe>
 800345c:	2302      	movs	r3, #2
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003462:	e112      	b.n	800368a <UART_SetConfig+0x2fe>
 8003464:	2304      	movs	r3, #4
 8003466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800346a:	e10e      	b.n	800368a <UART_SetConfig+0x2fe>
 800346c:	2308      	movs	r3, #8
 800346e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003472:	e10a      	b.n	800368a <UART_SetConfig+0x2fe>
 8003474:	2310      	movs	r3, #16
 8003476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800347a:	e106      	b.n	800368a <UART_SetConfig+0x2fe>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a7c      	ldr	r2, [pc, #496]	; (8003674 <UART_SetConfig+0x2e8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d138      	bne.n	80034f8 <UART_SetConfig+0x16c>
 8003486:	4b7a      	ldr	r3, [pc, #488]	; (8003670 <UART_SetConfig+0x2e4>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b0c      	cmp	r3, #12
 8003492:	d82d      	bhi.n	80034f0 <UART_SetConfig+0x164>
 8003494:	a201      	add	r2, pc, #4	; (adr r2, 800349c <UART_SetConfig+0x110>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034d1 	.word	0x080034d1
 80034a0:	080034f1 	.word	0x080034f1
 80034a4:	080034f1 	.word	0x080034f1
 80034a8:	080034f1 	.word	0x080034f1
 80034ac:	080034e1 	.word	0x080034e1
 80034b0:	080034f1 	.word	0x080034f1
 80034b4:	080034f1 	.word	0x080034f1
 80034b8:	080034f1 	.word	0x080034f1
 80034bc:	080034d9 	.word	0x080034d9
 80034c0:	080034f1 	.word	0x080034f1
 80034c4:	080034f1 	.word	0x080034f1
 80034c8:	080034f1 	.word	0x080034f1
 80034cc:	080034e9 	.word	0x080034e9
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034d6:	e0d8      	b.n	800368a <UART_SetConfig+0x2fe>
 80034d8:	2302      	movs	r3, #2
 80034da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034de:	e0d4      	b.n	800368a <UART_SetConfig+0x2fe>
 80034e0:	2304      	movs	r3, #4
 80034e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034e6:	e0d0      	b.n	800368a <UART_SetConfig+0x2fe>
 80034e8:	2308      	movs	r3, #8
 80034ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ee:	e0cc      	b.n	800368a <UART_SetConfig+0x2fe>
 80034f0:	2310      	movs	r3, #16
 80034f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f6:	e0c8      	b.n	800368a <UART_SetConfig+0x2fe>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a5e      	ldr	r2, [pc, #376]	; (8003678 <UART_SetConfig+0x2ec>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d125      	bne.n	800354e <UART_SetConfig+0x1c2>
 8003502:	4b5b      	ldr	r3, [pc, #364]	; (8003670 <UART_SetConfig+0x2e4>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800350c:	2b30      	cmp	r3, #48	; 0x30
 800350e:	d016      	beq.n	800353e <UART_SetConfig+0x1b2>
 8003510:	2b30      	cmp	r3, #48	; 0x30
 8003512:	d818      	bhi.n	8003546 <UART_SetConfig+0x1ba>
 8003514:	2b20      	cmp	r3, #32
 8003516:	d00a      	beq.n	800352e <UART_SetConfig+0x1a2>
 8003518:	2b20      	cmp	r3, #32
 800351a:	d814      	bhi.n	8003546 <UART_SetConfig+0x1ba>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <UART_SetConfig+0x19a>
 8003520:	2b10      	cmp	r3, #16
 8003522:	d008      	beq.n	8003536 <UART_SetConfig+0x1aa>
 8003524:	e00f      	b.n	8003546 <UART_SetConfig+0x1ba>
 8003526:	2300      	movs	r3, #0
 8003528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800352c:	e0ad      	b.n	800368a <UART_SetConfig+0x2fe>
 800352e:	2302      	movs	r3, #2
 8003530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003534:	e0a9      	b.n	800368a <UART_SetConfig+0x2fe>
 8003536:	2304      	movs	r3, #4
 8003538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800353c:	e0a5      	b.n	800368a <UART_SetConfig+0x2fe>
 800353e:	2308      	movs	r3, #8
 8003540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003544:	e0a1      	b.n	800368a <UART_SetConfig+0x2fe>
 8003546:	2310      	movs	r3, #16
 8003548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800354c:	e09d      	b.n	800368a <UART_SetConfig+0x2fe>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a4a      	ldr	r2, [pc, #296]	; (800367c <UART_SetConfig+0x2f0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d125      	bne.n	80035a4 <UART_SetConfig+0x218>
 8003558:	4b45      	ldr	r3, [pc, #276]	; (8003670 <UART_SetConfig+0x2e4>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003562:	2bc0      	cmp	r3, #192	; 0xc0
 8003564:	d016      	beq.n	8003594 <UART_SetConfig+0x208>
 8003566:	2bc0      	cmp	r3, #192	; 0xc0
 8003568:	d818      	bhi.n	800359c <UART_SetConfig+0x210>
 800356a:	2b80      	cmp	r3, #128	; 0x80
 800356c:	d00a      	beq.n	8003584 <UART_SetConfig+0x1f8>
 800356e:	2b80      	cmp	r3, #128	; 0x80
 8003570:	d814      	bhi.n	800359c <UART_SetConfig+0x210>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <UART_SetConfig+0x1f0>
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	d008      	beq.n	800358c <UART_SetConfig+0x200>
 800357a:	e00f      	b.n	800359c <UART_SetConfig+0x210>
 800357c:	2300      	movs	r3, #0
 800357e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003582:	e082      	b.n	800368a <UART_SetConfig+0x2fe>
 8003584:	2302      	movs	r3, #2
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800358a:	e07e      	b.n	800368a <UART_SetConfig+0x2fe>
 800358c:	2304      	movs	r3, #4
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003592:	e07a      	b.n	800368a <UART_SetConfig+0x2fe>
 8003594:	2308      	movs	r3, #8
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800359a:	e076      	b.n	800368a <UART_SetConfig+0x2fe>
 800359c:	2310      	movs	r3, #16
 800359e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035a2:	e072      	b.n	800368a <UART_SetConfig+0x2fe>
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a35      	ldr	r2, [pc, #212]	; (8003680 <UART_SetConfig+0x2f4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d12a      	bne.n	8003604 <UART_SetConfig+0x278>
 80035ae:	4b30      	ldr	r3, [pc, #192]	; (8003670 <UART_SetConfig+0x2e4>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035bc:	d01a      	beq.n	80035f4 <UART_SetConfig+0x268>
 80035be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035c2:	d81b      	bhi.n	80035fc <UART_SetConfig+0x270>
 80035c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c8:	d00c      	beq.n	80035e4 <UART_SetConfig+0x258>
 80035ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ce:	d815      	bhi.n	80035fc <UART_SetConfig+0x270>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <UART_SetConfig+0x250>
 80035d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d8:	d008      	beq.n	80035ec <UART_SetConfig+0x260>
 80035da:	e00f      	b.n	80035fc <UART_SetConfig+0x270>
 80035dc:	2300      	movs	r3, #0
 80035de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035e2:	e052      	b.n	800368a <UART_SetConfig+0x2fe>
 80035e4:	2302      	movs	r3, #2
 80035e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ea:	e04e      	b.n	800368a <UART_SetConfig+0x2fe>
 80035ec:	2304      	movs	r3, #4
 80035ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035f2:	e04a      	b.n	800368a <UART_SetConfig+0x2fe>
 80035f4:	2308      	movs	r3, #8
 80035f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035fa:	e046      	b.n	800368a <UART_SetConfig+0x2fe>
 80035fc:	2310      	movs	r3, #16
 80035fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003602:	e042      	b.n	800368a <UART_SetConfig+0x2fe>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a17      	ldr	r2, [pc, #92]	; (8003668 <UART_SetConfig+0x2dc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d13a      	bne.n	8003684 <UART_SetConfig+0x2f8>
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <UART_SetConfig+0x2e4>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003618:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800361c:	d01a      	beq.n	8003654 <UART_SetConfig+0x2c8>
 800361e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003622:	d81b      	bhi.n	800365c <UART_SetConfig+0x2d0>
 8003624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003628:	d00c      	beq.n	8003644 <UART_SetConfig+0x2b8>
 800362a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800362e:	d815      	bhi.n	800365c <UART_SetConfig+0x2d0>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <UART_SetConfig+0x2b0>
 8003634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003638:	d008      	beq.n	800364c <UART_SetConfig+0x2c0>
 800363a:	e00f      	b.n	800365c <UART_SetConfig+0x2d0>
 800363c:	2300      	movs	r3, #0
 800363e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003642:	e022      	b.n	800368a <UART_SetConfig+0x2fe>
 8003644:	2302      	movs	r3, #2
 8003646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800364a:	e01e      	b.n	800368a <UART_SetConfig+0x2fe>
 800364c:	2304      	movs	r3, #4
 800364e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003652:	e01a      	b.n	800368a <UART_SetConfig+0x2fe>
 8003654:	2308      	movs	r3, #8
 8003656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800365a:	e016      	b.n	800368a <UART_SetConfig+0x2fe>
 800365c:	2310      	movs	r3, #16
 800365e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003662:	e012      	b.n	800368a <UART_SetConfig+0x2fe>
 8003664:	cfff69f3 	.word	0xcfff69f3
 8003668:	40008000 	.word	0x40008000
 800366c:	40013800 	.word	0x40013800
 8003670:	40021000 	.word	0x40021000
 8003674:	40004400 	.word	0x40004400
 8003678:	40004800 	.word	0x40004800
 800367c:	40004c00 	.word	0x40004c00
 8003680:	40005000 	.word	0x40005000
 8003684:	2310      	movs	r3, #16
 8003686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4aae      	ldr	r2, [pc, #696]	; (8003948 <UART_SetConfig+0x5bc>)
 8003690:	4293      	cmp	r3, r2
 8003692:	f040 8097 	bne.w	80037c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003696:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800369a:	2b08      	cmp	r3, #8
 800369c:	d823      	bhi.n	80036e6 <UART_SetConfig+0x35a>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x318>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036e7 	.word	0x080036e7
 80036ac:	080036d1 	.word	0x080036d1
 80036b0:	080036e7 	.word	0x080036e7
 80036b4:	080036d7 	.word	0x080036d7
 80036b8:	080036e7 	.word	0x080036e7
 80036bc:	080036e7 	.word	0x080036e7
 80036c0:	080036e7 	.word	0x080036e7
 80036c4:	080036df 	.word	0x080036df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c8:	f7fe fea0 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 80036cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036ce:	e010      	b.n	80036f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d0:	4b9e      	ldr	r3, [pc, #632]	; (800394c <UART_SetConfig+0x5c0>)
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036d4:	e00d      	b.n	80036f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d6:	f7fe fe01 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 80036da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036dc:	e009      	b.n	80036f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036e4:	e005      	b.n	80036f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8130 	beq.w	800395a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	4a94      	ldr	r2, [pc, #592]	; (8003950 <UART_SetConfig+0x5c4>)
 8003700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003704:	461a      	mov	r2, r3
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	fbb3 f3f2 	udiv	r3, r3, r2
 800370c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4413      	add	r3, r2
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	429a      	cmp	r2, r3
 800371c:	d305      	bcc.n	800372a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	429a      	cmp	r2, r3
 8003728:	d903      	bls.n	8003732 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003730:	e113      	b.n	800395a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	2200      	movs	r2, #0
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	60fa      	str	r2, [r7, #12]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	4a84      	ldr	r2, [pc, #528]	; (8003950 <UART_SetConfig+0x5c4>)
 8003740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003744:	b29b      	uxth	r3, r3
 8003746:	2200      	movs	r2, #0
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003750:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003754:	f7fc fd52 	bl	80001fc <__aeabi_uldivmod>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	020b      	lsls	r3, r1, #8
 800376a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800376e:	0202      	lsls	r2, r0, #8
 8003770:	6979      	ldr	r1, [r7, #20]
 8003772:	6849      	ldr	r1, [r1, #4]
 8003774:	0849      	lsrs	r1, r1, #1
 8003776:	2000      	movs	r0, #0
 8003778:	460c      	mov	r4, r1
 800377a:	4605      	mov	r5, r0
 800377c:	eb12 0804 	adds.w	r8, r2, r4
 8003780:	eb43 0905 	adc.w	r9, r3, r5
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	469a      	mov	sl, r3
 800378c:	4693      	mov	fp, r2
 800378e:	4652      	mov	r2, sl
 8003790:	465b      	mov	r3, fp
 8003792:	4640      	mov	r0, r8
 8003794:	4649      	mov	r1, r9
 8003796:	f7fc fd31 	bl	80001fc <__aeabi_uldivmod>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4613      	mov	r3, r2
 80037a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037a8:	d308      	bcc.n	80037bc <UART_SetConfig+0x430>
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b0:	d204      	bcs.n	80037bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a3a      	ldr	r2, [r7, #32]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	e0ce      	b.n	800395a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037c2:	e0ca      	b.n	800395a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037cc:	d166      	bne.n	800389c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80037ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d827      	bhi.n	8003826 <UART_SetConfig+0x49a>
 80037d6:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <UART_SetConfig+0x450>)
 80037d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037dc:	08003801 	.word	0x08003801
 80037e0:	08003809 	.word	0x08003809
 80037e4:	08003811 	.word	0x08003811
 80037e8:	08003827 	.word	0x08003827
 80037ec:	08003817 	.word	0x08003817
 80037f0:	08003827 	.word	0x08003827
 80037f4:	08003827 	.word	0x08003827
 80037f8:	08003827 	.word	0x08003827
 80037fc:	0800381f 	.word	0x0800381f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003800:	f7fe fe04 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 8003804:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003806:	e014      	b.n	8003832 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003808:	f7fe fe16 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 800380c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800380e:	e010      	b.n	8003832 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003810:	4b4e      	ldr	r3, [pc, #312]	; (800394c <UART_SetConfig+0x5c0>)
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003814:	e00d      	b.n	8003832 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003816:	f7fe fd61 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800381a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800381c:	e009      	b.n	8003832 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003824:	e005      	b.n	8003832 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003830:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8090 	beq.w	800395a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	4a44      	ldr	r2, [pc, #272]	; (8003950 <UART_SetConfig+0x5c4>)
 8003840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003844:	461a      	mov	r2, r3
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	fbb3 f3f2 	udiv	r3, r3, r2
 800384c:	005a      	lsls	r2, r3, #1
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	441a      	add	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	fbb2 f3f3 	udiv	r3, r2, r3
 800385e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	2b0f      	cmp	r3, #15
 8003864:	d916      	bls.n	8003894 <UART_SetConfig+0x508>
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386c:	d212      	bcs.n	8003894 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	b29b      	uxth	r3, r3
 8003872:	f023 030f 	bic.w	r3, r3, #15
 8003876:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	b29b      	uxth	r3, r3
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	b29a      	uxth	r2, r3
 8003884:	8bfb      	ldrh	r3, [r7, #30]
 8003886:	4313      	orrs	r3, r2
 8003888:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	8bfa      	ldrh	r2, [r7, #30]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	e062      	b.n	800395a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800389a:	e05e      	b.n	800395a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800389c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d828      	bhi.n	80038f6 <UART_SetConfig+0x56a>
 80038a4:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <UART_SetConfig+0x520>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038d1 	.word	0x080038d1
 80038b0:	080038d9 	.word	0x080038d9
 80038b4:	080038e1 	.word	0x080038e1
 80038b8:	080038f7 	.word	0x080038f7
 80038bc:	080038e7 	.word	0x080038e7
 80038c0:	080038f7 	.word	0x080038f7
 80038c4:	080038f7 	.word	0x080038f7
 80038c8:	080038f7 	.word	0x080038f7
 80038cc:	080038ef 	.word	0x080038ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d0:	f7fe fd9c 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 80038d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038d6:	e014      	b.n	8003902 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038d8:	f7fe fdae 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 80038dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038de:	e010      	b.n	8003902 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <UART_SetConfig+0x5c0>)
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038e4:	e00d      	b.n	8003902 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038e6:	f7fe fcf9 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 80038ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038ec:	e009      	b.n	8003902 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038f4:	e005      	b.n	8003902 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003900:	bf00      	nop
    }

    if (pclk != 0U)
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	2b00      	cmp	r3, #0
 8003906:	d028      	beq.n	800395a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	4a10      	ldr	r2, [pc, #64]	; (8003950 <UART_SetConfig+0x5c4>)
 800390e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003912:	461a      	mov	r2, r3
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	fbb3 f2f2 	udiv	r2, r3, r2
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	441a      	add	r2, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	2b0f      	cmp	r3, #15
 8003930:	d910      	bls.n	8003954 <UART_SetConfig+0x5c8>
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003938:	d20c      	bcs.n	8003954 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	b29a      	uxth	r2, r3
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60da      	str	r2, [r3, #12]
 8003944:	e009      	b.n	800395a <UART_SetConfig+0x5ce>
 8003946:	bf00      	nop
 8003948:	40008000 	.word	0x40008000
 800394c:	00f42400 	.word	0x00f42400
 8003950:	08004520 	.word	0x08004520
      }
      else
      {
        ret = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2201      	movs	r2, #1
 800395e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2201      	movs	r2, #1
 8003966:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2200      	movs	r2, #0
 8003974:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003976:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800397a:	4618      	mov	r0, r3
 800397c:	3730      	adds	r7, #48	; 0x30
 800397e:	46bd      	mov	sp, r7
 8003980:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01a      	beq.n	8003a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a82:	d10a      	bne.n	8003a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]
  }
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ad8:	f7fd f9c0 	bl	8000e5c <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d10e      	bne.n	8003b0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f82f 	bl	8003b5e <UART_WaitOnFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e025      	b.n	8003b56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d10e      	bne.n	8003b36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f819 	bl	8003b5e <UART_WaitOnFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e00f      	b.n	8003b56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b09c      	sub	sp, #112	; 0x70
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6e:	e0a9      	b.n	8003cc4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b76:	f000 80a5 	beq.w	8003cc4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7a:	f7fd f96f 	bl	8000e5c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d302      	bcc.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d140      	bne.n	8003c12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ba4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bb0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e6      	bne.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	663b      	str	r3, [r7, #96]	; 0x60
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3308      	adds	r3, #8
 8003be0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003be2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003be4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e5      	bne.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e069      	b.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d051      	beq.n	8003cc4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2e:	d149      	bne.n	8003cc4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c58:	637b      	str	r3, [r7, #52]	; 0x34
 8003c5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e6      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3308      	adds	r3, #8
 8003c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c8c:	623a      	str	r2, [r7, #32]
 8003c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	69f9      	ldr	r1, [r7, #28]
 8003c92:	6a3a      	ldr	r2, [r7, #32]
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e5      	bne.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e010      	b.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69da      	ldr	r2, [r3, #28]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	f43f af46 	beq.w	8003b70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3770      	adds	r7, #112	; 0x70
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_UARTEx_DisableFifoMode+0x16>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e027      	b.n	8003d54 <HAL_UARTEx_DisableFifoMode+0x66>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2224      	movs	r2, #36	; 0x24
 8003d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e02d      	b.n	8003dd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2224      	movs	r2, #36	; 0x24
 8003d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f84f 	bl	8003e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e02d      	b.n	8003e50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2224      	movs	r2, #36	; 0x24
 8003e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f811 	bl	8003e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d108      	bne.n	8003e7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e78:	e031      	b.n	8003ede <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e7e:	2308      	movs	r3, #8
 8003e80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	0e5b      	lsrs	r3, r3, #25
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	0f5b      	lsrs	r3, r3, #29
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ea2:	7bbb      	ldrb	r3, [r7, #14]
 8003ea4:	7b3a      	ldrb	r2, [r7, #12]
 8003ea6:	4911      	ldr	r1, [pc, #68]	; (8003eec <UARTEx_SetNbDataToProcess+0x94>)
 8003ea8:	5c8a      	ldrb	r2, [r1, r2]
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003eae:	7b3a      	ldrb	r2, [r7, #12]
 8003eb0:	490f      	ldr	r1, [pc, #60]	; (8003ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8003eb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003eb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	7b7a      	ldrb	r2, [r7, #13]
 8003ec4:	4909      	ldr	r1, [pc, #36]	; (8003eec <UARTEx_SetNbDataToProcess+0x94>)
 8003ec6:	5c8a      	ldrb	r2, [r1, r2]
 8003ec8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ecc:	7b7a      	ldrb	r2, [r7, #13]
 8003ece:	4908      	ldr	r1, [pc, #32]	; (8003ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8003ed0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ed2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	08004538 	.word	0x08004538
 8003ef0:	08004540 	.word	0x08004540

08003ef4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	f107 001c 	add.w	r0, r7, #28
 8003f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa70 	bl	80043f8 <USB_CoreReset>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
 8003f2e:	e005      	b.n	8003f3c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f48:	b004      	add	sp, #16
 8003f4a:	4770      	bx	lr

08003f4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f023 0201 	bic.w	r2, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	460b      	mov	r3, r1
 8003f78:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d115      	bne.n	8003fbc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f7fc ff69 	bl	8000e74 <HAL_Delay>
      ms++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 fa17 	bl	80043dc <USB_GetMode>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d01e      	beq.n	8003ff2 <USB_SetCurrentMode+0x84>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b31      	cmp	r3, #49	; 0x31
 8003fb8:	d9f0      	bls.n	8003f9c <USB_SetCurrentMode+0x2e>
 8003fba:	e01a      	b.n	8003ff2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d115      	bne.n	8003fee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fce:	2001      	movs	r0, #1
 8003fd0:	f7fc ff50 	bl	8000e74 <HAL_Delay>
      ms++;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f9fe 	bl	80043dc <USB_GetMode>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <USB_SetCurrentMode+0x84>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b31      	cmp	r3, #49	; 0x31
 8003fea:	d9f0      	bls.n	8003fce <USB_SetCurrentMode+0x60>
 8003fec:	e001      	b.n	8003ff2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e005      	b.n	8003ffe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b32      	cmp	r3, #50	; 0x32
 8003ff6:	d101      	bne.n	8003ffc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004008:	b084      	sub	sp, #16
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	e009      	b.n	800403c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	3340      	adds	r3, #64	; 0x40
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	2200      	movs	r2, #0
 8004034:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	3301      	adds	r3, #1
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b0e      	cmp	r3, #14
 8004040:	d9f2      	bls.n	8004028 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004044:	2b00      	cmp	r3, #0
 8004046:	d11c      	bne.n	8004082 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004056:	f043 0302 	orr.w	r3, r3, #2
 800405a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e005      	b.n	800408e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004094:	461a      	mov	r2, r3
 8004096:	2300      	movs	r3, #0
 8004098:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a0:	4619      	mov	r1, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a8:	461a      	mov	r2, r3
 80040aa:	680b      	ldr	r3, [r1, #0]
 80040ac:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040ae:	2103      	movs	r1, #3
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f959 	bl	8004368 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040b6:	2110      	movs	r1, #16
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f8f1 	bl	80042a0 <USB_FlushTxFifo>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f91d 	bl	8004308 <USB_FlushRxFifo>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040de:	461a      	mov	r2, r3
 80040e0:	2300      	movs	r3, #0
 80040e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ea:	461a      	mov	r2, r3
 80040ec:	2300      	movs	r3, #0
 80040ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f6:	461a      	mov	r2, r3
 80040f8:	2300      	movs	r3, #0
 80040fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	e043      	b.n	800418a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004118:	d118      	bne.n	800414c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412c:	461a      	mov	r2, r3
 800412e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	e013      	b.n	800415e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004142:	461a      	mov	r2, r3
 8004144:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e008      	b.n	800415e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004158:	461a      	mov	r2, r3
 800415a:	2300      	movs	r3, #0
 800415c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416a:	461a      	mov	r2, r3
 800416c:	2300      	movs	r3, #0
 800416e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417c:	461a      	mov	r2, r3
 800417e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004182:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	3301      	adds	r3, #1
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	429a      	cmp	r2, r3
 8004190:	d3b7      	bcc.n	8004102 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	e043      	b.n	8004220 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041ae:	d118      	bne.n	80041e2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10a      	bne.n	80041cc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	461a      	mov	r2, r3
 80041c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	e013      	b.n	80041f4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d8:	461a      	mov	r2, r3
 80041da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	e008      	b.n	80041f4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ee:	461a      	mov	r2, r3
 80041f0:	2300      	movs	r3, #0
 80041f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004200:	461a      	mov	r2, r3
 8004202:	2300      	movs	r3, #0
 8004204:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	461a      	mov	r2, r3
 8004214:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004218:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	3301      	adds	r3, #1
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	429a      	cmp	r2, r3
 8004226:	d3b7      	bcc.n	8004198 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800423a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004248:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f043 0210 	orr.w	r2, r3, #16
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <USB_DevInit+0x294>)
 800425c:	4313      	orrs	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f043 0208 	orr.w	r2, r3, #8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004276:	2b01      	cmp	r3, #1
 8004278:	d107      	bne.n	800428a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800428a:	7dfb      	ldrb	r3, [r7, #23]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004296:	b004      	add	sp, #16
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	803c3800 	.word	0x803c3800

080042a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3301      	adds	r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a13      	ldr	r2, [pc, #76]	; (8004304 <USB_FlushTxFifo+0x64>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e01b      	b.n	80042f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	daf2      	bge.n	80042ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	019b      	lsls	r3, r3, #6
 80042d0:	f043 0220 	orr.w	r2, r3, #32
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3301      	adds	r3, #1
 80042dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4a08      	ldr	r2, [pc, #32]	; (8004304 <USB_FlushTxFifo+0x64>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e006      	b.n	80042f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d0f0      	beq.n	80042d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	00030d40 	.word	0x00030d40

08004308 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3301      	adds	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4a11      	ldr	r2, [pc, #68]	; (8004364 <USB_FlushRxFifo+0x5c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e018      	b.n	8004358 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	daf2      	bge.n	8004314 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2210      	movs	r2, #16
 8004336:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a08      	ldr	r2, [pc, #32]	; (8004364 <USB_FlushRxFifo+0x5c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e006      	b.n	8004358 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b10      	cmp	r3, #16
 8004354:	d0f0      	beq.n	8004338 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	00030d40 	.word	0x00030d40

08004368 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	68f9      	ldr	r1, [r7, #12]
 8004384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004388:	4313      	orrs	r3, r2
 800438a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043b4:	f023 0303 	bic.w	r3, r3, #3
 80043b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c8:	f043 0302 	orr.w	r3, r3, #2
 80043cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	f003 0301 	and.w	r3, r3, #1
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3301      	adds	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4a13      	ldr	r2, [pc, #76]	; (800445c <USB_CoreReset+0x64>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e01b      	b.n	800444e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	daf2      	bge.n	8004404 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f043 0201 	orr.w	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3301      	adds	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4a09      	ldr	r2, [pc, #36]	; (800445c <USB_CoreReset+0x64>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e006      	b.n	800444e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b01      	cmp	r3, #1
 800444a:	d0f0      	beq.n	800442e <USB_CoreReset+0x36>

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	00030d40 	.word	0x00030d40

08004460 <__libc_init_array>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	4d0d      	ldr	r5, [pc, #52]	; (8004498 <__libc_init_array+0x38>)
 8004464:	4c0d      	ldr	r4, [pc, #52]	; (800449c <__libc_init_array+0x3c>)
 8004466:	1b64      	subs	r4, r4, r5
 8004468:	10a4      	asrs	r4, r4, #2
 800446a:	2600      	movs	r6, #0
 800446c:	42a6      	cmp	r6, r4
 800446e:	d109      	bne.n	8004484 <__libc_init_array+0x24>
 8004470:	4d0b      	ldr	r5, [pc, #44]	; (80044a0 <__libc_init_array+0x40>)
 8004472:	4c0c      	ldr	r4, [pc, #48]	; (80044a4 <__libc_init_array+0x44>)
 8004474:	f000 f820 	bl	80044b8 <_init>
 8004478:	1b64      	subs	r4, r4, r5
 800447a:	10a4      	asrs	r4, r4, #2
 800447c:	2600      	movs	r6, #0
 800447e:	42a6      	cmp	r6, r4
 8004480:	d105      	bne.n	800448e <__libc_init_array+0x2e>
 8004482:	bd70      	pop	{r4, r5, r6, pc}
 8004484:	f855 3b04 	ldr.w	r3, [r5], #4
 8004488:	4798      	blx	r3
 800448a:	3601      	adds	r6, #1
 800448c:	e7ee      	b.n	800446c <__libc_init_array+0xc>
 800448e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004492:	4798      	blx	r3
 8004494:	3601      	adds	r6, #1
 8004496:	e7f2      	b.n	800447e <__libc_init_array+0x1e>
 8004498:	08004550 	.word	0x08004550
 800449c:	08004550 	.word	0x08004550
 80044a0:	08004550 	.word	0x08004550
 80044a4:	08004554 	.word	0x08004554

080044a8 <memset>:
 80044a8:	4402      	add	r2, r0
 80044aa:	4603      	mov	r3, r0
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d100      	bne.n	80044b2 <memset+0xa>
 80044b0:	4770      	bx	lr
 80044b2:	f803 1b01 	strb.w	r1, [r3], #1
 80044b6:	e7f9      	b.n	80044ac <memset+0x4>

080044b8 <_init>:
 80044b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ba:	bf00      	nop
 80044bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044be:	bc08      	pop	{r3}
 80044c0:	469e      	mov	lr, r3
 80044c2:	4770      	bx	lr

080044c4 <_fini>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	bf00      	nop
 80044c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ca:	bc08      	pop	{r3}
 80044cc:	469e      	mov	lr, r3
 80044ce:	4770      	bx	lr
