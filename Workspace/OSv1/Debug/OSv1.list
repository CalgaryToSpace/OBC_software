
OSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08008198  08008198  00018198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800832c  0800832c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800832c  0800832c  0001832c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008334  08008334  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008334  08008334  00018334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008338  08008338  00018338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800833c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff0  20000010  0800834c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002000  0800834c  00022000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000275d2  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000484c  00000000  00000000  00047612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  0004be60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b00  00000000  00000000  0004db58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000595a  00000000  00000000  0004f658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000217f1  00000000  00000000  00054fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118090  00000000  00000000  000767a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018e833  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a5c  00000000  00000000  0018e888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008180 	.word	0x08008180

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08008180 	.word	0x08008180

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96e 	b.w	80004f4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468c      	mov	ip, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 8083 	bne.w	8000346 <__udivmoddi4+0x116>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d947      	bls.n	80002d6 <__udivmoddi4+0xa6>
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	b142      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024c:	f1c2 0020 	rsb	r0, r2, #32
 8000250:	fa24 f000 	lsr.w	r0, r4, r0
 8000254:	4091      	lsls	r1, r2
 8000256:	4097      	lsls	r7, r2
 8000258:	ea40 0c01 	orr.w	ip, r0, r1
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbbc f6f8 	udiv	r6, ip, r8
 8000268:	fa1f fe87 	uxth.w	lr, r7
 800026c:	fb08 c116 	mls	r1, r8, r6, ip
 8000270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000274:	fb06 f10e 	mul.w	r1, r6, lr
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 8119 	bcs.w	80004b8 <__udivmoddi4+0x288>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8116 	bls.w	80004b8 <__udivmoddi4+0x288>
 800028c:	3e02      	subs	r6, #2
 800028e:	443b      	add	r3, r7
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a4:	45a6      	cmp	lr, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8105 	bcs.w	80004bc <__udivmoddi4+0x28c>
 80002b2:	45a6      	cmp	lr, r4
 80002b4:	f240 8102 	bls.w	80004bc <__udivmoddi4+0x28c>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c0:	eba4 040e 	sub.w	r4, r4, lr
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xaa>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d150      	bne.n	8000384 <__udivmoddi4+0x154>
 80002e2:	1bcb      	subs	r3, r1, r7
 80002e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e8:	fa1f f887 	uxth.w	r8, r7
 80002ec:	2601      	movs	r6, #1
 80002ee:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f2:	0c21      	lsrs	r1, r4, #16
 80002f4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002fc:	fb08 f30c 	mul.w	r3, r8, ip
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000304:	1879      	adds	r1, r7, r1
 8000306:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0xe2>
 800030c:	428b      	cmp	r3, r1
 800030e:	f200 80e9 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 8000312:	4684      	mov	ip, r0
 8000314:	1ac9      	subs	r1, r1, r3
 8000316:	b2a3      	uxth	r3, r4
 8000318:	fbb1 f0fe 	udiv	r0, r1, lr
 800031c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	fb08 f800 	mul.w	r8, r8, r0
 8000328:	45a0      	cmp	r8, r4
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x10c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x10a>
 8000334:	45a0      	cmp	r8, r4
 8000336:	f200 80d9 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 800033a:	4618      	mov	r0, r3
 800033c:	eba4 0408 	sub.w	r4, r4, r8
 8000340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000344:	e7bf      	b.n	80002c6 <__udivmoddi4+0x96>
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x12e>
 800034a:	2d00      	cmp	r5, #0
 800034c:	f000 80b1 	beq.w	80004b2 <__udivmoddi4+0x282>
 8000350:	2600      	movs	r6, #0
 8000352:	e9c5 0100 	strd	r0, r1, [r5]
 8000356:	4630      	mov	r0, r6
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f683 	clz	r6, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d14a      	bne.n	80003fc <__udivmoddi4+0x1cc>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0x140>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80b8 	bhi.w	80004e0 <__udivmoddi4+0x2b0>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0103 	sbc.w	r1, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	468c      	mov	ip, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0a8      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800037e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000384:	f1c2 0320 	rsb	r3, r2, #32
 8000388:	fa20 f603 	lsr.w	r6, r0, r3
 800038c:	4097      	lsls	r7, r2
 800038e:	fa01 f002 	lsl.w	r0, r1, r2
 8000392:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000396:	40d9      	lsrs	r1, r3
 8000398:	4330      	orrs	r0, r6
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f108 	mul.w	r1, r6, r8
 80003b0:	4299      	cmp	r1, r3
 80003b2:	fa04 f402 	lsl.w	r4, r4, r2
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x19c>
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80003be:	f080 808d 	bcs.w	80004dc <__udivmoddi4+0x2ac>
 80003c2:	4299      	cmp	r1, r3
 80003c4:	f240 808a 	bls.w	80004dc <__udivmoddi4+0x2ac>
 80003c8:	3e02      	subs	r6, #2
 80003ca:	443b      	add	r3, r7
 80003cc:	1a5b      	subs	r3, r3, r1
 80003ce:	b281      	uxth	r1, r0
 80003d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb00 f308 	mul.w	r3, r0, r8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x1c4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ea:	d273      	bcs.n	80004d4 <__udivmoddi4+0x2a4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d971      	bls.n	80004d4 <__udivmoddi4+0x2a4>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4439      	add	r1, r7
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fa:	e778      	b.n	80002ee <__udivmoddi4+0xbe>
 80003fc:	f1c6 0c20 	rsb	ip, r6, #32
 8000400:	fa03 f406 	lsl.w	r4, r3, r6
 8000404:	fa22 f30c 	lsr.w	r3, r2, ip
 8000408:	431c      	orrs	r4, r3
 800040a:	fa20 f70c 	lsr.w	r7, r0, ip
 800040e:	fa01 f306 	lsl.w	r3, r1, r6
 8000412:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000416:	fa21 f10c 	lsr.w	r1, r1, ip
 800041a:	431f      	orrs	r7, r3
 800041c:	0c3b      	lsrs	r3, r7, #16
 800041e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000422:	fa1f f884 	uxth.w	r8, r4
 8000426:	fb0e 1119 	mls	r1, lr, r9, r1
 800042a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042e:	fb09 fa08 	mul.w	sl, r9, r8
 8000432:	458a      	cmp	sl, r1
 8000434:	fa02 f206 	lsl.w	r2, r2, r6
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x220>
 800043e:	1861      	adds	r1, r4, r1
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	d248      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 8000446:	458a      	cmp	sl, r1
 8000448:	d946      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4421      	add	r1, r4
 8000450:	eba1 010a 	sub.w	r1, r1, sl
 8000454:	b2bf      	uxth	r7, r7
 8000456:	fbb1 f0fe 	udiv	r0, r1, lr
 800045a:	fb0e 1110 	mls	r1, lr, r0, r1
 800045e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45b8      	cmp	r8, r7
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x24a>
 800046a:	19e7      	adds	r7, r4, r7
 800046c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000470:	d22e      	bcs.n	80004d0 <__udivmoddi4+0x2a0>
 8000472:	45b8      	cmp	r8, r7
 8000474:	d92c      	bls.n	80004d0 <__udivmoddi4+0x2a0>
 8000476:	3802      	subs	r0, #2
 8000478:	4427      	add	r7, r4
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba7 0708 	sub.w	r7, r7, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454f      	cmp	r7, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	4649      	mov	r1, r9
 800048c:	d31a      	bcc.n	80004c4 <__udivmoddi4+0x294>
 800048e:	d017      	beq.n	80004c0 <__udivmoddi4+0x290>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x27a>
 8000492:	ebb3 020e 	subs.w	r2, r3, lr
 8000496:	eb67 0701 	sbc.w	r7, r7, r1
 800049a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049e:	40f2      	lsrs	r2, r6
 80004a0:	ea4c 0202 	orr.w	r2, ip, r2
 80004a4:	40f7      	lsrs	r7, r6
 80004a6:	e9c5 2700 	strd	r2, r7, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e70b      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e9      	b.n	8000290 <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fd      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c0:	4543      	cmp	r3, r8
 80004c2:	d2e5      	bcs.n	8000490 <__udivmoddi4+0x260>
 80004c4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c8:	eb69 0104 	sbc.w	r1, r9, r4
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7df      	b.n	8000490 <__udivmoddi4+0x260>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e7d2      	b.n	800047a <__udivmoddi4+0x24a>
 80004d4:	4660      	mov	r0, ip
 80004d6:	e78d      	b.n	80003f4 <__udivmoddi4+0x1c4>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7b9      	b.n	8000450 <__udivmoddi4+0x220>
 80004dc:	4666      	mov	r6, ip
 80004de:	e775      	b.n	80003cc <__udivmoddi4+0x19c>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e74a      	b.n	800037a <__udivmoddi4+0x14a>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	4439      	add	r1, r7
 80004ea:	e713      	b.n	8000314 <__udivmoddi4+0xe4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	e724      	b.n	800033c <__udivmoddi4+0x10c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b0a7      	sub	sp, #156	; 0x9c
 80004fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fefc 	bl	80012fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 fc3d 	bl	8000d80 <SystemClock_Config>
  startUart();
 8000506:	f000 fc21 	bl	8000d4c <startUart>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800050a:	f005 f84b 	bl	80055a4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueHandle_t xQueue = xQueueCreate(5, sizeof(Data_t));
 800050e:	2200      	movs	r2, #0
 8000510:	2102      	movs	r1, #2
 8000512:	2005      	movs	r0, #5
 8000514:	f005 fb1e 	bl	8005b54 <xQueueGenericCreate>
 8000518:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

  /* USER CODE BEGIN RTOS_THREADS */

  //QueueHandle_t xQueue = xQueueCreate(5, sizeof(Data_t));

  DataSend_t mpiData = {xQueue, (xStructsToSend[0])};
 800051c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000524:	4b47      	ldr	r3, [pc, #284]	; (8000644 <main+0x14c>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
  DataSend_t cameraData = {xQueue, (xStructsToSend[1])};
 800052c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000530:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000532:	4b44      	ldr	r3, [pc, #272]	; (8000644 <main+0x14c>)
 8000534:	885b      	ldrh	r3, [r3, #2]
 8000536:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
  DataSend_t gpsData = {xQueue, (xStructsToSend[2])};
 800053a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800053e:	677b      	str	r3, [r7, #116]	; 0x74
 8000540:	4b40      	ldr	r3, [pc, #256]	; (8000644 <main+0x14c>)
 8000542:	889b      	ldrh	r3, [r3, #4]
 8000544:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

  struct threadInfo running[6];
  running[0] = startThread(StartTest1, osPriorityLow, "ThreadOne", NULL, 8*128);
 8000548:	4638      	mov	r0, r7
 800054a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054e:	9301      	str	r3, [sp, #4]
 8000550:	2300      	movs	r3, #0
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	4b3c      	ldr	r3, [pc, #240]	; (8000648 <main+0x150>)
 8000556:	2208      	movs	r2, #8
 8000558:	493c      	ldr	r1, [pc, #240]	; (800064c <main+0x154>)
 800055a:	f000 fb7f 	bl	8000c5c <startThread>
 800055e:	f107 0414 	add.w	r4, r7, #20
 8000562:	463b      	mov	r3, r7
 8000564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  running[1] = startThread(StartTest2, osPriorityHigh, "ThreadTwo", NULL, 8*128);
 800056a:	4638      	mov	r0, r7
 800056c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2300      	movs	r3, #0
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	4b36      	ldr	r3, [pc, #216]	; (8000650 <main+0x158>)
 8000578:	2228      	movs	r2, #40	; 0x28
 800057a:	4936      	ldr	r1, [pc, #216]	; (8000654 <main+0x15c>)
 800057c:	f000 fb6e 	bl	8000c5c <startThread>
 8000580:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000584:	463b      	mov	r3, r7
 8000586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if(xQueue != NULL) {
 800058c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000590:	2b00      	cmp	r3, #0
 8000592:	d048      	beq.n	8000626 <main+0x12e>

  		running[2] = startThread(vSenderTask, osPriorityLow, "MPI",  &mpiData, 8*128); //changed startThread() in threadManagement.c to add another parameter
 8000594:	4638      	mov	r0, r7
 8000596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <main+0x160>)
 80005a4:	2208      	movs	r2, #8
 80005a6:	492d      	ldr	r1, [pc, #180]	; (800065c <main+0x164>)
 80005a8:	f000 fb58 	bl	8000c5c <startThread>
 80005ac:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80005b0:	463b      	mov	r3, r7
 80005b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  		running[3] = startThread(vSenderTask, osPriorityLow, "Camera", &cameraData, 8*128);
 80005b8:	4638      	mov	r0, r7
 80005ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	4b26      	ldr	r3, [pc, #152]	; (8000660 <main+0x168>)
 80005c8:	2208      	movs	r2, #8
 80005ca:	4924      	ldr	r1, [pc, #144]	; (800065c <main+0x164>)
 80005cc:	f000 fb46 	bl	8000c5c <startThread>
 80005d0:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005d4:	463b      	mov	r3, r7
 80005d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  		running[4] = startThread(vSenderTask, osPriorityLow, "GPS", &gpsData, 8*128);
 80005dc:	4638      	mov	r0, r7
 80005de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <main+0x16c>)
 80005ec:	2208      	movs	r2, #8
 80005ee:	491b      	ldr	r1, [pc, #108]	; (800065c <main+0x164>)
 80005f0:	f000 fb34 	bl	8000c5c <startThread>
 80005f4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005f8:	463b      	mov	r3, r7
 80005fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  		//Sender tasks have lower priority than receiving task
  		running[5] = startThread(vReceiverTask, osPriorityHigh, "Receiver", (void*)xQueue , 8*128);
 8000600:	4638      	mov	r0, r7
 8000602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <main+0x170>)
 8000610:	2228      	movs	r2, #40	; 0x28
 8000612:	4916      	ldr	r1, [pc, #88]	; (800066c <main+0x174>)
 8000614:	f000 fb22 	bl	8000c5c <startThread>
 8000618:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800061c:	463b      	mov	r3, r7
 800061e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000624:	e00b      	b.n	800063e <main+0x146>

  	} else {

  		sendUartMessage("Queue could not be created.", 27);
 8000626:	211b      	movs	r1, #27
 8000628:	4811      	ldr	r0, [pc, #68]	; (8000670 <main+0x178>)
 800062a:	f000 fe29 	bl	8001280 <sendUartMessage>
  		sendUartMessage("\n", 1);
 800062e:	2101      	movs	r1, #1
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <main+0x17c>)
 8000632:	f000 fe25 	bl	8001280 <sendUartMessage>
  		sendUartMessage("\r", 1);
 8000636:	2101      	movs	r1, #1
 8000638:	480f      	ldr	r0, [pc, #60]	; (8000678 <main+0x180>)
 800063a:	f000 fe21 	bl	8001280 <sendUartMessage>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
   osKernelStart();
 800063e:	f004 ffe5 	bl	800560c <osKernelStart>
  //char* taskName = "Test 1";
  //startTask(functionName, 10, taskName, 4*128);
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000642:	e7fe      	b.n	8000642 <main+0x14a>
 8000644:	080082c4 	.word	0x080082c4
 8000648:	08008198 	.word	0x08008198
 800064c:	08000cbd 	.word	0x08000cbd
 8000650:	080081a4 	.word	0x080081a4
 8000654:	08000d05 	.word	0x08000d05
 8000658:	080081b0 	.word	0x080081b0
 800065c:	08000689 	.word	0x08000689
 8000660:	080081b4 	.word	0x080081b4
 8000664:	080081bc 	.word	0x080081bc
 8000668:	080081c0 	.word	0x080081c0
 800066c:	080006dd 	.word	0x080006dd
 8000670:	080081cc 	.word	0x080081cc
 8000674:	080081e8 	.word	0x080081e8
 8000678:	080081ec 	.word	0x080081ec

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	e7fe      	b.n	8000684 <Error_Handler+0x8>
	...

08000688 <vSenderTask>:
#include "queueManagement.h"
#include "uart.h"

UART_HandleTypeDef hlpuart1;

void vSenderTask(void *arg) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

	DataSend_t *arg_struc = (DataSend_t *) arg;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	617b      	str	r3, [r7, #20]
	QueueHandle_t qHandle = arg_struc->queueHandle;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	613b      	str	r3, [r7, #16]
	Data_t dataToSend = arg_struc->dataToSendPtr;
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	889b      	ldrh	r3, [r3, #4]
 800069e:	813b      	strh	r3, [r7, #8]
	BaseType_t sendStatus;


	for(;;) {

		sendStatus = xQueueSendToBack(qHandle, &dataToSend, 0);
 80006a0:	f107 0108 	add.w	r1, r7, #8
 80006a4:	2300      	movs	r3, #0
 80006a6:	2200      	movs	r2, #0
 80006a8:	6938      	ldr	r0, [r7, #16]
 80006aa:	f005 fab7 	bl	8005c1c <xQueueGenericSend>
 80006ae:	60f8      	str	r0, [r7, #12]

		if(sendStatus != pdPASS) {
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d0f4      	beq.n	80006a0 <vSenderTask+0x18>
			sendUartMessage("Could not send to the queue.", 28);
 80006b6:	211c      	movs	r1, #28
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <vSenderTask+0x48>)
 80006ba:	f000 fde1 	bl	8001280 <sendUartMessage>
			sendUartMessage("\n", 1);
 80006be:	2101      	movs	r1, #1
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <vSenderTask+0x4c>)
 80006c2:	f000 fddd 	bl	8001280 <sendUartMessage>
			sendUartMessage("\r", 1);
 80006c6:	2101      	movs	r1, #1
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <vSenderTask+0x50>)
 80006ca:	f000 fdd9 	bl	8001280 <sendUartMessage>
		sendStatus = xQueueSendToBack(qHandle, &dataToSend, 0);
 80006ce:	e7e7      	b.n	80006a0 <vSenderTask+0x18>
 80006d0:	080081f0 	.word	0x080081f0
 80006d4:	08008210 	.word	0x08008210
 80006d8:	08008214 	.word	0x08008214

080006dc <vReceiverTask>:
		}
	}

}

void vReceiverTask(void *arg) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

	QueueHandle_t qHandle = arg;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	617b      	str	r3, [r7, #20]
	Data_t xReceivedStructure;
	BaseType_t readStatus;
	const TickType_t xTicksToWait = pdMS_TO_TICKS(100);
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	613b      	str	r3, [r7, #16]

	for(;;) {

		if(uxQueueMessagesWaiting(qHandle) != 0) {
 80006ec:	6978      	ldr	r0, [r7, #20]
 80006ee:	f005 fd0b 	bl	8006108 <uxQueueMessagesWaiting>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00b      	beq.n	8000710 <vReceiverTask+0x34>
			sendUartMessage("Queue should have been empty.", 29);
 80006f8:	211d      	movs	r1, #29
 80006fa:	4836      	ldr	r0, [pc, #216]	; (80007d4 <vReceiverTask+0xf8>)
 80006fc:	f000 fdc0 	bl	8001280 <sendUartMessage>
			sendUartMessage("\n", 1);
 8000700:	2101      	movs	r1, #1
 8000702:	4835      	ldr	r0, [pc, #212]	; (80007d8 <vReceiverTask+0xfc>)
 8000704:	f000 fdbc 	bl	8001280 <sendUartMessage>
			sendUartMessage("\r", 1);
 8000708:	2101      	movs	r1, #1
 800070a:	4834      	ldr	r0, [pc, #208]	; (80007dc <vReceiverTask+0x100>)
 800070c:	f000 fdb8 	bl	8001280 <sendUartMessage>
		}

		readStatus = xQueueReceive(qHandle, &xReceivedStructure, xTicksToWait);
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	4619      	mov	r1, r3
 8000718:	6978      	ldr	r0, [r7, #20]
 800071a:	f005 fc15 	bl	8005f48 <xQueueReceive>
 800071e:	60f8      	str	r0, [r7, #12]

		if(readStatus == pdPASS) {
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d148      	bne.n	80007b8 <vReceiverTask+0xdc>
			switch(xReceivedStructure.eDataSource) {
 8000726:	7a7b      	ldrb	r3, [r7, #9]
 8000728:	2b02      	cmp	r3, #2
 800072a:	d030      	beq.n	800078e <vReceiverTask+0xb2>
 800072c:	2b02      	cmp	r3, #2
 800072e:	dcdd      	bgt.n	80006ec <vReceiverTask+0x10>
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <vReceiverTask+0x5e>
 8000734:	2b01      	cmp	r3, #1
 8000736:	d015      	beq.n	8000764 <vReceiverTask+0x88>
 8000738:	e04a      	b.n	80007d0 <vReceiverTask+0xf4>

				case MPI :
					sendUartMessage("From MPI = ", 11);
 800073a:	210b      	movs	r1, #11
 800073c:	4828      	ldr	r0, [pc, #160]	; (80007e0 <vReceiverTask+0x104>)
 800073e:	f000 fd9f 	bl	8001280 <sendUartMessage>
					HAL_UART_Transmit(&hlpuart1, (uint8_t*)&xReceivedStructure.ucValue, 1, HAL_MAX_DELAY);
 8000742:	f107 0108 	add.w	r1, r7, #8
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	2201      	movs	r2, #1
 800074c:	4825      	ldr	r0, [pc, #148]	; (80007e4 <vReceiverTask+0x108>)
 800074e:	f003 fd41 	bl	80041d4 <HAL_UART_Transmit>
					sendUartMessage("\n", 1);
 8000752:	2101      	movs	r1, #1
 8000754:	4820      	ldr	r0, [pc, #128]	; (80007d8 <vReceiverTask+0xfc>)
 8000756:	f000 fd93 	bl	8001280 <sendUartMessage>
					sendUartMessage("\r", 1);
 800075a:	2101      	movs	r1, #1
 800075c:	481f      	ldr	r0, [pc, #124]	; (80007dc <vReceiverTask+0x100>)
 800075e:	f000 fd8f 	bl	8001280 <sendUartMessage>
					break;
 8000762:	e035      	b.n	80007d0 <vReceiverTask+0xf4>

				case Camera :
					sendUartMessage("From Camera = ", 14);
 8000764:	210e      	movs	r1, #14
 8000766:	4820      	ldr	r0, [pc, #128]	; (80007e8 <vReceiverTask+0x10c>)
 8000768:	f000 fd8a 	bl	8001280 <sendUartMessage>
					HAL_UART_Transmit(&hlpuart1, (uint8_t*)&xReceivedStructure.ucValue, 1, HAL_MAX_DELAY);
 800076c:	f107 0108 	add.w	r1, r7, #8
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	2201      	movs	r2, #1
 8000776:	481b      	ldr	r0, [pc, #108]	; (80007e4 <vReceiverTask+0x108>)
 8000778:	f003 fd2c 	bl	80041d4 <HAL_UART_Transmit>
					sendUartMessage("\n", 1);
 800077c:	2101      	movs	r1, #1
 800077e:	4816      	ldr	r0, [pc, #88]	; (80007d8 <vReceiverTask+0xfc>)
 8000780:	f000 fd7e 	bl	8001280 <sendUartMessage>
					sendUartMessage("\r", 1);
 8000784:	2101      	movs	r1, #1
 8000786:	4815      	ldr	r0, [pc, #84]	; (80007dc <vReceiverTask+0x100>)
 8000788:	f000 fd7a 	bl	8001280 <sendUartMessage>
					break;
 800078c:	e020      	b.n	80007d0 <vReceiverTask+0xf4>

				case GPS :
					sendUartMessage("From GPS = ", 11);
 800078e:	210b      	movs	r1, #11
 8000790:	4816      	ldr	r0, [pc, #88]	; (80007ec <vReceiverTask+0x110>)
 8000792:	f000 fd75 	bl	8001280 <sendUartMessage>
					HAL_UART_Transmit(&hlpuart1, (uint8_t*)&xReceivedStructure.ucValue, 1, HAL_MAX_DELAY);
 8000796:	f107 0108 	add.w	r1, r7, #8
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	2201      	movs	r2, #1
 80007a0:	4810      	ldr	r0, [pc, #64]	; (80007e4 <vReceiverTask+0x108>)
 80007a2:	f003 fd17 	bl	80041d4 <HAL_UART_Transmit>
					sendUartMessage("\n", 1);
 80007a6:	2101      	movs	r1, #1
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <vReceiverTask+0xfc>)
 80007aa:	f000 fd69 	bl	8001280 <sendUartMessage>
					sendUartMessage("\r", 1);
 80007ae:	2101      	movs	r1, #1
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <vReceiverTask+0x100>)
 80007b2:	f000 fd65 	bl	8001280 <sendUartMessage>
					break;
 80007b6:	e00b      	b.n	80007d0 <vReceiverTask+0xf4>
			}
		} else {

			sendUartMessage("Could not receive from the queue.", 33);
 80007b8:	2121      	movs	r1, #33	; 0x21
 80007ba:	480d      	ldr	r0, [pc, #52]	; (80007f0 <vReceiverTask+0x114>)
 80007bc:	f000 fd60 	bl	8001280 <sendUartMessage>
			sendUartMessage("\n", 1);
 80007c0:	2101      	movs	r1, #1
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <vReceiverTask+0xfc>)
 80007c4:	f000 fd5c 	bl	8001280 <sendUartMessage>
			sendUartMessage("\r", 1);
 80007c8:	2101      	movs	r1, #1
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <vReceiverTask+0x100>)
 80007cc:	f000 fd58 	bl	8001280 <sendUartMessage>
		if(uxQueueMessagesWaiting(qHandle) != 0) {
 80007d0:	e78c      	b.n	80006ec <vReceiverTask+0x10>
 80007d2:	bf00      	nop
 80007d4:	08008218 	.word	0x08008218
 80007d8:	08008210 	.word	0x08008210
 80007dc:	08008214 	.word	0x08008214
 80007e0:	08008238 	.word	0x08008238
 80007e4:	2000198c 	.word	0x2000198c
 80007e8:	08008244 	.word	0x08008244
 80007ec:	08008254 	.word	0x08008254
 80007f0:	08008260 	.word	0x08008260

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <HAL_MspInit+0x4c>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <HAL_MspInit+0x4c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6613      	str	r3, [r2, #96]	; 0x60
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <HAL_MspInit+0x4c>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <HAL_MspInit+0x4c>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <HAL_MspInit+0x4c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	6593      	str	r3, [r2, #88]	; 0x58
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_MspInit+0x4c>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	210f      	movs	r1, #15
 800082e:	f06f 0001 	mvn.w	r0, #1
 8000832:	f000 fe77 	bl	8001524 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	; 0x30
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a44      	ldr	r2, [pc, #272]	; (8000974 <HAL_UART_MspInit+0x130>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d154      	bne.n	8000910 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000866:	4b44      	ldr	r3, [pc, #272]	; (8000978 <HAL_UART_MspInit+0x134>)
 8000868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800086a:	4a43      	ldr	r2, [pc, #268]	; (8000978 <HAL_UART_MspInit+0x134>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000872:	4b41      	ldr	r3, [pc, #260]	; (8000978 <HAL_UART_MspInit+0x134>)
 8000874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800087e:	4b3e      	ldr	r3, [pc, #248]	; (8000978 <HAL_UART_MspInit+0x134>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a3d      	ldr	r2, [pc, #244]	; (8000978 <HAL_UART_MspInit+0x134>)
 8000884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <HAL_UART_MspInit+0x134>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000896:	f001 fca7 	bl	80021e8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800089a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800089e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008ac:	2308      	movs	r3, #8
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4831      	ldr	r0, [pc, #196]	; (800097c <HAL_UART_MspInit+0x138>)
 80008b8:	f001 f8d0 	bl	8001a5c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80008bc:	4b30      	ldr	r3, [pc, #192]	; (8000980 <HAL_UART_MspInit+0x13c>)
 80008be:	4a31      	ldr	r2, [pc, #196]	; (8000984 <HAL_UART_MspInit+0x140>)
 80008c0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80008c2:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <HAL_UART_MspInit+0x13c>)
 80008c4:	2222      	movs	r2, #34	; 0x22
 80008c6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008c8:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <HAL_UART_MspInit+0x13c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ce:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <HAL_UART_MspInit+0x13c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008d4:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <HAL_UART_MspInit+0x13c>)
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <HAL_UART_MspInit+0x13c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008e0:	4b27      	ldr	r3, [pc, #156]	; (8000980 <HAL_UART_MspInit+0x13c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80008e6:	4b26      	ldr	r3, [pc, #152]	; (8000980 <HAL_UART_MspInit+0x13c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008ec:	4b24      	ldr	r3, [pc, #144]	; (8000980 <HAL_UART_MspInit+0x13c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80008f2:	4823      	ldr	r0, [pc, #140]	; (8000980 <HAL_UART_MspInit+0x13c>)
 80008f4:	f000 fe40 	bl	8001578 <HAL_DMA_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 80008fe:	f7ff febd 	bl	800067c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <HAL_UART_MspInit+0x13c>)
 8000906:	679a      	str	r2, [r3, #120]	; 0x78
 8000908:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <HAL_UART_MspInit+0x13c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800090e:	e02d      	b.n	800096c <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <HAL_UART_MspInit+0x144>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d128      	bne.n	800096c <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_UART_MspInit+0x134>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091e:	4a16      	ldr	r2, [pc, #88]	; (8000978 <HAL_UART_MspInit+0x134>)
 8000920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000924:	6593      	str	r3, [r2, #88]	; 0x58
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_UART_MspInit+0x134>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_UART_MspInit+0x134>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a10      	ldr	r2, [pc, #64]	; (8000978 <HAL_UART_MspInit+0x134>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_UART_MspInit+0x134>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800094a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800095c:	2307      	movs	r3, #7
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4809      	ldr	r0, [pc, #36]	; (800098c <HAL_UART_MspInit+0x148>)
 8000968:	f001 f878 	bl	8001a5c <HAL_GPIO_Init>
}
 800096c:	bf00      	nop
 800096e:	3730      	adds	r7, #48	; 0x30
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40008000 	.word	0x40008000
 8000978:	40021000 	.word	0x40021000
 800097c:	48001800 	.word	0x48001800
 8000980:	20001ef8 	.word	0x20001ef8
 8000984:	40020008 	.word	0x40020008
 8000988:	40004800 	.word	0x40004800
 800098c:	48000c00 	.word	0x48000c00

08000990 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <HAL_SPI_MspInit+0x7c>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d128      	bne.n	8000a04 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <HAL_SPI_MspInit+0x80>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b6:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <HAL_SPI_MspInit+0x80>)
 80009b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009bc:	6613      	str	r3, [r2, #96]	; 0x60
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_SPI_MspInit+0x80>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_SPI_MspInit+0x80>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <HAL_SPI_MspInit+0x80>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_SPI_MspInit+0x80>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009e2:	23e0      	movs	r3, #224	; 0xe0
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009f2:	2305      	movs	r3, #5
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f001 f82c 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40013000 	.word	0x40013000
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a34:	d154      	bne.n	8000ae0 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <HAL_PCD_MspInit+0xd4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ae8 <HAL_PCD_MspInit+0xd4>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <HAL_PCD_MspInit+0xd4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a4e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a60:	230a      	movs	r3, #10
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f000 fff5 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8a:	f000 ffe7 	bl	8001a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_PCD_MspInit+0xd4>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a15      	ldr	r2, [pc, #84]	; (8000ae8 <HAL_PCD_MspInit+0xd4>)
 8000a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <HAL_PCD_MspInit+0xd4>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_PCD_MspInit+0xd4>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d114      	bne.n	8000adc <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <HAL_PCD_MspInit+0xd4>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	4a0c      	ldr	r2, [pc, #48]	; (8000ae8 <HAL_PCD_MspInit+0xd4>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6593      	str	r3, [r2, #88]	; 0x58
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <HAL_PCD_MspInit+0xd4>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000aca:	f001 fb7d 	bl	80021c8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_PCD_MspInit+0xd4>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <HAL_PCD_MspInit+0xd4>)
 8000ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ada:	e001      	b.n	8000ae0 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000adc:	f001 fb74 	bl	80021c8 <HAL_PWREx_EnableVddUSB>
}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	; 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40021000 	.word	0x40021000

08000aec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	; 0x30
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	201d      	movs	r0, #29
 8000b02:	f000 fd0f 	bl	8001524 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b06:	201d      	movs	r0, #29
 8000b08:	f000 fd28 	bl	800155c <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <HAL_InitTick+0xa0>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b10:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <HAL_InitTick+0xa0>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	6593      	str	r3, [r2, #88]	; 0x58
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_InitTick+0xa0>)
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b24:	f107 0210 	add.w	r2, r7, #16
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f002 f980 	bl	8002e34 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b34:	f002 f952 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b40:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <HAL_InitTick+0xa4>)
 8000b42:	fba2 2303 	umull	r2, r3, r2, r3
 8000b46:	0c9b      	lsrs	r3, r3, #18
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_InitTick+0xa8>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <HAL_InitTick+0xac>)
 8000b50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_InitTick+0xa8>)
 8000b54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b58:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_InitTick+0xa8>)
 8000b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_InitTick+0xa8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_InitTick+0xa8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_InitTick+0xa8>)
 8000b6e:	f003 f810 	bl	8003b92 <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d104      	bne.n	8000b82 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <HAL_InitTick+0xa8>)
 8000b7a:	f003 f86b 	bl	8003c54 <HAL_TIM_Base_Start_IT>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3730      	adds	r7, #48	; 0x30
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	431bde83 	.word	0x431bde83
 8000b94:	20001a18 	.word	0x20001a18
 8000b98:	40000400 	.word	0x40000400

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <DMA1_Channel1_IRQHandler+0x10>)
 8000bce:	f000 fdf6 	bl	80017be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20001ef8 	.word	0x20001ef8

08000bdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM3_IRQHandler+0x10>)
 8000be2:	f003 f8a7 	bl	8003d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20001a18 	.word	0x20001a18

08000bf0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <SystemInit+0x64>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfa:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <SystemInit+0x64>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <SystemInit+0x68>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <SystemInit+0x68>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <SystemInit+0x68>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <SystemInit+0x68>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <SystemInit+0x68>)
 8000c1c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c20:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <SystemInit+0x68>)
 8000c28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c2c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <SystemInit+0x68>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <SystemInit+0x68>)
 8000c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <SystemInit+0x68>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <SystemInit+0x64>)
 8000c42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c46:	609a      	str	r2, [r3, #8]
#endif
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	40021000 	.word	0x40021000

08000c5c <startThread>:

// Fucntion that puts thread information into a struct of type threadInfo, starts
// the thread, and returns the struct. Requires a function pointer to the function
// the new thread will run, the priority to set the new thread to, the name of the
// new thread, and the stack size of the new thread.
struct threadInfo startThread(void (*funPtr), int tp, char* tn, void* arg, int stackSize){
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b093      	sub	sp, #76	; 0x4c
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
 8000c68:	603b      	str	r3, [r7, #0]
	struct threadInfo info;
	info.threadPriority = tp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	643b      	str	r3, [r7, #64]	; 0x40
	info.threadName = tn;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	647b      	str	r3, [r7, #68]	; 0x44

	// Use a osThreadAttr_t struct for thread initialization
	const osThreadAttr_t threadAttributes = {
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	2224      	movs	r2, #36	; 0x24
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f007 fa78 	bl	8008170 <memset>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			.name = tn,
			.priority = (osPriority_t) tp,
			.stack_size = stackSize
	};
	osThreadId_t threadHandle;
	info.threadHandle = &threadHandle;
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
	threadHandle = osThreadNew(funPtr, arg, &threadAttributes);
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	f107 0214 	add.w	r2, r7, #20
 8000c98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 fcec 	bl	8005678 <osThreadNew>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	613b      	str	r3, [r7, #16]
	return info;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	461c      	mov	r4, r3
 8000ca8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	374c      	adds	r7, #76	; 0x4c
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd90      	pop	{r4, r7, pc}
	...

08000cbc <StartTest1>:
//PCD_HandleTypeDef hpcd_USB_OTG_FS;


//Test function
void StartTest1(void *argument)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  sendUartMessage("\n", 1);
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <StartTest1+0x3c>)
 8000cc8:	f000 fada 	bl	8001280 <sendUartMessage>
	  sendUartMessage("\r", 1);
 8000ccc:	2101      	movs	r1, #1
 8000cce:	480b      	ldr	r0, [pc, #44]	; (8000cfc <StartTest1+0x40>)
 8000cd0:	f000 fad6 	bl	8001280 <sendUartMessage>
	  sendUartMessage("Test 1", 6);
 8000cd4:	2106      	movs	r1, #6
 8000cd6:	480a      	ldr	r0, [pc, #40]	; (8000d00 <StartTest1+0x44>)
 8000cd8:	f000 fad2 	bl	8001280 <sendUartMessage>
	  sendUartMessage("\n", 1);
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <StartTest1+0x3c>)
 8000ce0:	f000 face 	bl	8001280 <sendUartMessage>
	  sendUartMessage("\r", 1);
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <StartTest1+0x40>)
 8000ce8:	f000 faca 	bl	8001280 <sendUartMessage>
//	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
//	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
//	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Test 1", 26, HAL_MAX_DELAY);
//	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
//	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
    vTaskDelay(pdMS_TO_TICKS(1000));
 8000cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf0:	f005 fd38 	bl	8006764 <vTaskDelay>
	  sendUartMessage("\n", 1);
 8000cf4:	e7e6      	b.n	8000cc4 <StartTest1+0x8>
 8000cf6:	bf00      	nop
 8000cf8:	08008284 	.word	0x08008284
 8000cfc:	08008288 	.word	0x08008288
 8000d00:	0800828c 	.word	0x0800828c

08000d04 <StartTest2>:
  /* USER CODE END 5 */
}

//Test function
void StartTest2(void *argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	for(;;)
	{
		sendUartMessage("\n", 1);
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <StartTest2+0x3c>)
 8000d10:	f000 fab6 	bl	8001280 <sendUartMessage>
		sendUartMessage("\r", 1);
 8000d14:	2101      	movs	r1, #1
 8000d16:	480b      	ldr	r0, [pc, #44]	; (8000d44 <StartTest2+0x40>)
 8000d18:	f000 fab2 	bl	8001280 <sendUartMessage>
		sendUartMessage("Test 2", 6);
 8000d1c:	2106      	movs	r1, #6
 8000d1e:	480a      	ldr	r0, [pc, #40]	; (8000d48 <StartTest2+0x44>)
 8000d20:	f000 faae 	bl	8001280 <sendUartMessage>
		sendUartMessage("\n", 1);
 8000d24:	2101      	movs	r1, #1
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <StartTest2+0x3c>)
 8000d28:	f000 faaa 	bl	8001280 <sendUartMessage>
		sendUartMessage("\r", 1);
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <StartTest2+0x40>)
 8000d30:	f000 faa6 	bl	8001280 <sendUartMessage>
//		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
//		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
//		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Test 2", 26, HAL_MAX_DELAY);
//		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
//		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000d34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d38:	f005 fd14 	bl	8006764 <vTaskDelay>
		sendUartMessage("\n", 1);
 8000d3c:	e7e6      	b.n	8000d0c <StartTest2+0x8>
 8000d3e:	bf00      	nop
 8000d40:	08008284 	.word	0x08008284
 8000d44:	08008288 	.word	0x08008288
 8000d48:	08008294 	.word	0x08008294

08000d4c <startUart>:
uint8_t UART1_txBuffer[160] = {0};
uint8_t UART1_rxBuffer[160] = {0};


// Function containing calls to all necessary UART initialization functions
void startUart(){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8000d50:	f000 f9be 	bl	80010d0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d54:	f000 f992 	bl	800107c <MX_DMA_Init>
	MX_LPUART1_UART_Init();
 8000d58:	f000 f890 	bl	8000e7c <MX_LPUART1_UART_Init>
	MX_USART3_UART_Init();
 8000d5c:	f000 f8da 	bl	8000f14 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000d60:	f000 f962 	bl	8001028 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI1_Init();
 8000d64:	f000 f922 	bl	8000fac <MX_SPI1_Init>
	HAL_UART_Receive_DMA(&hlpuart1, UART1_rxBuffer, 160);
 8000d68:	22a0      	movs	r2, #160	; 0xa0
 8000d6a:	4903      	ldr	r1, [pc, #12]	; (8000d78 <startUart+0x2c>)
 8000d6c:	4803      	ldr	r0, [pc, #12]	; (8000d7c <startUart+0x30>)
 8000d6e:	f003 fac9 	bl	8004304 <HAL_UART_Receive_DMA>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000002c 	.word	0x2000002c
 8000d7c:	2000198c 	.word	0x2000198c

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0bc      	sub	sp, #240	; 0xf0
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d8a:	2244      	movs	r2, #68	; 0x44
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f007 f9ee 	bl	8008170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2294      	movs	r2, #148	; 0x94
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f007 f9e0 	bl	8008170 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000db0:	2000      	movs	r0, #0
 8000db2:	f001 f965 	bl	8002080 <HAL_PWREx_ControlVoltageScaling>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000dbc:	f7ff fc5e 	bl	800067c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000dc0:	2322      	movs	r3, #34	; 0x22
 8000dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd4:	2340      	movs	r3, #64	; 0x40
 8000dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de0:	2302      	movs	r3, #2
 8000de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000dec:	231e      	movs	r3, #30
 8000dee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 f9fd 	bl	8002208 <HAL_RCC_OscConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e14:	f7ff fc32 	bl	800067c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e18:	230f      	movs	r3, #15
 8000e1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e38:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fe08 	bl	8002a54 <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000e4a:	f7ff fc17 	bl	800067c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 8000e4e:	f242 0324 	movw	r3, #8228	; 0x2024
 8000e52:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4618      	mov	r0, r3
 8000e64:	f002 f8da 	bl	800301c <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000e6e:	f7ff fc05 	bl	800067c <Error_Handler>
  }
}
 8000e72:	bf00      	nop
 8000e74:	37f0      	adds	r7, #240	; 0xf0
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000e82:	4a23      	ldr	r2, [pc, #140]	; (8000f10 <MX_LPUART1_UART_Init+0x94>)
 8000e84:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000e88:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000e8c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ec4:	4811      	ldr	r0, [pc, #68]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000ec6:	f003 f935 	bl	8004134 <HAL_UART_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ed0:	f7ff fbd4 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000ed8:	f003 ffe7 	bl	8004eaa <HAL_UARTEx_SetTxFifoThreshold>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ee2:	f7ff fbcb 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4808      	ldr	r0, [pc, #32]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000eea:	f004 f81c 	bl	8004f26 <HAL_UARTEx_SetRxFifoThreshold>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ef4:	f7ff fbc2 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_LPUART1_UART_Init+0x90>)
 8000efa:	f003 ff9d 	bl	8004e38 <HAL_UARTEx_DisableFifoMode>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f04:	f7ff fbba 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000198c 	.word	0x2000198c
 8000f10:	40008000 	.word	0x40008000

08000f14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <MX_USART3_UART_Init+0x94>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f5c:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f5e:	f003 f8e9 	bl	8004134 <HAL_UART_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f68:	f7ff fb88 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f70:	f003 ff9b 	bl	8004eaa <HAL_UARTEx_SetTxFifoThreshold>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f7a:	f7ff fb7f 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f82:	f003 ffd0 	bl	8004f26 <HAL_UARTEx_SetRxFifoThreshold>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f8c:	f7ff fb76 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_USART3_UART_Init+0x90>)
 8000f92:	f003 ff51 	bl	8004e38 <HAL_UARTEx_DisableFifoMode>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f9c:	f7ff fb6e 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20001a64 	.word	0x20001a64
 8000fa8:	40004800 	.word	0x40004800

08000fac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <MX_SPI1_Init+0x78>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fde:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fe2:	2208      	movs	r2, #8
 8000fe4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_SPI1_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_SPI1_Init+0x74>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_SPI1_Init+0x74>)
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_SPI1_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_SPI1_Init+0x74>)
 8001006:	2208      	movs	r2, #8
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_SPI1_Init+0x74>)
 800100c:	f002 fd1e 	bl	8003a4c <HAL_SPI_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001016:	f7ff fb31 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20001f58 	.word	0x20001f58
 8001024:	40013000 	.word	0x40013000

08001028 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800102e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001032:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001036:	2206      	movs	r2, #6
 8001038:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800103c:	2202      	movs	r2, #2
 800103e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001042:	2201      	movs	r2, #1
 8001044:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001054:	2201      	movs	r2, #1
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001060:	2201      	movs	r2, #1
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001066:	f000 fea3 	bl	8001db0 <HAL_PCD_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8001070:	f7ff fb04 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20001af0 	.word	0x20001af0

0800107c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_DMA_Init+0x50>)
 8001084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001086:	4a11      	ldr	r2, [pc, #68]	; (80010cc <MX_DMA_Init+0x50>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6493      	str	r3, [r2, #72]	; 0x48
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_DMA_Init+0x50>)
 8001090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_DMA_Init+0x50>)
 800109c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <MX_DMA_Init+0x50>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6493      	str	r3, [r2, #72]	; 0x48
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_DMA_Init+0x50>)
 80010a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2105      	movs	r1, #5
 80010b6:	200b      	movs	r0, #11
 80010b8:	f000 fa34 	bl	8001524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010bc:	200b      	movs	r0, #11
 80010be:	f000 fa4d 	bl	800155c <HAL_NVIC_EnableIRQ>

}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b52      	ldr	r3, [pc, #328]	; (8001230 <MX_GPIO_Init+0x160>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a51      	ldr	r2, [pc, #324]	; (8001230 <MX_GPIO_Init+0x160>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <MX_GPIO_Init+0x160>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fe:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <MX_GPIO_Init+0x160>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a4b      	ldr	r2, [pc, #300]	; (8001230 <MX_GPIO_Init+0x160>)
 8001104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b49      	ldr	r3, [pc, #292]	; (8001230 <MX_GPIO_Init+0x160>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b46      	ldr	r3, [pc, #280]	; (8001230 <MX_GPIO_Init+0x160>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a45      	ldr	r2, [pc, #276]	; (8001230 <MX_GPIO_Init+0x160>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <MX_GPIO_Init+0x160>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b40      	ldr	r3, [pc, #256]	; (8001230 <MX_GPIO_Init+0x160>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a3f      	ldr	r2, [pc, #252]	; (8001230 <MX_GPIO_Init+0x160>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <MX_GPIO_Init+0x160>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001146:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <MX_GPIO_Init+0x160>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a39      	ldr	r2, [pc, #228]	; (8001230 <MX_GPIO_Init+0x160>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b37      	ldr	r3, [pc, #220]	; (8001230 <MX_GPIO_Init+0x160>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800115e:	4b34      	ldr	r3, [pc, #208]	; (8001230 <MX_GPIO_Init+0x160>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	4a33      	ldr	r2, [pc, #204]	; (8001230 <MX_GPIO_Init+0x160>)
 8001164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116a:	4b31      	ldr	r3, [pc, #196]	; (8001230 <MX_GPIO_Init+0x160>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001176:	f001 f837 	bl	80021e8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001180:	482c      	ldr	r0, [pc, #176]	; (8001234 <MX_GPIO_Init+0x164>)
 8001182:	f000 fdfd 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118c:	482a      	ldr	r0, [pc, #168]	; (8001238 <MX_GPIO_Init+0x168>)
 800118e:	f000 fdf7 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2120      	movs	r1, #32
 8001196:	4829      	ldr	r0, [pc, #164]	; (800123c <MX_GPIO_Init+0x16c>)
 8001198:	f000 fdf2 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800119c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <MX_GPIO_Init+0x170>)
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	4824      	ldr	r0, [pc, #144]	; (8001244 <MX_GPIO_Init+0x174>)
 80011b2:	f000 fc53 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80011b6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80011ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4819      	ldr	r0, [pc, #100]	; (8001234 <MX_GPIO_Init+0x164>)
 80011d0:	f000 fc44 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	4812      	ldr	r0, [pc, #72]	; (8001238 <MX_GPIO_Init+0x168>)
 80011ee:	f000 fc35 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011f2:	2320      	movs	r3, #32
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <MX_GPIO_Init+0x16c>)
 800120a:	f000 fc27 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800120e:	2340      	movs	r3, #64	; 0x40
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_GPIO_Init+0x16c>)
 8001222:	f000 fc1b 	bl	8001a5c <HAL_GPIO_Init>

}
 8001226:	bf00      	nop
 8001228:	3730      	adds	r7, #48	; 0x30
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	48000400 	.word	0x48000400
 8001238:	48000c00 	.word	0x48000c00
 800123c:	48001800 	.word	0x48001800
 8001240:	10110000 	.word	0x10110000
 8001244:	48000800 	.word	0x48000800

08001248 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800125a:	f000 f867 	bl	800132c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40000400 	.word	0x40000400

0800126c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <sendUartMessage>:

// Function that takes in a char pointer with a UART message to transmit and
// the length of said message
void sendUartMessage(char* message, int length){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)message, length, HAL_MAX_DELAY);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b29a      	uxth	r2, r3
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <sendUartMessage+0x24>)
 8001296:	f002 ff9d 	bl	80041d4 <HAL_UART_Transmit>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000198c 	.word	0x2000198c

080012a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012ac:	f7ff fca0 	bl	8000bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012b2:	e003      	b.n	80012bc <LoopCopyDataInit>

080012b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012ba:	3104      	adds	r1, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80012c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012c4:	d3f6      	bcc.n	80012b4 <CopyDataInit>
	ldr	r2, =_sbss
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012c8:	e002      	b.n	80012d0 <LoopFillZerobss>

080012ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012cc:	f842 3b04 	str.w	r3, [r2], #4

080012d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <LoopForever+0x16>)
	cmp	r2, r3
 80012d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012d4:	d3f9      	bcc.n	80012ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012d6:	f006 ff19 	bl	800810c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012da:	f7ff f90d 	bl	80004f8 <main>

080012de <LoopForever>:

LoopForever:
    b LoopForever
 80012de:	e7fe      	b.n	80012de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012e0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80012e4:	0800833c 	.word	0x0800833c
	ldr	r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012ec:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80012f0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80012f4:	20002000 	.word	0x20002000

080012f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <ADC1_IRQHandler>

080012fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f902 	bl	800150e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff fbee 	bl	8000aec <HAL_InitTick>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	e001      	b.n	8001320 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800131c:	f7ff fa6a 	bl	80007f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001320:	79fb      	ldrb	r3, [r7, #7]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x20>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x24>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <HAL_IncTick+0x24>)
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000008 	.word	0x20000008
 8001350:	20001fbc 	.word	0x20001fbc

08001354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return uwTick;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_GetTick+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20001fbc 	.word	0x20001fbc

0800136c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff ffee 	bl	8001354 <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001384:	d005      	beq.n	8001392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_Delay+0x44>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001392:	bf00      	nop
 8001394:	f7ff ffde 	bl	8001354 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d8f7      	bhi.n	8001394 <HAL_Delay+0x28>
  {
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008

080013b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d0:	4013      	ands	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x44>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <__NVIC_GetPriorityGrouping+0x18>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	f003 0307 	and.w	r3, r3, #7
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	db0b      	blt.n	8001442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 021f 	and.w	r2, r3, #31
 8001430:	4907      	ldr	r1, [pc, #28]	; (8001450 <__NVIC_EnableIRQ+0x38>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2001      	movs	r0, #1
 800143a:	fa00 f202 	lsl.w	r2, r0, r2
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e100 	.word	0xe000e100

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ff4c 	bl	80013b4 <__NVIC_SetPriorityGrouping>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001536:	f7ff ff61 	bl	80013fc <__NVIC_GetPriorityGrouping>
 800153a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	6978      	ldr	r0, [r7, #20]
 8001542:	f7ff ffb1 	bl	80014a8 <NVIC_EncodePriority>
 8001546:	4602      	mov	r2, r0
 8001548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff80 	bl	8001454 <__NVIC_SetPriority>
}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff54 	bl	8001418 <__NVIC_EnableIRQ>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e08d      	b.n	80016a6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_DMA_Init+0x138>)
 8001592:	429a      	cmp	r2, r3
 8001594:	d80f      	bhi.n	80015b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	4b45      	ldr	r3, [pc, #276]	; (80016b4 <HAL_DMA_Init+0x13c>)
 800159e:	4413      	add	r3, r2
 80015a0:	4a45      	ldr	r2, [pc, #276]	; (80016b8 <HAL_DMA_Init+0x140>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	091b      	lsrs	r3, r3, #4
 80015a8:	009a      	lsls	r2, r3, #2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a42      	ldr	r2, [pc, #264]	; (80016bc <HAL_DMA_Init+0x144>)
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40
 80015b4:	e00e      	b.n	80015d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <HAL_DMA_Init+0x148>)
 80015be:	4413      	add	r3, r2
 80015c0:	4a3d      	ldr	r2, [pc, #244]	; (80016b8 <HAL_DMA_Init+0x140>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	009a      	lsls	r2, r3, #2
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a3c      	ldr	r2, [pc, #240]	; (80016c4 <HAL_DMA_Init+0x14c>)
 80015d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2202      	movs	r2, #2
 80015d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f9b6 	bl	8001998 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001634:	d102      	bne.n	800163c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001650:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d010      	beq.n	800167c <HAL_DMA_Init+0x104>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b04      	cmp	r3, #4
 8001660:	d80c      	bhi.n	800167c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f9d6 	bl	8001a14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	e008      	b.n	800168e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40020407 	.word	0x40020407
 80016b4:	bffdfff8 	.word	0xbffdfff8
 80016b8:	cccccccd 	.word	0xcccccccd
 80016bc:	40020000 	.word	0x40020000
 80016c0:	bffdfbf8 	.word	0xbffdfbf8
 80016c4:	40020400 	.word	0x40020400

080016c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_DMA_Start_IT+0x20>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e066      	b.n	80017b6 <HAL_DMA_Start_IT+0xee>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d155      	bne.n	80017a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0201 	bic.w	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	68b9      	ldr	r1, [r7, #8]
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 f8fb 	bl	800191c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 020e 	orr.w	r2, r2, #14
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	e00f      	b.n	8001760 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0204 	bic.w	r2, r2, #4
 800174e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 020a 	orr.w	r2, r2, #10
 800175e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800177c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001794:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0201 	orr.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e005      	b.n	80017b4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017b0:	2302      	movs	r3, #2
 80017b2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f003 031c 	and.w	r3, r3, #28
 80017de:	2204      	movs	r2, #4
 80017e0:	409a      	lsls	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d026      	beq.n	8001838 <HAL_DMA_IRQHandler+0x7a>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d021      	beq.n	8001838 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d107      	bne.n	8001812 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0204 	bic.w	r2, r2, #4
 8001810:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f003 021c 	and.w	r2, r3, #28
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	2104      	movs	r1, #4
 8001820:	fa01 f202 	lsl.w	r2, r1, r2
 8001824:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	2b00      	cmp	r3, #0
 800182c:	d071      	beq.n	8001912 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001836:	e06c      	b.n	8001912 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	f003 031c 	and.w	r3, r3, #28
 8001840:	2202      	movs	r2, #2
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d02e      	beq.n	80018aa <HAL_DMA_IRQHandler+0xec>
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d029      	beq.n	80018aa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10b      	bne.n	800187c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 020a 	bic.w	r2, r2, #10
 8001872:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f003 021c 	and.w	r2, r3, #28
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	2102      	movs	r1, #2
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	2b00      	cmp	r3, #0
 800189e:	d038      	beq.n	8001912 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018a8:	e033      	b.n	8001912 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f003 031c 	and.w	r3, r3, #28
 80018b2:	2208      	movs	r2, #8
 80018b4:	409a      	lsls	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d02a      	beq.n	8001914 <HAL_DMA_IRQHandler+0x156>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d025      	beq.n	8001914 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 020e 	bic.w	r2, r2, #14
 80018d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	f003 021c 	and.w	r2, r3, #28
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	2101      	movs	r1, #1
 80018e6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001912:	bf00      	nop
 8001914:	bf00      	nop
}
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001932:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001944:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f003 021c 	and.w	r2, r3, #28
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	2101      	movs	r1, #1
 8001954:	fa01 f202 	lsl.w	r2, r1, r2
 8001958:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b10      	cmp	r3, #16
 8001968:	d108      	bne.n	800197c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800197a:	e007      	b.n	800198c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d80a      	bhi.n	80019c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019b8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6493      	str	r3, [r2, #72]	; 0x48
 80019c0:	e007      	b.n	80019d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	009a      	lsls	r2, r3, #2
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80019cc:	4413      	add	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	3b08      	subs	r3, #8
 80019da:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80019dc:	fba2 2303 	umull	r2, r3, r2, r3
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80019e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	2201      	movs	r2, #1
 80019f2:	409a      	lsls	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40020407 	.word	0x40020407
 8001a08:	4002081c 	.word	0x4002081c
 8001a0c:	cccccccd 	.word	0xcccccccd
 8001a10:	40020880 	.word	0x40020880

08001a14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a36:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2201      	movs	r2, #1
 8001a42:	409a      	lsls	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	1000823f 	.word	0x1000823f
 8001a58:	40020940 	.word	0x40020940

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	e166      	b.n	8001d3a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8158 	beq.w	8001d34 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d00b      	beq.n	8001aa4 <HAL_GPIO_Init+0x48>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a98:	2b11      	cmp	r3, #17
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b12      	cmp	r3, #18
 8001aa2:	d130      	bne.n	8001b06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ada:	2201      	movs	r2, #1
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	f003 0201 	and.w	r2, r3, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0xea>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d123      	bne.n	8001b8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0203 	and.w	r2, r3, #3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80b2 	beq.w	8001d34 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd0:	4b61      	ldr	r3, [pc, #388]	; (8001d58 <HAL_GPIO_Init+0x2fc>)
 8001bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd4:	4a60      	ldr	r2, [pc, #384]	; (8001d58 <HAL_GPIO_Init+0x2fc>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6613      	str	r3, [r2, #96]	; 0x60
 8001bdc:	4b5e      	ldr	r3, [pc, #376]	; (8001d58 <HAL_GPIO_Init+0x2fc>)
 8001bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001be8:	4a5c      	ldr	r2, [pc, #368]	; (8001d5c <HAL_GPIO_Init+0x300>)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c12:	d02b      	beq.n	8001c6c <HAL_GPIO_Init+0x210>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_GPIO_Init+0x304>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d025      	beq.n	8001c68 <HAL_GPIO_Init+0x20c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a51      	ldr	r2, [pc, #324]	; (8001d64 <HAL_GPIO_Init+0x308>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d01f      	beq.n	8001c64 <HAL_GPIO_Init+0x208>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a50      	ldr	r2, [pc, #320]	; (8001d68 <HAL_GPIO_Init+0x30c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d019      	beq.n	8001c60 <HAL_GPIO_Init+0x204>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a4f      	ldr	r2, [pc, #316]	; (8001d6c <HAL_GPIO_Init+0x310>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d013      	beq.n	8001c5c <HAL_GPIO_Init+0x200>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a4e      	ldr	r2, [pc, #312]	; (8001d70 <HAL_GPIO_Init+0x314>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d00d      	beq.n	8001c58 <HAL_GPIO_Init+0x1fc>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a4d      	ldr	r2, [pc, #308]	; (8001d74 <HAL_GPIO_Init+0x318>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d007      	beq.n	8001c54 <HAL_GPIO_Init+0x1f8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a4c      	ldr	r2, [pc, #304]	; (8001d78 <HAL_GPIO_Init+0x31c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d101      	bne.n	8001c50 <HAL_GPIO_Init+0x1f4>
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	e00e      	b.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c50:	2308      	movs	r3, #8
 8001c52:	e00c      	b.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c54:	2306      	movs	r3, #6
 8001c56:	e00a      	b.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c58:	2305      	movs	r3, #5
 8001c5a:	e008      	b.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	e006      	b.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c60:	2303      	movs	r3, #3
 8001c62:	e004      	b.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e002      	b.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	f002 0203 	and.w	r2, r2, #3
 8001c74:	0092      	lsls	r2, r2, #2
 8001c76:	4093      	lsls	r3, r2
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c7e:	4937      	ldr	r1, [pc, #220]	; (8001d5c <HAL_GPIO_Init+0x300>)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	3302      	adds	r3, #2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_GPIO_Init+0x320>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cb0:	4a32      	ldr	r2, [pc, #200]	; (8001d7c <HAL_GPIO_Init+0x320>)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001cb6:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <HAL_GPIO_Init+0x320>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cda:	4a28      	ldr	r2, [pc, #160]	; (8001d7c <HAL_GPIO_Init+0x320>)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce0:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_GPIO_Init+0x320>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d04:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <HAL_GPIO_Init+0x320>)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_GPIO_Init+0x320>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d2e:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <HAL_GPIO_Init+0x320>)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	3301      	adds	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f47f ae91 	bne.w	8001a6c <HAL_GPIO_Init+0x10>
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	bf00      	nop
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	48000400 	.word	0x48000400
 8001d64:	48000800 	.word	0x48000800
 8001d68:	48000c00 	.word	0x48000c00
 8001d6c:	48001000 	.word	0x48001000
 8001d70:	48001400 	.word	0x48001400
 8001d74:	48001800 	.word	0x48001800
 8001d78:	48001c00 	.word	0x48001c00
 8001d7c:	40010400 	.word	0x40010400

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db2:	b08f      	sub	sp, #60	; 0x3c
 8001db4:	af0a      	add	r7, sp, #40	; 0x28
 8001db6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e116      	b.n	8001ff0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d106      	bne.n	8001de2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7fe fe19 	bl	8000a14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2203      	movs	r2, #3
 8001de6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f003 f989 	bl	8005118 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	687e      	ldr	r6, [r7, #4]
 8001e0e:	466d      	mov	r5, sp
 8001e10:	f106 0410 	add.w	r4, r6, #16
 8001e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e20:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e24:	1d33      	adds	r3, r6, #4
 8001e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e28:	6838      	ldr	r0, [r7, #0]
 8001e2a:	f003 f923 	bl	8005074 <USB_CoreInit>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0d7      	b.n	8001ff0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 f977 	bl	800513a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e04a      	b.n	8001ee8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	333d      	adds	r3, #61	; 0x3d
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	333c      	adds	r3, #60	; 0x3c
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	b298      	uxth	r0, r3
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3342      	adds	r3, #66	; 0x42
 8001e8e:	4602      	mov	r2, r0
 8001e90:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	333f      	adds	r3, #63	; 0x3f
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3344      	adds	r3, #68	; 0x44
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3348      	adds	r3, #72	; 0x48
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	3350      	adds	r3, #80	; 0x50
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d3af      	bcc.n	8001e52 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e044      	b.n	8001f82 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3b5      	bcc.n	8001ef8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	687e      	ldr	r6, [r7, #4]
 8001f94:	466d      	mov	r5, sp
 8001f96:	f106 0410 	add.w	r4, r6, #16
 8001f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fa6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001faa:	1d33      	adds	r3, r6, #4
 8001fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fae:	6838      	ldr	r0, [r7, #0]
 8001fb0:	f003 f8ee 	bl	8005190 <USB_DevInit>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e014      	b.n	8001ff0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d102      	bne.n	8001fe4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f80a 	bl	8001ff8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f003 fa7e 	bl	80054ea <USB_DevDisconnect>

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ff8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202a:	f043 0303 	orr.w	r3, r3, #3
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002044:	4b0d      	ldr	r3, [pc, #52]	; (800207c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800204c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002050:	d102      	bne.n	8002058 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002056:	e00b      	b.n	8002070 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_PWREx_GetVoltageRange+0x3c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002066:	d102      	bne.n	800206e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800206c:	e000      	b.n	8002070 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800206e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40007000 	.word	0x40007000

08002080 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d141      	bne.n	8002112 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800208e:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209a:	d131      	bne.n	8002100 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800209c:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020a2:	4a46      	ldr	r2, [pc, #280]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ac:	4b43      	ldr	r3, [pc, #268]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020b4:	4a41      	ldr	r2, [pc, #260]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020bc:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2232      	movs	r2, #50	; 0x32
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	4a3f      	ldr	r2, [pc, #252]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	0c9b      	lsrs	r3, r3, #18
 80020ce:	3301      	adds	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020d2:	e002      	b.n	80020da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020da:	4b38      	ldr	r3, [pc, #224]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e6:	d102      	bne.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f2      	bne.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ee:	4b33      	ldr	r3, [pc, #204]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fa:	d158      	bne.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e057      	b.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002106:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800210c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002110:	e04d      	b.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002118:	d141      	bne.n	800219e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800211a:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002126:	d131      	bne.n	800218c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800212e:	4a23      	ldr	r2, [pc, #140]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002134:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002146:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2232      	movs	r2, #50	; 0x32
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002154:	fba2 2303 	umull	r2, r3, r2, r3
 8002158:	0c9b      	lsrs	r3, r3, #18
 800215a:	3301      	adds	r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800215e:	e002      	b.n	8002166 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3b01      	subs	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002172:	d102      	bne.n	800217a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f2      	bne.n	8002160 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002186:	d112      	bne.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e011      	b.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002198:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800219c:	e007      	b.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40007000 	.word	0x40007000
 80021c0:	20000000 	.word	0x20000000
 80021c4:	431bde83 	.word	0x431bde83

080021c8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d6:	6053      	str	r3, [r2, #4]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40007000 	.word	0x40007000

080021e8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f6:	6053      	str	r3, [r2, #4]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40007000 	.word	0x40007000

08002208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	f000 bc16 	b.w	8002a48 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221c:	4ba0      	ldr	r3, [pc, #640]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002226:	4b9e      	ldr	r3, [pc, #632]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80e4 	beq.w	8002406 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <HAL_RCC_OscConfig+0x4c>
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2b0c      	cmp	r3, #12
 8002248:	f040 808b 	bne.w	8002362 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b01      	cmp	r3, #1
 8002250:	f040 8087 	bne.w	8002362 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002254:	4b92      	ldr	r3, [pc, #584]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_OscConfig+0x64>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e3ed      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1a      	ldr	r2, [r3, #32]
 8002270:	4b8b      	ldr	r3, [pc, #556]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <HAL_RCC_OscConfig+0x7e>
 800227c:	4b88      	ldr	r3, [pc, #544]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002284:	e005      	b.n	8002292 <HAL_RCC_OscConfig+0x8a>
 8002286:	4b86      	ldr	r3, [pc, #536]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002292:	4293      	cmp	r3, r2
 8002294:	d223      	bcs.n	80022de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fdfc 	bl	8002e98 <RCC_SetFlashLatencyFromMSIRange>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e3ce      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022aa:	4b7d      	ldr	r3, [pc, #500]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7c      	ldr	r2, [pc, #496]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b7a      	ldr	r3, [pc, #488]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4977      	ldr	r1, [pc, #476]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c8:	4b75      	ldr	r3, [pc, #468]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	4972      	ldr	r1, [pc, #456]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
 80022dc:	e025      	b.n	800232a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022de:	4b70      	ldr	r3, [pc, #448]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a6f      	ldr	r2, [pc, #444]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b6d      	ldr	r3, [pc, #436]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	496a      	ldr	r1, [pc, #424]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	4965      	ldr	r1, [pc, #404]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fdbc 	bl	8002e98 <RCC_SetFlashLatencyFromMSIRange>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e38e      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800232a:	f000 fcbf 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 800232e:	4602      	mov	r2, r0
 8002330:	4b5b      	ldr	r3, [pc, #364]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	495a      	ldr	r1, [pc, #360]	; (80024a4 <HAL_RCC_OscConfig+0x29c>)
 800233c:	5ccb      	ldrb	r3, [r1, r3]
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_RCC_OscConfig+0x2a0>)
 8002348:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800234a:	4b58      	ldr	r3, [pc, #352]	; (80024ac <HAL_RCC_OscConfig+0x2a4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fbcc 	bl	8000aec <HAL_InitTick>
 8002354:	4603      	mov	r3, r0
 8002356:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d052      	beq.n	8002404 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	e372      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d032      	beq.n	80023d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800236a:	4b4d      	ldr	r3, [pc, #308]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a4c      	ldr	r2, [pc, #304]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002376:	f7fe ffed 	bl	8001354 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800237e:	f7fe ffe9 	bl	8001354 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e35b      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002390:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239c:	4b40      	ldr	r3, [pc, #256]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a3f      	ldr	r2, [pc, #252]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023a2:	f043 0308 	orr.w	r3, r3, #8
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	493a      	ldr	r1, [pc, #232]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ba:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	4935      	ldr	r1, [pc, #212]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
 80023ce:	e01a      	b.n	8002406 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023d0:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a32      	ldr	r2, [pc, #200]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023dc:	f7fe ffba 	bl	8001354 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e4:	f7fe ffb6 	bl	8001354 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e328      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023f6:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1dc>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d073      	beq.n	80024fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d005      	beq.n	8002424 <HAL_RCC_OscConfig+0x21c>
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d10e      	bne.n	800243c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d10b      	bne.n	800243c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002424:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d063      	beq.n	80024f8 <HAL_RCC_OscConfig+0x2f0>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d15f      	bne.n	80024f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e305      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002444:	d106      	bne.n	8002454 <HAL_RCC_OscConfig+0x24c>
 8002446:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e01d      	b.n	8002490 <HAL_RCC_OscConfig+0x288>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x270>
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a0c      	ldr	r2, [pc, #48]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0x288>
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <HAL_RCC_OscConfig+0x298>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01b      	beq.n	80024d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe ff5c 	bl	8001354 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249e:	e010      	b.n	80024c2 <HAL_RCC_OscConfig+0x2ba>
 80024a0:	40021000 	.word	0x40021000
 80024a4:	080082cc 	.word	0x080082cc
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7fe ff50 	bl	8001354 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e2c2      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c2:	4baf      	ldr	r3, [pc, #700]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x2a8>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe ff40 	bl	8001354 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe ff3c 	bl	8001354 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e2ae      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ea:	4ba5      	ldr	r3, [pc, #660]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x2d0>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d060      	beq.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d005      	beq.n	8002518 <HAL_RCC_OscConfig+0x310>
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d119      	bne.n	8002546 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d116      	bne.n	8002546 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002518:	4b99      	ldr	r3, [pc, #612]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_OscConfig+0x328>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e28b      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002530:	4b93      	ldr	r3, [pc, #588]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	4990      	ldr	r1, [pc, #576]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002544:	e040      	b.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d023      	beq.n	8002596 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254e:	4b8c      	ldr	r3, [pc, #560]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a8b      	ldr	r2, [pc, #556]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7fe fefb 	bl	8001354 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002562:	f7fe fef7 	bl	8001354 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e269      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002574:	4b82      	ldr	r3, [pc, #520]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	4b7f      	ldr	r3, [pc, #508]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	061b      	lsls	r3, r3, #24
 800258e:	497c      	ldr	r1, [pc, #496]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
 8002594:	e018      	b.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002596:	4b7a      	ldr	r3, [pc, #488]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a79      	ldr	r2, [pc, #484]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800259c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7fe fed7 	bl	8001354 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025aa:	f7fe fed3 	bl	8001354 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e245      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025bc:	4b70      	ldr	r3, [pc, #448]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f0      	bne.n	80025aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d03c      	beq.n	800264e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01c      	beq.n	8002616 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025dc:	4b68      	ldr	r3, [pc, #416]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80025de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e2:	4a67      	ldr	r2, [pc, #412]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe feb2 	bl	8001354 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f4:	f7fe feae 	bl	8001354 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e220      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002606:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ef      	beq.n	80025f4 <HAL_RCC_OscConfig+0x3ec>
 8002614:	e01b      	b.n	800264e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002616:	4b5a      	ldr	r3, [pc, #360]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800261c:	4a58      	ldr	r2, [pc, #352]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7fe fe95 	bl	8001354 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262e:	f7fe fe91 	bl	8001354 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e203      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ef      	bne.n	800262e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80a6 	beq.w	80027a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265c:	2300      	movs	r3, #0
 800265e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002660:	4b47      	ldr	r3, [pc, #284]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266c:	4b44      	ldr	r3, [pc, #272]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	4a43      	ldr	r2, [pc, #268]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002676:	6593      	str	r3, [r2, #88]	; 0x58
 8002678:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002684:	2301      	movs	r3, #1
 8002686:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002688:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <HAL_RCC_OscConfig+0x57c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d118      	bne.n	80026c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002694:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_RCC_OscConfig+0x57c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a3a      	ldr	r2, [pc, #232]	; (8002784 <HAL_RCC_OscConfig+0x57c>)
 800269a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a0:	f7fe fe58 	bl	8001354 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a8:	f7fe fe54 	bl	8001354 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e1c6      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ba:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_RCC_OscConfig+0x57c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d108      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4d8>
 80026ce:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	4a2a      	ldr	r2, [pc, #168]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026de:	e024      	b.n	800272a <HAL_RCC_OscConfig+0x522>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d110      	bne.n	800270a <HAL_RCC_OscConfig+0x502>
 80026e8:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	4a24      	ldr	r2, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026f8:	4b21      	ldr	r3, [pc, #132]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fe:	4a20      	ldr	r2, [pc, #128]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002708:	e00f      	b.n	800272a <HAL_RCC_OscConfig+0x522>
 800270a:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002710:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800271a:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	4a17      	ldr	r2, [pc, #92]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002722:	f023 0304 	bic.w	r3, r3, #4
 8002726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d016      	beq.n	8002760 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7fe fe0f 	bl	8001354 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe fe0b 	bl	8001354 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e17b      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x578>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0ed      	beq.n	800273a <HAL_RCC_OscConfig+0x532>
 800275e:	e01a      	b.n	8002796 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7fe fdf8 	bl	8001354 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002766:	e00f      	b.n	8002788 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7fe fdf4 	bl	8001354 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d906      	bls.n	8002788 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e164      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002788:	4ba8      	ldr	r3, [pc, #672]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1e8      	bne.n	8002768 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002796:	7ffb      	ldrb	r3, [r7, #31]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4ba3      	ldr	r3, [pc, #652]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	4aa2      	ldr	r2, [pc, #648]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80027a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d03c      	beq.n	800282e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027bc:	4b9b      	ldr	r3, [pc, #620]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80027be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027c2:	4a9a      	ldr	r2, [pc, #616]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7fe fdc2 	bl	8001354 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d4:	f7fe fdbe 	bl	8001354 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e130      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027e6:	4b91      	ldr	r3, [pc, #580]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80027e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ef      	beq.n	80027d4 <HAL_RCC_OscConfig+0x5cc>
 80027f4:	e01b      	b.n	800282e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027f6:	4b8d      	ldr	r3, [pc, #564]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80027f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027fc:	4a8b      	ldr	r2, [pc, #556]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7fe fda5 	bl	8001354 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800280e:	f7fe fda1 	bl	8001354 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e113      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002820:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1ef      	bne.n	800280e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8107 	beq.w	8002a46 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	2b02      	cmp	r3, #2
 800283e:	f040 80cb 	bne.w	80029d8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002842:	4b7a      	ldr	r3, [pc, #488]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f003 0203 	and.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	429a      	cmp	r2, r3
 8002854:	d12c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	3b01      	subs	r3, #1
 8002862:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d123      	bne.n	80028b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d11b      	bne.n	80028b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d113      	bne.n	80028b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	3b01      	subs	r3, #1
 8002896:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d109      	bne.n	80028b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	3b01      	subs	r3, #1
 80028aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d06d      	beq.n	800298c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	2b0c      	cmp	r3, #12
 80028b4:	d068      	beq.n	8002988 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028b6:	4b5d      	ldr	r3, [pc, #372]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028c2:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0ba      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028d2:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a55      	ldr	r2, [pc, #340]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80028d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028de:	f7fe fd39 	bl	8001354 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fd35 	bl	8001354 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e0a7      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	4b4c      	ldr	r3, [pc, #304]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002904:	4b49      	ldr	r3, [pc, #292]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_RCC_OscConfig+0x828>)
 800290a:	4013      	ands	r3, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002914:	3a01      	subs	r2, #1
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	4311      	orrs	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800291e:	0212      	lsls	r2, r2, #8
 8002920:	4311      	orrs	r1, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002926:	0852      	lsrs	r2, r2, #1
 8002928:	3a01      	subs	r2, #1
 800292a:	0552      	lsls	r2, r2, #21
 800292c:	4311      	orrs	r1, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002932:	0852      	lsrs	r2, r2, #1
 8002934:	3a01      	subs	r2, #1
 8002936:	0652      	lsls	r2, r2, #25
 8002938:	4311      	orrs	r1, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800293e:	06d2      	lsls	r2, r2, #27
 8002940:	430a      	orrs	r2, r1
 8002942:	493a      	ldr	r1, [pc, #232]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002944:	4313      	orrs	r3, r2
 8002946:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002948:	4b38      	ldr	r3, [pc, #224]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a37      	ldr	r2, [pc, #220]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800294e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002952:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002954:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a34      	ldr	r2, [pc, #208]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800295a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002960:	f7fe fcf8 	bl	8001354 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe fcf4 	bl	8001354 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e066      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297a:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002986:	e05e      	b.n	8002a46 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e05d      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298c:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d156      	bne.n	8002a46 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002998:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a23      	ldr	r2, [pc, #140]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 800299e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029b0:	f7fe fcd0 	bl	8001354 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe fccc 	bl	8001354 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e03e      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ca:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x7b0>
 80029d6:	e036      	b.n	8002a46 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b0c      	cmp	r3, #12
 80029dc:	d031      	beq.n	8002a42 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 80029fc:	f023 0303 	bic.w	r3, r3, #3
 8002a00:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_RCC_OscConfig+0x824>)
 8002a08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a10:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fe fc9f 	bl	8001354 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a18:	e00c      	b.n	8002a34 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1a:	f7fe fc9b 	bl	8001354 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d905      	bls.n	8002a34 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e00d      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_RCC_OscConfig+0x848>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ec      	bne.n	8002a1a <HAL_RCC_OscConfig+0x812>
 8002a40:	e001      	b.n	8002a46 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000

08002a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e10f      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b89      	ldr	r3, [pc, #548]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d910      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b86      	ldr	r3, [pc, #536]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 020f 	bic.w	r2, r3, #15
 8002a82:	4984      	ldr	r1, [pc, #528]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b82      	ldr	r3, [pc, #520]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0f7      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8089 	beq.w	8002bbc <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d133      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab2:	4b79      	ldr	r3, [pc, #484]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0e4      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002ac2:	f000 fa43 	bl	8002f4c <RCC_GetSysClockFreqFromPLLSource>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4a74      	ldr	r2, [pc, #464]	; (8002c9c <HAL_RCC_ClockConfig+0x248>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d955      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ace:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ada:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ae2:	4a6d      	ldr	r2, [pc, #436]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	e044      	b.n	8002b7a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d03e      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x126>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d13a      	bne.n	8002b7a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b04:	4b64      	ldr	r3, [pc, #400]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b0c:	4a62      	ldr	r2, [pc, #392]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b12:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	e02f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d115      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0ac      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b3a:	4b57      	ldr	r3, [pc, #348]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e0a0      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b4a:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e098      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002b5a:	f000 f8a7 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a4e      	ldr	r2, [pc, #312]	; (8002c9c <HAL_RCC_ClockConfig+0x248>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d909      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b66:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b6e:	4a4a      	ldr	r2, [pc, #296]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b7a:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f023 0203 	bic.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4944      	ldr	r1, [pc, #272]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b8c:	f7fe fbe2 	bl	8001354 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b94:	f7fe fbde 	bl	8001354 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e070      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 020c 	and.w	r2, r3, #12
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d1eb      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d009      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b33      	ldr	r3, [pc, #204]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4930      	ldr	r1, [pc, #192]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
 8002bda:	e008      	b.n	8002bee <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b80      	cmp	r3, #128	; 0x80
 8002be0:	d105      	bne.n	8002bee <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002be2:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	4a2c      	ldr	r2, [pc, #176]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002be8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bec:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bee:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d210      	bcs.n	8002c1e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfc:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 020f 	bic.w	r2, r3, #15
 8002c04:	4923      	ldr	r1, [pc, #140]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0c:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d001      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e036      	b.n	8002c8c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4918      	ldr	r1, [pc, #96]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d009      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4910      	ldr	r1, [pc, #64]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c5c:	f000 f826 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <HAL_RCC_ClockConfig+0x24c>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <HAL_RCC_ClockConfig+0x250>)
 8002c7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x254>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd ff33 	bl	8000aec <HAL_InitTick>
 8002c86:	4603      	mov	r3, r0
 8002c88:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40022000 	.word	0x40022000
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	04c4b400 	.word	0x04c4b400
 8002ca0:	080082cc 	.word	0x080082cc
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cba:	4b3e      	ldr	r3, [pc, #248]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc4:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d121      	bne.n	8002d1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d11e      	bne.n	8002d1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ce0:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cec:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	e005      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cfc:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d08:	4a2b      	ldr	r2, [pc, #172]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10d      	bne.n	8002d34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d102      	bne.n	8002d2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d24:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	e004      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d30:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	2b0c      	cmp	r3, #12
 8002d38:	d134      	bne.n	8002da4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d3a:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d003      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0xac>
 8002d50:	e005      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d52:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002d54:	617b      	str	r3, [r7, #20]
      break;
 8002d56:	e005      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d58:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d5a:	617b      	str	r3, [r7, #20]
      break;
 8002d5c:	e002      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	617b      	str	r3, [r7, #20]
      break;
 8002d62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d64:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	3301      	adds	r3, #1
 8002d70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	fb02 f203 	mul.w	r2, r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	0e5b      	lsrs	r3, r3, #25
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	3301      	adds	r3, #1
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002da4:	69bb      	ldr	r3, [r7, #24]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3724      	adds	r7, #36	; 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	080082e4 	.word	0x080082e4
 8002dbc:	00f42400 	.word	0x00f42400
 8002dc0:	007a1200 	.word	0x007a1200

08002dc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000000 	.word	0x20000000

08002ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002de0:	f7ff fff0 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4904      	ldr	r1, [pc, #16]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	080082dc 	.word	0x080082dc

08002e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e0c:	f7ff ffda 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	0adb      	lsrs	r3, r3, #11
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4904      	ldr	r1, [pc, #16]	; (8002e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	080082dc 	.word	0x080082dc

08002e34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	220f      	movs	r2, #15
 8002e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0203 	and.w	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCC_GetClockConfig+0x5c>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	08db      	lsrs	r3, r3, #3
 8002e6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_RCC_GetClockConfig+0x60>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 020f 	and.w	r2, r3, #15
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	601a      	str	r2, [r3, #0]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40022000 	.word	0x40022000

08002e98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ea4:	4b27      	ldr	r3, [pc, #156]	; (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002eb0:	f7ff f8c6 	bl	8002040 <HAL_PWREx_GetVoltageRange>
 8002eb4:	6178      	str	r0, [r7, #20]
 8002eb6:	e014      	b.n	8002ee2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	4a21      	ldr	r2, [pc, #132]	; (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ed0:	f7ff f8b6 	bl	8002040 <HAL_PWREx_GetVoltageRange>
 8002ed4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ee8:	d10b      	bne.n	8002f02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b80      	cmp	r3, #128	; 0x80
 8002eee:	d913      	bls.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ef4:	d902      	bls.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	e00d      	b.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002efc:	2301      	movs	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	e00a      	b.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b7f      	cmp	r3, #127	; 0x7f
 8002f06:	d902      	bls.n	8002f0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f08:	2302      	movs	r3, #2
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e004      	b.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b70      	cmp	r3, #112	; 0x70
 8002f12:	d101      	bne.n	8002f18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f14:	2301      	movs	r3, #1
 8002f16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f023 020f 	bic.w	r2, r3, #15
 8002f20:	4909      	ldr	r1, [pc, #36]	; (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f28:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d001      	beq.n	8002f3a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40022000 	.word	0x40022000

08002f4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002f56:	4b2d      	ldr	r3, [pc, #180]	; (800300c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d118      	bne.n	8002f94 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f6e:	4b27      	ldr	r3, [pc, #156]	; (800300c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e005      	b.n	8002f8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f7e:	4b23      	ldr	r3, [pc, #140]	; (800300c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f8a:	4a21      	ldr	r2, [pc, #132]	; (8003010 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f92:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d003      	beq.n	8002fac <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d003      	beq.n	8002fb2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002faa:	e005      	b.n	8002fb8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002fae:	613b      	str	r3, [r7, #16]
    break;
 8002fb0:	e005      	b.n	8002fbe <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002fb2:	4b19      	ldr	r3, [pc, #100]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002fb4:	613b      	str	r3, [r7, #16]
    break;
 8002fb6:	e002      	b.n	8002fbe <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	613b      	str	r3, [r7, #16]
    break;
 8002fbc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	3301      	adds	r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	; (800300c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	fb02 f203 	mul.w	r2, r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fe4:	4b09      	ldr	r3, [pc, #36]	; (800300c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	0e5b      	lsrs	r3, r3, #25
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002ffe:	683b      	ldr	r3, [r7, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40021000 	.word	0x40021000
 8003010:	080082e4 	.word	0x080082e4
 8003014:	00f42400 	.word	0x00f42400
 8003018:	007a1200 	.word	0x007a1200

0800301c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003024:	2300      	movs	r3, #0
 8003026:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003028:	2300      	movs	r3, #0
 800302a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003034:	2b00      	cmp	r3, #0
 8003036:	d040      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303c:	2b80      	cmp	r3, #128	; 0x80
 800303e:	d02a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003040:	2b80      	cmp	r3, #128	; 0x80
 8003042:	d825      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003044:	2b60      	cmp	r3, #96	; 0x60
 8003046:	d026      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003048:	2b60      	cmp	r3, #96	; 0x60
 800304a:	d821      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d006      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003050:	2b40      	cmp	r3, #64	; 0x40
 8003052:	d81d      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d009      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003058:	2b20      	cmp	r3, #32
 800305a:	d010      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800305c:	e018      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800305e:	4b89      	ldr	r3, [pc, #548]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	4a88      	ldr	r2, [pc, #544]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003068:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800306a:	e015      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fb02 	bl	800367c <RCCEx_PLLSAI1_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800307c:	e00c      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3320      	adds	r3, #32
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fbed 	bl	8003864 <RCCEx_PLLSAI2_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800308e:	e003      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	74fb      	strb	r3, [r7, #19]
      break;
 8003094:	e000      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10b      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800309e:	4b79      	ldr	r3, [pc, #484]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030a4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ac:	4975      	ldr	r1, [pc, #468]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80030b4:	e001      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d047      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ce:	d030      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80030d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d4:	d82a      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030da:	d02a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80030dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e0:	d824      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e6:	d008      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xde>
 80030e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ec:	d81e      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80030f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f6:	d010      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80030f8:	e018      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030fa:	4b62      	ldr	r3, [pc, #392]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	4a61      	ldr	r2, [pc, #388]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003106:	e015      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3304      	adds	r3, #4
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fab4 	bl	800367c <RCCEx_PLLSAI1_Config>
 8003114:	4603      	mov	r3, r0
 8003116:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003118:	e00c      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3320      	adds	r3, #32
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fb9f 	bl	8003864 <RCCEx_PLLSAI2_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800312a:	e003      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	74fb      	strb	r3, [r7, #19]
      break;
 8003130:	e000      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10b      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800313a:	4b52      	ldr	r3, [pc, #328]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800313c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	494e      	ldr	r1, [pc, #312]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003150:	e001      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003152:	7cfb      	ldrb	r3, [r7, #19]
 8003154:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 809f 	beq.w	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003164:	2300      	movs	r3, #0
 8003166:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003168:	4b46      	ldr	r3, [pc, #280]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003178:	2300      	movs	r3, #0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00d      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	4b41      	ldr	r3, [pc, #260]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003182:	4a40      	ldr	r2, [pc, #256]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003188:	6593      	str	r3, [r2, #88]	; 0x58
 800318a:	4b3e      	ldr	r3, [pc, #248]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003196:	2301      	movs	r3, #1
 8003198:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800319a:	4b3b      	ldr	r3, [pc, #236]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a3a      	ldr	r2, [pc, #232]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031a6:	f7fe f8d5 	bl	8001354 <HAL_GetTick>
 80031aa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ac:	e009      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ae:	f7fe f8d1 	bl	8001354 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d902      	bls.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	74fb      	strb	r3, [r7, #19]
        break;
 80031c0:	e005      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031c2:	4b31      	ldr	r3, [pc, #196]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0ef      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d15b      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031d4:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031de:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01f      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d019      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031f2:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031fe:	4b21      	ldr	r3, [pc, #132]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800320e:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003214:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800321e:	4a19      	ldr	r2, [pc, #100]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d016      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe f890 	bl	8001354 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003236:	e00b      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fe f88c 	bl	8001354 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d902      	bls.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	74fb      	strb	r3, [r7, #19]
            break;
 800324e:	e006      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0ec      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800325e:	7cfb      	ldrb	r3, [r7, #19]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10c      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003264:	4b07      	ldr	r3, [pc, #28]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003274:	4903      	ldr	r1, [pc, #12]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800327c:	e008      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800327e:	7cfb      	ldrb	r3, [r7, #19]
 8003280:	74bb      	strb	r3, [r7, #18]
 8003282:	e005      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003284:	40021000 	.word	0x40021000
 8003288:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	7cfb      	ldrb	r3, [r7, #19]
 800328e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003290:	7c7b      	ldrb	r3, [r7, #17]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d105      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003296:	4ba0      	ldr	r3, [pc, #640]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	4a9f      	ldr	r2, [pc, #636]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800329c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ae:	4b9a      	ldr	r3, [pc, #616]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f023 0203 	bic.w	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	4996      	ldr	r1, [pc, #600]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032d0:	4b91      	ldr	r3, [pc, #580]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f023 020c 	bic.w	r2, r3, #12
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	498e      	ldr	r1, [pc, #568]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032f2:	4b89      	ldr	r3, [pc, #548]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003300:	4985      	ldr	r1, [pc, #532]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003314:	4b80      	ldr	r3, [pc, #512]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003322:	497d      	ldr	r1, [pc, #500]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003336:	4b78      	ldr	r3, [pc, #480]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003344:	4974      	ldr	r1, [pc, #464]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003358:	4b6f      	ldr	r3, [pc, #444]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003366:	496c      	ldr	r1, [pc, #432]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800337a:	4b67      	ldr	r3, [pc, #412]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003388:	4963      	ldr	r1, [pc, #396]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800339c:	4b5e      	ldr	r3, [pc, #376]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033aa:	495b      	ldr	r1, [pc, #364]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033be:	4b56      	ldr	r3, [pc, #344]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	4952      	ldr	r1, [pc, #328]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033e0:	4b4d      	ldr	r3, [pc, #308]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ee:	494a      	ldr	r1, [pc, #296]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003402:	4b45      	ldr	r3, [pc, #276]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003408:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	4941      	ldr	r1, [pc, #260]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003424:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800342a:	f023 0203 	bic.w	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003432:	4939      	ldr	r1, [pc, #228]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d028      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003446:	4b34      	ldr	r3, [pc, #208]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003454:	4930      	ldr	r1, [pc, #192]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003464:	d106      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003466:	4b2c      	ldr	r3, [pc, #176]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	4a2b      	ldr	r2, [pc, #172]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003470:	60d3      	str	r3, [r2, #12]
 8003472:	e011      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800347c:	d10c      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	2101      	movs	r1, #1
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f8f9 	bl	800367c <RCCEx_PLLSAI1_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003494:	7cfb      	ldrb	r3, [r7, #19]
 8003496:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d04d      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ac:	d108      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80034ae:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034b4:	4a18      	ldr	r2, [pc, #96]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80034be:	e012      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034c6:	4a14      	ldr	r2, [pc, #80]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034de:	490e      	ldr	r1, [pc, #56]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ee:	d106      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f0:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4a08      	ldr	r2, [pc, #32]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034fa:	60d3      	str	r3, [r2, #12]
 80034fc:	e020      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003506:	d109      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a02      	ldr	r2, [pc, #8]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800350e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003512:	60d3      	str	r3, [r2, #12]
 8003514:	e014      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003524:	d10c      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	2101      	movs	r1, #1
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f8a5 	bl	800367c <RCCEx_PLLSAI1_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d028      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800354c:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800355a:	4947      	ldr	r1, [pc, #284]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800356a:	d106      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800356c:	4b42      	ldr	r3, [pc, #264]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4a41      	ldr	r2, [pc, #260]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003576:	60d3      	str	r3, [r2, #12]
 8003578:	e011      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003582:	d10c      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	2101      	movs	r1, #1
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f876 	bl	800367c <RCCEx_PLLSAI1_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01e      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035aa:	4b33      	ldr	r3, [pc, #204]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ba:	492f      	ldr	r1, [pc, #188]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2102      	movs	r1, #2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 f851 	bl	800367c <RCCEx_PLLSAI1_Config>
 80035da:	4603      	mov	r3, r0
 80035dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035de:	7cfb      	ldrb	r3, [r7, #19]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80035e4:	7cfb      	ldrb	r3, [r7, #19]
 80035e6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00b      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035f4:	4b20      	ldr	r3, [pc, #128]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035fa:	f023 0204 	bic.w	r2, r3, #4
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003604:	491c      	ldr	r1, [pc, #112]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003618:	4b17      	ldr	r3, [pc, #92]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800361e:	f023 0218 	bic.w	r2, r3, #24
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	4913      	ldr	r1, [pc, #76]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d017      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800363c:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800363e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003642:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800364c:	490a      	ldr	r1, [pc, #40]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800365a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800365e:	d105      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800366a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800366c:	7cbb      	ldrb	r3, [r7, #18]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000

0800367c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800368a:	4b72      	ldr	r3, [pc, #456]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00e      	beq.n	80036b4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003696:	4b6f      	ldr	r3, [pc, #444]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0203 	and.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d103      	bne.n	80036ae <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
       ||
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d142      	bne.n	8003734 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
 80036b2:	e03f      	b.n	8003734 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d018      	beq.n	80036ee <RCCEx_PLLSAI1_Config+0x72>
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d825      	bhi.n	800370c <RCCEx_PLLSAI1_Config+0x90>
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d002      	beq.n	80036ca <RCCEx_PLLSAI1_Config+0x4e>
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d009      	beq.n	80036dc <RCCEx_PLLSAI1_Config+0x60>
 80036c8:	e020      	b.n	800370c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036ca:	4b62      	ldr	r3, [pc, #392]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d11d      	bne.n	8003712 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036da:	e01a      	b.n	8003712 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036dc:	4b5d      	ldr	r3, [pc, #372]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d116      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ec:	e013      	b.n	8003716 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ee:	4b59      	ldr	r3, [pc, #356]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10f      	bne.n	800371a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036fa:	4b56      	ldr	r3, [pc, #344]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800370a:	e006      	b.n	800371a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      break;
 8003710:	e004      	b.n	800371c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800371a:	bf00      	nop
    }

    if(status == HAL_OK)
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d108      	bne.n	8003734 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003722:	4b4c      	ldr	r3, [pc, #304]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f023 0203 	bic.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4949      	ldr	r1, [pc, #292]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003730:	4313      	orrs	r3, r2
 8003732:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f040 8086 	bne.w	8003848 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800373c:	4b45      	ldr	r3, [pc, #276]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a44      	ldr	r2, [pc, #272]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003742:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003748:	f7fd fe04 	bl	8001354 <HAL_GetTick>
 800374c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800374e:	e009      	b.n	8003764 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003750:	f7fd fe00 	bl	8001354 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d902      	bls.n	8003764 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	73fb      	strb	r3, [r7, #15]
        break;
 8003762:	e005      	b.n	8003770 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003764:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ef      	bne.n	8003750 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d168      	bne.n	8003848 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d113      	bne.n	80037a4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800377c:	4b35      	ldr	r3, [pc, #212]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	4b35      	ldr	r3, [pc, #212]	; (8003858 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003782:	4013      	ands	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6892      	ldr	r2, [r2, #8]
 8003788:	0211      	lsls	r1, r2, #8
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68d2      	ldr	r2, [r2, #12]
 800378e:	06d2      	lsls	r2, r2, #27
 8003790:	4311      	orrs	r1, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6852      	ldr	r2, [r2, #4]
 8003796:	3a01      	subs	r2, #1
 8003798:	0112      	lsls	r2, r2, #4
 800379a:	430a      	orrs	r2, r1
 800379c:	492d      	ldr	r1, [pc, #180]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	610b      	str	r3, [r1, #16]
 80037a2:	e02d      	b.n	8003800 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d115      	bne.n	80037d6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037aa:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	4b2b      	ldr	r3, [pc, #172]	; (800385c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6892      	ldr	r2, [r2, #8]
 80037b6:	0211      	lsls	r1, r2, #8
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6912      	ldr	r2, [r2, #16]
 80037bc:	0852      	lsrs	r2, r2, #1
 80037be:	3a01      	subs	r2, #1
 80037c0:	0552      	lsls	r2, r2, #21
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6852      	ldr	r2, [r2, #4]
 80037c8:	3a01      	subs	r2, #1
 80037ca:	0112      	lsls	r2, r2, #4
 80037cc:	430a      	orrs	r2, r1
 80037ce:	4921      	ldr	r1, [pc, #132]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	610b      	str	r3, [r1, #16]
 80037d4:	e014      	b.n	8003800 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037d6:	4b1f      	ldr	r3, [pc, #124]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	4b21      	ldr	r3, [pc, #132]	; (8003860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6892      	ldr	r2, [r2, #8]
 80037e2:	0211      	lsls	r1, r2, #8
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6952      	ldr	r2, [r2, #20]
 80037e8:	0852      	lsrs	r2, r2, #1
 80037ea:	3a01      	subs	r2, #1
 80037ec:	0652      	lsls	r2, r2, #25
 80037ee:	4311      	orrs	r1, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6852      	ldr	r2, [r2, #4]
 80037f4:	3a01      	subs	r2, #1
 80037f6:	0112      	lsls	r2, r2, #4
 80037f8:	430a      	orrs	r2, r1
 80037fa:	4916      	ldr	r1, [pc, #88]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003800:	4b14      	ldr	r3, [pc, #80]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a13      	ldr	r2, [pc, #76]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800380a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fd fda2 	bl	8001354 <HAL_GetTick>
 8003810:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003812:	e009      	b.n	8003828 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003814:	f7fd fd9e 	bl	8001354 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d902      	bls.n	8003828 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	73fb      	strb	r3, [r7, #15]
          break;
 8003826:	e005      	b.n	8003834 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ef      	beq.n	8003814 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	4904      	ldr	r1, [pc, #16]	; (8003854 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003844:	4313      	orrs	r3, r2
 8003846:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	07ff800f 	.word	0x07ff800f
 800385c:	ff9f800f 	.word	0xff9f800f
 8003860:	f9ff800f 	.word	0xf9ff800f

08003864 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003872:	4b72      	ldr	r3, [pc, #456]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00e      	beq.n	800389c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800387e:	4b6f      	ldr	r3, [pc, #444]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0203 	and.w	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d103      	bne.n	8003896 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
       ||
 8003892:	2b00      	cmp	r3, #0
 8003894:	d142      	bne.n	800391c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
 800389a:	e03f      	b.n	800391c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d018      	beq.n	80038d6 <RCCEx_PLLSAI2_Config+0x72>
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d825      	bhi.n	80038f4 <RCCEx_PLLSAI2_Config+0x90>
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d002      	beq.n	80038b2 <RCCEx_PLLSAI2_Config+0x4e>
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d009      	beq.n	80038c4 <RCCEx_PLLSAI2_Config+0x60>
 80038b0:	e020      	b.n	80038f4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038b2:	4b62      	ldr	r3, [pc, #392]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d11d      	bne.n	80038fa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c2:	e01a      	b.n	80038fa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038c4:	4b5d      	ldr	r3, [pc, #372]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d116      	bne.n	80038fe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d4:	e013      	b.n	80038fe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038d6:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10f      	bne.n	8003902 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038e2:	4b56      	ldr	r3, [pc, #344]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038f2:	e006      	b.n	8003902 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      break;
 80038f8:	e004      	b.n	8003904 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80038fa:	bf00      	nop
 80038fc:	e002      	b.n	8003904 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80038fe:	bf00      	nop
 8003900:	e000      	b.n	8003904 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003902:	bf00      	nop
    }

    if(status == HAL_OK)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d108      	bne.n	800391c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800390a:	4b4c      	ldr	r3, [pc, #304]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f023 0203 	bic.w	r2, r3, #3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4949      	ldr	r1, [pc, #292]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003918:	4313      	orrs	r3, r2
 800391a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b00      	cmp	r3, #0
 8003920:	f040 8086 	bne.w	8003a30 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003924:	4b45      	ldr	r3, [pc, #276]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a44      	ldr	r2, [pc, #272]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 800392a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003930:	f7fd fd10 	bl	8001354 <HAL_GetTick>
 8003934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003936:	e009      	b.n	800394c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003938:	f7fd fd0c 	bl	8001354 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d902      	bls.n	800394c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	73fb      	strb	r3, [r7, #15]
        break;
 800394a:	e005      	b.n	8003958 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800394c:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1ef      	bne.n	8003938 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d168      	bne.n	8003a30 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d113      	bne.n	800398c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003964:	4b35      	ldr	r3, [pc, #212]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <RCCEx_PLLSAI2_Config+0x1dc>)
 800396a:	4013      	ands	r3, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6892      	ldr	r2, [r2, #8]
 8003970:	0211      	lsls	r1, r2, #8
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68d2      	ldr	r2, [r2, #12]
 8003976:	06d2      	lsls	r2, r2, #27
 8003978:	4311      	orrs	r1, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6852      	ldr	r2, [r2, #4]
 800397e:	3a01      	subs	r2, #1
 8003980:	0112      	lsls	r2, r2, #4
 8003982:	430a      	orrs	r2, r1
 8003984:	492d      	ldr	r1, [pc, #180]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003986:	4313      	orrs	r3, r2
 8003988:	614b      	str	r3, [r1, #20]
 800398a:	e02d      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d115      	bne.n	80039be <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003992:	4b2a      	ldr	r3, [pc, #168]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6892      	ldr	r2, [r2, #8]
 800399e:	0211      	lsls	r1, r2, #8
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6912      	ldr	r2, [r2, #16]
 80039a4:	0852      	lsrs	r2, r2, #1
 80039a6:	3a01      	subs	r2, #1
 80039a8:	0552      	lsls	r2, r2, #21
 80039aa:	4311      	orrs	r1, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6852      	ldr	r2, [r2, #4]
 80039b0:	3a01      	subs	r2, #1
 80039b2:	0112      	lsls	r2, r2, #4
 80039b4:	430a      	orrs	r2, r1
 80039b6:	4921      	ldr	r1, [pc, #132]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	614b      	str	r3, [r1, #20]
 80039bc:	e014      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039be:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	4b21      	ldr	r3, [pc, #132]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1e4>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6892      	ldr	r2, [r2, #8]
 80039ca:	0211      	lsls	r1, r2, #8
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6952      	ldr	r2, [r2, #20]
 80039d0:	0852      	lsrs	r2, r2, #1
 80039d2:	3a01      	subs	r2, #1
 80039d4:	0652      	lsls	r2, r2, #25
 80039d6:	4311      	orrs	r1, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6852      	ldr	r2, [r2, #4]
 80039dc:	3a01      	subs	r2, #1
 80039de:	0112      	lsls	r2, r2, #4
 80039e0:	430a      	orrs	r2, r1
 80039e2:	4916      	ldr	r1, [pc, #88]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039e8:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fd fcae 	bl	8001354 <HAL_GetTick>
 80039f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039fa:	e009      	b.n	8003a10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039fc:	f7fd fcaa 	bl	8001354 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d902      	bls.n	8003a10 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a0e:	e005      	b.n	8003a1c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0ef      	beq.n	80039fc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	4904      	ldr	r1, [pc, #16]	; (8003a3c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	07ff800f 	.word	0x07ff800f
 8003a44:	ff9f800f 	.word	0xff9f800f
 8003a48:	f9ff800f 	.word	0xf9ff800f

08003a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e095      	b.n	8003b8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d108      	bne.n	8003a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a6e:	d009      	beq.n	8003a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	61da      	str	r2, [r3, #28]
 8003a76:	e005      	b.n	8003a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fc ff76 	bl	8000990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ac4:	d902      	bls.n	8003acc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	e002      	b.n	8003ad2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ad0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ada:	d007      	beq.n	8003aec <HAL_SPI_Init+0xa0>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ae4:	d002      	beq.n	8003aec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2e:	ea42 0103 	orr.w	r1, r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	0c1b      	lsrs	r3, r3, #16
 8003b48:	f003 0204 	and.w	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b68:	ea42 0103 	orr.w	r1, r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e049      	b.n	8003c38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d106      	bne.n	8003bbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f841 	bl	8003c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	f000 f9f7 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d001      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e04f      	b.n	8003d0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a23      	ldr	r2, [pc, #140]	; (8003d18 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d01d      	beq.n	8003cca <HAL_TIM_Base_Start_IT+0x76>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c96:	d018      	beq.n	8003cca <HAL_TIM_Base_Start_IT+0x76>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1f      	ldr	r2, [pc, #124]	; (8003d1c <HAL_TIM_Base_Start_IT+0xc8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d013      	beq.n	8003cca <HAL_TIM_Base_Start_IT+0x76>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00e      	beq.n	8003cca <HAL_TIM_Base_Start_IT+0x76>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d009      	beq.n	8003cca <HAL_TIM_Base_Start_IT+0x76>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d004      	beq.n	8003cca <HAL_TIM_Base_Start_IT+0x76>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a19      	ldr	r2, [pc, #100]	; (8003d2c <HAL_TIM_Base_Start_IT+0xd8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d115      	bne.n	8003cf6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b06      	cmp	r3, #6
 8003cda:	d015      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0xb4>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce2:	d011      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf4:	e008      	b.n	8003d08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e000      	b.n	8003d0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40012c00 	.word	0x40012c00
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40000c00 	.word	0x40000c00
 8003d28:	40013400 	.word	0x40013400
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	00010007 	.word	0x00010007

08003d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d122      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d11b      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0202 	mvn.w	r2, #2
 8003d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f905 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f8f7 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f908 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d122      	bne.n	8003de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d11b      	bne.n	8003de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0204 	mvn.w	r2, #4
 8003db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2202      	movs	r2, #2
 8003dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8db 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003dd0:	e005      	b.n	8003dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f8cd 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f8de 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d122      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d11b      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0208 	mvn.w	r2, #8
 8003e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f8b1 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003e24:	e005      	b.n	8003e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8a3 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f8b4 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b10      	cmp	r3, #16
 8003e44:	d122      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d11b      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0210 	mvn.w	r2, #16
 8003e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2208      	movs	r2, #8
 8003e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f887 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003e78:	e005      	b.n	8003e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f879 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f88a 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d10e      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d107      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0201 	mvn.w	r2, #1
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd f9c8 	bl	8001248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b80      	cmp	r3, #128	; 0x80
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed0:	2b80      	cmp	r3, #128	; 0x80
 8003ed2:	d107      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f914 	bl	800410c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef2:	d10e      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b80      	cmp	r3, #128	; 0x80
 8003f00:	d107      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f907 	bl	8004120 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d10e      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d107      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f838 	bl	8003fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d10e      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d107      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f06f 0220 	mvn.w	r2, #32
 8003f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f8c7 	bl	80040f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a40      	ldr	r2, [pc, #256]	; (80040d8 <TIM_Base_SetConfig+0x114>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d00f      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3d      	ldr	r2, [pc, #244]	; (80040dc <TIM_Base_SetConfig+0x118>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00b      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3c      	ldr	r2, [pc, #240]	; (80040e0 <TIM_Base_SetConfig+0x11c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d007      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3b      	ldr	r2, [pc, #236]	; (80040e4 <TIM_Base_SetConfig+0x120>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d003      	beq.n	8004004 <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3a      	ldr	r2, [pc, #232]	; (80040e8 <TIM_Base_SetConfig+0x124>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d108      	bne.n	8004016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2f      	ldr	r2, [pc, #188]	; (80040d8 <TIM_Base_SetConfig+0x114>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01f      	beq.n	800405e <TIM_Base_SetConfig+0x9a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004024:	d01b      	beq.n	800405e <TIM_Base_SetConfig+0x9a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2c      	ldr	r2, [pc, #176]	; (80040dc <TIM_Base_SetConfig+0x118>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d017      	beq.n	800405e <TIM_Base_SetConfig+0x9a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2b      	ldr	r2, [pc, #172]	; (80040e0 <TIM_Base_SetConfig+0x11c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <TIM_Base_SetConfig+0x9a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2a      	ldr	r2, [pc, #168]	; (80040e4 <TIM_Base_SetConfig+0x120>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00f      	beq.n	800405e <TIM_Base_SetConfig+0x9a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a29      	ldr	r2, [pc, #164]	; (80040e8 <TIM_Base_SetConfig+0x124>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00b      	beq.n	800405e <TIM_Base_SetConfig+0x9a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a28      	ldr	r2, [pc, #160]	; (80040ec <TIM_Base_SetConfig+0x128>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d007      	beq.n	800405e <TIM_Base_SetConfig+0x9a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a27      	ldr	r2, [pc, #156]	; (80040f0 <TIM_Base_SetConfig+0x12c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d003      	beq.n	800405e <TIM_Base_SetConfig+0x9a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a26      	ldr	r2, [pc, #152]	; (80040f4 <TIM_Base_SetConfig+0x130>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d108      	bne.n	8004070 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a10      	ldr	r2, [pc, #64]	; (80040d8 <TIM_Base_SetConfig+0x114>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00f      	beq.n	80040bc <TIM_Base_SetConfig+0xf8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <TIM_Base_SetConfig+0x124>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00b      	beq.n	80040bc <TIM_Base_SetConfig+0xf8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a11      	ldr	r2, [pc, #68]	; (80040ec <TIM_Base_SetConfig+0x128>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d007      	beq.n	80040bc <TIM_Base_SetConfig+0xf8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a10      	ldr	r2, [pc, #64]	; (80040f0 <TIM_Base_SetConfig+0x12c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_Base_SetConfig+0xf8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a0f      	ldr	r2, [pc, #60]	; (80040f4 <TIM_Base_SetConfig+0x130>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d103      	bne.n	80040c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	615a      	str	r2, [r3, #20]
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40012c00 	.word	0x40012c00
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00
 80040e8:	40013400 	.word	0x40013400
 80040ec:	40014000 	.word	0x40014000
 80040f0:	40014400 	.word	0x40014400
 80040f4:	40014800 	.word	0x40014800

080040f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e042      	b.n	80041cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414c:	2b00      	cmp	r3, #0
 800414e:	d106      	bne.n	800415e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7fc fb73 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2224      	movs	r2, #36	; 0x24
 8004162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f960 	bl	800443c <UART_SetConfig>
 800417c:	4603      	mov	r3, r0
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e022      	b.n	80041cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fc24 	bl	80049dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fcab 	bl	8004b20 <UART_CheckIdleState>
 80041ca:	4603      	mov	r3, r0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	f040 8084 	bne.w	80042f8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_UART_Transmit+0x28>
 80041f6:	88fb      	ldrh	r3, [r7, #6]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e07c      	b.n	80042fa <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_UART_Transmit+0x3a>
 800420a:	2302      	movs	r3, #2
 800420c:	e075      	b.n	80042fa <HAL_UART_Transmit+0x126>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2221      	movs	r2, #33	; 0x21
 8004222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004226:	f7fd f895 	bl	8001354 <HAL_GetTick>
 800422a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	88fa      	ldrh	r2, [r7, #6]
 8004238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004244:	d108      	bne.n	8004258 <HAL_UART_Transmit+0x84>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d104      	bne.n	8004258 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	e003      	b.n	8004260 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004268:	e02d      	b.n	80042c6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2200      	movs	r2, #0
 8004272:	2180      	movs	r1, #128	; 0x80
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 fc9b 	bl	8004bb0 <UART_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e03a      	b.n	80042fa <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10b      	bne.n	80042a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	881a      	ldrh	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004296:	b292      	uxth	r2, r2
 8004298:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	3302      	adds	r3, #2
 800429e:	61bb      	str	r3, [r7, #24]
 80042a0:	e008      	b.n	80042b4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	781a      	ldrb	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	b292      	uxth	r2, r2
 80042ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3301      	adds	r3, #1
 80042b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1cb      	bne.n	800426a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2200      	movs	r2, #0
 80042da:	2140      	movs	r1, #64	; 0x40
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 fc67 	bl	8004bb0 <UART_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e006      	b.n	80042fa <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	e000      	b.n	80042fa <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80042f8:	2302      	movs	r3, #2
  }
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004318:	2b20      	cmp	r3, #32
 800431a:	d170      	bne.n	80043fe <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_UART_Receive_DMA+0x24>
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e069      	b.n	8004400 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_UART_Receive_DMA+0x36>
 8004336:	2302      	movs	r3, #2
 8004338:	e062      	b.n	8004400 <HAL_UART_Receive_DMA+0xfc>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	88fa      	ldrh	r2, [r7, #6]
 800434c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2222      	movs	r2, #34	; 0x22
 800435c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004364:	2b00      	cmp	r3, #0
 8004366:	d02c      	beq.n	80043c2 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800436c:	4a26      	ldr	r2, [pc, #152]	; (8004408 <HAL_UART_Receive_DMA+0x104>)
 800436e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004374:	4a25      	ldr	r2, [pc, #148]	; (800440c <HAL_UART_Receive_DMA+0x108>)
 8004376:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800437c:	4a24      	ldr	r2, [pc, #144]	; (8004410 <HAL_UART_Receive_DMA+0x10c>)
 800437e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004384:	2200      	movs	r2, #0
 8004386:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3324      	adds	r3, #36	; 0x24
 8004392:	4619      	mov	r1, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	461a      	mov	r2, r3
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	f7fd f994 	bl	80016c8 <HAL_DMA_Start_IT>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00d      	beq.n	80043c2 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2210      	movs	r2, #16
 80043aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e01e      	b.n	8004400 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d8:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043f8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
  }
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	08004d33 	.word	0x08004d33
 800440c:	08004d9d 	.word	0x08004d9d
 8004410:	08004db9 	.word	0x08004db9

08004414 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800443c:	b5b0      	push	{r4, r5, r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	4313      	orrs	r3, r2
 800445e:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	4313      	orrs	r3, r2
 8004468:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4bb1      	ldr	r3, [pc, #708]	; (8004738 <UART_SetConfig+0x2fc>)
 8004472:	4013      	ands	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	69f9      	ldr	r1, [r7, #28]
 800447a:	430b      	orrs	r3, r1
 800447c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4aa7      	ldr	r2, [pc, #668]	; (800473c <UART_SetConfig+0x300>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d004      	beq.n	80044ae <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80044b8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	69f9      	ldr	r1, [r7, #28]
 80044c2:	430b      	orrs	r3, r1
 80044c4:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	f023 010f 	bic.w	r1, r3, #15
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a97      	ldr	r2, [pc, #604]	; (8004740 <UART_SetConfig+0x304>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d121      	bne.n	800452a <UART_SetConfig+0xee>
 80044e6:	4b97      	ldr	r3, [pc, #604]	; (8004744 <UART_SetConfig+0x308>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d817      	bhi.n	8004524 <UART_SetConfig+0xe8>
 80044f4:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <UART_SetConfig+0xc0>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	08004519 	.word	0x08004519
 8004504:	08004513 	.word	0x08004513
 8004508:	0800451f 	.word	0x0800451f
 800450c:	2301      	movs	r3, #1
 800450e:	76fb      	strb	r3, [r7, #27]
 8004510:	e0e7      	b.n	80046e2 <UART_SetConfig+0x2a6>
 8004512:	2302      	movs	r3, #2
 8004514:	76fb      	strb	r3, [r7, #27]
 8004516:	e0e4      	b.n	80046e2 <UART_SetConfig+0x2a6>
 8004518:	2304      	movs	r3, #4
 800451a:	76fb      	strb	r3, [r7, #27]
 800451c:	e0e1      	b.n	80046e2 <UART_SetConfig+0x2a6>
 800451e:	2308      	movs	r3, #8
 8004520:	76fb      	strb	r3, [r7, #27]
 8004522:	e0de      	b.n	80046e2 <UART_SetConfig+0x2a6>
 8004524:	2310      	movs	r3, #16
 8004526:	76fb      	strb	r3, [r7, #27]
 8004528:	e0db      	b.n	80046e2 <UART_SetConfig+0x2a6>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a86      	ldr	r2, [pc, #536]	; (8004748 <UART_SetConfig+0x30c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d132      	bne.n	800459a <UART_SetConfig+0x15e>
 8004534:	4b83      	ldr	r3, [pc, #524]	; (8004744 <UART_SetConfig+0x308>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f003 030c 	and.w	r3, r3, #12
 800453e:	2b0c      	cmp	r3, #12
 8004540:	d828      	bhi.n	8004594 <UART_SetConfig+0x158>
 8004542:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0x10c>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	0800457d 	.word	0x0800457d
 800454c:	08004595 	.word	0x08004595
 8004550:	08004595 	.word	0x08004595
 8004554:	08004595 	.word	0x08004595
 8004558:	08004589 	.word	0x08004589
 800455c:	08004595 	.word	0x08004595
 8004560:	08004595 	.word	0x08004595
 8004564:	08004595 	.word	0x08004595
 8004568:	08004583 	.word	0x08004583
 800456c:	08004595 	.word	0x08004595
 8004570:	08004595 	.word	0x08004595
 8004574:	08004595 	.word	0x08004595
 8004578:	0800458f 	.word	0x0800458f
 800457c:	2300      	movs	r3, #0
 800457e:	76fb      	strb	r3, [r7, #27]
 8004580:	e0af      	b.n	80046e2 <UART_SetConfig+0x2a6>
 8004582:	2302      	movs	r3, #2
 8004584:	76fb      	strb	r3, [r7, #27]
 8004586:	e0ac      	b.n	80046e2 <UART_SetConfig+0x2a6>
 8004588:	2304      	movs	r3, #4
 800458a:	76fb      	strb	r3, [r7, #27]
 800458c:	e0a9      	b.n	80046e2 <UART_SetConfig+0x2a6>
 800458e:	2308      	movs	r3, #8
 8004590:	76fb      	strb	r3, [r7, #27]
 8004592:	e0a6      	b.n	80046e2 <UART_SetConfig+0x2a6>
 8004594:	2310      	movs	r3, #16
 8004596:	76fb      	strb	r3, [r7, #27]
 8004598:	e0a3      	b.n	80046e2 <UART_SetConfig+0x2a6>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6b      	ldr	r2, [pc, #428]	; (800474c <UART_SetConfig+0x310>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d120      	bne.n	80045e6 <UART_SetConfig+0x1aa>
 80045a4:	4b67      	ldr	r3, [pc, #412]	; (8004744 <UART_SetConfig+0x308>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045ae:	2b30      	cmp	r3, #48	; 0x30
 80045b0:	d013      	beq.n	80045da <UART_SetConfig+0x19e>
 80045b2:	2b30      	cmp	r3, #48	; 0x30
 80045b4:	d814      	bhi.n	80045e0 <UART_SetConfig+0x1a4>
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d009      	beq.n	80045ce <UART_SetConfig+0x192>
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d810      	bhi.n	80045e0 <UART_SetConfig+0x1a4>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <UART_SetConfig+0x18c>
 80045c2:	2b10      	cmp	r3, #16
 80045c4:	d006      	beq.n	80045d4 <UART_SetConfig+0x198>
 80045c6:	e00b      	b.n	80045e0 <UART_SetConfig+0x1a4>
 80045c8:	2300      	movs	r3, #0
 80045ca:	76fb      	strb	r3, [r7, #27]
 80045cc:	e089      	b.n	80046e2 <UART_SetConfig+0x2a6>
 80045ce:	2302      	movs	r3, #2
 80045d0:	76fb      	strb	r3, [r7, #27]
 80045d2:	e086      	b.n	80046e2 <UART_SetConfig+0x2a6>
 80045d4:	2304      	movs	r3, #4
 80045d6:	76fb      	strb	r3, [r7, #27]
 80045d8:	e083      	b.n	80046e2 <UART_SetConfig+0x2a6>
 80045da:	2308      	movs	r3, #8
 80045dc:	76fb      	strb	r3, [r7, #27]
 80045de:	e080      	b.n	80046e2 <UART_SetConfig+0x2a6>
 80045e0:	2310      	movs	r3, #16
 80045e2:	76fb      	strb	r3, [r7, #27]
 80045e4:	e07d      	b.n	80046e2 <UART_SetConfig+0x2a6>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a59      	ldr	r2, [pc, #356]	; (8004750 <UART_SetConfig+0x314>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d120      	bne.n	8004632 <UART_SetConfig+0x1f6>
 80045f0:	4b54      	ldr	r3, [pc, #336]	; (8004744 <UART_SetConfig+0x308>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045fa:	2bc0      	cmp	r3, #192	; 0xc0
 80045fc:	d013      	beq.n	8004626 <UART_SetConfig+0x1ea>
 80045fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004600:	d814      	bhi.n	800462c <UART_SetConfig+0x1f0>
 8004602:	2b80      	cmp	r3, #128	; 0x80
 8004604:	d009      	beq.n	800461a <UART_SetConfig+0x1de>
 8004606:	2b80      	cmp	r3, #128	; 0x80
 8004608:	d810      	bhi.n	800462c <UART_SetConfig+0x1f0>
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <UART_SetConfig+0x1d8>
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	d006      	beq.n	8004620 <UART_SetConfig+0x1e4>
 8004612:	e00b      	b.n	800462c <UART_SetConfig+0x1f0>
 8004614:	2300      	movs	r3, #0
 8004616:	76fb      	strb	r3, [r7, #27]
 8004618:	e063      	b.n	80046e2 <UART_SetConfig+0x2a6>
 800461a:	2302      	movs	r3, #2
 800461c:	76fb      	strb	r3, [r7, #27]
 800461e:	e060      	b.n	80046e2 <UART_SetConfig+0x2a6>
 8004620:	2304      	movs	r3, #4
 8004622:	76fb      	strb	r3, [r7, #27]
 8004624:	e05d      	b.n	80046e2 <UART_SetConfig+0x2a6>
 8004626:	2308      	movs	r3, #8
 8004628:	76fb      	strb	r3, [r7, #27]
 800462a:	e05a      	b.n	80046e2 <UART_SetConfig+0x2a6>
 800462c:	2310      	movs	r3, #16
 800462e:	76fb      	strb	r3, [r7, #27]
 8004630:	e057      	b.n	80046e2 <UART_SetConfig+0x2a6>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a47      	ldr	r2, [pc, #284]	; (8004754 <UART_SetConfig+0x318>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d125      	bne.n	8004688 <UART_SetConfig+0x24c>
 800463c:	4b41      	ldr	r3, [pc, #260]	; (8004744 <UART_SetConfig+0x308>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800464a:	d017      	beq.n	800467c <UART_SetConfig+0x240>
 800464c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004650:	d817      	bhi.n	8004682 <UART_SetConfig+0x246>
 8004652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004656:	d00b      	beq.n	8004670 <UART_SetConfig+0x234>
 8004658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800465c:	d811      	bhi.n	8004682 <UART_SetConfig+0x246>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <UART_SetConfig+0x22e>
 8004662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004666:	d006      	beq.n	8004676 <UART_SetConfig+0x23a>
 8004668:	e00b      	b.n	8004682 <UART_SetConfig+0x246>
 800466a:	2300      	movs	r3, #0
 800466c:	76fb      	strb	r3, [r7, #27]
 800466e:	e038      	b.n	80046e2 <UART_SetConfig+0x2a6>
 8004670:	2302      	movs	r3, #2
 8004672:	76fb      	strb	r3, [r7, #27]
 8004674:	e035      	b.n	80046e2 <UART_SetConfig+0x2a6>
 8004676:	2304      	movs	r3, #4
 8004678:	76fb      	strb	r3, [r7, #27]
 800467a:	e032      	b.n	80046e2 <UART_SetConfig+0x2a6>
 800467c:	2308      	movs	r3, #8
 800467e:	76fb      	strb	r3, [r7, #27]
 8004680:	e02f      	b.n	80046e2 <UART_SetConfig+0x2a6>
 8004682:	2310      	movs	r3, #16
 8004684:	76fb      	strb	r3, [r7, #27]
 8004686:	e02c      	b.n	80046e2 <UART_SetConfig+0x2a6>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a2b      	ldr	r2, [pc, #172]	; (800473c <UART_SetConfig+0x300>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d125      	bne.n	80046de <UART_SetConfig+0x2a2>
 8004692:	4b2c      	ldr	r3, [pc, #176]	; (8004744 <UART_SetConfig+0x308>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800469c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046a0:	d017      	beq.n	80046d2 <UART_SetConfig+0x296>
 80046a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046a6:	d817      	bhi.n	80046d8 <UART_SetConfig+0x29c>
 80046a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ac:	d00b      	beq.n	80046c6 <UART_SetConfig+0x28a>
 80046ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b2:	d811      	bhi.n	80046d8 <UART_SetConfig+0x29c>
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <UART_SetConfig+0x284>
 80046b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046bc:	d006      	beq.n	80046cc <UART_SetConfig+0x290>
 80046be:	e00b      	b.n	80046d8 <UART_SetConfig+0x29c>
 80046c0:	2300      	movs	r3, #0
 80046c2:	76fb      	strb	r3, [r7, #27]
 80046c4:	e00d      	b.n	80046e2 <UART_SetConfig+0x2a6>
 80046c6:	2302      	movs	r3, #2
 80046c8:	76fb      	strb	r3, [r7, #27]
 80046ca:	e00a      	b.n	80046e2 <UART_SetConfig+0x2a6>
 80046cc:	2304      	movs	r3, #4
 80046ce:	76fb      	strb	r3, [r7, #27]
 80046d0:	e007      	b.n	80046e2 <UART_SetConfig+0x2a6>
 80046d2:	2308      	movs	r3, #8
 80046d4:	76fb      	strb	r3, [r7, #27]
 80046d6:	e004      	b.n	80046e2 <UART_SetConfig+0x2a6>
 80046d8:	2310      	movs	r3, #16
 80046da:	76fb      	strb	r3, [r7, #27]
 80046dc:	e001      	b.n	80046e2 <UART_SetConfig+0x2a6>
 80046de:	2310      	movs	r3, #16
 80046e0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a15      	ldr	r2, [pc, #84]	; (800473c <UART_SetConfig+0x300>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	f040 809f 	bne.w	800482c <UART_SetConfig+0x3f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046ee:	7efb      	ldrb	r3, [r7, #27]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d837      	bhi.n	8004764 <UART_SetConfig+0x328>
 80046f4:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <UART_SetConfig+0x2c0>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004765 	.word	0x08004765
 8004704:	08004729 	.word	0x08004729
 8004708:	08004765 	.word	0x08004765
 800470c:	0800472f 	.word	0x0800472f
 8004710:	08004765 	.word	0x08004765
 8004714:	08004765 	.word	0x08004765
 8004718:	08004765 	.word	0x08004765
 800471c:	0800475d 	.word	0x0800475d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7fe fb5c 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 8004724:	6178      	str	r0, [r7, #20]
        break;
 8004726:	e022      	b.n	800476e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <UART_SetConfig+0x31c>)
 800472a:	617b      	str	r3, [r7, #20]
        break;
 800472c:	e01f      	b.n	800476e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472e:	f7fe fabd 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8004732:	6178      	str	r0, [r7, #20]
        break;
 8004734:	e01b      	b.n	800476e <UART_SetConfig+0x332>
 8004736:	bf00      	nop
 8004738:	cfff69f3 	.word	0xcfff69f3
 800473c:	40008000 	.word	0x40008000
 8004740:	40013800 	.word	0x40013800
 8004744:	40021000 	.word	0x40021000
 8004748:	40004400 	.word	0x40004400
 800474c:	40004800 	.word	0x40004800
 8004750:	40004c00 	.word	0x40004c00
 8004754:	40005000 	.word	0x40005000
 8004758:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800475c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004760:	617b      	str	r3, [r7, #20]
        break;
 8004762:	e004      	b.n	800476e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	76bb      	strb	r3, [r7, #26]
        break;
 800476c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 811b 	beq.w	80049ac <UART_SetConfig+0x570>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	4a96      	ldr	r2, [pc, #600]	; (80049d4 <UART_SetConfig+0x598>)
 800477c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004780:	461a      	mov	r2, r3
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	fbb3 f3f2 	udiv	r3, r3, r2
 8004788:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	4413      	add	r3, r2
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	429a      	cmp	r2, r3
 8004798:	d305      	bcc.n	80047a6 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d902      	bls.n	80047ac <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	76bb      	strb	r3, [r7, #26]
 80047aa:	e0ff      	b.n	80049ac <UART_SetConfig+0x570>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f04f 0100 	mov.w	r1, #0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	4a86      	ldr	r2, [pc, #536]	; (80049d4 <UART_SetConfig+0x598>)
 80047ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047be:	b29a      	uxth	r2, r3
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	f7fb fd1c 	bl	8000200 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4610      	mov	r0, r2
 80047ce:	4619      	mov	r1, r3
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	020b      	lsls	r3, r1, #8
 80047da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047de:	0202      	lsls	r2, r0, #8
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	6849      	ldr	r1, [r1, #4]
 80047e4:	0849      	lsrs	r1, r1, #1
 80047e6:	4608      	mov	r0, r1
 80047e8:	f04f 0100 	mov.w	r1, #0
 80047ec:	1814      	adds	r4, r2, r0
 80047ee:	eb43 0501 	adc.w	r5, r3, r1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	4620      	mov	r0, r4
 80047fe:	4629      	mov	r1, r5
 8004800:	f7fb fcfe 	bl	8000200 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004812:	d308      	bcc.n	8004826 <UART_SetConfig+0x3ea>
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800481a:	d204      	bcs.n	8004826 <UART_SetConfig+0x3ea>
        {
          huart->Instance->BRR = usartdiv;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	60da      	str	r2, [r3, #12]
 8004824:	e0c2      	b.n	80049ac <UART_SetConfig+0x570>
        }
        else
        {
          ret = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	76bb      	strb	r3, [r7, #26]
 800482a:	e0bf      	b.n	80049ac <UART_SetConfig+0x570>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004834:	d165      	bne.n	8004902 <UART_SetConfig+0x4c6>
  {
    switch (clocksource)
 8004836:	7efb      	ldrb	r3, [r7, #27]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d828      	bhi.n	800488e <UART_SetConfig+0x452>
 800483c:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <UART_SetConfig+0x408>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	08004869 	.word	0x08004869
 8004848:	08004871 	.word	0x08004871
 800484c:	08004879 	.word	0x08004879
 8004850:	0800488f 	.word	0x0800488f
 8004854:	0800487f 	.word	0x0800487f
 8004858:	0800488f 	.word	0x0800488f
 800485c:	0800488f 	.word	0x0800488f
 8004860:	0800488f 	.word	0x0800488f
 8004864:	08004887 	.word	0x08004887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004868:	f7fe fab8 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 800486c:	6178      	str	r0, [r7, #20]
        break;
 800486e:	e013      	b.n	8004898 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004870:	f7fe faca 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 8004874:	6178      	str	r0, [r7, #20]
        break;
 8004876:	e00f      	b.n	8004898 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004878:	4b57      	ldr	r3, [pc, #348]	; (80049d8 <UART_SetConfig+0x59c>)
 800487a:	617b      	str	r3, [r7, #20]
        break;
 800487c:	e00c      	b.n	8004898 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800487e:	f7fe fa15 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8004882:	6178      	str	r0, [r7, #20]
        break;
 8004884:	e008      	b.n	8004898 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488a:	617b      	str	r3, [r7, #20]
        break;
 800488c:	e004      	b.n	8004898 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	76bb      	strb	r3, [r7, #26]
        break;
 8004896:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8086 	beq.w	80049ac <UART_SetConfig+0x570>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	4a4b      	ldr	r2, [pc, #300]	; (80049d4 <UART_SetConfig+0x598>)
 80048a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048aa:	461a      	mov	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80048b2:	005a      	lsls	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	441a      	add	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b0f      	cmp	r3, #15
 80048cc:	d916      	bls.n	80048fc <UART_SetConfig+0x4c0>
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d4:	d212      	bcs.n	80048fc <UART_SetConfig+0x4c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f023 030f 	bic.w	r3, r3, #15
 80048de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	89fb      	ldrh	r3, [r7, #14]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	89fa      	ldrh	r2, [r7, #14]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	e057      	b.n	80049ac <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	76bb      	strb	r3, [r7, #26]
 8004900:	e054      	b.n	80049ac <UART_SetConfig+0x570>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004902:	7efb      	ldrb	r3, [r7, #27]
 8004904:	2b08      	cmp	r3, #8
 8004906:	d828      	bhi.n	800495a <UART_SetConfig+0x51e>
 8004908:	a201      	add	r2, pc, #4	; (adr r2, 8004910 <UART_SetConfig+0x4d4>)
 800490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490e:	bf00      	nop
 8004910:	08004935 	.word	0x08004935
 8004914:	0800493d 	.word	0x0800493d
 8004918:	08004945 	.word	0x08004945
 800491c:	0800495b 	.word	0x0800495b
 8004920:	0800494b 	.word	0x0800494b
 8004924:	0800495b 	.word	0x0800495b
 8004928:	0800495b 	.word	0x0800495b
 800492c:	0800495b 	.word	0x0800495b
 8004930:	08004953 	.word	0x08004953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004934:	f7fe fa52 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 8004938:	6178      	str	r0, [r7, #20]
        break;
 800493a:	e013      	b.n	8004964 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800493c:	f7fe fa64 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 8004940:	6178      	str	r0, [r7, #20]
        break;
 8004942:	e00f      	b.n	8004964 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004944:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <UART_SetConfig+0x59c>)
 8004946:	617b      	str	r3, [r7, #20]
        break;
 8004948:	e00c      	b.n	8004964 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800494a:	f7fe f9af 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 800494e:	6178      	str	r0, [r7, #20]
        break;
 8004950:	e008      	b.n	8004964 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004956:	617b      	str	r3, [r7, #20]
        break;
 8004958:	e004      	b.n	8004964 <UART_SetConfig+0x528>
      default:
        pclk = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	76bb      	strb	r3, [r7, #26]
        break;
 8004962:	bf00      	nop
    }

    if (pclk != 0U)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d020      	beq.n	80049ac <UART_SetConfig+0x570>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	4a19      	ldr	r2, [pc, #100]	; (80049d4 <UART_SetConfig+0x598>)
 8004970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004974:	461a      	mov	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	fbb3 f2f2 	udiv	r2, r3, r2
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	441a      	add	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	b29b      	uxth	r3, r3
 800498e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b0f      	cmp	r3, #15
 8004994:	d908      	bls.n	80049a8 <UART_SetConfig+0x56c>
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499c:	d204      	bcs.n	80049a8 <UART_SetConfig+0x56c>
      {
        huart->Instance->BRR = usartdiv;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	60da      	str	r2, [r3, #12]
 80049a6:	e001      	b.n	80049ac <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80049c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bdb0      	pop	{r4, r5, r7, pc}
 80049d2:	bf00      	nop
 80049d4:	08008314 	.word	0x08008314
 80049d8:	00f42400 	.word	0x00f42400

080049dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01a      	beq.n	8004af2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ada:	d10a      	bne.n	8004af2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]
  }
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004b30:	f7fc fc10 	bl	8001354 <HAL_GetTick>
 8004b34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d10e      	bne.n	8004b62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f82c 	bl	8004bb0 <UART_WaitOnFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e022      	b.n	8004ba8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d10e      	bne.n	8004b8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f816 	bl	8004bb0 <UART_WaitOnFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e00c      	b.n	8004ba8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc0:	e062      	b.n	8004c88 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d05e      	beq.n	8004c88 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bca:	f7fc fbc3 	bl	8001354 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d302      	bcc.n	8004be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d11d      	bne.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bee:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e045      	b.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d02e      	beq.n	8004c88 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c38:	d126      	bne.n	8004c88 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c42:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c52:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e00f      	b.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	4013      	ands	r3, r2
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d08d      	beq.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004cc6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004cd6:	609a      	str	r2, [r3, #8]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d11f      	bne.n	8004d8e <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d64:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d84:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7fc fa6c 	bl	800126c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff fb32 	bl	8004414 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dcc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de0:	2b80      	cmp	r3, #128	; 0x80
 8004de2:	d109      	bne.n	8004df8 <UART_DMAError+0x40>
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b21      	cmp	r3, #33	; 0x21
 8004de8:	d106      	bne.n	8004df8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004df2:	6978      	ldr	r0, [r7, #20]
 8004df4:	f7ff ff5c 	bl	8004cb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d109      	bne.n	8004e1a <UART_DMAError+0x62>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b22      	cmp	r3, #34	; 0x22
 8004e0a:	d106      	bne.n	8004e1a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004e14:	6978      	ldr	r0, [r7, #20]
 8004e16:	f7ff ff69 	bl	8004cec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	f043 0210 	orr.w	r2, r3, #16
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e2a:	6978      	ldr	r0, [r7, #20]
 8004e2c:	f7ff fafc 	bl	8004428 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e30:	bf00      	nop
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_UARTEx_DisableFifoMode+0x16>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e027      	b.n	8004e9e <HAL_UARTEx_DisableFifoMode+0x66>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2224      	movs	r2, #36	; 0x24
 8004e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0201 	bic.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e02d      	b.n	8004f1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2224      	movs	r2, #36	; 0x24
 8004ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0201 	bic.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f850 	bl	8004fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b084      	sub	sp, #16
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e02d      	b.n	8004f9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2224      	movs	r2, #36	; 0x24
 8004f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0201 	bic.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f812 	bl	8004fa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b089      	sub	sp, #36	; 0x24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004fac:	4a2f      	ldr	r2, [pc, #188]	; (800506c <UARTEx_SetNbDataToProcess+0xc8>)
 8004fae:	f107 0314 	add.w	r3, r7, #20
 8004fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fb6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004fba:	4a2d      	ldr	r2, [pc, #180]	; (8005070 <UARTEx_SetNbDataToProcess+0xcc>)
 8004fbc:	f107 030c 	add.w	r3, r7, #12
 8004fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fc4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d108      	bne.n	8004fe2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fe0:	e03d      	b.n	800505e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	0e5b      	lsrs	r3, r3, #25
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	0f5b      	lsrs	r3, r3, #29
 8005002:	b2db      	uxtb	r3, r3
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800500a:	7fbb      	ldrb	r3, [r7, #30]
 800500c:	7f3a      	ldrb	r2, [r7, #28]
 800500e:	f107 0120 	add.w	r1, r7, #32
 8005012:	440a      	add	r2, r1
 8005014:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005018:	fb02 f303 	mul.w	r3, r2, r3
 800501c:	7f3a      	ldrb	r2, [r7, #28]
 800501e:	f107 0120 	add.w	r1, r7, #32
 8005022:	440a      	add	r2, r1
 8005024:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005028:	fb93 f3f2 	sdiv	r3, r3, r2
 800502c:	b29a      	uxth	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005034:	7ffb      	ldrb	r3, [r7, #31]
 8005036:	7f7a      	ldrb	r2, [r7, #29]
 8005038:	f107 0120 	add.w	r1, r7, #32
 800503c:	440a      	add	r2, r1
 800503e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	7f7a      	ldrb	r2, [r7, #29]
 8005048:	f107 0120 	add.w	r1, r7, #32
 800504c:	440a      	add	r2, r1
 800504e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005052:	fb93 f3f2 	sdiv	r3, r3, r2
 8005056:	b29a      	uxth	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800505e:	bf00      	nop
 8005060:	3724      	adds	r7, #36	; 0x24
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	0800829c 	.word	0x0800829c
 8005070:	080082a4 	.word	0x080082a4

08005074 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005074:	b084      	sub	sp, #16
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	f107 001c 	add.w	r0, r7, #28
 8005082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	2b01      	cmp	r3, #1
 800508a:	d122      	bne.n	80050d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d105      	bne.n	80050c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa30 	bl	800552c <USB_CoreReset>
 80050cc:	4603      	mov	r3, r0
 80050ce:	73fb      	strb	r3, [r7, #15]
 80050d0:	e01a      	b.n	8005108 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fa24 	bl	800552c <USB_CoreReset>
 80050e4:	4603      	mov	r3, r0
 80050e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80050e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	639a      	str	r2, [r3, #56]	; 0x38
 80050fa:	e005      	b.n	8005108 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005114:	b004      	add	sp, #16
 8005116:	4770      	bx	lr

08005118 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f023 0201 	bic.w	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	460b      	mov	r3, r1
 8005144:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d106      	bne.n	8005166 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	e00b      	b.n	800517e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]
 8005178:	e001      	b.n	800517e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e003      	b.n	8005186 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800517e:	2032      	movs	r0, #50	; 0x32
 8005180:	f7fc f8f4 	bl	800136c <HAL_Delay>

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005190:	b084      	sub	sp, #16
 8005192:	b580      	push	{r7, lr}
 8005194:	b086      	sub	sp, #24
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800519e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	e009      	b.n	80051c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	3340      	adds	r3, #64	; 0x40
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	2200      	movs	r2, #0
 80051bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	3301      	adds	r3, #1
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2b0e      	cmp	r3, #14
 80051c8:	d9f2      	bls.n	80051b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d11c      	bne.n	800520a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051de:	f043 0302 	orr.w	r3, r3, #2
 80051e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e005      	b.n	8005216 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800521c:	461a      	mov	r2, r3
 800521e:	2300      	movs	r3, #0
 8005220:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005228:	4619      	mov	r1, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005230:	461a      	mov	r2, r3
 8005232:	680b      	ldr	r3, [r1, #0]
 8005234:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005236:	2103      	movs	r1, #3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f93d 	bl	80054b8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800523e:	2110      	movs	r1, #16
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f8f1 	bl	8005428 <USB_FlushTxFifo>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f90f 	bl	8005474 <USB_FlushRxFifo>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005266:	461a      	mov	r2, r3
 8005268:	2300      	movs	r3, #0
 800526a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005272:	461a      	mov	r2, r3
 8005274:	2300      	movs	r3, #0
 8005276:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527e:	461a      	mov	r2, r3
 8005280:	2300      	movs	r3, #0
 8005282:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	e043      	b.n	8005312 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800529c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052a0:	d118      	bne.n	80052d4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	461a      	mov	r2, r3
 80052b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e013      	b.n	80052e6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	461a      	mov	r2, r3
 80052cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	e008      	b.n	80052e6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e0:	461a      	mov	r2, r3
 80052e2:	2300      	movs	r3, #0
 80052e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f2:	461a      	mov	r2, r3
 80052f4:	2300      	movs	r3, #0
 80052f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005304:	461a      	mov	r2, r3
 8005306:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800530a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	3301      	adds	r3, #1
 8005310:	613b      	str	r3, [r7, #16]
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	429a      	cmp	r2, r3
 8005318:	d3b7      	bcc.n	800528a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800531a:	2300      	movs	r3, #0
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	e043      	b.n	80053a8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005336:	d118      	bne.n	800536a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	461a      	mov	r2, r3
 800534c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	e013      	b.n	800537c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	461a      	mov	r2, r3
 8005362:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	e008      	b.n	800537c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005376:	461a      	mov	r2, r3
 8005378:	2300      	movs	r3, #0
 800537a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005388:	461a      	mov	r2, r3
 800538a:	2300      	movs	r3, #0
 800538c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539a:	461a      	mov	r2, r3
 800539c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	3301      	adds	r3, #1
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d3b7      	bcc.n	8005320 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f043 0210 	orr.w	r2, r3, #16
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	4b10      	ldr	r3, [pc, #64]	; (8005424 <USB_DevInit+0x294>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f043 0208 	orr.w	r2, r3, #8
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d107      	bne.n	8005412 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800540a:	f043 0304 	orr.w	r3, r3, #4
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005412:	7dfb      	ldrb	r3, [r7, #23]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800541e:	b004      	add	sp, #16
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	803c3800 	.word	0x803c3800

08005428 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	019b      	lsls	r3, r3, #6
 800543a:	f043 0220 	orr.w	r2, r3, #32
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3301      	adds	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4a09      	ldr	r2, [pc, #36]	; (8005470 <USB_FlushTxFifo+0x48>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d901      	bls.n	8005454 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e006      	b.n	8005462 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b20      	cmp	r3, #32
 800545e:	d0f0      	beq.n	8005442 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	00030d40 	.word	0x00030d40

08005474 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2210      	movs	r2, #16
 8005484:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3301      	adds	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <USB_FlushRxFifo+0x40>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e006      	b.n	80054a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	2b10      	cmp	r3, #16
 80054a2:	d0f0      	beq.n	8005486 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	00030d40 	.word	0x00030d40

080054b8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d8:	4313      	orrs	r3, r2
 80054da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005504:	f023 0303 	bic.w	r3, r3, #3
 8005508:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005518:	f043 0302 	orr.w	r3, r3, #2
 800551c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3301      	adds	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4a13      	ldr	r2, [pc, #76]	; (8005590 <USB_CoreReset+0x64>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d901      	bls.n	800554a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e01b      	b.n	8005582 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	daf2      	bge.n	8005538 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f043 0201 	orr.w	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3301      	adds	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a09      	ldr	r2, [pc, #36]	; (8005590 <USB_CoreReset+0x64>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d901      	bls.n	8005574 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e006      	b.n	8005582 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b01      	cmp	r3, #1
 800557e:	d0f0      	beq.n	8005562 <USB_CoreReset+0x36>

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	00030d40 	.word	0x00030d40

08005594 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005598:	bf00      	nop
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
	...

080055a4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055aa:	f3ef 8305 	mrs	r3, IPSR
 80055ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80055b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10f      	bne.n	80055d6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055b6:	f3ef 8310 	mrs	r3, PRIMASK
 80055ba:	607b      	str	r3, [r7, #4]
  return(result);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d105      	bne.n	80055ce <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055c2:	f3ef 8311 	mrs	r3, BASEPRI
 80055c6:	603b      	str	r3, [r7, #0]
  return(result);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <osKernelInitialize+0x3a>
 80055ce:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <osKernelInitialize+0x64>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d103      	bne.n	80055de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80055d6:	f06f 0305 	mvn.w	r3, #5
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	e00c      	b.n	80055f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055de:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <osKernelInitialize+0x64>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055e6:	4b08      	ldr	r3, [pc, #32]	; (8005608 <osKernelInitialize+0x64>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e002      	b.n	80055f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80055f2:	f04f 33ff 	mov.w	r3, #4294967295
 80055f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80055f8:	68fb      	ldr	r3, [r7, #12]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	200000cc 	.word	0x200000cc

0800560c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005612:	f3ef 8305 	mrs	r3, IPSR
 8005616:	60bb      	str	r3, [r7, #8]
  return(result);
 8005618:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10f      	bne.n	800563e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561e:	f3ef 8310 	mrs	r3, PRIMASK
 8005622:	607b      	str	r3, [r7, #4]
  return(result);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d105      	bne.n	8005636 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800562a:	f3ef 8311 	mrs	r3, BASEPRI
 800562e:	603b      	str	r3, [r7, #0]
  return(result);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <osKernelStart+0x3a>
 8005636:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <osKernelStart+0x68>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d103      	bne.n	8005646 <osKernelStart+0x3a>
    stat = osErrorISR;
 800563e:	f06f 0305 	mvn.w	r3, #5
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e010      	b.n	8005668 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <osKernelStart+0x68>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d109      	bne.n	8005662 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800564e:	f7ff ffa1 	bl	8005594 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005652:	4b08      	ldr	r3, [pc, #32]	; (8005674 <osKernelStart+0x68>)
 8005654:	2202      	movs	r2, #2
 8005656:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005658:	f001 f8b8 	bl	80067cc <vTaskStartScheduler>
      stat = osOK;
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	e002      	b.n	8005668 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005662:	f04f 33ff 	mov.w	r3, #4294967295
 8005666:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005668:	68fb      	ldr	r3, [r7, #12]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	200000cc 	.word	0x200000cc

08005678 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b090      	sub	sp, #64	; 0x40
 800567c:	af04      	add	r7, sp, #16
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005688:	f3ef 8305 	mrs	r3, IPSR
 800568c:	61fb      	str	r3, [r7, #28]
  return(result);
 800568e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005690:	2b00      	cmp	r3, #0
 8005692:	f040 808f 	bne.w	80057b4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005696:	f3ef 8310 	mrs	r3, PRIMASK
 800569a:	61bb      	str	r3, [r7, #24]
  return(result);
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d105      	bne.n	80056ae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056a2:	f3ef 8311 	mrs	r3, BASEPRI
 80056a6:	617b      	str	r3, [r7, #20]
  return(result);
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <osThreadNew+0x3e>
 80056ae:	4b44      	ldr	r3, [pc, #272]	; (80057c0 <osThreadNew+0x148>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d07e      	beq.n	80057b4 <osThreadNew+0x13c>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d07b      	beq.n	80057b4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80056bc:	2380      	movs	r3, #128	; 0x80
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80056c0:	2318      	movs	r3, #24
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d045      	beq.n	8005760 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <osThreadNew+0x6a>
        name = attr->name;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d008      	beq.n	8005708 <osThreadNew+0x90>
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	2b38      	cmp	r3, #56	; 0x38
 80056fa:	d805      	bhi.n	8005708 <osThreadNew+0x90>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <osThreadNew+0x94>
        return (NULL);
 8005708:	2300      	movs	r3, #0
 800570a:	e054      	b.n	80057b6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	089b      	lsrs	r3, r3, #2
 800571a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00e      	beq.n	8005742 <osThreadNew+0xca>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	2b5b      	cmp	r3, #91	; 0x5b
 800572a:	d90a      	bls.n	8005742 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005730:	2b00      	cmp	r3, #0
 8005732:	d006      	beq.n	8005742 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <osThreadNew+0xca>
        mem = 1;
 800573c:	2301      	movs	r3, #1
 800573e:	623b      	str	r3, [r7, #32]
 8005740:	e010      	b.n	8005764 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10c      	bne.n	8005764 <osThreadNew+0xec>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d108      	bne.n	8005764 <osThreadNew+0xec>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <osThreadNew+0xec>
          mem = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	623b      	str	r3, [r7, #32]
 800575e:	e001      	b.n	8005764 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d110      	bne.n	800578c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005772:	9202      	str	r2, [sp, #8]
 8005774:	9301      	str	r3, [sp, #4]
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800577e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fe4d 	bl	8006420 <xTaskCreateStatic>
 8005786:	4603      	mov	r3, r0
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	e013      	b.n	80057b4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d110      	bne.n	80057b4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	b29a      	uxth	r2, r3
 8005796:	f107 0310 	add.w	r3, r7, #16
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fe98 	bl	80064da <xTaskCreate>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d001      	beq.n	80057b4 <osThreadNew+0x13c>
          hTask = NULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057b4:	693b      	ldr	r3, [r7, #16]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3730      	adds	r7, #48	; 0x30
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	200000cc 	.word	0x200000cc

080057c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4a07      	ldr	r2, [pc, #28]	; (80057f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80057d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4a06      	ldr	r2, [pc, #24]	; (80057f4 <vApplicationGetIdleTaskMemory+0x30>)
 80057da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2280      	movs	r2, #128	; 0x80
 80057e0:	601a      	str	r2, [r3, #0]
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	200000d0 	.word	0x200000d0
 80057f4:	2000012c 	.word	0x2000012c

080057f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4a07      	ldr	r2, [pc, #28]	; (8005824 <vApplicationGetTimerTaskMemory+0x2c>)
 8005808:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4a06      	ldr	r2, [pc, #24]	; (8005828 <vApplicationGetTimerTaskMemory+0x30>)
 800580e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005816:	601a      	str	r2, [r3, #0]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	2000032c 	.word	0x2000032c
 8005828:	20000388 	.word	0x20000388

0800582c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f103 0208 	add.w	r2, r3, #8
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f04f 32ff 	mov.w	r2, #4294967295
 8005844:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f103 0208 	add.w	r2, r3, #8
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f103 0208 	add.w	r2, r3, #8
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005886:	b480      	push	{r7}
 8005888:	b085      	sub	sp, #20
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
}
 80058c2:	bf00      	nop
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d103      	bne.n	80058ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	e00c      	b.n	8005908 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3308      	adds	r3, #8
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e002      	b.n	80058fc <vListInsert+0x2e>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d2f6      	bcs.n	80058f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	601a      	str	r2, [r3, #0]
}
 8005934:	bf00      	nop
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6892      	ldr	r2, [r2, #8]
 8005956:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6852      	ldr	r2, [r2, #4]
 8005960:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	429a      	cmp	r2, r3
 800596a:	d103      	bne.n	8005974 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	1e5a      	subs	r2, r3, #1
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10a      	bne.n	80059be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059be:	f002 f8a9 	bl	8007b14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ca:	68f9      	ldr	r1, [r7, #12]
 80059cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059ce:	fb01 f303 	mul.w	r3, r1, r3
 80059d2:	441a      	add	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ee:	3b01      	subs	r3, #1
 80059f0:	68f9      	ldr	r1, [r7, #12]
 80059f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059f4:	fb01 f303 	mul.w	r3, r1, r3
 80059f8:	441a      	add	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	22ff      	movs	r2, #255	; 0xff
 8005a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	22ff      	movs	r2, #255	; 0xff
 8005a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d114      	bne.n	8005a3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01a      	beq.n	8005a52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3310      	adds	r3, #16
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 f95d 	bl	8006ce0 <xTaskRemoveFromEventList>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d012      	beq.n	8005a52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <xQueueGenericReset+0xcc>)
 8005a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	e009      	b.n	8005a52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3310      	adds	r3, #16
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fef2 	bl	800582c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3324      	adds	r3, #36	; 0x24
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff feed 	bl	800582c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a52:	f002 f88f 	bl	8007b74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a56:	2301      	movs	r3, #1
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	e000ed04 	.word	0xe000ed04

08005a64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08e      	sub	sp, #56	; 0x38
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a8a:	bf00      	nop
 8005a8c:	e7fe      	b.n	8005a8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005aa6:	bf00      	nop
 8005aa8:	e7fe      	b.n	8005aa8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <xQueueGenericCreateStatic+0x52>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <xQueueGenericCreateStatic+0x56>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <xQueueGenericCreateStatic+0x58>
 8005aba:	2300      	movs	r3, #0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10a      	bne.n	8005ad6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	623b      	str	r3, [r7, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d102      	bne.n	8005ae2 <xQueueGenericCreateStatic+0x7e>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <xQueueGenericCreateStatic+0x82>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <xQueueGenericCreateStatic+0x84>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10a      	bne.n	8005b02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	61fb      	str	r3, [r7, #28]
}
 8005afe:	bf00      	nop
 8005b00:	e7fe      	b.n	8005b00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b02:	2350      	movs	r3, #80	; 0x50
 8005b04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b50      	cmp	r3, #80	; 0x50
 8005b0a:	d00a      	beq.n	8005b22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	61bb      	str	r3, [r7, #24]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00d      	beq.n	8005b4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f845 	bl	8005bd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3730      	adds	r7, #48	; 0x30
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	; 0x28
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	613b      	str	r3, [r7, #16]
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	e004      	b.n	8005b94 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
 8005b92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	3350      	adds	r3, #80	; 0x50
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f002 f8dd 	bl	8007d58 <pvPortMalloc>
 8005b9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d011      	beq.n	8005bca <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	3350      	adds	r3, #80	; 0x50
 8005bae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bb8:	79fa      	ldrb	r2, [r7, #7]
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f805 	bl	8005bd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bca:	69bb      	ldr	r3, [r7, #24]
	}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d103      	bne.n	8005bf0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e002      	b.n	8005bf6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c02:	2101      	movs	r1, #1
 8005c04:	69b8      	ldr	r0, [r7, #24]
 8005c06:	f7ff fec5 	bl	8005994 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	78fa      	ldrb	r2, [r7, #3]
 8005c0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c12:	bf00      	nop
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08e      	sub	sp, #56	; 0x38
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <xQueueGenericSend+0x32>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d103      	bne.n	8005c5c <xQueueGenericSend+0x40>
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <xQueueGenericSend+0x44>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <xQueueGenericSend+0x46>
 8005c60:	2300      	movs	r3, #0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10a      	bne.n	8005c7c <xQueueGenericSend+0x60>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d103      	bne.n	8005c8a <xQueueGenericSend+0x6e>
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <xQueueGenericSend+0x72>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <xQueueGenericSend+0x74>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <xQueueGenericSend+0x8e>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	623b      	str	r3, [r7, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	e7fe      	b.n	8005ca8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005caa:	f001 f9d7 	bl	800705c <xTaskGetSchedulerState>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <xQueueGenericSend+0x9e>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <xQueueGenericSend+0xa2>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <xQueueGenericSend+0xa4>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <xQueueGenericSend+0xbe>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	61fb      	str	r3, [r7, #28]
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cda:	f001 ff1b 	bl	8007b14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d302      	bcc.n	8005cf0 <xQueueGenericSend+0xd4>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d129      	bne.n	8005d44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cf6:	f000 fa25 	bl	8006144 <prvCopyDataToQueue>
 8005cfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d010      	beq.n	8005d26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	3324      	adds	r3, #36	; 0x24
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 ffe9 	bl	8006ce0 <xTaskRemoveFromEventList>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d013      	beq.n	8005d3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d14:	4b3f      	ldr	r3, [pc, #252]	; (8005e14 <xQueueGenericSend+0x1f8>)
 8005d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	e00a      	b.n	8005d3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d007      	beq.n	8005d3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d2c:	4b39      	ldr	r3, [pc, #228]	; (8005e14 <xQueueGenericSend+0x1f8>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d3c:	f001 ff1a 	bl	8007b74 <vPortExitCritical>
				return pdPASS;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e063      	b.n	8005e0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d103      	bne.n	8005d52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d4a:	f001 ff13 	bl	8007b74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e05c      	b.n	8005e0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d58:	f107 0314 	add.w	r3, r7, #20
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 f823 	bl	8006da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d62:	2301      	movs	r3, #1
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d66:	f001 ff05 	bl	8007b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d6a:	f000 fd95 	bl	8006898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d6e:	f001 fed1 	bl	8007b14 <vPortEnterCritical>
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d78:	b25b      	sxtb	r3, r3
 8005d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7e:	d103      	bne.n	8005d88 <xQueueGenericSend+0x16c>
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d8e:	b25b      	sxtb	r3, r3
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d94:	d103      	bne.n	8005d9e <xQueueGenericSend+0x182>
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d9e:	f001 fee9 	bl	8007b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005da2:	1d3a      	adds	r2, r7, #4
 8005da4:	f107 0314 	add.w	r3, r7, #20
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 f812 	bl	8006dd4 <xTaskCheckForTimeOut>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d124      	bne.n	8005e00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005db8:	f000 fabc 	bl	8006334 <prvIsQueueFull>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d018      	beq.n	8005df4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	3310      	adds	r3, #16
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 ff38 	bl	8006c40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd2:	f000 fa47 	bl	8006264 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dd6:	f000 fd6d 	bl	80068b4 <xTaskResumeAll>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f47f af7c 	bne.w	8005cda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005de2:	4b0c      	ldr	r3, [pc, #48]	; (8005e14 <xQueueGenericSend+0x1f8>)
 8005de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	e772      	b.n	8005cda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005df6:	f000 fa35 	bl	8006264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dfa:	f000 fd5b 	bl	80068b4 <xTaskResumeAll>
 8005dfe:	e76c      	b.n	8005cda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e02:	f000 fa2f 	bl	8006264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e06:	f000 fd55 	bl	80068b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3738      	adds	r7, #56	; 0x38
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	e000ed04 	.word	0xe000ed04

08005e18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08e      	sub	sp, #56	; 0x38
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e42:	bf00      	nop
 8005e44:	e7fe      	b.n	8005e44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d103      	bne.n	8005e54 <xQueueGenericSendFromISR+0x3c>
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <xQueueGenericSendFromISR+0x40>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e000      	b.n	8005e5a <xQueueGenericSendFromISR+0x42>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10a      	bne.n	8005e74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	623b      	str	r3, [r7, #32]
}
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d103      	bne.n	8005e82 <xQueueGenericSendFromISR+0x6a>
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <xQueueGenericSendFromISR+0x6e>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <xQueueGenericSendFromISR+0x70>
 8005e86:	2300      	movs	r3, #0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	61fb      	str	r3, [r7, #28]
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ea2:	f001 ff19 	bl	8007cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ea6:	f3ef 8211 	mrs	r2, BASEPRI
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	61ba      	str	r2, [r7, #24]
 8005ebc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <xQueueGenericSendFromISR+0xbc>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d12c      	bne.n	8005f2e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ee4:	f000 f92e 	bl	8006144 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ee8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef0:	d112      	bne.n	8005f18 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d016      	beq.n	8005f28 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	3324      	adds	r3, #36	; 0x24
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 feee 	bl	8006ce0 <xTaskRemoveFromEventList>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00e      	beq.n	8005f28 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	e007      	b.n	8005f28 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	b25a      	sxtb	r2, r3
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005f2c:	e001      	b.n	8005f32 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	637b      	str	r3, [r7, #52]	; 0x34
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3738      	adds	r7, #56	; 0x38
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08c      	sub	sp, #48	; 0x30
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f54:	2300      	movs	r3, #0
 8005f56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <xQueueReceive+0x30>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	623b      	str	r3, [r7, #32]
}
 8005f74:	bf00      	nop
 8005f76:	e7fe      	b.n	8005f76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d103      	bne.n	8005f86 <xQueueReceive+0x3e>
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <xQueueReceive+0x42>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <xQueueReceive+0x44>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <xQueueReceive+0x5e>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	61fb      	str	r3, [r7, #28]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fa6:	f001 f859 	bl	800705c <xTaskGetSchedulerState>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <xQueueReceive+0x6e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <xQueueReceive+0x72>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <xQueueReceive+0x74>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <xQueueReceive+0x8e>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	61bb      	str	r3, [r7, #24]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fd6:	f001 fd9d 	bl	8007b14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01f      	beq.n	8006026 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fea:	f000 f915 	bl	8006218 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	1e5a      	subs	r2, r3, #1
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00f      	beq.n	800601e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	3310      	adds	r3, #16
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fe6c 	bl	8006ce0 <xTaskRemoveFromEventList>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800600e:	4b3d      	ldr	r3, [pc, #244]	; (8006104 <xQueueReceive+0x1bc>)
 8006010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800601e:	f001 fda9 	bl	8007b74 <vPortExitCritical>
				return pdPASS;
 8006022:	2301      	movs	r3, #1
 8006024:	e069      	b.n	80060fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d103      	bne.n	8006034 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800602c:	f001 fda2 	bl	8007b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006030:	2300      	movs	r3, #0
 8006032:	e062      	b.n	80060fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800603a:	f107 0310 	add.w	r3, r7, #16
 800603e:	4618      	mov	r0, r3
 8006040:	f000 feb2 	bl	8006da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006044:	2301      	movs	r3, #1
 8006046:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006048:	f001 fd94 	bl	8007b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800604c:	f000 fc24 	bl	8006898 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006050:	f001 fd60 	bl	8007b14 <vPortEnterCritical>
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800605a:	b25b      	sxtb	r3, r3
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d103      	bne.n	800606a <xQueueReceive+0x122>
 8006062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006070:	b25b      	sxtb	r3, r3
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d103      	bne.n	8006080 <xQueueReceive+0x138>
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006080:	f001 fd78 	bl	8007b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006084:	1d3a      	adds	r2, r7, #4
 8006086:	f107 0310 	add.w	r3, r7, #16
 800608a:	4611      	mov	r1, r2
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fea1 	bl	8006dd4 <xTaskCheckForTimeOut>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d123      	bne.n	80060e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800609a:	f000 f935 	bl	8006308 <prvIsQueueEmpty>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d017      	beq.n	80060d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	3324      	adds	r3, #36	; 0x24
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	4611      	mov	r1, r2
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 fdc7 	bl	8006c40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060b4:	f000 f8d6 	bl	8006264 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060b8:	f000 fbfc 	bl	80068b4 <xTaskResumeAll>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d189      	bne.n	8005fd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80060c2:	4b10      	ldr	r3, [pc, #64]	; (8006104 <xQueueReceive+0x1bc>)
 80060c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	e780      	b.n	8005fd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060d6:	f000 f8c5 	bl	8006264 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060da:	f000 fbeb 	bl	80068b4 <xTaskResumeAll>
 80060de:	e77a      	b.n	8005fd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060e2:	f000 f8bf 	bl	8006264 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060e6:	f000 fbe5 	bl	80068b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ec:	f000 f90c 	bl	8006308 <prvIsQueueEmpty>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f43f af6f 	beq.w	8005fd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3730      	adds	r7, #48	; 0x30
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	e000ed04 	.word	0xe000ed04

08006108 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60bb      	str	r3, [r7, #8]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800612c:	f001 fcf2 	bl	8007b14 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006136:	f001 fd1d 	bl	8007b74 <vPortExitCritical>

	return uxReturn;
 800613a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006150:	2300      	movs	r3, #0
 8006152:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10d      	bne.n	800617e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d14d      	bne.n	8006206 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 ff92 	bl	8007098 <xTaskPriorityDisinherit>
 8006174:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	609a      	str	r2, [r3, #8]
 800617c:	e043      	b.n	8006206 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d119      	bne.n	80061b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6858      	ldr	r0, [r3, #4]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	461a      	mov	r2, r3
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	f001 ffe0 	bl	8008154 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	441a      	add	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d32b      	bcc.n	8006206 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	605a      	str	r2, [r3, #4]
 80061b6:	e026      	b.n	8006206 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68d8      	ldr	r0, [r3, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	461a      	mov	r2, r3
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	f001 ffc6 	bl	8008154 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	425b      	negs	r3, r3
 80061d2:	441a      	add	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d207      	bcs.n	80061f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ec:	425b      	negs	r3, r3
 80061ee:	441a      	add	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d105      	bne.n	8006206 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	3b01      	subs	r3, #1
 8006204:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800620e:	697b      	ldr	r3, [r7, #20]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	2b00      	cmp	r3, #0
 8006228:	d018      	beq.n	800625c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	441a      	add	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	d303      	bcc.n	800624c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68d9      	ldr	r1, [r3, #12]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006254:	461a      	mov	r2, r3
 8006256:	6838      	ldr	r0, [r7, #0]
 8006258:	f001 ff7c 	bl	8008154 <memcpy>
	}
}
 800625c:	bf00      	nop
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800626c:	f001 fc52 	bl	8007b14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006276:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006278:	e011      	b.n	800629e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	2b00      	cmp	r3, #0
 8006280:	d012      	beq.n	80062a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3324      	adds	r3, #36	; 0x24
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fd2a 	bl	8006ce0 <xTaskRemoveFromEventList>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006292:	f000 fe01 	bl	8006e98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	3b01      	subs	r3, #1
 800629a:	b2db      	uxtb	r3, r3
 800629c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800629e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	dce9      	bgt.n	800627a <prvUnlockQueue+0x16>
 80062a6:	e000      	b.n	80062aa <prvUnlockQueue+0x46>
					break;
 80062a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	22ff      	movs	r2, #255	; 0xff
 80062ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80062b2:	f001 fc5f 	bl	8007b74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062b6:	f001 fc2d 	bl	8007b14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062c2:	e011      	b.n	80062e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d012      	beq.n	80062f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3310      	adds	r3, #16
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 fd05 	bl	8006ce0 <xTaskRemoveFromEventList>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062dc:	f000 fddc 	bl	8006e98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062e0:	7bbb      	ldrb	r3, [r7, #14]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	dce9      	bgt.n	80062c4 <prvUnlockQueue+0x60>
 80062f0:	e000      	b.n	80062f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	22ff      	movs	r2, #255	; 0xff
 80062f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062fc:	f001 fc3a 	bl	8007b74 <vPortExitCritical>
}
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006310:	f001 fc00 	bl	8007b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	e001      	b.n	8006326 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006322:	2300      	movs	r3, #0
 8006324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006326:	f001 fc25 	bl	8007b74 <vPortExitCritical>

	return xReturn;
 800632a:	68fb      	ldr	r3, [r7, #12]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800633c:	f001 fbea 	bl	8007b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006348:	429a      	cmp	r2, r3
 800634a:	d102      	bne.n	8006352 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800634c:	2301      	movs	r3, #1
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e001      	b.n	8006356 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006356:	f001 fc0d 	bl	8007b74 <vPortExitCritical>

	return xReturn;
 800635a:	68fb      	ldr	r3, [r7, #12]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	e014      	b.n	800639e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006374:	4a0f      	ldr	r2, [pc, #60]	; (80063b4 <vQueueAddToRegistry+0x50>)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10b      	bne.n	8006398 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006380:	490c      	ldr	r1, [pc, #48]	; (80063b4 <vQueueAddToRegistry+0x50>)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800638a:	4a0a      	ldr	r2, [pc, #40]	; (80063b4 <vQueueAddToRegistry+0x50>)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4413      	add	r3, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006396:	e006      	b.n	80063a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3301      	adds	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b07      	cmp	r3, #7
 80063a2:	d9e7      	bls.n	8006374 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20001fc0 	.word	0x20001fc0

080063b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063c8:	f001 fba4 	bl	8007b14 <vPortEnterCritical>
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063d2:	b25b      	sxtb	r3, r3
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d8:	d103      	bne.n	80063e2 <vQueueWaitForMessageRestricted+0x2a>
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063e8:	b25b      	sxtb	r3, r3
 80063ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ee:	d103      	bne.n	80063f8 <vQueueWaitForMessageRestricted+0x40>
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063f8:	f001 fbbc 	bl	8007b74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	2b00      	cmp	r3, #0
 8006402:	d106      	bne.n	8006412 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	3324      	adds	r3, #36	; 0x24
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fc3b 	bl	8006c88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006412:	6978      	ldr	r0, [r7, #20]
 8006414:	f7ff ff26 	bl	8006264 <prvUnlockQueue>
	}
 8006418:	bf00      	nop
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08e      	sub	sp, #56	; 0x38
 8006424:	af04      	add	r7, sp, #16
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800642e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	623b      	str	r3, [r7, #32]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <xTaskCreateStatic+0x46>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	61fb      	str	r3, [r7, #28]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006466:	235c      	movs	r3, #92	; 0x5c
 8006468:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b5c      	cmp	r3, #92	; 0x5c
 800646e:	d00a      	beq.n	8006486 <xTaskCreateStatic+0x66>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	61bb      	str	r3, [r7, #24]
}
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006486:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	2b00      	cmp	r3, #0
 800648c:	d01e      	beq.n	80064cc <xTaskCreateStatic+0xac>
 800648e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01b      	beq.n	80064cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800649c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	2202      	movs	r2, #2
 80064a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064a6:	2300      	movs	r3, #0
 80064a8:	9303      	str	r3, [sp, #12]
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	9302      	str	r3, [sp, #8]
 80064ae:	f107 0314 	add.w	r3, r7, #20
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 f850 	bl	8006564 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064c6:	f000 f8dd 	bl	8006684 <prvAddNewTaskToReadyList>
 80064ca:	e001      	b.n	80064d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064d0:	697b      	ldr	r3, [r7, #20]
	}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3728      	adds	r7, #40	; 0x28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b08c      	sub	sp, #48	; 0x30
 80064de:	af04      	add	r7, sp, #16
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	603b      	str	r3, [r7, #0]
 80064e6:	4613      	mov	r3, r2
 80064e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 fc32 	bl	8007d58 <pvPortMalloc>
 80064f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00e      	beq.n	800651a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064fc:	205c      	movs	r0, #92	; 0x5c
 80064fe:	f001 fc2b 	bl	8007d58 <pvPortMalloc>
 8006502:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
 8006510:	e005      	b.n	800651e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006512:	6978      	ldr	r0, [r7, #20]
 8006514:	f001 fce4 	bl	8007ee0 <vPortFree>
 8006518:	e001      	b.n	800651e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d017      	beq.n	8006554 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800652c:	88fa      	ldrh	r2, [r7, #6]
 800652e:	2300      	movs	r3, #0
 8006530:	9303      	str	r3, [sp, #12]
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	9302      	str	r3, [sp, #8]
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f80e 	bl	8006564 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006548:	69f8      	ldr	r0, [r7, #28]
 800654a:	f000 f89b 	bl	8006684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800654e:	2301      	movs	r3, #1
 8006550:	61bb      	str	r3, [r7, #24]
 8006552:	e002      	b.n	800655a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006554:	f04f 33ff 	mov.w	r3, #4294967295
 8006558:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800655a:	69bb      	ldr	r3, [r7, #24]
	}
 800655c:	4618      	mov	r0, r3
 800655e:	3720      	adds	r7, #32
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	461a      	mov	r2, r3
 800657c:	21a5      	movs	r1, #165	; 0xa5
 800657e:	f001 fdf7 	bl	8008170 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800658c:	3b01      	subs	r3, #1
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	f023 0307 	bic.w	r3, r3, #7
 800659a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	617b      	str	r3, [r7, #20]
}
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d01f      	beq.n	8006602 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
 80065c6:	e012      	b.n	80065ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	4413      	add	r3, r2
 80065ce:	7819      	ldrb	r1, [r3, #0]
 80065d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	4413      	add	r3, r2
 80065d6:	3334      	adds	r3, #52	; 0x34
 80065d8:	460a      	mov	r2, r1
 80065da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4413      	add	r3, r2
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d006      	beq.n	80065f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	3301      	adds	r3, #1
 80065ec:	61fb      	str	r3, [r7, #28]
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	2b0f      	cmp	r3, #15
 80065f2:	d9e9      	bls.n	80065c8 <prvInitialiseNewTask+0x64>
 80065f4:	e000      	b.n	80065f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80065f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006600:	e003      	b.n	800660a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	2b37      	cmp	r3, #55	; 0x37
 800660e:	d901      	bls.n	8006614 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006610:	2337      	movs	r3, #55	; 0x37
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006618:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800661e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	2200      	movs	r2, #0
 8006624:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	3304      	adds	r3, #4
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff f91e 	bl	800586c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	3318      	adds	r3, #24
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff f919 	bl	800586c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800663e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800664e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	2200      	movs	r2, #0
 8006654:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	68f9      	ldr	r1, [r7, #12]
 8006662:	69b8      	ldr	r0, [r7, #24]
 8006664:	f001 f928 	bl	80078b8 <pxPortInitialiseStack>
 8006668:	4602      	mov	r2, r0
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006678:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800667a:	bf00      	nop
 800667c:	3720      	adds	r7, #32
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800668c:	f001 fa42 	bl	8007b14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006690:	4b2d      	ldr	r3, [pc, #180]	; (8006748 <prvAddNewTaskToReadyList+0xc4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3301      	adds	r3, #1
 8006696:	4a2c      	ldr	r2, [pc, #176]	; (8006748 <prvAddNewTaskToReadyList+0xc4>)
 8006698:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800669a:	4b2c      	ldr	r3, [pc, #176]	; (800674c <prvAddNewTaskToReadyList+0xc8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d109      	bne.n	80066b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066a2:	4a2a      	ldr	r2, [pc, #168]	; (800674c <prvAddNewTaskToReadyList+0xc8>)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066a8:	4b27      	ldr	r3, [pc, #156]	; (8006748 <prvAddNewTaskToReadyList+0xc4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d110      	bne.n	80066d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066b0:	f000 fc16 	bl	8006ee0 <prvInitialiseTaskLists>
 80066b4:	e00d      	b.n	80066d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066b6:	4b26      	ldr	r3, [pc, #152]	; (8006750 <prvAddNewTaskToReadyList+0xcc>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d109      	bne.n	80066d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066be:	4b23      	ldr	r3, [pc, #140]	; (800674c <prvAddNewTaskToReadyList+0xc8>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d802      	bhi.n	80066d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066cc:	4a1f      	ldr	r2, [pc, #124]	; (800674c <prvAddNewTaskToReadyList+0xc8>)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066d2:	4b20      	ldr	r3, [pc, #128]	; (8006754 <prvAddNewTaskToReadyList+0xd0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3301      	adds	r3, #1
 80066d8:	4a1e      	ldr	r2, [pc, #120]	; (8006754 <prvAddNewTaskToReadyList+0xd0>)
 80066da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066dc:	4b1d      	ldr	r3, [pc, #116]	; (8006754 <prvAddNewTaskToReadyList+0xd0>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e8:	4b1b      	ldr	r3, [pc, #108]	; (8006758 <prvAddNewTaskToReadyList+0xd4>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d903      	bls.n	80066f8 <prvAddNewTaskToReadyList+0x74>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f4:	4a18      	ldr	r2, [pc, #96]	; (8006758 <prvAddNewTaskToReadyList+0xd4>)
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4a15      	ldr	r2, [pc, #84]	; (800675c <prvAddNewTaskToReadyList+0xd8>)
 8006706:	441a      	add	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3304      	adds	r3, #4
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f7ff f8b9 	bl	8005886 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006714:	f001 fa2e 	bl	8007b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006718:	4b0d      	ldr	r3, [pc, #52]	; (8006750 <prvAddNewTaskToReadyList+0xcc>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00e      	beq.n	800673e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006720:	4b0a      	ldr	r3, [pc, #40]	; (800674c <prvAddNewTaskToReadyList+0xc8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	429a      	cmp	r2, r3
 800672c:	d207      	bcs.n	800673e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800672e:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <prvAddNewTaskToReadyList+0xdc>)
 8006730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000c5c 	.word	0x20000c5c
 800674c:	20000788 	.word	0x20000788
 8006750:	20000c68 	.word	0x20000c68
 8006754:	20000c78 	.word	0x20000c78
 8006758:	20000c64 	.word	0x20000c64
 800675c:	2000078c 	.word	0x2000078c
 8006760:	e000ed04 	.word	0xe000ed04

08006764 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d017      	beq.n	80067a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <vTaskDelay+0x60>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <vTaskDelay+0x30>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	60bb      	str	r3, [r7, #8]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006794:	f000 f880 	bl	8006898 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006798:	2100      	movs	r1, #0
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fcea 	bl	8007174 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067a0:	f000 f888 	bl	80068b4 <xTaskResumeAll>
 80067a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d107      	bne.n	80067bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067ac:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <vTaskDelay+0x64>)
 80067ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067bc:	bf00      	nop
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20000c84 	.word	0x20000c84
 80067c8:	e000ed04 	.word	0xe000ed04

080067cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08a      	sub	sp, #40	; 0x28
 80067d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067da:	463a      	mov	r2, r7
 80067dc:	1d39      	adds	r1, r7, #4
 80067de:	f107 0308 	add.w	r3, r7, #8
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe ffee 	bl	80057c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	9202      	str	r2, [sp, #8]
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	2300      	movs	r3, #0
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	2300      	movs	r3, #0
 80067f8:	460a      	mov	r2, r1
 80067fa:	4921      	ldr	r1, [pc, #132]	; (8006880 <vTaskStartScheduler+0xb4>)
 80067fc:	4821      	ldr	r0, [pc, #132]	; (8006884 <vTaskStartScheduler+0xb8>)
 80067fe:	f7ff fe0f 	bl	8006420 <xTaskCreateStatic>
 8006802:	4603      	mov	r3, r0
 8006804:	4a20      	ldr	r2, [pc, #128]	; (8006888 <vTaskStartScheduler+0xbc>)
 8006806:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006808:	4b1f      	ldr	r3, [pc, #124]	; (8006888 <vTaskStartScheduler+0xbc>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006810:	2301      	movs	r3, #1
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	e001      	b.n	800681a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d102      	bne.n	8006826 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006820:	f000 fcfc 	bl	800721c <xTimerCreateTimerTask>
 8006824:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d116      	bne.n	800685a <vTaskStartScheduler+0x8e>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	613b      	str	r3, [r7, #16]
}
 800683e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006840:	4b12      	ldr	r3, [pc, #72]	; (800688c <vTaskStartScheduler+0xc0>)
 8006842:	f04f 32ff 	mov.w	r2, #4294967295
 8006846:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006848:	4b11      	ldr	r3, [pc, #68]	; (8006890 <vTaskStartScheduler+0xc4>)
 800684a:	2201      	movs	r2, #1
 800684c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800684e:	4b11      	ldr	r3, [pc, #68]	; (8006894 <vTaskStartScheduler+0xc8>)
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006854:	f001 f8bc 	bl	80079d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006858:	e00e      	b.n	8006878 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d10a      	bne.n	8006878 <vTaskStartScheduler+0xac>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	60fb      	str	r3, [r7, #12]
}
 8006874:	bf00      	nop
 8006876:	e7fe      	b.n	8006876 <vTaskStartScheduler+0xaa>
}
 8006878:	bf00      	nop
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	080082ac 	.word	0x080082ac
 8006884:	08006eb1 	.word	0x08006eb1
 8006888:	20000c80 	.word	0x20000c80
 800688c:	20000c7c 	.word	0x20000c7c
 8006890:	20000c68 	.word	0x20000c68
 8006894:	20000c60 	.word	0x20000c60

08006898 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800689c:	4b04      	ldr	r3, [pc, #16]	; (80068b0 <vTaskSuspendAll+0x18>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3301      	adds	r3, #1
 80068a2:	4a03      	ldr	r2, [pc, #12]	; (80068b0 <vTaskSuspendAll+0x18>)
 80068a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80068a6:	bf00      	nop
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	20000c84 	.word	0x20000c84

080068b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068be:	2300      	movs	r3, #0
 80068c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068c2:	4b42      	ldr	r3, [pc, #264]	; (80069cc <xTaskResumeAll+0x118>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10a      	bne.n	80068e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	603b      	str	r3, [r7, #0]
}
 80068dc:	bf00      	nop
 80068de:	e7fe      	b.n	80068de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068e0:	f001 f918 	bl	8007b14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068e4:	4b39      	ldr	r3, [pc, #228]	; (80069cc <xTaskResumeAll+0x118>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	4a38      	ldr	r2, [pc, #224]	; (80069cc <xTaskResumeAll+0x118>)
 80068ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ee:	4b37      	ldr	r3, [pc, #220]	; (80069cc <xTaskResumeAll+0x118>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d162      	bne.n	80069bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068f6:	4b36      	ldr	r3, [pc, #216]	; (80069d0 <xTaskResumeAll+0x11c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d05e      	beq.n	80069bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068fe:	e02f      	b.n	8006960 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006900:	4b34      	ldr	r3, [pc, #208]	; (80069d4 <xTaskResumeAll+0x120>)
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3318      	adds	r3, #24
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff f817 	bl	8005940 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3304      	adds	r3, #4
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff f812 	bl	8005940 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006920:	4b2d      	ldr	r3, [pc, #180]	; (80069d8 <xTaskResumeAll+0x124>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d903      	bls.n	8006930 <xTaskResumeAll+0x7c>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	4a2a      	ldr	r2, [pc, #168]	; (80069d8 <xTaskResumeAll+0x124>)
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006934:	4613      	mov	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4a27      	ldr	r2, [pc, #156]	; (80069dc <xTaskResumeAll+0x128>)
 800693e:	441a      	add	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3304      	adds	r3, #4
 8006944:	4619      	mov	r1, r3
 8006946:	4610      	mov	r0, r2
 8006948:	f7fe ff9d 	bl	8005886 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006950:	4b23      	ldr	r3, [pc, #140]	; (80069e0 <xTaskResumeAll+0x12c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	429a      	cmp	r2, r3
 8006958:	d302      	bcc.n	8006960 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800695a:	4b22      	ldr	r3, [pc, #136]	; (80069e4 <xTaskResumeAll+0x130>)
 800695c:	2201      	movs	r2, #1
 800695e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006960:	4b1c      	ldr	r3, [pc, #112]	; (80069d4 <xTaskResumeAll+0x120>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1cb      	bne.n	8006900 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800696e:	f000 fb55 	bl	800701c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006972:	4b1d      	ldr	r3, [pc, #116]	; (80069e8 <xTaskResumeAll+0x134>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d010      	beq.n	80069a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800697e:	f000 f847 	bl	8006a10 <xTaskIncrementTick>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006988:	4b16      	ldr	r3, [pc, #88]	; (80069e4 <xTaskResumeAll+0x130>)
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3b01      	subs	r3, #1
 8006992:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1f1      	bne.n	800697e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800699a:	4b13      	ldr	r3, [pc, #76]	; (80069e8 <xTaskResumeAll+0x134>)
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069a0:	4b10      	ldr	r3, [pc, #64]	; (80069e4 <xTaskResumeAll+0x130>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d009      	beq.n	80069bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069a8:	2301      	movs	r3, #1
 80069aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069ac:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <xTaskResumeAll+0x138>)
 80069ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069bc:	f001 f8da 	bl	8007b74 <vPortExitCritical>

	return xAlreadyYielded;
 80069c0:	68bb      	ldr	r3, [r7, #8]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20000c84 	.word	0x20000c84
 80069d0:	20000c5c 	.word	0x20000c5c
 80069d4:	20000c1c 	.word	0x20000c1c
 80069d8:	20000c64 	.word	0x20000c64
 80069dc:	2000078c 	.word	0x2000078c
 80069e0:	20000788 	.word	0x20000788
 80069e4:	20000c70 	.word	0x20000c70
 80069e8:	20000c6c 	.word	0x20000c6c
 80069ec:	e000ed04 	.word	0xe000ed04

080069f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069f6:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <xTaskGetTickCount+0x1c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069fc:	687b      	ldr	r3, [r7, #4]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	20000c60 	.word	0x20000c60

08006a10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a1a:	4b4f      	ldr	r3, [pc, #316]	; (8006b58 <xTaskIncrementTick+0x148>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f040 8089 	bne.w	8006b36 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a24:	4b4d      	ldr	r3, [pc, #308]	; (8006b5c <xTaskIncrementTick+0x14c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a2c:	4a4b      	ldr	r2, [pc, #300]	; (8006b5c <xTaskIncrementTick+0x14c>)
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d120      	bne.n	8006a7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a38:	4b49      	ldr	r3, [pc, #292]	; (8006b60 <xTaskIncrementTick+0x150>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	603b      	str	r3, [r7, #0]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <xTaskIncrementTick+0x46>
 8006a58:	4b41      	ldr	r3, [pc, #260]	; (8006b60 <xTaskIncrementTick+0x150>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	4b41      	ldr	r3, [pc, #260]	; (8006b64 <xTaskIncrementTick+0x154>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a3f      	ldr	r2, [pc, #252]	; (8006b60 <xTaskIncrementTick+0x150>)
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	4a3f      	ldr	r2, [pc, #252]	; (8006b64 <xTaskIncrementTick+0x154>)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	4b3e      	ldr	r3, [pc, #248]	; (8006b68 <xTaskIncrementTick+0x158>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	4a3d      	ldr	r2, [pc, #244]	; (8006b68 <xTaskIncrementTick+0x158>)
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	f000 fad1 	bl	800701c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a7a:	4b3c      	ldr	r3, [pc, #240]	; (8006b6c <xTaskIncrementTick+0x15c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d349      	bcc.n	8006b18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a84:	4b36      	ldr	r3, [pc, #216]	; (8006b60 <xTaskIncrementTick+0x150>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a8e:	4b37      	ldr	r3, [pc, #220]	; (8006b6c <xTaskIncrementTick+0x15c>)
 8006a90:	f04f 32ff 	mov.w	r2, #4294967295
 8006a94:	601a      	str	r2, [r3, #0]
					break;
 8006a96:	e03f      	b.n	8006b18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a98:	4b31      	ldr	r3, [pc, #196]	; (8006b60 <xTaskIncrementTick+0x150>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d203      	bcs.n	8006ab8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ab0:	4a2e      	ldr	r2, [pc, #184]	; (8006b6c <xTaskIncrementTick+0x15c>)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ab6:	e02f      	b.n	8006b18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe ff3f 	bl	8005940 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	3318      	adds	r3, #24
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe ff36 	bl	8005940 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad8:	4b25      	ldr	r3, [pc, #148]	; (8006b70 <xTaskIncrementTick+0x160>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d903      	bls.n	8006ae8 <xTaskIncrementTick+0xd8>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	4a22      	ldr	r2, [pc, #136]	; (8006b70 <xTaskIncrementTick+0x160>)
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4a1f      	ldr	r2, [pc, #124]	; (8006b74 <xTaskIncrementTick+0x164>)
 8006af6:	441a      	add	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	3304      	adds	r3, #4
 8006afc:	4619      	mov	r1, r3
 8006afe:	4610      	mov	r0, r2
 8006b00:	f7fe fec1 	bl	8005886 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b08:	4b1b      	ldr	r3, [pc, #108]	; (8006b78 <xTaskIncrementTick+0x168>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d3b8      	bcc.n	8006a84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b12:	2301      	movs	r3, #1
 8006b14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b16:	e7b5      	b.n	8006a84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b18:	4b17      	ldr	r3, [pc, #92]	; (8006b78 <xTaskIncrementTick+0x168>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1e:	4915      	ldr	r1, [pc, #84]	; (8006b74 <xTaskIncrementTick+0x164>)
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	440b      	add	r3, r1
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d907      	bls.n	8006b40 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006b30:	2301      	movs	r3, #1
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	e004      	b.n	8006b40 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b36:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <xTaskIncrementTick+0x16c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	4a0f      	ldr	r2, [pc, #60]	; (8006b7c <xTaskIncrementTick+0x16c>)
 8006b3e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b40:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <xTaskIncrementTick+0x170>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b4c:	697b      	ldr	r3, [r7, #20]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000c84 	.word	0x20000c84
 8006b5c:	20000c60 	.word	0x20000c60
 8006b60:	20000c14 	.word	0x20000c14
 8006b64:	20000c18 	.word	0x20000c18
 8006b68:	20000c74 	.word	0x20000c74
 8006b6c:	20000c7c 	.word	0x20000c7c
 8006b70:	20000c64 	.word	0x20000c64
 8006b74:	2000078c 	.word	0x2000078c
 8006b78:	20000788 	.word	0x20000788
 8006b7c:	20000c6c 	.word	0x20000c6c
 8006b80:	20000c70 	.word	0x20000c70

08006b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b8a:	4b28      	ldr	r3, [pc, #160]	; (8006c2c <vTaskSwitchContext+0xa8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b92:	4b27      	ldr	r3, [pc, #156]	; (8006c30 <vTaskSwitchContext+0xac>)
 8006b94:	2201      	movs	r2, #1
 8006b96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b98:	e041      	b.n	8006c1e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006b9a:	4b25      	ldr	r3, [pc, #148]	; (8006c30 <vTaskSwitchContext+0xac>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba0:	4b24      	ldr	r3, [pc, #144]	; (8006c34 <vTaskSwitchContext+0xb0>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	e010      	b.n	8006bca <vTaskSwitchContext+0x46>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <vTaskSwitchContext+0x40>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	607b      	str	r3, [r7, #4]
}
 8006bc0:	bf00      	nop
 8006bc2:	e7fe      	b.n	8006bc2 <vTaskSwitchContext+0x3e>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	491b      	ldr	r1, [pc, #108]	; (8006c38 <vTaskSwitchContext+0xb4>)
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	440b      	add	r3, r1
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0e4      	beq.n	8006ba8 <vTaskSwitchContext+0x24>
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4613      	mov	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4a13      	ldr	r2, [pc, #76]	; (8006c38 <vTaskSwitchContext+0xb4>)
 8006bea:	4413      	add	r3, r2
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	605a      	str	r2, [r3, #4]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	3308      	adds	r3, #8
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d104      	bne.n	8006c0e <vTaskSwitchContext+0x8a>
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	605a      	str	r2, [r3, #4]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	4a09      	ldr	r2, [pc, #36]	; (8006c3c <vTaskSwitchContext+0xb8>)
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	4a06      	ldr	r2, [pc, #24]	; (8006c34 <vTaskSwitchContext+0xb0>)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6013      	str	r3, [r2, #0]
}
 8006c1e:	bf00      	nop
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	20000c84 	.word	0x20000c84
 8006c30:	20000c70 	.word	0x20000c70
 8006c34:	20000c64 	.word	0x20000c64
 8006c38:	2000078c 	.word	0x2000078c
 8006c3c:	20000788 	.word	0x20000788

08006c40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10a      	bne.n	8006c66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	60fb      	str	r3, [r7, #12]
}
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c66:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <vTaskPlaceOnEventList+0x44>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3318      	adds	r3, #24
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fe fe2d 	bl	80058ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c74:	2101      	movs	r1, #1
 8006c76:	6838      	ldr	r0, [r7, #0]
 8006c78:	f000 fa7c 	bl	8007174 <prvAddCurrentTaskToDelayedList>
}
 8006c7c:	bf00      	nop
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000788 	.word	0x20000788

08006c88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10a      	bne.n	8006cb0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	617b      	str	r3, [r7, #20]
}
 8006cac:	bf00      	nop
 8006cae:	e7fe      	b.n	8006cae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <vTaskPlaceOnEventListRestricted+0x54>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3318      	adds	r3, #24
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f7fe fde4 	bl	8005886 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	68b8      	ldr	r0, [r7, #8]
 8006cce:	f000 fa51 	bl	8007174 <prvAddCurrentTaskToDelayedList>
	}
 8006cd2:	bf00      	nop
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000788 	.word	0x20000788

08006ce0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10a      	bne.n	8006d0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60fb      	str	r3, [r7, #12]
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	3318      	adds	r3, #24
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe fe15 	bl	8005940 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d16:	4b1e      	ldr	r3, [pc, #120]	; (8006d90 <xTaskRemoveFromEventList+0xb0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d11d      	bne.n	8006d5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	3304      	adds	r3, #4
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fe0c 	bl	8005940 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2c:	4b19      	ldr	r3, [pc, #100]	; (8006d94 <xTaskRemoveFromEventList+0xb4>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d903      	bls.n	8006d3c <xTaskRemoveFromEventList+0x5c>
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	4a16      	ldr	r2, [pc, #88]	; (8006d94 <xTaskRemoveFromEventList+0xb4>)
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4a13      	ldr	r2, [pc, #76]	; (8006d98 <xTaskRemoveFromEventList+0xb8>)
 8006d4a:	441a      	add	r2, r3
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	3304      	adds	r3, #4
 8006d50:	4619      	mov	r1, r3
 8006d52:	4610      	mov	r0, r2
 8006d54:	f7fe fd97 	bl	8005886 <vListInsertEnd>
 8006d58:	e005      	b.n	8006d66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	3318      	adds	r3, #24
 8006d5e:	4619      	mov	r1, r3
 8006d60:	480e      	ldr	r0, [pc, #56]	; (8006d9c <xTaskRemoveFromEventList+0xbc>)
 8006d62:	f7fe fd90 	bl	8005886 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <xTaskRemoveFromEventList+0xc0>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d905      	bls.n	8006d80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d74:	2301      	movs	r3, #1
 8006d76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d78:	4b0a      	ldr	r3, [pc, #40]	; (8006da4 <xTaskRemoveFromEventList+0xc4>)
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e001      	b.n	8006d84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d84:	697b      	ldr	r3, [r7, #20]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000c84 	.word	0x20000c84
 8006d94:	20000c64 	.word	0x20000c64
 8006d98:	2000078c 	.word	0x2000078c
 8006d9c:	20000c1c 	.word	0x20000c1c
 8006da0:	20000788 	.word	0x20000788
 8006da4:	20000c70 	.word	0x20000c70

08006da8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006db0:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <vTaskInternalSetTimeOutState+0x24>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006db8:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <vTaskInternalSetTimeOutState+0x28>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	605a      	str	r2, [r3, #4]
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	20000c74 	.word	0x20000c74
 8006dd0:	20000c60 	.word	0x20000c60

08006dd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	613b      	str	r3, [r7, #16]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	60fb      	str	r3, [r7, #12]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e16:	f000 fe7d 	bl	8007b14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e1a:	4b1d      	ldr	r3, [pc, #116]	; (8006e90 <xTaskCheckForTimeOut+0xbc>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e32:	d102      	bne.n	8006e3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61fb      	str	r3, [r7, #28]
 8006e38:	e023      	b.n	8006e82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	4b15      	ldr	r3, [pc, #84]	; (8006e94 <xTaskCheckForTimeOut+0xc0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d007      	beq.n	8006e56 <xTaskCheckForTimeOut+0x82>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d302      	bcc.n	8006e56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e50:	2301      	movs	r3, #1
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	e015      	b.n	8006e82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d20b      	bcs.n	8006e78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	1ad2      	subs	r2, r2, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff ff9b 	bl	8006da8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61fb      	str	r3, [r7, #28]
 8006e76:	e004      	b.n	8006e82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e82:	f000 fe77 	bl	8007b74 <vPortExitCritical>

	return xReturn;
 8006e86:	69fb      	ldr	r3, [r7, #28]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3720      	adds	r7, #32
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20000c60 	.word	0x20000c60
 8006e94:	20000c74 	.word	0x20000c74

08006e98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e9c:	4b03      	ldr	r3, [pc, #12]	; (8006eac <vTaskMissedYield+0x14>)
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]
}
 8006ea2:	bf00      	nop
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	20000c70 	.word	0x20000c70

08006eb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006eb8:	f000 f852 	bl	8006f60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ebc:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <prvIdleTask+0x28>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d9f9      	bls.n	8006eb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ec4:	4b05      	ldr	r3, [pc, #20]	; (8006edc <prvIdleTask+0x2c>)
 8006ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ed4:	e7f0      	b.n	8006eb8 <prvIdleTask+0x8>
 8006ed6:	bf00      	nop
 8006ed8:	2000078c 	.word	0x2000078c
 8006edc:	e000ed04 	.word	0xe000ed04

08006ee0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	607b      	str	r3, [r7, #4]
 8006eea:	e00c      	b.n	8006f06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4a12      	ldr	r2, [pc, #72]	; (8006f40 <prvInitialiseTaskLists+0x60>)
 8006ef8:	4413      	add	r3, r2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe fc96 	bl	800582c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3301      	adds	r3, #1
 8006f04:	607b      	str	r3, [r7, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b37      	cmp	r3, #55	; 0x37
 8006f0a:	d9ef      	bls.n	8006eec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f0c:	480d      	ldr	r0, [pc, #52]	; (8006f44 <prvInitialiseTaskLists+0x64>)
 8006f0e:	f7fe fc8d 	bl	800582c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f12:	480d      	ldr	r0, [pc, #52]	; (8006f48 <prvInitialiseTaskLists+0x68>)
 8006f14:	f7fe fc8a 	bl	800582c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f18:	480c      	ldr	r0, [pc, #48]	; (8006f4c <prvInitialiseTaskLists+0x6c>)
 8006f1a:	f7fe fc87 	bl	800582c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f1e:	480c      	ldr	r0, [pc, #48]	; (8006f50 <prvInitialiseTaskLists+0x70>)
 8006f20:	f7fe fc84 	bl	800582c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f24:	480b      	ldr	r0, [pc, #44]	; (8006f54 <prvInitialiseTaskLists+0x74>)
 8006f26:	f7fe fc81 	bl	800582c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f2a:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <prvInitialiseTaskLists+0x78>)
 8006f2c:	4a05      	ldr	r2, [pc, #20]	; (8006f44 <prvInitialiseTaskLists+0x64>)
 8006f2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f30:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <prvInitialiseTaskLists+0x7c>)
 8006f32:	4a05      	ldr	r2, [pc, #20]	; (8006f48 <prvInitialiseTaskLists+0x68>)
 8006f34:	601a      	str	r2, [r3, #0]
}
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	2000078c 	.word	0x2000078c
 8006f44:	20000bec 	.word	0x20000bec
 8006f48:	20000c00 	.word	0x20000c00
 8006f4c:	20000c1c 	.word	0x20000c1c
 8006f50:	20000c30 	.word	0x20000c30
 8006f54:	20000c48 	.word	0x20000c48
 8006f58:	20000c14 	.word	0x20000c14
 8006f5c:	20000c18 	.word	0x20000c18

08006f60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f66:	e019      	b.n	8006f9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f68:	f000 fdd4 	bl	8007b14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f6c:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <prvCheckTasksWaitingTermination+0x50>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe fce1 	bl	8005940 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <prvCheckTasksWaitingTermination+0x54>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	4a0b      	ldr	r2, [pc, #44]	; (8006fb4 <prvCheckTasksWaitingTermination+0x54>)
 8006f86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f88:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <prvCheckTasksWaitingTermination+0x58>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	4a0a      	ldr	r2, [pc, #40]	; (8006fb8 <prvCheckTasksWaitingTermination+0x58>)
 8006f90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f92:	f000 fdef 	bl	8007b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f810 	bl	8006fbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <prvCheckTasksWaitingTermination+0x58>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e1      	bne.n	8006f68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000c30 	.word	0x20000c30
 8006fb4:	20000c5c 	.word	0x20000c5c
 8006fb8:	20000c44 	.word	0x20000c44

08006fbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d108      	bne.n	8006fe0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 ff84 	bl	8007ee0 <vPortFree>
				vPortFree( pxTCB );
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 ff81 	bl	8007ee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fde:	e018      	b.n	8007012 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d103      	bne.n	8006ff2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 ff78 	bl	8007ee0 <vPortFree>
	}
 8006ff0:	e00f      	b.n	8007012 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d00a      	beq.n	8007012 <prvDeleteTCB+0x56>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	60fb      	str	r3, [r7, #12]
}
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <prvDeleteTCB+0x54>
	}
 8007012:	bf00      	nop
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007022:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <prvResetNextTaskUnblockTime+0x38>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d104      	bne.n	8007036 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800702c:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <prvResetNextTaskUnblockTime+0x3c>)
 800702e:	f04f 32ff 	mov.w	r2, #4294967295
 8007032:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007034:	e008      	b.n	8007048 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007036:	4b07      	ldr	r3, [pc, #28]	; (8007054 <prvResetNextTaskUnblockTime+0x38>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	4a04      	ldr	r2, [pc, #16]	; (8007058 <prvResetNextTaskUnblockTime+0x3c>)
 8007046:	6013      	str	r3, [r2, #0]
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	20000c14 	.word	0x20000c14
 8007058:	20000c7c 	.word	0x20000c7c

0800705c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007062:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <xTaskGetSchedulerState+0x34>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d102      	bne.n	8007070 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800706a:	2301      	movs	r3, #1
 800706c:	607b      	str	r3, [r7, #4]
 800706e:	e008      	b.n	8007082 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007070:	4b08      	ldr	r3, [pc, #32]	; (8007094 <xTaskGetSchedulerState+0x38>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007078:	2302      	movs	r3, #2
 800707a:	607b      	str	r3, [r7, #4]
 800707c:	e001      	b.n	8007082 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800707e:	2300      	movs	r3, #0
 8007080:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007082:	687b      	ldr	r3, [r7, #4]
	}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	20000c68 	.word	0x20000c68
 8007094:	20000c84 	.word	0x20000c84

08007098 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d056      	beq.n	800715c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070ae:	4b2e      	ldr	r3, [pc, #184]	; (8007168 <xTaskPriorityDisinherit+0xd0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d00a      	beq.n	80070ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80070b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	60fb      	str	r3, [r7, #12]
}
 80070ca:	bf00      	nop
 80070cc:	e7fe      	b.n	80070cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10a      	bne.n	80070ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	60bb      	str	r3, [r7, #8]
}
 80070e8:	bf00      	nop
 80070ea:	e7fe      	b.n	80070ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f0:	1e5a      	subs	r2, r3, #1
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fe:	429a      	cmp	r2, r3
 8007100:	d02c      	beq.n	800715c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007106:	2b00      	cmp	r3, #0
 8007108:	d128      	bne.n	800715c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	3304      	adds	r3, #4
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe fc16 	bl	8005940 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712c:	4b0f      	ldr	r3, [pc, #60]	; (800716c <xTaskPriorityDisinherit+0xd4>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d903      	bls.n	800713c <xTaskPriorityDisinherit+0xa4>
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	4a0c      	ldr	r2, [pc, #48]	; (800716c <xTaskPriorityDisinherit+0xd4>)
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4a09      	ldr	r2, [pc, #36]	; (8007170 <xTaskPriorityDisinherit+0xd8>)
 800714a:	441a      	add	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	3304      	adds	r3, #4
 8007150:	4619      	mov	r1, r3
 8007152:	4610      	mov	r0, r2
 8007154:	f7fe fb97 	bl	8005886 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007158:	2301      	movs	r3, #1
 800715a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800715c:	697b      	ldr	r3, [r7, #20]
	}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20000788 	.word	0x20000788
 800716c:	20000c64 	.word	0x20000c64
 8007170:	2000078c 	.word	0x2000078c

08007174 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800717e:	4b21      	ldr	r3, [pc, #132]	; (8007204 <prvAddCurrentTaskToDelayedList+0x90>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007184:	4b20      	ldr	r3, [pc, #128]	; (8007208 <prvAddCurrentTaskToDelayedList+0x94>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3304      	adds	r3, #4
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe fbd8 	bl	8005940 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007196:	d10a      	bne.n	80071ae <prvAddCurrentTaskToDelayedList+0x3a>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d007      	beq.n	80071ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800719e:	4b1a      	ldr	r3, [pc, #104]	; (8007208 <prvAddCurrentTaskToDelayedList+0x94>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3304      	adds	r3, #4
 80071a4:	4619      	mov	r1, r3
 80071a6:	4819      	ldr	r0, [pc, #100]	; (800720c <prvAddCurrentTaskToDelayedList+0x98>)
 80071a8:	f7fe fb6d 	bl	8005886 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071ac:	e026      	b.n	80071fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4413      	add	r3, r2
 80071b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071b6:	4b14      	ldr	r3, [pc, #80]	; (8007208 <prvAddCurrentTaskToDelayedList+0x94>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d209      	bcs.n	80071da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071c6:	4b12      	ldr	r3, [pc, #72]	; (8007210 <prvAddCurrentTaskToDelayedList+0x9c>)
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4b0f      	ldr	r3, [pc, #60]	; (8007208 <prvAddCurrentTaskToDelayedList+0x94>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4619      	mov	r1, r3
 80071d2:	4610      	mov	r0, r2
 80071d4:	f7fe fb7b 	bl	80058ce <vListInsert>
}
 80071d8:	e010      	b.n	80071fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071da:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <prvAddCurrentTaskToDelayedList+0xa0>)
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	4b0a      	ldr	r3, [pc, #40]	; (8007208 <prvAddCurrentTaskToDelayedList+0x94>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4619      	mov	r1, r3
 80071e6:	4610      	mov	r0, r2
 80071e8:	f7fe fb71 	bl	80058ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071ec:	4b0a      	ldr	r3, [pc, #40]	; (8007218 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d202      	bcs.n	80071fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80071f6:	4a08      	ldr	r2, [pc, #32]	; (8007218 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	6013      	str	r3, [r2, #0]
}
 80071fc:	bf00      	nop
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20000c60 	.word	0x20000c60
 8007208:	20000788 	.word	0x20000788
 800720c:	20000c48 	.word	0x20000c48
 8007210:	20000c18 	.word	0x20000c18
 8007214:	20000c14 	.word	0x20000c14
 8007218:	20000c7c 	.word	0x20000c7c

0800721c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	; 0x28
 8007220:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007226:	f000 fb07 	bl	8007838 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800722a:	4b1c      	ldr	r3, [pc, #112]	; (800729c <xTimerCreateTimerTask+0x80>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d021      	beq.n	8007276 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800723a:	1d3a      	adds	r2, r7, #4
 800723c:	f107 0108 	add.w	r1, r7, #8
 8007240:	f107 030c 	add.w	r3, r7, #12
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe fad7 	bl	80057f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800724a:	6879      	ldr	r1, [r7, #4]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	9202      	str	r2, [sp, #8]
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	2302      	movs	r3, #2
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	2300      	movs	r3, #0
 800725a:	460a      	mov	r2, r1
 800725c:	4910      	ldr	r1, [pc, #64]	; (80072a0 <xTimerCreateTimerTask+0x84>)
 800725e:	4811      	ldr	r0, [pc, #68]	; (80072a4 <xTimerCreateTimerTask+0x88>)
 8007260:	f7ff f8de 	bl	8006420 <xTaskCreateStatic>
 8007264:	4603      	mov	r3, r0
 8007266:	4a10      	ldr	r2, [pc, #64]	; (80072a8 <xTimerCreateTimerTask+0x8c>)
 8007268:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800726a:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <xTimerCreateTimerTask+0x8c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007272:	2301      	movs	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	613b      	str	r3, [r7, #16]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007292:	697b      	ldr	r3, [r7, #20]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	20000cb8 	.word	0x20000cb8
 80072a0:	080082b4 	.word	0x080082b4
 80072a4:	080073e1 	.word	0x080073e1
 80072a8:	20000cbc 	.word	0x20000cbc

080072ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08a      	sub	sp, #40	; 0x28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <xTimerGenericCommand+0x2e>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	623b      	str	r3, [r7, #32]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80072da:	4b1a      	ldr	r3, [pc, #104]	; (8007344 <xTimerGenericCommand+0x98>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d02a      	beq.n	8007338 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2b05      	cmp	r3, #5
 80072f2:	dc18      	bgt.n	8007326 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80072f4:	f7ff feb2 	bl	800705c <xTaskGetSchedulerState>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d109      	bne.n	8007312 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80072fe:	4b11      	ldr	r3, [pc, #68]	; (8007344 <xTimerGenericCommand+0x98>)
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	f107 0110 	add.w	r1, r7, #16
 8007306:	2300      	movs	r3, #0
 8007308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730a:	f7fe fc87 	bl	8005c1c <xQueueGenericSend>
 800730e:	6278      	str	r0, [r7, #36]	; 0x24
 8007310:	e012      	b.n	8007338 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <xTimerGenericCommand+0x98>)
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	f107 0110 	add.w	r1, r7, #16
 800731a:	2300      	movs	r3, #0
 800731c:	2200      	movs	r2, #0
 800731e:	f7fe fc7d 	bl	8005c1c <xQueueGenericSend>
 8007322:	6278      	str	r0, [r7, #36]	; 0x24
 8007324:	e008      	b.n	8007338 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007326:	4b07      	ldr	r3, [pc, #28]	; (8007344 <xTimerGenericCommand+0x98>)
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	f107 0110 	add.w	r1, r7, #16
 800732e:	2300      	movs	r3, #0
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	f7fe fd71 	bl	8005e18 <xQueueGenericSendFromISR>
 8007336:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800733a:	4618      	mov	r0, r3
 800733c:	3728      	adds	r7, #40	; 0x28
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000cb8 	.word	0x20000cb8

08007348 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b088      	sub	sp, #32
 800734c:	af02      	add	r7, sp, #8
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007352:	4b22      	ldr	r3, [pc, #136]	; (80073dc <prvProcessExpiredTimer+0x94>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	3304      	adds	r3, #4
 8007360:	4618      	mov	r0, r3
 8007362:	f7fe faed 	bl	8005940 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b00      	cmp	r3, #0
 8007372:	d022      	beq.n	80073ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	699a      	ldr	r2, [r3, #24]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	18d1      	adds	r1, r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	6978      	ldr	r0, [r7, #20]
 8007382:	f000 f8d1 	bl	8007528 <prvInsertTimerInActiveList>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01f      	beq.n	80073cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800738c:	2300      	movs	r3, #0
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	2300      	movs	r3, #0
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	2100      	movs	r1, #0
 8007396:	6978      	ldr	r0, [r7, #20]
 8007398:	f7ff ff88 	bl	80072ac <xTimerGenericCommand>
 800739c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d113      	bne.n	80073cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	60fb      	str	r3, [r7, #12]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073c0:	f023 0301 	bic.w	r3, r3, #1
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	6978      	ldr	r0, [r7, #20]
 80073d2:	4798      	blx	r3
}
 80073d4:	bf00      	nop
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	20000cb0 	.word	0x20000cb0

080073e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073e8:	f107 0308 	add.w	r3, r7, #8
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 f857 	bl	80074a0 <prvGetNextExpireTime>
 80073f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4619      	mov	r1, r3
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 f803 	bl	8007404 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80073fe:	f000 f8d5 	bl	80075ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007402:	e7f1      	b.n	80073e8 <prvTimerTask+0x8>

08007404 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800740e:	f7ff fa43 	bl	8006898 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007412:	f107 0308 	add.w	r3, r7, #8
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f866 	bl	80074e8 <prvSampleTimeNow>
 800741c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d130      	bne.n	8007486 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <prvProcessTimerOrBlockTask+0x3c>
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	429a      	cmp	r2, r3
 8007430:	d806      	bhi.n	8007440 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007432:	f7ff fa3f 	bl	80068b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007436:	68f9      	ldr	r1, [r7, #12]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff ff85 	bl	8007348 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800743e:	e024      	b.n	800748a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d008      	beq.n	8007458 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007446:	4b13      	ldr	r3, [pc, #76]	; (8007494 <prvProcessTimerOrBlockTask+0x90>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <prvProcessTimerOrBlockTask+0x50>
 8007450:	2301      	movs	r3, #1
 8007452:	e000      	b.n	8007456 <prvProcessTimerOrBlockTask+0x52>
 8007454:	2300      	movs	r3, #0
 8007456:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007458:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <prvProcessTimerOrBlockTask+0x94>)
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	4619      	mov	r1, r3
 8007466:	f7fe ffa7 	bl	80063b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800746a:	f7ff fa23 	bl	80068b4 <xTaskResumeAll>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007474:	4b09      	ldr	r3, [pc, #36]	; (800749c <prvProcessTimerOrBlockTask+0x98>)
 8007476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	f3bf 8f6f 	isb	sy
}
 8007484:	e001      	b.n	800748a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007486:	f7ff fa15 	bl	80068b4 <xTaskResumeAll>
}
 800748a:	bf00      	nop
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20000cb4 	.word	0x20000cb4
 8007498:	20000cb8 	.word	0x20000cb8
 800749c:	e000ed04 	.word	0xe000ed04

080074a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074a8:	4b0e      	ldr	r3, [pc, #56]	; (80074e4 <prvGetNextExpireTime+0x44>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <prvGetNextExpireTime+0x16>
 80074b2:	2201      	movs	r2, #1
 80074b4:	e000      	b.n	80074b8 <prvGetNextExpireTime+0x18>
 80074b6:	2200      	movs	r2, #0
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d105      	bne.n	80074d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074c4:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <prvGetNextExpireTime+0x44>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	e001      	b.n	80074d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80074d4:	68fb      	ldr	r3, [r7, #12]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	20000cb0 	.word	0x20000cb0

080074e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80074f0:	f7ff fa7e 	bl	80069f0 <xTaskGetTickCount>
 80074f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80074f6:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <prvSampleTimeNow+0x3c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d205      	bcs.n	800750c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007500:	f000 f936 	bl	8007770 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	e002      	b.n	8007512 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007512:	4a04      	ldr	r2, [pc, #16]	; (8007524 <prvSampleTimeNow+0x3c>)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007518:	68fb      	ldr	r3, [r7, #12]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20000cc0 	.word	0x20000cc0

08007528 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
 8007534:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	429a      	cmp	r2, r3
 800754c:	d812      	bhi.n	8007574 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	1ad2      	subs	r2, r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	429a      	cmp	r2, r3
 800755a:	d302      	bcc.n	8007562 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800755c:	2301      	movs	r3, #1
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	e01b      	b.n	800759a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007562:	4b10      	ldr	r3, [pc, #64]	; (80075a4 <prvInsertTimerInActiveList+0x7c>)
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3304      	adds	r3, #4
 800756a:	4619      	mov	r1, r3
 800756c:	4610      	mov	r0, r2
 800756e:	f7fe f9ae 	bl	80058ce <vListInsert>
 8007572:	e012      	b.n	800759a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d206      	bcs.n	800758a <prvInsertTimerInActiveList+0x62>
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	429a      	cmp	r2, r3
 8007582:	d302      	bcc.n	800758a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007584:	2301      	movs	r3, #1
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	e007      	b.n	800759a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800758a:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <prvInsertTimerInActiveList+0x80>)
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3304      	adds	r3, #4
 8007592:	4619      	mov	r1, r3
 8007594:	4610      	mov	r0, r2
 8007596:	f7fe f99a 	bl	80058ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800759a:	697b      	ldr	r3, [r7, #20]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	20000cb4 	.word	0x20000cb4
 80075a8:	20000cb0 	.word	0x20000cb0

080075ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08e      	sub	sp, #56	; 0x38
 80075b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075b2:	e0ca      	b.n	800774a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	da18      	bge.n	80075ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80075ba:	1d3b      	adds	r3, r7, #4
 80075bc:	3304      	adds	r3, #4
 80075be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10a      	bne.n	80075dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	61fb      	str	r3, [r7, #28]
}
 80075d8:	bf00      	nop
 80075da:	e7fe      	b.n	80075da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075e2:	6850      	ldr	r0, [r2, #4]
 80075e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075e6:	6892      	ldr	r2, [r2, #8]
 80075e8:	4611      	mov	r1, r2
 80075ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f2c0 80aa 	blt.w	8007748 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d004      	beq.n	800760a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	3304      	adds	r3, #4
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe f99b 	bl	8005940 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800760a:	463b      	mov	r3, r7
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff ff6b 	bl	80074e8 <prvSampleTimeNow>
 8007612:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b09      	cmp	r3, #9
 8007618:	f200 8097 	bhi.w	800774a <prvProcessReceivedCommands+0x19e>
 800761c:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <prvProcessReceivedCommands+0x78>)
 800761e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007622:	bf00      	nop
 8007624:	0800764d 	.word	0x0800764d
 8007628:	0800764d 	.word	0x0800764d
 800762c:	0800764d 	.word	0x0800764d
 8007630:	080076c1 	.word	0x080076c1
 8007634:	080076d5 	.word	0x080076d5
 8007638:	0800771f 	.word	0x0800771f
 800763c:	0800764d 	.word	0x0800764d
 8007640:	0800764d 	.word	0x0800764d
 8007644:	080076c1 	.word	0x080076c1
 8007648:	080076d5 	.word	0x080076d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007652:	f043 0301 	orr.w	r3, r3, #1
 8007656:	b2da      	uxtb	r2, r3
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	18d1      	adds	r1, r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800766c:	f7ff ff5c 	bl	8007528 <prvInsertTimerInActiveList>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d069      	beq.n	800774a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800767c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	d05e      	beq.n	800774a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	441a      	add	r2, r3
 8007694:	2300      	movs	r3, #0
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	2300      	movs	r3, #0
 800769a:	2100      	movs	r1, #0
 800769c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800769e:	f7ff fe05 	bl	80072ac <xTimerGenericCommand>
 80076a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d14f      	bne.n	800774a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	61bb      	str	r3, [r7, #24]
}
 80076bc:	bf00      	nop
 80076be:	e7fe      	b.n	80076be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076c6:	f023 0301 	bic.w	r3, r3, #1
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80076d2:	e03a      	b.n	800774a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076da:	f043 0301 	orr.w	r3, r3, #1
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	617b      	str	r3, [r7, #20]
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	18d1      	adds	r1, r2, r3
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007718:	f7ff ff06 	bl	8007528 <prvInsertTimerInActiveList>
					break;
 800771c:	e015      	b.n	800774a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d103      	bne.n	8007734 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800772c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800772e:	f000 fbd7 	bl	8007ee0 <vPortFree>
 8007732:	e00a      	b.n	800774a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800773a:	f023 0301 	bic.w	r3, r3, #1
 800773e:	b2da      	uxtb	r2, r3
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007746:	e000      	b.n	800774a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007748:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800774a:	4b08      	ldr	r3, [pc, #32]	; (800776c <prvProcessReceivedCommands+0x1c0>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	1d39      	adds	r1, r7, #4
 8007750:	2200      	movs	r2, #0
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe fbf8 	bl	8005f48 <xQueueReceive>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	f47f af2a 	bne.w	80075b4 <prvProcessReceivedCommands+0x8>
	}
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	3730      	adds	r7, #48	; 0x30
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000cb8 	.word	0x20000cb8

08007770 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007776:	e048      	b.n	800780a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007778:	4b2d      	ldr	r3, [pc, #180]	; (8007830 <prvSwitchTimerLists+0xc0>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007782:	4b2b      	ldr	r3, [pc, #172]	; (8007830 <prvSwitchTimerLists+0xc0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3304      	adds	r3, #4
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe f8d5 	bl	8005940 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d02e      	beq.n	800780a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	4413      	add	r3, r2
 80077b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d90e      	bls.n	80077dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077ca:	4b19      	ldr	r3, [pc, #100]	; (8007830 <prvSwitchTimerLists+0xc0>)
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3304      	adds	r3, #4
 80077d2:	4619      	mov	r1, r3
 80077d4:	4610      	mov	r0, r2
 80077d6:	f7fe f87a 	bl	80058ce <vListInsert>
 80077da:	e016      	b.n	800780a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077dc:	2300      	movs	r3, #0
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	2300      	movs	r3, #0
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	2100      	movs	r1, #0
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7ff fd60 	bl	80072ac <xTimerGenericCommand>
 80077ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10a      	bne.n	800780a <prvSwitchTimerLists+0x9a>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	603b      	str	r3, [r7, #0]
}
 8007806:	bf00      	nop
 8007808:	e7fe      	b.n	8007808 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800780a:	4b09      	ldr	r3, [pc, #36]	; (8007830 <prvSwitchTimerLists+0xc0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1b1      	bne.n	8007778 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007814:	4b06      	ldr	r3, [pc, #24]	; (8007830 <prvSwitchTimerLists+0xc0>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800781a:	4b06      	ldr	r3, [pc, #24]	; (8007834 <prvSwitchTimerLists+0xc4>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a04      	ldr	r2, [pc, #16]	; (8007830 <prvSwitchTimerLists+0xc0>)
 8007820:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007822:	4a04      	ldr	r2, [pc, #16]	; (8007834 <prvSwitchTimerLists+0xc4>)
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	6013      	str	r3, [r2, #0]
}
 8007828:	bf00      	nop
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20000cb0 	.word	0x20000cb0
 8007834:	20000cb4 	.word	0x20000cb4

08007838 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800783e:	f000 f969 	bl	8007b14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007842:	4b15      	ldr	r3, [pc, #84]	; (8007898 <prvCheckForValidListAndQueue+0x60>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d120      	bne.n	800788c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800784a:	4814      	ldr	r0, [pc, #80]	; (800789c <prvCheckForValidListAndQueue+0x64>)
 800784c:	f7fd ffee 	bl	800582c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007850:	4813      	ldr	r0, [pc, #76]	; (80078a0 <prvCheckForValidListAndQueue+0x68>)
 8007852:	f7fd ffeb 	bl	800582c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007856:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <prvCheckForValidListAndQueue+0x6c>)
 8007858:	4a10      	ldr	r2, [pc, #64]	; (800789c <prvCheckForValidListAndQueue+0x64>)
 800785a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800785c:	4b12      	ldr	r3, [pc, #72]	; (80078a8 <prvCheckForValidListAndQueue+0x70>)
 800785e:	4a10      	ldr	r2, [pc, #64]	; (80078a0 <prvCheckForValidListAndQueue+0x68>)
 8007860:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007862:	2300      	movs	r3, #0
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	4b11      	ldr	r3, [pc, #68]	; (80078ac <prvCheckForValidListAndQueue+0x74>)
 8007868:	4a11      	ldr	r2, [pc, #68]	; (80078b0 <prvCheckForValidListAndQueue+0x78>)
 800786a:	2110      	movs	r1, #16
 800786c:	200a      	movs	r0, #10
 800786e:	f7fe f8f9 	bl	8005a64 <xQueueGenericCreateStatic>
 8007872:	4603      	mov	r3, r0
 8007874:	4a08      	ldr	r2, [pc, #32]	; (8007898 <prvCheckForValidListAndQueue+0x60>)
 8007876:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007878:	4b07      	ldr	r3, [pc, #28]	; (8007898 <prvCheckForValidListAndQueue+0x60>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007880:	4b05      	ldr	r3, [pc, #20]	; (8007898 <prvCheckForValidListAndQueue+0x60>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	490b      	ldr	r1, [pc, #44]	; (80078b4 <prvCheckForValidListAndQueue+0x7c>)
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fd6c 	bl	8006364 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800788c:	f000 f972 	bl	8007b74 <vPortExitCritical>
}
 8007890:	bf00      	nop
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20000cb8 	.word	0x20000cb8
 800789c:	20000c88 	.word	0x20000c88
 80078a0:	20000c9c 	.word	0x20000c9c
 80078a4:	20000cb0 	.word	0x20000cb0
 80078a8:	20000cb4 	.word	0x20000cb4
 80078ac:	20000d64 	.word	0x20000d64
 80078b0:	20000cc4 	.word	0x20000cc4
 80078b4:	080082bc 	.word	0x080082bc

080078b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3b04      	subs	r3, #4
 80078c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3b04      	subs	r3, #4
 80078d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f023 0201 	bic.w	r2, r3, #1
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3b04      	subs	r3, #4
 80078e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078e8:	4a0c      	ldr	r2, [pc, #48]	; (800791c <pxPortInitialiseStack+0x64>)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3b14      	subs	r3, #20
 80078f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3b04      	subs	r3, #4
 80078fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f06f 0202 	mvn.w	r2, #2
 8007906:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	3b20      	subs	r3, #32
 800790c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800790e:	68fb      	ldr	r3, [r7, #12]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	08007921 	.word	0x08007921

08007920 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800792a:	4b12      	ldr	r3, [pc, #72]	; (8007974 <prvTaskExitError+0x54>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007932:	d00a      	beq.n	800794a <prvTaskExitError+0x2a>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	60fb      	str	r3, [r7, #12]
}
 8007946:	bf00      	nop
 8007948:	e7fe      	b.n	8007948 <prvTaskExitError+0x28>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	60bb      	str	r3, [r7, #8]
}
 800795c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800795e:	bf00      	nop
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0fc      	beq.n	8007960 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007966:	bf00      	nop
 8007968:	bf00      	nop
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	2000000c 	.word	0x2000000c
	...

08007980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007980:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <pxCurrentTCBConst2>)
 8007982:	6819      	ldr	r1, [r3, #0]
 8007984:	6808      	ldr	r0, [r1, #0]
 8007986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798a:	f380 8809 	msr	PSP, r0
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f04f 0000 	mov.w	r0, #0
 8007996:	f380 8811 	msr	BASEPRI, r0
 800799a:	4770      	bx	lr
 800799c:	f3af 8000 	nop.w

080079a0 <pxCurrentTCBConst2>:
 80079a0:	20000788 	.word	0x20000788
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079a4:	bf00      	nop
 80079a6:	bf00      	nop

080079a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079a8:	4808      	ldr	r0, [pc, #32]	; (80079cc <prvPortStartFirstTask+0x24>)
 80079aa:	6800      	ldr	r0, [r0, #0]
 80079ac:	6800      	ldr	r0, [r0, #0]
 80079ae:	f380 8808 	msr	MSP, r0
 80079b2:	f04f 0000 	mov.w	r0, #0
 80079b6:	f380 8814 	msr	CONTROL, r0
 80079ba:	b662      	cpsie	i
 80079bc:	b661      	cpsie	f
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	df00      	svc	0
 80079c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079ca:	bf00      	nop
 80079cc:	e000ed08 	.word	0xe000ed08

080079d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079d6:	4b46      	ldr	r3, [pc, #280]	; (8007af0 <xPortStartScheduler+0x120>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a46      	ldr	r2, [pc, #280]	; (8007af4 <xPortStartScheduler+0x124>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d10a      	bne.n	80079f6 <xPortStartScheduler+0x26>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	613b      	str	r3, [r7, #16]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079f6:	4b3e      	ldr	r3, [pc, #248]	; (8007af0 <xPortStartScheduler+0x120>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a3f      	ldr	r2, [pc, #252]	; (8007af8 <xPortStartScheduler+0x128>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10a      	bne.n	8007a16 <xPortStartScheduler+0x46>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	60fb      	str	r3, [r7, #12]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a16:	4b39      	ldr	r3, [pc, #228]	; (8007afc <xPortStartScheduler+0x12c>)
 8007a18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	22ff      	movs	r2, #255	; 0xff
 8007a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a30:	78fb      	ldrb	r3, [r7, #3]
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	4b31      	ldr	r3, [pc, #196]	; (8007b00 <xPortStartScheduler+0x130>)
 8007a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a3e:	4b31      	ldr	r3, [pc, #196]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a40:	2207      	movs	r2, #7
 8007a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a44:	e009      	b.n	8007a5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a46:	4b2f      	ldr	r3, [pc, #188]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	4a2d      	ldr	r2, [pc, #180]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a50:	78fb      	ldrb	r3, [r7, #3]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a5a:	78fb      	ldrb	r3, [r7, #3]
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a62:	2b80      	cmp	r3, #128	; 0x80
 8007a64:	d0ef      	beq.n	8007a46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a66:	4b27      	ldr	r3, [pc, #156]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f1c3 0307 	rsb	r3, r3, #7
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d00a      	beq.n	8007a88 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	60bb      	str	r3, [r7, #8]
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a88:	4b1e      	ldr	r3, [pc, #120]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	4a1d      	ldr	r2, [pc, #116]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a92:	4b1c      	ldr	r3, [pc, #112]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a9a:	4a1a      	ldr	r2, [pc, #104]	; (8007b04 <xPortStartScheduler+0x134>)
 8007a9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007aa6:	4b18      	ldr	r3, [pc, #96]	; (8007b08 <xPortStartScheduler+0x138>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a17      	ldr	r2, [pc, #92]	; (8007b08 <xPortStartScheduler+0x138>)
 8007aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ab2:	4b15      	ldr	r3, [pc, #84]	; (8007b08 <xPortStartScheduler+0x138>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a14      	ldr	r2, [pc, #80]	; (8007b08 <xPortStartScheduler+0x138>)
 8007ab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007abc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007abe:	f000 f8dd 	bl	8007c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ac2:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <xPortStartScheduler+0x13c>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ac8:	f000 f8fc 	bl	8007cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007acc:	4b10      	ldr	r3, [pc, #64]	; (8007b10 <xPortStartScheduler+0x140>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a0f      	ldr	r2, [pc, #60]	; (8007b10 <xPortStartScheduler+0x140>)
 8007ad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ad8:	f7ff ff66 	bl	80079a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007adc:	f7ff f852 	bl	8006b84 <vTaskSwitchContext>
	prvTaskExitError();
 8007ae0:	f7ff ff1e 	bl	8007920 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	e000ed00 	.word	0xe000ed00
 8007af4:	410fc271 	.word	0x410fc271
 8007af8:	410fc270 	.word	0x410fc270
 8007afc:	e000e400 	.word	0xe000e400
 8007b00:	20000db4 	.word	0x20000db4
 8007b04:	20000db8 	.word	0x20000db8
 8007b08:	e000ed20 	.word	0xe000ed20
 8007b0c:	2000000c 	.word	0x2000000c
 8007b10:	e000ef34 	.word	0xe000ef34

08007b14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	607b      	str	r3, [r7, #4]
}
 8007b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b2e:	4b0f      	ldr	r3, [pc, #60]	; (8007b6c <vPortEnterCritical+0x58>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3301      	adds	r3, #1
 8007b34:	4a0d      	ldr	r2, [pc, #52]	; (8007b6c <vPortEnterCritical+0x58>)
 8007b36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b38:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <vPortEnterCritical+0x58>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d10f      	bne.n	8007b60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b40:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <vPortEnterCritical+0x5c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00a      	beq.n	8007b60 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	603b      	str	r3, [r7, #0]
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <vPortEnterCritical+0x4a>
	}
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	2000000c 	.word	0x2000000c
 8007b70:	e000ed04 	.word	0xe000ed04

08007b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b7a:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <vPortExitCritical+0x50>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10a      	bne.n	8007b98 <vPortExitCritical+0x24>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	607b      	str	r3, [r7, #4]
}
 8007b94:	bf00      	nop
 8007b96:	e7fe      	b.n	8007b96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b98:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <vPortExitCritical+0x50>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	4a09      	ldr	r2, [pc, #36]	; (8007bc4 <vPortExitCritical+0x50>)
 8007ba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ba2:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <vPortExitCritical+0x50>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d105      	bne.n	8007bb6 <vPortExitCritical+0x42>
 8007baa:	2300      	movs	r3, #0
 8007bac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	f383 8811 	msr	BASEPRI, r3
}
 8007bb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	2000000c 	.word	0x2000000c
	...

08007bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bd0:	f3ef 8009 	mrs	r0, PSP
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	4b15      	ldr	r3, [pc, #84]	; (8007c30 <pxCurrentTCBConst>)
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	f01e 0f10 	tst.w	lr, #16
 8007be0:	bf08      	it	eq
 8007be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bea:	6010      	str	r0, [r2, #0]
 8007bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007bf4:	f380 8811 	msr	BASEPRI, r0
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f7fe ffc0 	bl	8006b84 <vTaskSwitchContext>
 8007c04:	f04f 0000 	mov.w	r0, #0
 8007c08:	f380 8811 	msr	BASEPRI, r0
 8007c0c:	bc09      	pop	{r0, r3}
 8007c0e:	6819      	ldr	r1, [r3, #0]
 8007c10:	6808      	ldr	r0, [r1, #0]
 8007c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c16:	f01e 0f10 	tst.w	lr, #16
 8007c1a:	bf08      	it	eq
 8007c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c20:	f380 8809 	msr	PSP, r0
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	f3af 8000 	nop.w

08007c30 <pxCurrentTCBConst>:
 8007c30:	20000788 	.word	0x20000788
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c34:	bf00      	nop
 8007c36:	bf00      	nop

08007c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	607b      	str	r3, [r7, #4]
}
 8007c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c52:	f7fe fedd 	bl	8006a10 <xTaskIncrementTick>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c5c:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <SysTick_Handler+0x40>)
 8007c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	2300      	movs	r3, #0
 8007c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f383 8811 	msr	BASEPRI, r3
}
 8007c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	e000ed04 	.word	0xe000ed04

08007c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c80:	4b0b      	ldr	r3, [pc, #44]	; (8007cb0 <vPortSetupTimerInterrupt+0x34>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c86:	4b0b      	ldr	r3, [pc, #44]	; (8007cb4 <vPortSetupTimerInterrupt+0x38>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c8c:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <vPortSetupTimerInterrupt+0x3c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a0a      	ldr	r2, [pc, #40]	; (8007cbc <vPortSetupTimerInterrupt+0x40>)
 8007c92:	fba2 2303 	umull	r2, r3, r2, r3
 8007c96:	099b      	lsrs	r3, r3, #6
 8007c98:	4a09      	ldr	r2, [pc, #36]	; (8007cc0 <vPortSetupTimerInterrupt+0x44>)
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c9e:	4b04      	ldr	r3, [pc, #16]	; (8007cb0 <vPortSetupTimerInterrupt+0x34>)
 8007ca0:	2207      	movs	r2, #7
 8007ca2:	601a      	str	r2, [r3, #0]
}
 8007ca4:	bf00      	nop
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	e000e010 	.word	0xe000e010
 8007cb4:	e000e018 	.word	0xe000e018
 8007cb8:	20000000 	.word	0x20000000
 8007cbc:	10624dd3 	.word	0x10624dd3
 8007cc0:	e000e014 	.word	0xe000e014

08007cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cd4 <vPortEnableVFP+0x10>
 8007cc8:	6801      	ldr	r1, [r0, #0]
 8007cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cce:	6001      	str	r1, [r0, #0]
 8007cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cd2:	bf00      	nop
 8007cd4:	e000ed88 	.word	0xe000ed88

08007cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cde:	f3ef 8305 	mrs	r3, IPSR
 8007ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b0f      	cmp	r3, #15
 8007ce8:	d914      	bls.n	8007d14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cea:	4a17      	ldr	r2, [pc, #92]	; (8007d48 <vPortValidateInterruptPriority+0x70>)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cf4:	4b15      	ldr	r3, [pc, #84]	; (8007d4c <vPortValidateInterruptPriority+0x74>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	7afa      	ldrb	r2, [r7, #11]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d20a      	bcs.n	8007d14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	607b      	str	r3, [r7, #4]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d14:	4b0e      	ldr	r3, [pc, #56]	; (8007d50 <vPortValidateInterruptPriority+0x78>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d1c:	4b0d      	ldr	r3, [pc, #52]	; (8007d54 <vPortValidateInterruptPriority+0x7c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d90a      	bls.n	8007d3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	603b      	str	r3, [r7, #0]
}
 8007d36:	bf00      	nop
 8007d38:	e7fe      	b.n	8007d38 <vPortValidateInterruptPriority+0x60>
	}
 8007d3a:	bf00      	nop
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	e000e3f0 	.word	0xe000e3f0
 8007d4c:	20000db4 	.word	0x20000db4
 8007d50:	e000ed0c 	.word	0xe000ed0c
 8007d54:	20000db8 	.word	0x20000db8

08007d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	; 0x28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d64:	f7fe fd98 	bl	8006898 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d68:	4b58      	ldr	r3, [pc, #352]	; (8007ecc <pvPortMalloc+0x174>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d70:	f000 f910 	bl	8007f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d74:	4b56      	ldr	r3, [pc, #344]	; (8007ed0 <pvPortMalloc+0x178>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f040 808e 	bne.w	8007e9e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01d      	beq.n	8007dc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d88:	2208      	movs	r2, #8
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d014      	beq.n	8007dc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f023 0307 	bic.w	r3, r3, #7
 8007da0:	3308      	adds	r3, #8
 8007da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <pvPortMalloc+0x6c>
	__asm volatile
 8007dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db2:	f383 8811 	msr	BASEPRI, r3
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	f3bf 8f4f 	dsb	sy
 8007dbe:	617b      	str	r3, [r7, #20]
}
 8007dc0:	bf00      	nop
 8007dc2:	e7fe      	b.n	8007dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d069      	beq.n	8007e9e <pvPortMalloc+0x146>
 8007dca:	4b42      	ldr	r3, [pc, #264]	; (8007ed4 <pvPortMalloc+0x17c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d864      	bhi.n	8007e9e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007dd4:	4b40      	ldr	r3, [pc, #256]	; (8007ed8 <pvPortMalloc+0x180>)
 8007dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007dd8:	4b3f      	ldr	r3, [pc, #252]	; (8007ed8 <pvPortMalloc+0x180>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dde:	e004      	b.n	8007dea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d903      	bls.n	8007dfc <pvPortMalloc+0xa4>
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1f1      	bne.n	8007de0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007dfc:	4b33      	ldr	r3, [pc, #204]	; (8007ecc <pvPortMalloc+0x174>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d04b      	beq.n	8007e9e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2208      	movs	r2, #8
 8007e0c:	4413      	add	r3, r2
 8007e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	1ad2      	subs	r2, r2, r3
 8007e20:	2308      	movs	r3, #8
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d91f      	bls.n	8007e68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <pvPortMalloc+0xf8>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	613b      	str	r3, [r7, #16]
}
 8007e4c:	bf00      	nop
 8007e4e:	e7fe      	b.n	8007e4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	1ad2      	subs	r2, r2, r3
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e62:	69b8      	ldr	r0, [r7, #24]
 8007e64:	f000 f8f8 	bl	8008058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e68:	4b1a      	ldr	r3, [pc, #104]	; (8007ed4 <pvPortMalloc+0x17c>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	4a18      	ldr	r2, [pc, #96]	; (8007ed4 <pvPortMalloc+0x17c>)
 8007e74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e76:	4b17      	ldr	r3, [pc, #92]	; (8007ed4 <pvPortMalloc+0x17c>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	4b18      	ldr	r3, [pc, #96]	; (8007edc <pvPortMalloc+0x184>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d203      	bcs.n	8007e8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e82:	4b14      	ldr	r3, [pc, #80]	; (8007ed4 <pvPortMalloc+0x17c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a15      	ldr	r2, [pc, #84]	; (8007edc <pvPortMalloc+0x184>)
 8007e88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <pvPortMalloc+0x178>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	431a      	orrs	r2, r3
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e9e:	f7fe fd09 	bl	80068b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00a      	beq.n	8007ec2 <pvPortMalloc+0x16a>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	60fb      	str	r3, [r7, #12]
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <pvPortMalloc+0x168>
	return pvReturn;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3728      	adds	r7, #40	; 0x28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	2000197c 	.word	0x2000197c
 8007ed0:	20001988 	.word	0x20001988
 8007ed4:	20001980 	.word	0x20001980
 8007ed8:	20001974 	.word	0x20001974
 8007edc:	20001984 	.word	0x20001984

08007ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d048      	beq.n	8007f84 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ef2:	2308      	movs	r3, #8
 8007ef4:	425b      	negs	r3, r3
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	4413      	add	r3, r2
 8007efa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	4b21      	ldr	r3, [pc, #132]	; (8007f8c <vPortFree+0xac>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <vPortFree+0x44>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	60fb      	str	r3, [r7, #12]
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <vPortFree+0x62>
	__asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	60bb      	str	r3, [r7, #8]
}
 8007f3e:	bf00      	nop
 8007f40:	e7fe      	b.n	8007f40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	4b11      	ldr	r3, [pc, #68]	; (8007f8c <vPortFree+0xac>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d019      	beq.n	8007f84 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d115      	bne.n	8007f84 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	4b0b      	ldr	r3, [pc, #44]	; (8007f8c <vPortFree+0xac>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	43db      	mvns	r3, r3
 8007f62:	401a      	ands	r2, r3
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f68:	f7fe fc96 	bl	8006898 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	4b07      	ldr	r3, [pc, #28]	; (8007f90 <vPortFree+0xb0>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4413      	add	r3, r2
 8007f76:	4a06      	ldr	r2, [pc, #24]	; (8007f90 <vPortFree+0xb0>)
 8007f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f7a:	6938      	ldr	r0, [r7, #16]
 8007f7c:	f000 f86c 	bl	8008058 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f80:	f7fe fc98 	bl	80068b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f84:	bf00      	nop
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20001988 	.word	0x20001988
 8007f90:	20001980 	.word	0x20001980

08007f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fa0:	4b27      	ldr	r3, [pc, #156]	; (8008040 <prvHeapInit+0xac>)
 8007fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f003 0307 	and.w	r3, r3, #7
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00c      	beq.n	8007fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3307      	adds	r3, #7
 8007fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0307 	bic.w	r3, r3, #7
 8007fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	4a1f      	ldr	r2, [pc, #124]	; (8008040 <prvHeapInit+0xac>)
 8007fc4:	4413      	add	r3, r2
 8007fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fcc:	4a1d      	ldr	r2, [pc, #116]	; (8008044 <prvHeapInit+0xb0>)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fd2:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <prvHeapInit+0xb0>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	4413      	add	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fe0:	2208      	movs	r2, #8
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	1a9b      	subs	r3, r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 0307 	bic.w	r3, r3, #7
 8007fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4a15      	ldr	r2, [pc, #84]	; (8008048 <prvHeapInit+0xb4>)
 8007ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ff6:	4b14      	ldr	r3, [pc, #80]	; (8008048 <prvHeapInit+0xb4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ffe:	4b12      	ldr	r3, [pc, #72]	; (8008048 <prvHeapInit+0xb4>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	1ad2      	subs	r2, r2, r3
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008014:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <prvHeapInit+0xb4>)
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	4a0a      	ldr	r2, [pc, #40]	; (800804c <prvHeapInit+0xb8>)
 8008022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	4a09      	ldr	r2, [pc, #36]	; (8008050 <prvHeapInit+0xbc>)
 800802a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800802c:	4b09      	ldr	r3, [pc, #36]	; (8008054 <prvHeapInit+0xc0>)
 800802e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008032:	601a      	str	r2, [r3, #0]
}
 8008034:	bf00      	nop
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	20000dbc 	.word	0x20000dbc
 8008044:	20001974 	.word	0x20001974
 8008048:	2000197c 	.word	0x2000197c
 800804c:	20001984 	.word	0x20001984
 8008050:	20001980 	.word	0x20001980
 8008054:	20001988 	.word	0x20001988

08008058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008060:	4b28      	ldr	r3, [pc, #160]	; (8008104 <prvInsertBlockIntoFreeList+0xac>)
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	e002      	b.n	800806c <prvInsertBlockIntoFreeList+0x14>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	429a      	cmp	r2, r3
 8008074:	d8f7      	bhi.n	8008066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	4413      	add	r3, r2
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	429a      	cmp	r2, r3
 8008086:	d108      	bne.n	800809a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	441a      	add	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	441a      	add	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d118      	bne.n	80080e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	4b15      	ldr	r3, [pc, #84]	; (8008108 <prvInsertBlockIntoFreeList+0xb0>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d00d      	beq.n	80080d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	441a      	add	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	e008      	b.n	80080e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080d6:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <prvInsertBlockIntoFreeList+0xb0>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	e003      	b.n	80080e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d002      	beq.n	80080f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080f6:	bf00      	nop
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	20001974 	.word	0x20001974
 8008108:	2000197c 	.word	0x2000197c

0800810c <__libc_init_array>:
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	4d0d      	ldr	r5, [pc, #52]	; (8008144 <__libc_init_array+0x38>)
 8008110:	4c0d      	ldr	r4, [pc, #52]	; (8008148 <__libc_init_array+0x3c>)
 8008112:	1b64      	subs	r4, r4, r5
 8008114:	10a4      	asrs	r4, r4, #2
 8008116:	2600      	movs	r6, #0
 8008118:	42a6      	cmp	r6, r4
 800811a:	d109      	bne.n	8008130 <__libc_init_array+0x24>
 800811c:	4d0b      	ldr	r5, [pc, #44]	; (800814c <__libc_init_array+0x40>)
 800811e:	4c0c      	ldr	r4, [pc, #48]	; (8008150 <__libc_init_array+0x44>)
 8008120:	f000 f82e 	bl	8008180 <_init>
 8008124:	1b64      	subs	r4, r4, r5
 8008126:	10a4      	asrs	r4, r4, #2
 8008128:	2600      	movs	r6, #0
 800812a:	42a6      	cmp	r6, r4
 800812c:	d105      	bne.n	800813a <__libc_init_array+0x2e>
 800812e:	bd70      	pop	{r4, r5, r6, pc}
 8008130:	f855 3b04 	ldr.w	r3, [r5], #4
 8008134:	4798      	blx	r3
 8008136:	3601      	adds	r6, #1
 8008138:	e7ee      	b.n	8008118 <__libc_init_array+0xc>
 800813a:	f855 3b04 	ldr.w	r3, [r5], #4
 800813e:	4798      	blx	r3
 8008140:	3601      	adds	r6, #1
 8008142:	e7f2      	b.n	800812a <__libc_init_array+0x1e>
 8008144:	08008334 	.word	0x08008334
 8008148:	08008334 	.word	0x08008334
 800814c:	08008334 	.word	0x08008334
 8008150:	08008338 	.word	0x08008338

08008154 <memcpy>:
 8008154:	440a      	add	r2, r1
 8008156:	4291      	cmp	r1, r2
 8008158:	f100 33ff 	add.w	r3, r0, #4294967295
 800815c:	d100      	bne.n	8008160 <memcpy+0xc>
 800815e:	4770      	bx	lr
 8008160:	b510      	push	{r4, lr}
 8008162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800816a:	4291      	cmp	r1, r2
 800816c:	d1f9      	bne.n	8008162 <memcpy+0xe>
 800816e:	bd10      	pop	{r4, pc}

08008170 <memset>:
 8008170:	4402      	add	r2, r0
 8008172:	4603      	mov	r3, r0
 8008174:	4293      	cmp	r3, r2
 8008176:	d100      	bne.n	800817a <memset+0xa>
 8008178:	4770      	bx	lr
 800817a:	f803 1b01 	strb.w	r1, [r3], #1
 800817e:	e7f9      	b.n	8008174 <memset+0x4>

08008180 <_init>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr

0800818c <_fini>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	bf00      	nop
 8008190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008192:	bc08      	pop	{r3}
 8008194:	469e      	mov	lr, r3
 8008196:	4770      	bx	lr
