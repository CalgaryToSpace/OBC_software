
CTS-1_STM_OS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008038  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080081f8  080081f8  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800838c  0800838c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800838c  0800838c  0001838c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008394  08008394  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008394  08008394  00018394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008398  08008398  00018398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800839c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff0  20000010  080083ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002000  080083ac  00022000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000219e9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046d4  00000000  00000000  00041a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  00046100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b00  00000000  00000000  00047df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000052b3  00000000  00000000  000498f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000216b4  00000000  00000000  0004ebab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117ca4  00000000  00000000  0007025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00187f03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a64  00000000  00000000  00187f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080081e0 	.word	0x080081e0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	080081e0 	.word	0x080081e0

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b0a7      	sub	sp, #156	; 0x9c
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fefc 	bl	8001306 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 fc3d 	bl	8000d8c <SystemClock_Config>
  startUart();
 8000512:	f000 fc21 	bl	8000d58 <startUart>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000516:	f005 f879 	bl	800560c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  QueueHandle_t xQueue = xQueueCreate(5, sizeof(Data_t));
 800051a:	2200      	movs	r2, #0
 800051c:	2102      	movs	r1, #2
 800051e:	2005      	movs	r0, #5
 8000520:	f005 fb4c 	bl	8005bbc <xQueueGenericCreate>
 8000524:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

  /* USER CODE BEGIN RTOS_THREADS */

  //QueueHandle_t xQueue = xQueueCreate(5, sizeof(Data_t));

  DataSend_t mpiData = {xQueue, (xStructsToSend[0])};
 8000528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800052c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000530:	4b47      	ldr	r3, [pc, #284]	; (8000650 <main+0x14c>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
  DataSend_t cameraData = {xQueue, (xStructsToSend[1])};
 8000538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800053c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800053e:	4b44      	ldr	r3, [pc, #272]	; (8000650 <main+0x14c>)
 8000540:	885b      	ldrh	r3, [r3, #2]
 8000542:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
  DataSend_t gpsData = {xQueue, (xStructsToSend[2])};
 8000546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800054a:	677b      	str	r3, [r7, #116]	; 0x74
 800054c:	4b40      	ldr	r3, [pc, #256]	; (8000650 <main+0x14c>)
 800054e:	889b      	ldrh	r3, [r3, #4]
 8000550:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

  struct threadInfo running[6];
  running[0] = startThread(StartTest1, osPriorityLow, "ThreadOne", NULL, 8*128);
 8000554:	4638      	mov	r0, r7
 8000556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	2300      	movs	r3, #0
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	4b3c      	ldr	r3, [pc, #240]	; (8000654 <main+0x150>)
 8000562:	2208      	movs	r2, #8
 8000564:	493c      	ldr	r1, [pc, #240]	; (8000658 <main+0x154>)
 8000566:	f000 fb7f 	bl	8000c68 <startThread>
 800056a:	f107 0414 	add.w	r4, r7, #20
 800056e:	463b      	mov	r3, r7
 8000570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  running[1] = startThread(StartTest2, osPriorityHigh, "ThreadTwo", NULL, 8*128);
 8000576:	4638      	mov	r0, r7
 8000578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2300      	movs	r3, #0
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	4b36      	ldr	r3, [pc, #216]	; (800065c <main+0x158>)
 8000584:	2228      	movs	r2, #40	; 0x28
 8000586:	4936      	ldr	r1, [pc, #216]	; (8000660 <main+0x15c>)
 8000588:	f000 fb6e 	bl	8000c68 <startThread>
 800058c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000590:	463b      	mov	r3, r7
 8000592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if(xQueue != NULL) {
 8000598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800059c:	2b00      	cmp	r3, #0
 800059e:	d048      	beq.n	8000632 <main+0x12e>

  		running[2] = startThread(vSenderTask, osPriorityLow, "MPI",  &mpiData, 8*128); //changed startThread() in threadManagement.c to add another parameter
 80005a0:	4638      	mov	r0, r7
 80005a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <main+0x160>)
 80005b0:	2208      	movs	r2, #8
 80005b2:	492d      	ldr	r1, [pc, #180]	; (8000668 <main+0x164>)
 80005b4:	f000 fb58 	bl	8000c68 <startThread>
 80005b8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80005bc:	463b      	mov	r3, r7
 80005be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  		running[3] = startThread(vSenderTask, osPriorityLow, "Camera", &cameraData, 8*128);
 80005c4:	4638      	mov	r0, r7
 80005c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	4b26      	ldr	r3, [pc, #152]	; (800066c <main+0x168>)
 80005d4:	2208      	movs	r2, #8
 80005d6:	4924      	ldr	r1, [pc, #144]	; (8000668 <main+0x164>)
 80005d8:	f000 fb46 	bl	8000c68 <startThread>
 80005dc:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005e0:	463b      	mov	r3, r7
 80005e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  		running[4] = startThread(vSenderTask, osPriorityLow, "GPS", &gpsData, 8*128);
 80005e8:	4638      	mov	r0, r7
 80005ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <main+0x16c>)
 80005f8:	2208      	movs	r2, #8
 80005fa:	491b      	ldr	r1, [pc, #108]	; (8000668 <main+0x164>)
 80005fc:	f000 fb34 	bl	8000c68 <startThread>
 8000600:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000604:	463b      	mov	r3, r7
 8000606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  		//Sender tasks have lower priority than receiving task
  		running[5] = startThread(vReceiverTask, osPriorityHigh, "Receiver", (void*)xQueue , 8*128);
 800060c:	4638      	mov	r0, r7
 800060e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <main+0x170>)
 800061c:	2228      	movs	r2, #40	; 0x28
 800061e:	4916      	ldr	r1, [pc, #88]	; (8000678 <main+0x174>)
 8000620:	f000 fb22 	bl	8000c68 <startThread>
 8000624:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000628:	463b      	mov	r3, r7
 800062a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800062c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000630:	e00b      	b.n	800064a <main+0x146>

  	} else {

  		sendUartMessage("Queue could not be created.", 27);
 8000632:	211b      	movs	r1, #27
 8000634:	4811      	ldr	r0, [pc, #68]	; (800067c <main+0x178>)
 8000636:	f000 fe29 	bl	800128c <sendUartMessage>
  		sendUartMessage("\n", 1);
 800063a:	2101      	movs	r1, #1
 800063c:	4810      	ldr	r0, [pc, #64]	; (8000680 <main+0x17c>)
 800063e:	f000 fe25 	bl	800128c <sendUartMessage>
  		sendUartMessage("\r", 1);
 8000642:	2101      	movs	r1, #1
 8000644:	480f      	ldr	r0, [pc, #60]	; (8000684 <main+0x180>)
 8000646:	f000 fe21 	bl	800128c <sendUartMessage>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
   osKernelStart();
 800064a:	f005 f813 	bl	8005674 <osKernelStart>
  //char* taskName = "Test 1";
  //startTask(functionName, 10, taskName, 4*128);
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064e:	e7fe      	b.n	800064e <main+0x14a>
 8000650:	08008324 	.word	0x08008324
 8000654:	080081f8 	.word	0x080081f8
 8000658:	08000cc9 	.word	0x08000cc9
 800065c:	08008204 	.word	0x08008204
 8000660:	08000d11 	.word	0x08000d11
 8000664:	08008210 	.word	0x08008210
 8000668:	08000695 	.word	0x08000695
 800066c:	08008214 	.word	0x08008214
 8000670:	0800821c 	.word	0x0800821c
 8000674:	08008220 	.word	0x08008220
 8000678:	080006e9 	.word	0x080006e9
 800067c:	0800822c 	.word	0x0800822c
 8000680:	08008248 	.word	0x08008248
 8000684:	0800824c 	.word	0x0800824c

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	e7fe      	b.n	8000690 <Error_Handler+0x8>
	...

08000694 <vSenderTask>:
#include "queueManagement.h"
#include "uart.h"

extern UART_HandleTypeDef hlpuart1;

void vSenderTask(void *arg) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

	DataSend_t *arg_struc = (DataSend_t *) arg;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	617b      	str	r3, [r7, #20]
	QueueHandle_t qHandle = arg_struc->queueHandle;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	613b      	str	r3, [r7, #16]
	Data_t dataToSend = arg_struc->dataToSendPtr;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	889b      	ldrh	r3, [r3, #4]
 80006aa:	813b      	strh	r3, [r7, #8]
	BaseType_t sendStatus;


	for(;;) {

		sendStatus = xQueueSendToBack(qHandle, &dataToSend, 0);
 80006ac:	f107 0108 	add.w	r1, r7, #8
 80006b0:	2300      	movs	r3, #0
 80006b2:	2200      	movs	r2, #0
 80006b4:	6938      	ldr	r0, [r7, #16]
 80006b6:	f005 fae5 	bl	8005c84 <xQueueGenericSend>
 80006ba:	60f8      	str	r0, [r7, #12]

		if(sendStatus != pdPASS) {
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d0f4      	beq.n	80006ac <vSenderTask+0x18>
			sendUartMessage("Could not send to the queue.", 28);
 80006c2:	211c      	movs	r1, #28
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <vSenderTask+0x48>)
 80006c6:	f000 fde1 	bl	800128c <sendUartMessage>
			sendUartMessage("\n", 1);
 80006ca:	2101      	movs	r1, #1
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <vSenderTask+0x4c>)
 80006ce:	f000 fddd 	bl	800128c <sendUartMessage>
			sendUartMessage("\r", 1);
 80006d2:	2101      	movs	r1, #1
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <vSenderTask+0x50>)
 80006d6:	f000 fdd9 	bl	800128c <sendUartMessage>
		sendStatus = xQueueSendToBack(qHandle, &dataToSend, 0);
 80006da:	e7e7      	b.n	80006ac <vSenderTask+0x18>
 80006dc:	08008250 	.word	0x08008250
 80006e0:	08008270 	.word	0x08008270
 80006e4:	08008274 	.word	0x08008274

080006e8 <vReceiverTask>:
		}
	}

}

void vReceiverTask(void *arg) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

	QueueHandle_t qHandle = arg;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	617b      	str	r3, [r7, #20]
	Data_t xReceivedStructure;
	BaseType_t readStatus;
	const TickType_t xTicksToWait = pdMS_TO_TICKS(100);
 80006f4:	2364      	movs	r3, #100	; 0x64
 80006f6:	613b      	str	r3, [r7, #16]

	for(;;) {

		if(uxQueueMessagesWaiting(qHandle) != 0) {
 80006f8:	6978      	ldr	r0, [r7, #20]
 80006fa:	f005 fd39 	bl	8006170 <uxQueueMessagesWaiting>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d00b      	beq.n	800071c <vReceiverTask+0x34>
			sendUartMessage("Queue should have been empty.", 29);
 8000704:	211d      	movs	r1, #29
 8000706:	4836      	ldr	r0, [pc, #216]	; (80007e0 <vReceiverTask+0xf8>)
 8000708:	f000 fdc0 	bl	800128c <sendUartMessage>
			sendUartMessage("\n", 1);
 800070c:	2101      	movs	r1, #1
 800070e:	4835      	ldr	r0, [pc, #212]	; (80007e4 <vReceiverTask+0xfc>)
 8000710:	f000 fdbc 	bl	800128c <sendUartMessage>
			sendUartMessage("\r", 1);
 8000714:	2101      	movs	r1, #1
 8000716:	4834      	ldr	r0, [pc, #208]	; (80007e8 <vReceiverTask+0x100>)
 8000718:	f000 fdb8 	bl	800128c <sendUartMessage>
		}

		readStatus = xQueueReceive(qHandle, &xReceivedStructure, xTicksToWait);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	693a      	ldr	r2, [r7, #16]
 8000722:	4619      	mov	r1, r3
 8000724:	6978      	ldr	r0, [r7, #20]
 8000726:	f005 fc43 	bl	8005fb0 <xQueueReceive>
 800072a:	60f8      	str	r0, [r7, #12]

		if(readStatus == pdPASS) {
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d148      	bne.n	80007c4 <vReceiverTask+0xdc>
			switch(xReceivedStructure.eDataSource) {
 8000732:	7a7b      	ldrb	r3, [r7, #9]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d030      	beq.n	800079a <vReceiverTask+0xb2>
 8000738:	2b02      	cmp	r3, #2
 800073a:	dcdd      	bgt.n	80006f8 <vReceiverTask+0x10>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d002      	beq.n	8000746 <vReceiverTask+0x5e>
 8000740:	2b01      	cmp	r3, #1
 8000742:	d015      	beq.n	8000770 <vReceiverTask+0x88>
 8000744:	e04a      	b.n	80007dc <vReceiverTask+0xf4>

				case MPI :
					sendUartMessage("From MPI = ", 11);
 8000746:	210b      	movs	r1, #11
 8000748:	4828      	ldr	r0, [pc, #160]	; (80007ec <vReceiverTask+0x104>)
 800074a:	f000 fd9f 	bl	800128c <sendUartMessage>
					HAL_UART_Transmit(&hlpuart1, (uint8_t*)&xReceivedStructure.ucValue, 1, HAL_MAX_DELAY);
 800074e:	f107 0108 	add.w	r1, r7, #8
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	2201      	movs	r2, #1
 8000758:	4825      	ldr	r0, [pc, #148]	; (80007f0 <vReceiverTask+0x108>)
 800075a:	f003 fd41 	bl	80041e0 <HAL_UART_Transmit>
					sendUartMessage("\n", 1);
 800075e:	2101      	movs	r1, #1
 8000760:	4820      	ldr	r0, [pc, #128]	; (80007e4 <vReceiverTask+0xfc>)
 8000762:	f000 fd93 	bl	800128c <sendUartMessage>
					sendUartMessage("\r", 1);
 8000766:	2101      	movs	r1, #1
 8000768:	481f      	ldr	r0, [pc, #124]	; (80007e8 <vReceiverTask+0x100>)
 800076a:	f000 fd8f 	bl	800128c <sendUartMessage>
					break;
 800076e:	e035      	b.n	80007dc <vReceiverTask+0xf4>

				case Camera :
					sendUartMessage("From Camera = ", 14);
 8000770:	210e      	movs	r1, #14
 8000772:	4820      	ldr	r0, [pc, #128]	; (80007f4 <vReceiverTask+0x10c>)
 8000774:	f000 fd8a 	bl	800128c <sendUartMessage>
					HAL_UART_Transmit(&hlpuart1, (uint8_t*)&xReceivedStructure.ucValue, 1, HAL_MAX_DELAY);
 8000778:	f107 0108 	add.w	r1, r7, #8
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
 8000780:	2201      	movs	r2, #1
 8000782:	481b      	ldr	r0, [pc, #108]	; (80007f0 <vReceiverTask+0x108>)
 8000784:	f003 fd2c 	bl	80041e0 <HAL_UART_Transmit>
					sendUartMessage("\n", 1);
 8000788:	2101      	movs	r1, #1
 800078a:	4816      	ldr	r0, [pc, #88]	; (80007e4 <vReceiverTask+0xfc>)
 800078c:	f000 fd7e 	bl	800128c <sendUartMessage>
					sendUartMessage("\r", 1);
 8000790:	2101      	movs	r1, #1
 8000792:	4815      	ldr	r0, [pc, #84]	; (80007e8 <vReceiverTask+0x100>)
 8000794:	f000 fd7a 	bl	800128c <sendUartMessage>
					break;
 8000798:	e020      	b.n	80007dc <vReceiverTask+0xf4>

				case GPS :
					sendUartMessage("From GPS = ", 11);
 800079a:	210b      	movs	r1, #11
 800079c:	4816      	ldr	r0, [pc, #88]	; (80007f8 <vReceiverTask+0x110>)
 800079e:	f000 fd75 	bl	800128c <sendUartMessage>
					HAL_UART_Transmit(&hlpuart1, (uint8_t*)&xReceivedStructure.ucValue, 1, HAL_MAX_DELAY);
 80007a2:	f107 0108 	add.w	r1, r7, #8
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	2201      	movs	r2, #1
 80007ac:	4810      	ldr	r0, [pc, #64]	; (80007f0 <vReceiverTask+0x108>)
 80007ae:	f003 fd17 	bl	80041e0 <HAL_UART_Transmit>
					sendUartMessage("\n", 1);
 80007b2:	2101      	movs	r1, #1
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <vReceiverTask+0xfc>)
 80007b6:	f000 fd69 	bl	800128c <sendUartMessage>
					sendUartMessage("\r", 1);
 80007ba:	2101      	movs	r1, #1
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <vReceiverTask+0x100>)
 80007be:	f000 fd65 	bl	800128c <sendUartMessage>
					break;
 80007c2:	e00b      	b.n	80007dc <vReceiverTask+0xf4>
			}
		} else {

			sendUartMessage("Could not receive from the queue.", 33);
 80007c4:	2121      	movs	r1, #33	; 0x21
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <vReceiverTask+0x114>)
 80007c8:	f000 fd60 	bl	800128c <sendUartMessage>
			sendUartMessage("\n", 1);
 80007cc:	2101      	movs	r1, #1
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <vReceiverTask+0xfc>)
 80007d0:	f000 fd5c 	bl	800128c <sendUartMessage>
			sendUartMessage("\r", 1);
 80007d4:	2101      	movs	r1, #1
 80007d6:	4804      	ldr	r0, [pc, #16]	; (80007e8 <vReceiverTask+0x100>)
 80007d8:	f000 fd58 	bl	800128c <sendUartMessage>
		if(uxQueueMessagesWaiting(qHandle) != 0) {
 80007dc:	e78c      	b.n	80006f8 <vReceiverTask+0x10>
 80007de:	bf00      	nop
 80007e0:	08008278 	.word	0x08008278
 80007e4:	08008270 	.word	0x08008270
 80007e8:	08008274 	.word	0x08008274
 80007ec:	08008298 	.word	0x08008298
 80007f0:	20000078 	.word	0x20000078
 80007f4:	080082a4 	.word	0x080082a4
 80007f8:	080082b4 	.word	0x080082b4
 80007fc:	080082c0 	.word	0x080082c0

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_MspInit+0x4c>)
 8000808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <HAL_MspInit+0x4c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6613      	str	r3, [r2, #96]	; 0x60
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <HAL_MspInit+0x4c>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <HAL_MspInit+0x4c>)
 8000820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6593      	str	r3, [r2, #88]	; 0x58
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_MspInit+0x4c>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	210f      	movs	r1, #15
 800083a:	f06f 0001 	mvn.w	r0, #1
 800083e:	f000 fe77 	bl	8001530 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a44      	ldr	r2, [pc, #272]	; (8000980 <HAL_UART_MspInit+0x130>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d154      	bne.n	800091c <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000872:	4b44      	ldr	r3, [pc, #272]	; (8000984 <HAL_UART_MspInit+0x134>)
 8000874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000876:	4a43      	ldr	r2, [pc, #268]	; (8000984 <HAL_UART_MspInit+0x134>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800087e:	4b41      	ldr	r3, [pc, #260]	; (8000984 <HAL_UART_MspInit+0x134>)
 8000880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800088a:	4b3e      	ldr	r3, [pc, #248]	; (8000984 <HAL_UART_MspInit+0x134>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a3d      	ldr	r2, [pc, #244]	; (8000984 <HAL_UART_MspInit+0x134>)
 8000890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <HAL_UART_MspInit+0x134>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 80008a2:	f001 fca7 	bl	80021f4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80008a6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008b8:	2308      	movs	r3, #8
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4831      	ldr	r0, [pc, #196]	; (8000988 <HAL_UART_MspInit+0x138>)
 80008c4:	f001 f8d0 	bl	8001a68 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80008c8:	4b30      	ldr	r3, [pc, #192]	; (800098c <HAL_UART_MspInit+0x13c>)
 80008ca:	4a31      	ldr	r2, [pc, #196]	; (8000990 <HAL_UART_MspInit+0x140>)
 80008cc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80008ce:	4b2f      	ldr	r3, [pc, #188]	; (800098c <HAL_UART_MspInit+0x13c>)
 80008d0:	2222      	movs	r2, #34	; 0x22
 80008d2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008d4:	4b2d      	ldr	r3, [pc, #180]	; (800098c <HAL_UART_MspInit+0x13c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008da:	4b2c      	ldr	r3, [pc, #176]	; (800098c <HAL_UART_MspInit+0x13c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008e0:	4b2a      	ldr	r3, [pc, #168]	; (800098c <HAL_UART_MspInit+0x13c>)
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008e6:	4b29      	ldr	r3, [pc, #164]	; (800098c <HAL_UART_MspInit+0x13c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ec:	4b27      	ldr	r3, [pc, #156]	; (800098c <HAL_UART_MspInit+0x13c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80008f2:	4b26      	ldr	r3, [pc, #152]	; (800098c <HAL_UART_MspInit+0x13c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <HAL_UART_MspInit+0x13c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80008fe:	4823      	ldr	r0, [pc, #140]	; (800098c <HAL_UART_MspInit+0x13c>)
 8000900:	f000 fe40 	bl	8001584 <HAL_DMA_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 800090a:	f7ff febd 	bl	8000688 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a1e      	ldr	r2, [pc, #120]	; (800098c <HAL_UART_MspInit+0x13c>)
 8000912:	679a      	str	r2, [r3, #120]	; 0x78
 8000914:	4a1d      	ldr	r2, [pc, #116]	; (800098c <HAL_UART_MspInit+0x13c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800091a:	e02d      	b.n	8000978 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <HAL_UART_MspInit+0x144>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d128      	bne.n	8000978 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_UART_MspInit+0x134>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <HAL_UART_MspInit+0x134>)
 800092c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000930:	6593      	str	r3, [r2, #88]	; 0x58
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HAL_UART_MspInit+0x134>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_UART_MspInit+0x134>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <HAL_UART_MspInit+0x134>)
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_UART_MspInit+0x134>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0308 	and.w	r3, r3, #8
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000956:	f44f 7340 	mov.w	r3, #768	; 0x300
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000968:	2307      	movs	r3, #7
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4809      	ldr	r0, [pc, #36]	; (8000998 <HAL_UART_MspInit+0x148>)
 8000974:	f001 f878 	bl	8001a68 <HAL_GPIO_Init>
}
 8000978:	bf00      	nop
 800097a:	3730      	adds	r7, #48	; 0x30
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40008000 	.word	0x40008000
 8000984:	40021000 	.word	0x40021000
 8000988:	48001800 	.word	0x48001800
 800098c:	20000190 	.word	0x20000190
 8000990:	40020008 	.word	0x40020008
 8000994:	40004800 	.word	0x40004800
 8000998:	48000c00 	.word	0x48000c00

0800099c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_SPI_MspInit+0x7c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d128      	bne.n	8000a10 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_SPI_MspInit+0x80>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <HAL_SPI_MspInit+0x80>)
 80009c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <HAL_SPI_MspInit+0x80>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_SPI_MspInit+0x80>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_SPI_MspInit+0x80>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_SPI_MspInit+0x80>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009ee:	23e0      	movs	r3, #224	; 0xe0
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009fe:	2305      	movs	r3, #5
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f001 f82c 	bl	8001a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40013000 	.word	0x40013000
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a40:	d154      	bne.n	8000aec <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <HAL_PCD_MspInit+0xd4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a2b      	ldr	r2, [pc, #172]	; (8000af4 <HAL_PCD_MspInit+0xd4>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <HAL_PCD_MspInit+0xd4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a5a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f000 fff5 	bl	8001a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 ffe7 	bl	8001a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_PCD_MspInit+0xd4>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <HAL_PCD_MspInit+0xd4>)
 8000aa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <HAL_PCD_MspInit+0xd4>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_PCD_MspInit+0xd4>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d114      	bne.n	8000ae8 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_PCD_MspInit+0xd4>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <HAL_PCD_MspInit+0xd4>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_PCD_MspInit+0xd4>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000ad6:	f001 fb7d 	bl	80021d4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_PCD_MspInit+0xd4>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <HAL_PCD_MspInit+0xd4>)
 8000ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ae6:	e001      	b.n	8000aec <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000ae8:	f001 fb74 	bl	80021d4 <HAL_PWREx_EnableVddUSB>
}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	201d      	movs	r0, #29
 8000b0e:	f000 fd0f 	bl	8001530 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b12:	201d      	movs	r0, #29
 8000b14:	f000 fd28 	bl	8001568 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <HAL_InitTick+0xa0>)
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1c:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <HAL_InitTick+0xa0>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	6593      	str	r3, [r2, #88]	; 0x58
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <HAL_InitTick+0xa0>)
 8000b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b30:	f107 0210 	add.w	r2, r7, #16
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 f980 	bl	8002e40 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b40:	f002 f952 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8000b44:	4603      	mov	r3, r0
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4c:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <HAL_InitTick+0xa4>)
 8000b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b52:	0c9b      	lsrs	r3, r3, #18
 8000b54:	3b01      	subs	r3, #1
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_InitTick+0xa8>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <HAL_InitTick+0xac>)
 8000b5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_InitTick+0xa8>)
 8000b60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b64:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_InitTick+0xa8>)
 8000b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_InitTick+0xa8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_InitTick+0xa8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000b78:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <HAL_InitTick+0xa8>)
 8000b7a:	f003 f810 	bl	8003b9e <HAL_TIM_Base_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d104      	bne.n	8000b8e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000b84:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <HAL_InitTick+0xa8>)
 8000b86:	f003 f86b 	bl	8003c60 <HAL_TIM_Base_Start_IT>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3730      	adds	r7, #48	; 0x30
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	431bde83 	.word	0x431bde83
 8000ba0:	2000002c 	.word	0x2000002c
 8000ba4:	40000400 	.word	0x40000400

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <DMA1_Channel1_IRQHandler+0x10>)
 8000bda:	f000 fdf6 	bl	80017ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000190 	.word	0x20000190

08000be8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <TIM3_IRQHandler+0x10>)
 8000bee:	f003 f8a7 	bl	8003d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000002c 	.word	0x2000002c

08000bfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <SystemInit+0x64>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a16      	ldr	r2, [pc, #88]	; (8000c60 <SystemInit+0x64>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <SystemInit+0x68>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <SystemInit+0x68>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <SystemInit+0x68>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <SystemInit+0x68>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <SystemInit+0x68>)
 8000c28:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c2c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <SystemInit+0x68>)
 8000c34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c38:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <SystemInit+0x68>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <SystemInit+0x68>)
 8000c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c44:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <SystemInit+0x68>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SystemInit+0x64>)
 8000c4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c52:	609a      	str	r2, [r3, #8]
#endif
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00
 8000c64:	40021000 	.word	0x40021000

08000c68 <startThread>:

// Fucntion that puts thread information into a struct of type threadInfo, starts
// the thread, and returns the struct. Requires a function pointer to the function
// the new thread will run, the priority to set the new thread to, the name of the
// new thread, and the stack size of the new thread.
struct threadInfo startThread(void (*funPtr), int tp, char* tn, void* arg, int stackSize){
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b093      	sub	sp, #76	; 0x4c
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	603b      	str	r3, [r7, #0]
	struct threadInfo info;
	info.threadPriority = tp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	643b      	str	r3, [r7, #64]	; 0x40
	info.threadName = tn;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	647b      	str	r3, [r7, #68]	; 0x44

	// Use a osThreadAttr_t struct for thread initialization
	const osThreadAttr_t threadAttributes = {
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	2224      	movs	r2, #36	; 0x24
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f007 faa2 	bl	80081d0 <memset>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
			.name = tn,
			.priority = (osPriority_t) tp,
			.stack_size = stackSize
	};
	osThreadId_t threadHandle;
	info.threadHandle = &threadHandle;
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
	threadHandle = osThreadNew(funPtr, arg, &threadAttributes);
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	f107 0214 	add.w	r2, r7, #20
 8000ca4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f004 fd1a 	bl	80056e0 <osThreadNew>
 8000cac:	4603      	mov	r3, r0
 8000cae:	613b      	str	r3, [r7, #16]
	return info;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	461c      	mov	r4, r3
 8000cb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	374c      	adds	r7, #76	; 0x4c
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd90      	pop	{r4, r7, pc}
	...

08000cc8 <StartTest1>:
//PCD_HandleTypeDef hpcd_USB_OTG_FS;


//Test function
void StartTest1(void *argument)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  sendUartMessage("\n", 1);
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	480c      	ldr	r0, [pc, #48]	; (8000d04 <StartTest1+0x3c>)
 8000cd4:	f000 fada 	bl	800128c <sendUartMessage>
	  sendUartMessage("\r", 1);
 8000cd8:	2101      	movs	r1, #1
 8000cda:	480b      	ldr	r0, [pc, #44]	; (8000d08 <StartTest1+0x40>)
 8000cdc:	f000 fad6 	bl	800128c <sendUartMessage>
	  sendUartMessage("Test 1", 6);
 8000ce0:	2106      	movs	r1, #6
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <StartTest1+0x44>)
 8000ce4:	f000 fad2 	bl	800128c <sendUartMessage>
	  sendUartMessage("\n", 1);
 8000ce8:	2101      	movs	r1, #1
 8000cea:	4806      	ldr	r0, [pc, #24]	; (8000d04 <StartTest1+0x3c>)
 8000cec:	f000 face 	bl	800128c <sendUartMessage>
	  sendUartMessage("\r", 1);
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <StartTest1+0x40>)
 8000cf4:	f000 faca 	bl	800128c <sendUartMessage>
//	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
//	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
//	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Test 1", 26, HAL_MAX_DELAY);
//	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
//	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
    vTaskDelay(pdMS_TO_TICKS(1000));
 8000cf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfc:	f005 fd66 	bl	80067cc <vTaskDelay>
	  sendUartMessage("\n", 1);
 8000d00:	e7e6      	b.n	8000cd0 <StartTest1+0x8>
 8000d02:	bf00      	nop
 8000d04:	080082e4 	.word	0x080082e4
 8000d08:	080082e8 	.word	0x080082e8
 8000d0c:	080082ec 	.word	0x080082ec

08000d10 <StartTest2>:
  /* USER CODE END 5 */
}

//Test function
void StartTest2(void *argument)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	for(;;)
	{
		sendUartMessage("\n", 1);
 8000d18:	2101      	movs	r1, #1
 8000d1a:	480c      	ldr	r0, [pc, #48]	; (8000d4c <StartTest2+0x3c>)
 8000d1c:	f000 fab6 	bl	800128c <sendUartMessage>
		sendUartMessage("\r", 1);
 8000d20:	2101      	movs	r1, #1
 8000d22:	480b      	ldr	r0, [pc, #44]	; (8000d50 <StartTest2+0x40>)
 8000d24:	f000 fab2 	bl	800128c <sendUartMessage>
		sendUartMessage("Test 2", 6);
 8000d28:	2106      	movs	r1, #6
 8000d2a:	480a      	ldr	r0, [pc, #40]	; (8000d54 <StartTest2+0x44>)
 8000d2c:	f000 faae 	bl	800128c <sendUartMessage>
		sendUartMessage("\n", 1);
 8000d30:	2101      	movs	r1, #1
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <StartTest2+0x3c>)
 8000d34:	f000 faaa 	bl	800128c <sendUartMessage>
		sendUartMessage("\r", 1);
 8000d38:	2101      	movs	r1, #1
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <StartTest2+0x40>)
 8000d3c:	f000 faa6 	bl	800128c <sendUartMessage>
//		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
//		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
//		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"Test 2", 26, HAL_MAX_DELAY);
//		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
//		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d44:	f005 fd42 	bl	80067cc <vTaskDelay>
		sendUartMessage("\n", 1);
 8000d48:	e7e6      	b.n	8000d18 <StartTest2+0x8>
 8000d4a:	bf00      	nop
 8000d4c:	080082e4 	.word	0x080082e4
 8000d50:	080082e8 	.word	0x080082e8
 8000d54:	080082f4 	.word	0x080082f4

08000d58 <startUart>:
uint8_t UART1_txBuffer[160] = {0};
uint8_t UART1_rxBuffer[160] = {0};


// Function containing calls to all necessary UART initialization functions
void startUart(){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8000d5c:	f000 f9be 	bl	80010dc <MX_GPIO_Init>
	MX_DMA_Init();
 8000d60:	f000 f992 	bl	8001088 <MX_DMA_Init>
	MX_LPUART1_UART_Init();
 8000d64:	f000 f890 	bl	8000e88 <MX_LPUART1_UART_Init>
	MX_USART3_UART_Init();
 8000d68:	f000 f8da 	bl	8000f20 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000d6c:	f000 f962 	bl	8001034 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI1_Init();
 8000d70:	f000 f922 	bl	8000fb8 <MX_SPI1_Init>
	HAL_UART_Receive_DMA(&hlpuart1, UART1_rxBuffer, 160);
 8000d74:	22a0      	movs	r2, #160	; 0xa0
 8000d76:	4903      	ldr	r1, [pc, #12]	; (8000d84 <startUart+0x2c>)
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <startUart+0x30>)
 8000d7a:	f003 fac9 	bl	8004310 <HAL_UART_Receive_DMA>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000065c 	.word	0x2000065c
 8000d88:	20000078 	.word	0x20000078

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0bc      	sub	sp, #240	; 0xf0
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d96:	2244      	movs	r2, #68	; 0x44
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f007 fa18 	bl	80081d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2294      	movs	r2, #148	; 0x94
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f007 fa0a 	bl	80081d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f001 f965 	bl	800208c <HAL_PWREx_ControlVoltageScaling>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000dc8:	f7ff fc5e 	bl	8000688 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000dcc:	2322      	movs	r3, #34	; 0x22
 8000dce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de0:	2340      	movs	r3, #64	; 0x40
 8000de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dec:	2302      	movs	r3, #2
 8000dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000df8:	231e      	movs	r3, #30
 8000dfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 f9fd 	bl	8002214 <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e20:	f7ff fc32 	bl	8000688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e48:	2105      	movs	r1, #5
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fe08 	bl	8002a60 <HAL_RCC_ClockConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000e56:	f7ff fc17 	bl	8000688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 8000e5a:	f242 0324 	movw	r3, #8228	; 0x2024
 8000e5e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 f8da 	bl	8003028 <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000e7a:	f7ff fc05 	bl	8000688 <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	37f0      	adds	r7, #240	; 0xf0
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <MX_LPUART1_UART_Init+0x94>)
 8000e90:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000e94:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000e98:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ed0:	4811      	ldr	r0, [pc, #68]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000ed2:	f003 f935 	bl	8004140 <HAL_UART_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000edc:	f7ff fbd4 	bl	8000688 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000ee4:	f004 f819 	bl	8004f1a <HAL_UARTEx_SetTxFifoThreshold>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eee:	f7ff fbcb 	bl	8000688 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4808      	ldr	r0, [pc, #32]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000ef6:	f004 f84e 	bl	8004f96 <HAL_UARTEx_SetRxFifoThreshold>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f00:	f7ff fbc2 	bl	8000688 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_LPUART1_UART_Init+0x90>)
 8000f06:	f003 ffcf 	bl	8004ea8 <HAL_UARTEx_DisableFifoMode>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f10:	f7ff fbba 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000078 	.word	0x20000078
 8000f1c:	40008000 	.word	0x40008000

08000f20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <MX_USART3_UART_Init+0x94>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f68:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f6a:	f003 f8e9 	bl	8004140 <HAL_UART_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f74:	f7ff fb88 	bl	8000688 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f7c:	f003 ffcd 	bl	8004f1a <HAL_UARTEx_SetTxFifoThreshold>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f86:	f7ff fb7f 	bl	8000688 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f8e:	f004 f802 	bl	8004f96 <HAL_UARTEx_SetRxFifoThreshold>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f98:	f7ff fb76 	bl	8000688 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_USART3_UART_Init+0x90>)
 8000f9e:	f003 ff83 	bl	8004ea8 <HAL_UARTEx_DisableFifoMode>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa8:	f7ff fb6e 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000104 	.word	0x20000104
 8000fb4:	40004800 	.word	0x40004800

08000fb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <MX_SPI1_Init+0x74>)
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <MX_SPI1_Init+0x78>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_SPI1_Init+0x74>)
 8000fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <MX_SPI1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <MX_SPI1_Init+0x74>)
 8000fd2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fd6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_SPI1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_SPI1_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_SPI1_Init+0x74>)
 8000fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_SPI1_Init+0x74>)
 8000fee:	2208      	movs	r2, #8
 8000ff0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_SPI1_Init+0x74>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_SPI1_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_SPI1_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_SPI1_Init+0x74>)
 8001006:	2207      	movs	r2, #7
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_SPI1_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_SPI1_Init+0x74>)
 8001012:	2208      	movs	r2, #8
 8001014:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_SPI1_Init+0x74>)
 8001018:	f002 fd1e 	bl	8003a58 <HAL_SPI_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001022:	f7ff fb31 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200001f0 	.word	0x200001f0
 8001030:	40013000 	.word	0x40013000

08001034 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800103a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800103e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001042:	2206      	movs	r2, #6
 8001044:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001048:	2202      	movs	r2, #2
 800104a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800104c:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800104e:	2201      	movs	r2, #1
 8001050:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001060:	2201      	movs	r2, #1
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800106c:	2201      	movs	r2, #1
 800106e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001072:	f000 fea3 	bl	8001dbc <HAL_PCD_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 800107c:	f7ff fb04 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000254 	.word	0x20000254

08001088 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_DMA_Init+0x50>)
 8001090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001092:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <MX_DMA_Init+0x50>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6493      	str	r3, [r2, #72]	; 0x48
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_DMA_Init+0x50>)
 800109c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_DMA_Init+0x50>)
 80010a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <MX_DMA_Init+0x50>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6493      	str	r3, [r2, #72]	; 0x48
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_DMA_Init+0x50>)
 80010b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2105      	movs	r1, #5
 80010c2:	200b      	movs	r0, #11
 80010c4:	f000 fa34 	bl	8001530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010c8:	200b      	movs	r0, #11
 80010ca:	f000 fa4d 	bl	8001568 <HAL_NVIC_EnableIRQ>

}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f2:	4b52      	ldr	r3, [pc, #328]	; (800123c <MX_GPIO_Init+0x160>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	4a51      	ldr	r2, [pc, #324]	; (800123c <MX_GPIO_Init+0x160>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b4f      	ldr	r3, [pc, #316]	; (800123c <MX_GPIO_Init+0x160>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110a:	4b4c      	ldr	r3, [pc, #304]	; (800123c <MX_GPIO_Init+0x160>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	4a4b      	ldr	r2, [pc, #300]	; (800123c <MX_GPIO_Init+0x160>)
 8001110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001116:	4b49      	ldr	r3, [pc, #292]	; (800123c <MX_GPIO_Init+0x160>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b46      	ldr	r3, [pc, #280]	; (800123c <MX_GPIO_Init+0x160>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a45      	ldr	r2, [pc, #276]	; (800123c <MX_GPIO_Init+0x160>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b43      	ldr	r3, [pc, #268]	; (800123c <MX_GPIO_Init+0x160>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	4b40      	ldr	r3, [pc, #256]	; (800123c <MX_GPIO_Init+0x160>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a3f      	ldr	r2, [pc, #252]	; (800123c <MX_GPIO_Init+0x160>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b3d      	ldr	r3, [pc, #244]	; (800123c <MX_GPIO_Init+0x160>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	4b3a      	ldr	r3, [pc, #232]	; (800123c <MX_GPIO_Init+0x160>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a39      	ldr	r2, [pc, #228]	; (800123c <MX_GPIO_Init+0x160>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <MX_GPIO_Init+0x160>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800116a:	4b34      	ldr	r3, [pc, #208]	; (800123c <MX_GPIO_Init+0x160>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4a33      	ldr	r2, [pc, #204]	; (800123c <MX_GPIO_Init+0x160>)
 8001170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4b31      	ldr	r3, [pc, #196]	; (800123c <MX_GPIO_Init+0x160>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001182:	f001 f837 	bl	80021f4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800118c:	482c      	ldr	r0, [pc, #176]	; (8001240 <MX_GPIO_Init+0x164>)
 800118e:	f000 fdfd 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001198:	482a      	ldr	r0, [pc, #168]	; (8001244 <MX_GPIO_Init+0x168>)
 800119a:	f000 fdf7 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2120      	movs	r1, #32
 80011a2:	4829      	ldr	r0, [pc, #164]	; (8001248 <MX_GPIO_Init+0x16c>)
 80011a4:	f000 fdf2 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ae:	4b27      	ldr	r3, [pc, #156]	; (800124c <MX_GPIO_Init+0x170>)
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	4824      	ldr	r0, [pc, #144]	; (8001250 <MX_GPIO_Init+0x174>)
 80011be:	f000 fc53 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80011c2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4819      	ldr	r0, [pc, #100]	; (8001240 <MX_GPIO_Init+0x164>)
 80011dc:	f000 fc44 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	4812      	ldr	r0, [pc, #72]	; (8001244 <MX_GPIO_Init+0x168>)
 80011fa:	f000 fc35 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011fe:	2320      	movs	r3, #32
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <MX_GPIO_Init+0x16c>)
 8001216:	f000 fc27 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800121a:	2340      	movs	r3, #64	; 0x40
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	4806      	ldr	r0, [pc, #24]	; (8001248 <MX_GPIO_Init+0x16c>)
 800122e:	f000 fc1b 	bl	8001a68 <HAL_GPIO_Init>

}
 8001232:	bf00      	nop
 8001234:	3730      	adds	r7, #48	; 0x30
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000
 8001240:	48000400 	.word	0x48000400
 8001244:	48000c00 	.word	0x48000c00
 8001248:	48001800 	.word	0x48001800
 800124c:	10110000 	.word	0x10110000
 8001250:	48000800 	.word	0x48000800

08001254 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001266:	f000 f867 	bl	8001338 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40000400 	.word	0x40000400

08001278 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <sendUartMessage>:

// Function that takes in a char pointer with a UART message to transmit and
// the length of said message
void sendUartMessage(char* message, int length){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)message, length, HAL_MAX_DELAY);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b29a      	uxth	r2, r3
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <sendUartMessage+0x24>)
 80012a2:	f002 ff9d 	bl	80041e0 <HAL_UART_Transmit>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000078 	.word	0x20000078

080012b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b8:	f7ff fca0 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012be:	e003      	b.n	80012c8 <LoopCopyDataInit>

080012c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012c6:	3104      	adds	r1, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012c8:	480a      	ldr	r0, [pc, #40]	; (80012f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012d0:	d3f6      	bcc.n	80012c0 <CopyDataInit>
	ldr	r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80012d4:	e002      	b.n	80012dc <LoopFillZerobss>

080012d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012d8:	f842 3b04 	str.w	r3, [r2], #4

080012dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <LoopForever+0x16>)
	cmp	r2, r3
 80012de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012e0:	d3f9      	bcc.n	80012d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e2:	f006 ff43 	bl	800816c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012e6:	f7ff f90d 	bl	8000504 <main>

080012ea <LoopForever>:

LoopForever:
    b LoopForever
 80012ea:	e7fe      	b.n	80012ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012ec:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80012f0:	0800839c 	.word	0x0800839c
	ldr	r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012f8:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80012fc:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001300:	20002000 	.word	0x20002000

08001304 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC1_IRQHandler>

08001306 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f000 f902 	bl	800151a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff fbee 	bl	8000af8 <HAL_InitTick>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	e001      	b.n	800132c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001328:	f7ff fa6a 	bl	8000800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800132c:	79fb      	ldrb	r3, [r7, #7]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x20>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x24>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <HAL_IncTick+0x24>)
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000008 	.word	0x20000008
 800135c:	200006fc 	.word	0x200006fc

08001360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_GetTick+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	200006fc 	.word	0x200006fc

08001378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff ffee 	bl	8001360 <HAL_GetTick>
 8001384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d005      	beq.n	800139e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_Delay+0x44>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800139e:	bf00      	nop
 80013a0:	f7ff ffde 	bl	8001360 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d8f7      	bhi.n	80013a0 <HAL_Delay+0x28>
  {
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000008 	.word	0x20000008

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ff4c 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001542:	f7ff ff61 	bl	8001408 <__NVIC_GetPriorityGrouping>
 8001546:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	6978      	ldr	r0, [r7, #20]
 800154e:	f7ff ffb1 	bl	80014b4 <NVIC_EncodePriority>
 8001552:	4602      	mov	r2, r0
 8001554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff80 	bl	8001460 <__NVIC_SetPriority>
}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff54 	bl	8001424 <__NVIC_EnableIRQ>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e08d      	b.n	80016b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	4b47      	ldr	r3, [pc, #284]	; (80016bc <HAL_DMA_Init+0x138>)
 800159e:	429a      	cmp	r2, r3
 80015a0:	d80f      	bhi.n	80015c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b45      	ldr	r3, [pc, #276]	; (80016c0 <HAL_DMA_Init+0x13c>)
 80015aa:	4413      	add	r3, r2
 80015ac:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <HAL_DMA_Init+0x140>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	091b      	lsrs	r3, r3, #4
 80015b4:	009a      	lsls	r2, r3, #2
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a42      	ldr	r2, [pc, #264]	; (80016c8 <HAL_DMA_Init+0x144>)
 80015be:	641a      	str	r2, [r3, #64]	; 0x40
 80015c0:	e00e      	b.n	80015e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b40      	ldr	r3, [pc, #256]	; (80016cc <HAL_DMA_Init+0x148>)
 80015ca:	4413      	add	r3, r2
 80015cc:	4a3d      	ldr	r2, [pc, #244]	; (80016c4 <HAL_DMA_Init+0x140>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	009a      	lsls	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a3c      	ldr	r2, [pc, #240]	; (80016d0 <HAL_DMA_Init+0x14c>)
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001604:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001610:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f9b6 	bl	80019a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001640:	d102      	bne.n	8001648 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800165c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d010      	beq.n	8001688 <HAL_DMA_Init+0x104>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b04      	cmp	r3, #4
 800166c:	d80c      	bhi.n	8001688 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f9d6 	bl	8001a20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	e008      	b.n	800169a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020407 	.word	0x40020407
 80016c0:	bffdfff8 	.word	0xbffdfff8
 80016c4:	cccccccd 	.word	0xcccccccd
 80016c8:	40020000 	.word	0x40020000
 80016cc:	bffdfbf8 	.word	0xbffdfbf8
 80016d0:	40020400 	.word	0x40020400

080016d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_DMA_Start_IT+0x20>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e066      	b.n	80017c2 <HAL_DMA_Start_IT+0xee>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b01      	cmp	r3, #1
 8001706:	d155      	bne.n	80017b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2202      	movs	r2, #2
 800170c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f8fb 	bl	8001928 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	2b00      	cmp	r3, #0
 8001738:	d008      	beq.n	800174c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 020e 	orr.w	r2, r2, #14
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e00f      	b.n	800176c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0204 	bic.w	r2, r2, #4
 800175a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 020a 	orr.w	r2, r2, #10
 800176a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001788:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017a0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 0201 	orr.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e005      	b.n	80017c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017bc:	2302      	movs	r3, #2
 80017be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f003 031c 	and.w	r3, r3, #28
 80017ea:	2204      	movs	r2, #4
 80017ec:	409a      	lsls	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d026      	beq.n	8001844 <HAL_DMA_IRQHandler+0x7a>
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d021      	beq.n	8001844 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	2b00      	cmp	r3, #0
 800180c:	d107      	bne.n	800181e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0204 	bic.w	r2, r2, #4
 800181c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f003 021c 	and.w	r2, r3, #28
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	2104      	movs	r1, #4
 800182c:	fa01 f202 	lsl.w	r2, r1, r2
 8001830:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	2b00      	cmp	r3, #0
 8001838:	d071      	beq.n	800191e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001842:	e06c      	b.n	800191e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f003 031c 	and.w	r3, r3, #28
 800184c:	2202      	movs	r2, #2
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d02e      	beq.n	80018b6 <HAL_DMA_IRQHandler+0xec>
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d029      	beq.n	80018b6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0320 	and.w	r3, r3, #32
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10b      	bne.n	8001888 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 020a 	bic.w	r2, r2, #10
 800187e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188c:	f003 021c 	and.w	r2, r3, #28
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	2102      	movs	r1, #2
 8001896:	fa01 f202 	lsl.w	r2, r1, r2
 800189a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d038      	beq.n	800191e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018b4:	e033      	b.n	800191e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f003 031c 	and.w	r3, r3, #28
 80018be:	2208      	movs	r2, #8
 80018c0:	409a      	lsls	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d02a      	beq.n	8001920 <HAL_DMA_IRQHandler+0x156>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d025      	beq.n	8001920 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 020e 	bic.w	r2, r2, #14
 80018e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e8:	f003 021c 	and.w	r2, r3, #28
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f202 	lsl.w	r2, r1, r2
 80018f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800191e:	bf00      	nop
 8001920:	bf00      	nop
}
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800193e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001944:	2b00      	cmp	r3, #0
 8001946:	d004      	beq.n	8001952 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001950:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	f003 021c 	and.w	r2, r3, #28
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f202 	lsl.w	r2, r1, r2
 8001964:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b10      	cmp	r3, #16
 8001974:	d108      	bne.n	8001988 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001986:	e007      	b.n	8001998 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	60da      	str	r2, [r3, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d80a      	bhi.n	80019ce <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019c4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6493      	str	r3, [r2, #72]	; 0x48
 80019cc:	e007      	b.n	80019de <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	009a      	lsls	r2, r3, #2
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80019d8:	4413      	add	r3, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	3b08      	subs	r3, #8
 80019e6:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80019f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	2201      	movs	r2, #1
 80019fe:	409a      	lsls	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40020407 	.word	0x40020407
 8001a14:	4002081c 	.word	0x4002081c
 8001a18:	cccccccd 	.word	0xcccccccd
 8001a1c:	40020880 	.word	0x40020880

08001a20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a42:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	1000823f 	.word	0x1000823f
 8001a64:	40020940 	.word	0x40020940

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a76:	e166      	b.n	8001d46 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8158 	beq.w	8001d40 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d00b      	beq.n	8001ab0 <HAL_GPIO_Init+0x48>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d007      	beq.n	8001ab0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aa4:	2b11      	cmp	r3, #17
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b12      	cmp	r3, #18
 8001aae:	d130      	bne.n	8001b12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	f003 0201 	and.w	r2, r3, #1
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0xea>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b12      	cmp	r3, #18
 8001b50:	d123      	bne.n	8001b9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	220f      	movs	r2, #15
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	6939      	ldr	r1, [r7, #16]
 8001b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0203 	and.w	r2, r3, #3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80b2 	beq.w	8001d40 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bdc:	4b61      	ldr	r3, [pc, #388]	; (8001d64 <HAL_GPIO_Init+0x2fc>)
 8001bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be0:	4a60      	ldr	r2, [pc, #384]	; (8001d64 <HAL_GPIO_Init+0x2fc>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6613      	str	r3, [r2, #96]	; 0x60
 8001be8:	4b5e      	ldr	r3, [pc, #376]	; (8001d64 <HAL_GPIO_Init+0x2fc>)
 8001bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bf4:	4a5c      	ldr	r2, [pc, #368]	; (8001d68 <HAL_GPIO_Init+0x300>)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c1e:	d02b      	beq.n	8001c78 <HAL_GPIO_Init+0x210>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_GPIO_Init+0x304>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d025      	beq.n	8001c74 <HAL_GPIO_Init+0x20c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a51      	ldr	r2, [pc, #324]	; (8001d70 <HAL_GPIO_Init+0x308>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d01f      	beq.n	8001c70 <HAL_GPIO_Init+0x208>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <HAL_GPIO_Init+0x30c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d019      	beq.n	8001c6c <HAL_GPIO_Init+0x204>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a4f      	ldr	r2, [pc, #316]	; (8001d78 <HAL_GPIO_Init+0x310>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_GPIO_Init+0x200>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a4e      	ldr	r2, [pc, #312]	; (8001d7c <HAL_GPIO_Init+0x314>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00d      	beq.n	8001c64 <HAL_GPIO_Init+0x1fc>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a4d      	ldr	r2, [pc, #308]	; (8001d80 <HAL_GPIO_Init+0x318>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <HAL_GPIO_Init+0x1f8>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a4c      	ldr	r2, [pc, #304]	; (8001d84 <HAL_GPIO_Init+0x31c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d101      	bne.n	8001c5c <HAL_GPIO_Init+0x1f4>
 8001c58:	2307      	movs	r3, #7
 8001c5a:	e00e      	b.n	8001c7a <HAL_GPIO_Init+0x212>
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	e00c      	b.n	8001c7a <HAL_GPIO_Init+0x212>
 8001c60:	2306      	movs	r3, #6
 8001c62:	e00a      	b.n	8001c7a <HAL_GPIO_Init+0x212>
 8001c64:	2305      	movs	r3, #5
 8001c66:	e008      	b.n	8001c7a <HAL_GPIO_Init+0x212>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_Init+0x212>
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e004      	b.n	8001c7a <HAL_GPIO_Init+0x212>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e002      	b.n	8001c7a <HAL_GPIO_Init+0x212>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_GPIO_Init+0x212>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	f002 0203 	and.w	r2, r2, #3
 8001c80:	0092      	lsls	r2, r2, #2
 8001c82:	4093      	lsls	r3, r2
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c8a:	4937      	ldr	r1, [pc, #220]	; (8001d68 <HAL_GPIO_Init+0x300>)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c98:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <HAL_GPIO_Init+0x320>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cbc:	4a32      	ldr	r2, [pc, #200]	; (8001d88 <HAL_GPIO_Init+0x320>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <HAL_GPIO_Init+0x320>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ce6:	4a28      	ldr	r2, [pc, #160]	; (8001d88 <HAL_GPIO_Init+0x320>)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cec:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_GPIO_Init+0x320>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d10:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <HAL_GPIO_Init+0x320>)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_GPIO_Init+0x320>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d3a:	4a13      	ldr	r2, [pc, #76]	; (8001d88 <HAL_GPIO_Init+0x320>)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f47f ae91 	bne.w	8001a78 <HAL_GPIO_Init+0x10>
  }
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	48000400 	.word	0x48000400
 8001d70:	48000800 	.word	0x48000800
 8001d74:	48000c00 	.word	0x48000c00
 8001d78:	48001000 	.word	0x48001000
 8001d7c:	48001400 	.word	0x48001400
 8001d80:	48001800 	.word	0x48001800
 8001d84:	48001c00 	.word	0x48001c00
 8001d88:	40010400 	.word	0x40010400

08001d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d9c:	787b      	ldrb	r3, [r7, #1]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da8:	e002      	b.n	8001db0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbe:	b08f      	sub	sp, #60	; 0x3c
 8001dc0:	af0a      	add	r7, sp, #40	; 0x28
 8001dc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e116      	b.n	8001ffc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d106      	bne.n	8001dee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7fe fe19 	bl	8000a20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2203      	movs	r2, #3
 8001df2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d102      	bne.n	8001e08 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 f9b7 	bl	8005180 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	687e      	ldr	r6, [r7, #4]
 8001e1a:	466d      	mov	r5, sp
 8001e1c:	f106 0410 	add.w	r4, r6, #16
 8001e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e30:	1d33      	adds	r3, r6, #4
 8001e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e34:	6838      	ldr	r0, [r7, #0]
 8001e36:	f003 f951 	bl	80050dc <USB_CoreInit>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0d7      	b.n	8001ffc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 f9a5 	bl	80051a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e04a      	b.n	8001ef4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	333d      	adds	r3, #61	; 0x3d
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	333c      	adds	r3, #60	; 0x3c
 8001e82:	7bfa      	ldrb	r2, [r7, #15]
 8001e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	b298      	uxth	r0, r3
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	3342      	adds	r3, #66	; 0x42
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	333f      	adds	r3, #63	; 0x3f
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3344      	adds	r3, #68	; 0x44
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	1a9b      	subs	r3, r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3348      	adds	r3, #72	; 0x48
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3350      	adds	r3, #80	; 0x50
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d3af      	bcc.n	8001e5e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e044      	b.n	8001f8e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d3b5      	bcc.n	8001f04 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	687e      	ldr	r6, [r7, #4]
 8001fa0:	466d      	mov	r5, sp
 8001fa2:	f106 0410 	add.w	r4, r6, #16
 8001fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fb6:	1d33      	adds	r3, r6, #4
 8001fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fba:	6838      	ldr	r0, [r7, #0]
 8001fbc:	f003 f91c 	bl	80051f8 <USB_DevInit>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e014      	b.n	8001ffc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d102      	bne.n	8001ff0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f80a 	bl	8002004 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 faac 	bl	8005552 <USB_DevDisconnect>

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002004 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002036:	f043 0303 	orr.w	r3, r3, #3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205c:	d102      	bne.n	8002064 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800205e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002062:	e00b      	b.n	800207c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002072:	d102      	bne.n	800207a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002078:	e000      	b.n	800207c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800207a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40007000 	.word	0x40007000

0800208c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d141      	bne.n	800211e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800209a:	4b4b      	ldr	r3, [pc, #300]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a6:	d131      	bne.n	800210c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020a8:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ae:	4a46      	ldr	r2, [pc, #280]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020b8:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020c0:	4a41      	ldr	r2, [pc, #260]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020c8:	4b40      	ldr	r3, [pc, #256]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2232      	movs	r2, #50	; 0x32
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	4a3f      	ldr	r2, [pc, #252]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	0c9b      	lsrs	r3, r3, #18
 80020da:	3301      	adds	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020de:	e002      	b.n	80020e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e6:	4b38      	ldr	r3, [pc, #224]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f2:	d102      	bne.n	80020fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f2      	bne.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020fa:	4b33      	ldr	r3, [pc, #204]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002106:	d158      	bne.n	80021ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e057      	b.n	80021bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800210c:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002112:	4a2d      	ldr	r2, [pc, #180]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002118:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800211c:	e04d      	b.n	80021ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002124:	d141      	bne.n	80021aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002126:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800212e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002132:	d131      	bne.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002134:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800213a:	4a23      	ldr	r2, [pc, #140]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002144:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800214c:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002152:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2232      	movs	r2, #50	; 0x32
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	0c9b      	lsrs	r3, r3, #18
 8002166:	3301      	adds	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800216a:	e002      	b.n	8002172 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3b01      	subs	r3, #1
 8002170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217e:	d102      	bne.n	8002186 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f2      	bne.n	800216c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002192:	d112      	bne.n	80021ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e011      	b.n	80021bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021a8:	e007      	b.n	80021ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40007000 	.word	0x40007000
 80021cc:	20000000 	.word	0x20000000
 80021d0:	431bde83 	.word	0x431bde83

080021d4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e2:	6053      	str	r3, [r2, #4]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40007000 	.word	0x40007000

080021f4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002202:	6053      	str	r3, [r2, #4]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40007000 	.word	0x40007000

08002214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	f000 bc16 	b.w	8002a54 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002228:	4b96      	ldr	r3, [pc, #600]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002232:	4b94      	ldr	r3, [pc, #592]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80e4 	beq.w	8002412 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <HAL_RCC_OscConfig+0x4c>
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b0c      	cmp	r3, #12
 8002254:	f040 808b 	bne.w	800236e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b01      	cmp	r3, #1
 800225c:	f040 8087 	bne.w	800236e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002260:	4b88      	ldr	r3, [pc, #544]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_OscConfig+0x64>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e3ed      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1a      	ldr	r2, [r3, #32]
 800227c:	4b81      	ldr	r3, [pc, #516]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <HAL_RCC_OscConfig+0x7e>
 8002288:	4b7e      	ldr	r3, [pc, #504]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002290:	e005      	b.n	800229e <HAL_RCC_OscConfig+0x8a>
 8002292:	4b7c      	ldr	r3, [pc, #496]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229e:	4293      	cmp	r3, r2
 80022a0:	d223      	bcs.n	80022ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fdfc 	bl	8002ea4 <RCC_SetFlashLatencyFromMSIRange>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e3ce      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b6:	4b73      	ldr	r3, [pc, #460]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a72      	ldr	r2, [pc, #456]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b70      	ldr	r3, [pc, #448]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	496d      	ldr	r1, [pc, #436]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d4:	4b6b      	ldr	r3, [pc, #428]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	4968      	ldr	r1, [pc, #416]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]
 80022e8:	e025      	b.n	8002336 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ea:	4b66      	ldr	r3, [pc, #408]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a65      	ldr	r2, [pc, #404]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022f0:	f043 0308 	orr.w	r3, r3, #8
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b63      	ldr	r3, [pc, #396]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4960      	ldr	r1, [pc, #384]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002308:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	495b      	ldr	r1, [pc, #364]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fdbc 	bl	8002ea4 <RCC_SetFlashLatencyFromMSIRange>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e38e      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002336:	f000 fcbf 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 800233a:	4602      	mov	r2, r0
 800233c:	4b51      	ldr	r3, [pc, #324]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	4950      	ldr	r1, [pc, #320]	; (8002488 <HAL_RCC_OscConfig+0x274>)
 8002348:	5ccb      	ldrb	r3, [r1, r3]
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	4a4e      	ldr	r2, [pc, #312]	; (800248c <HAL_RCC_OscConfig+0x278>)
 8002354:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002356:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <HAL_RCC_OscConfig+0x27c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fbcc 	bl	8000af8 <HAL_InitTick>
 8002360:	4603      	mov	r3, r0
 8002362:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d052      	beq.n	8002410 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	e372      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d032      	beq.n	80023dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002376:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a42      	ldr	r2, [pc, #264]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002382:	f7fe ffed 	bl	8001360 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800238a:	f7fe ffe9 	bl	8001360 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e35b      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239c:	4b39      	ldr	r3, [pc, #228]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a8:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a35      	ldr	r2, [pc, #212]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023ae:	f043 0308 	orr.w	r3, r3, #8
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b33      	ldr	r3, [pc, #204]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4930      	ldr	r1, [pc, #192]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c6:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	492b      	ldr	r1, [pc, #172]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
 80023da:	e01a      	b.n	8002412 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023dc:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a28      	ldr	r2, [pc, #160]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e8:	f7fe ffba 	bl	8001360 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023f0:	f7fe ffb6 	bl	8001360 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e328      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x1dc>
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002410:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d073      	beq.n	8002506 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b08      	cmp	r3, #8
 8002422:	d005      	beq.n	8002430 <HAL_RCC_OscConfig+0x21c>
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b0c      	cmp	r3, #12
 8002428:	d10e      	bne.n	8002448 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d10b      	bne.n	8002448 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d063      	beq.n	8002504 <HAL_RCC_OscConfig+0x2f0>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d15f      	bne.n	8002504 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e305      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002450:	d106      	bne.n	8002460 <HAL_RCC_OscConfig+0x24c>
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e025      	b.n	80024ac <HAL_RCC_OscConfig+0x298>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002468:	d114      	bne.n	8002494 <HAL_RCC_OscConfig+0x280>
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a02      	ldr	r2, [pc, #8]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e013      	b.n	80024ac <HAL_RCC_OscConfig+0x298>
 8002484:	40021000 	.word	0x40021000
 8002488:	0800832c 	.word	0x0800832c
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004
 8002494:	4ba0      	ldr	r3, [pc, #640]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a9f      	ldr	r2, [pc, #636]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b9d      	ldr	r3, [pc, #628]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a9c      	ldr	r2, [pc, #624]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe ff54 	bl	8001360 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7fe ff50 	bl	8001360 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e2c2      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ce:	4b92      	ldr	r3, [pc, #584]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x2a8>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe ff40 	bl	8001360 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7fe ff3c 	bl	8001360 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e2ae      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024f6:	4b88      	ldr	r3, [pc, #544]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x2d0>
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d060      	beq.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b04      	cmp	r3, #4
 8002516:	d005      	beq.n	8002524 <HAL_RCC_OscConfig+0x310>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d119      	bne.n	8002552 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d116      	bne.n	8002552 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002524:	4b7c      	ldr	r3, [pc, #496]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_OscConfig+0x328>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e28b      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b76      	ldr	r3, [pc, #472]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	061b      	lsls	r3, r3, #24
 800254a:	4973      	ldr	r1, [pc, #460]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002550:	e040      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d023      	beq.n	80025a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255a:	4b6f      	ldr	r3, [pc, #444]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6e      	ldr	r2, [pc, #440]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe fefb 	bl	8001360 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256e:	f7fe fef7 	bl	8001360 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e269      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002580:	4b65      	ldr	r3, [pc, #404]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b62      	ldr	r3, [pc, #392]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	495f      	ldr	r1, [pc, #380]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
 80025a0:	e018      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a2:	4b5d      	ldr	r3, [pc, #372]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a5c      	ldr	r2, [pc, #368]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7fe fed7 	bl	8001360 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b6:	f7fe fed3 	bl	8001360 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e245      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c8:	4b53      	ldr	r3, [pc, #332]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d03c      	beq.n	800265a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01c      	beq.n	8002622 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e8:	4b4b      	ldr	r3, [pc, #300]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ee:	4a4a      	ldr	r2, [pc, #296]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7fe feb2 	bl	8001360 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002600:	f7fe feae 	bl	8001360 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e220      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002612:	4b41      	ldr	r3, [pc, #260]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ef      	beq.n	8002600 <HAL_RCC_OscConfig+0x3ec>
 8002620:	e01b      	b.n	800265a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002628:	4a3b      	ldr	r2, [pc, #236]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002632:	f7fe fe95 	bl	8001360 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263a:	f7fe fe91 	bl	8001360 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e203      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800264e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ef      	bne.n	800263a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80a6 	beq.w	80027b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002668:	2300      	movs	r3, #0
 800266a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800266c:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10d      	bne.n	8002694 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	4a26      	ldr	r2, [pc, #152]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800267e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002682:	6593      	str	r3, [r2, #88]	; 0x58
 8002684:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002690:	2301      	movs	r3, #1
 8002692:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCC_OscConfig+0x508>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d118      	bne.n	80026d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a0:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_RCC_OscConfig+0x508>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1d      	ldr	r2, [pc, #116]	; (800271c <HAL_RCC_OscConfig+0x508>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ac:	f7fe fe58 	bl	8001360 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b4:	f7fe fe54 	bl	8001360 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1c6      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_RCC_OscConfig+0x508>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d108      	bne.n	80026ec <HAL_RCC_OscConfig+0x4d8>
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	4a0d      	ldr	r2, [pc, #52]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ea:	e029      	b.n	8002740 <HAL_RCC_OscConfig+0x52c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d115      	bne.n	8002720 <HAL_RCC_OscConfig+0x50c>
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	4a07      	ldr	r2, [pc, #28]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	4a03      	ldr	r2, [pc, #12]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002714:	e014      	b.n	8002740 <HAL_RCC_OscConfig+0x52c>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	40007000 	.word	0x40007000
 8002720:	4b9d      	ldr	r3, [pc, #628]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	4a9c      	ldr	r2, [pc, #624]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002730:	4b99      	ldr	r3, [pc, #612]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	4a98      	ldr	r2, [pc, #608]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d016      	beq.n	8002776 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe fe0a 	bl	8001360 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe fe06 	bl	8001360 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e176      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002766:	4b8c      	ldr	r3, [pc, #560]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ed      	beq.n	8002750 <HAL_RCC_OscConfig+0x53c>
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7fe fdf3 	bl	8001360 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7fe fdef 	bl	8001360 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e15f      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002794:	4b80      	ldr	r3, [pc, #512]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1ed      	bne.n	800277e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a2:	7ffb      	ldrb	r3, [r7, #31]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a8:	4b7b      	ldr	r3, [pc, #492]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	4a7a      	ldr	r2, [pc, #488]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 80027ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d03c      	beq.n	800283a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01c      	beq.n	8002802 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027c8:	4b73      	ldr	r3, [pc, #460]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 80027ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ce:	4a72      	ldr	r2, [pc, #456]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe fdc2 	bl	8001360 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027e0:	f7fe fdbe 	bl	8001360 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e130      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027f2:	4b69      	ldr	r3, [pc, #420]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 80027f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ef      	beq.n	80027e0 <HAL_RCC_OscConfig+0x5cc>
 8002800:	e01b      	b.n	800283a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002802:	4b65      	ldr	r3, [pc, #404]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002808:	4a63      	ldr	r2, [pc, #396]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fe fda5 	bl	8001360 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800281a:	f7fe fda1 	bl	8001360 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e113      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800282c:	4b5a      	ldr	r3, [pc, #360]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 800282e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1ef      	bne.n	800281a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8107 	beq.w	8002a52 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	2b02      	cmp	r3, #2
 800284a:	f040 80cf 	bne.w	80029ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800284e:	4b52      	ldr	r3, [pc, #328]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0203 	and.w	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	429a      	cmp	r2, r3
 8002860:	d12c      	bne.n	80028bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	3b01      	subs	r3, #1
 800286e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d123      	bne.n	80028bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d11b      	bne.n	80028bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d113      	bne.n	80028bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	3b01      	subs	r3, #1
 80028a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d109      	bne.n	80028bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	3b01      	subs	r3, #1
 80028b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d071      	beq.n	80029a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d068      	beq.n	8002994 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028c2:	4b35      	ldr	r3, [pc, #212]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028ce:	4b32      	ldr	r3, [pc, #200]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e0ba      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028de:	4b2e      	ldr	r3, [pc, #184]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2d      	ldr	r2, [pc, #180]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 80028e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028ea:	f7fe fd39 	bl	8001360 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe fd35 	bl	8001360 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e0a7      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_RCC_OscConfig+0x788>)
 8002916:	4013      	ands	r3, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002920:	3a01      	subs	r2, #1
 8002922:	0112      	lsls	r2, r2, #4
 8002924:	4311      	orrs	r1, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800292a:	0212      	lsls	r2, r2, #8
 800292c:	4311      	orrs	r1, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002932:	0852      	lsrs	r2, r2, #1
 8002934:	3a01      	subs	r2, #1
 8002936:	0552      	lsls	r2, r2, #21
 8002938:	4311      	orrs	r1, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800293e:	0852      	lsrs	r2, r2, #1
 8002940:	3a01      	subs	r2, #1
 8002942:	0652      	lsls	r2, r2, #25
 8002944:	4311      	orrs	r1, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800294a:	06d2      	lsls	r2, r2, #27
 800294c:	430a      	orrs	r2, r1
 800294e:	4912      	ldr	r1, [pc, #72]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002950:	4313      	orrs	r3, r2
 8002952:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002954:	4b10      	ldr	r3, [pc, #64]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0f      	ldr	r2, [pc, #60]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 800295a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002960:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4a0c      	ldr	r2, [pc, #48]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800296c:	f7fe fcf8 	bl	8001360 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7fe fcf4 	bl	8001360 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e066      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002992:	e05e      	b.n	8002a52 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e05d      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
 8002998:	40021000 	.word	0x40021000
 800299c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d152      	bne.n	8002a52 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2a      	ldr	r2, [pc, #168]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029b8:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a27      	ldr	r2, [pc, #156]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 80029be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029c4:	f7fe fccc 	bl	8001360 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe fcc8 	bl	8001360 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e03a      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029de:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x7b8>
 80029ea:	e032      	b.n	8002a52 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2b0c      	cmp	r3, #12
 80029f0:	d02d      	beq.n	8002a4e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f2:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a19      	ldr	r2, [pc, #100]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 80029f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029fe:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 8002a10:	f023 0303 	bic.w	r3, r3, #3
 8002a14:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 8002a1c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a24:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7fe fc9b 	bl	8001360 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe fc97 	bl	8001360 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e009      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_RCC_OscConfig+0x848>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x81a>
 8002a4c:	e001      	b.n	8002a52 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3720      	adds	r7, #32
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e10f      	b.n	8002c98 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a78:	4b89      	ldr	r3, [pc, #548]	; (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d910      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b86      	ldr	r3, [pc, #536]	; (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 020f 	bic.w	r2, r3, #15
 8002a8e:	4984      	ldr	r1, [pc, #528]	; (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b82      	ldr	r3, [pc, #520]	; (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0f7      	b.n	8002c98 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8089 	beq.w	8002bc8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d133      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002abe:	4b79      	ldr	r3, [pc, #484]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0e4      	b.n	8002c98 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002ace:	f000 fa43 	bl	8002f58 <RCC_GetSysClockFreqFromPLLSource>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4a74      	ldr	r2, [pc, #464]	; (8002ca8 <HAL_RCC_ClockConfig+0x248>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d955      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ada:	4b72      	ldr	r3, [pc, #456]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ae6:	4b6f      	ldr	r3, [pc, #444]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aee:	4a6d      	ldr	r2, [pc, #436]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e044      	b.n	8002b86 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d03e      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x126>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d13a      	bne.n	8002b86 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b10:	4b64      	ldr	r3, [pc, #400]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b18:	4a62      	ldr	r2, [pc, #392]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e02f      	b.n	8002b86 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d115      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0ac      	b.n	8002c98 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b46:	4b57      	ldr	r3, [pc, #348]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0a0      	b.n	8002c98 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b56:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e098      	b.n	8002c98 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002b66:	f000 f8a7 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4a4e      	ldr	r2, [pc, #312]	; (8002ca8 <HAL_RCC_ClockConfig+0x248>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d909      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b72:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b7a:	4a4a      	ldr	r2, [pc, #296]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f023 0203 	bic.w	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4944      	ldr	r1, [pc, #272]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b98:	f7fe fbe2 	bl	8001360 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba0:	f7fe fbde 	bl	8001360 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e070      	b.n	8002c98 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 020c 	and.w	r2, r3, #12
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d1eb      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd4:	4b33      	ldr	r3, [pc, #204]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4930      	ldr	r1, [pc, #192]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d105      	bne.n	8002bfa <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002bee:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	4a2c      	ldr	r2, [pc, #176]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfa:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d210      	bcs.n	8002c2a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 020f 	bic.w	r2, r3, #15
 8002c10:	4923      	ldr	r1, [pc, #140]	; (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e036      	b.n	8002c98 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	4918      	ldr	r1, [pc, #96]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4910      	ldr	r1, [pc, #64]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c68:	f000 f826 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	490c      	ldr	r1, [pc, #48]	; (8002cac <HAL_RCC_ClockConfig+0x24c>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
 8002c84:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <HAL_RCC_ClockConfig+0x250>)
 8002c86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <HAL_RCC_ClockConfig+0x254>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd ff33 	bl	8000af8 <HAL_InitTick>
 8002c92:	4603      	mov	r3, r0
 8002c94:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40022000 	.word	0x40022000
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	04c4b400 	.word	0x04c4b400
 8002cac:	0800832c 	.word	0x0800832c
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	20000004 	.word	0x20000004

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	; 0x24
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc6:	4b3e      	ldr	r3, [pc, #248]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cd0:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x34>
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d121      	bne.n	8002d2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d11e      	bne.n	8002d2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cec:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cf8:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e005      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d08:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d14:	4a2b      	ldr	r2, [pc, #172]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d102      	bne.n	8002d36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	e004      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d3c:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8002d3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d134      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d003      	beq.n	8002d5e <HAL_RCC_GetSysClockFreq+0xa6>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d003      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0xac>
 8002d5c:	e005      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d60:	617b      	str	r3, [r7, #20]
      break;
 8002d62:	e005      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8002d66:	617b      	str	r3, [r7, #20]
      break;
 8002d68:	e002      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	617b      	str	r3, [r7, #20]
      break;
 8002d6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d70:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	fb03 f202 	mul.w	r2, r3, r2
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	0e5b      	lsrs	r3, r3, #25
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	3301      	adds	r3, #1
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002db0:	69bb      	ldr	r3, [r7, #24]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	08008344 	.word	0x08008344
 8002dc8:	00f42400 	.word	0x00f42400
 8002dcc:	007a1200 	.word	0x007a1200

08002dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000000 	.word	0x20000000

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dec:	f7ff fff0 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0a1b      	lsrs	r3, r3, #8
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4904      	ldr	r1, [pc, #16]	; (8002e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	0800833c 	.word	0x0800833c

08002e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e18:	f7ff ffda 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	0adb      	lsrs	r3, r3, #11
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4904      	ldr	r1, [pc, #16]	; (8002e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	0800833c 	.word	0x0800833c

08002e40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0203 	and.w	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_RCC_GetClockConfig+0x5c>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	08db      	lsrs	r3, r3, #3
 8002e7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e82:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <HAL_RCC_GetClockConfig+0x60>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	601a      	str	r2, [r3, #0]
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40022000 	.word	0x40022000

08002ea4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002eac:	2300      	movs	r3, #0
 8002eae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eb0:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ebc:	f7ff f8c6 	bl	800204c <HAL_PWREx_GetVoltageRange>
 8002ec0:	6178      	str	r0, [r7, #20]
 8002ec2:	e014      	b.n	8002eee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	4a21      	ldr	r2, [pc, #132]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ece:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002edc:	f7ff f8b6 	bl	800204c <HAL_PWREx_GetVoltageRange>
 8002ee0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	4a1a      	ldr	r2, [pc, #104]	; (8002f50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef4:	d10b      	bne.n	8002f0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b80      	cmp	r3, #128	; 0x80
 8002efa:	d913      	bls.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2ba0      	cmp	r3, #160	; 0xa0
 8002f00:	d902      	bls.n	8002f08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f02:	2302      	movs	r3, #2
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	e00d      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f08:	2301      	movs	r3, #1
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e00a      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b7f      	cmp	r3, #127	; 0x7f
 8002f12:	d902      	bls.n	8002f1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f14:	2302      	movs	r3, #2
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	e004      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b70      	cmp	r3, #112	; 0x70
 8002f1e:	d101      	bne.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f20:	2301      	movs	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 020f 	bic.w	r2, r3, #15
 8002f2c:	4909      	ldr	r1, [pc, #36]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40022000 	.word	0x40022000

08002f58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002f62:	4b2d      	ldr	r3, [pc, #180]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d118      	bne.n	8002fa0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d107      	bne.n	8002f8a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f7a:	4b27      	ldr	r3, [pc, #156]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e005      	b.n	8002f96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f8a:	4b23      	ldr	r3, [pc, #140]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f96:	4a21      	ldr	r2, [pc, #132]	; (800301c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d003      	beq.n	8002fb8 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d003      	beq.n	8002fbe <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002fb6:	e005      	b.n	8002fc4 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002fba:	613b      	str	r3, [r7, #16]
    break;
 8002fbc:	e005      	b.n	8002fca <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002fbe:	4b19      	ldr	r3, [pc, #100]	; (8003024 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002fc0:	613b      	str	r3, [r7, #16]
    break;
 8002fc2:	e002      	b.n	8002fca <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	613b      	str	r3, [r7, #16]
    break;
 8002fc8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	fb03 f202 	mul.w	r2, r3, r2
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fee:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	0e5b      	lsrs	r3, r3, #25
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800300a:	683b      	ldr	r3, [r7, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40021000 	.word	0x40021000
 800301c:	08008344 	.word	0x08008344
 8003020:	00f42400 	.word	0x00f42400
 8003024:	007a1200 	.word	0x007a1200

08003028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003030:	2300      	movs	r3, #0
 8003032:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003034:	2300      	movs	r3, #0
 8003036:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003040:	2b00      	cmp	r3, #0
 8003042:	d040      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003048:	2b80      	cmp	r3, #128	; 0x80
 800304a:	d02a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d825      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003050:	2b60      	cmp	r3, #96	; 0x60
 8003052:	d026      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003054:	2b60      	cmp	r3, #96	; 0x60
 8003056:	d821      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d006      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d81d      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d009      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003064:	2b20      	cmp	r3, #32
 8003066:	d010      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003068:	e018      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800306a:	4b89      	ldr	r3, [pc, #548]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	4a88      	ldr	r2, [pc, #544]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003076:	e015      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fb02 	bl	8003688 <RCCEx_PLLSAI1_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003088:	e00c      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3320      	adds	r3, #32
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fbed 	bl	8003870 <RCCEx_PLLSAI2_Config>
 8003096:	4603      	mov	r3, r0
 8003098:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800309a:	e003      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	74fb      	strb	r3, [r7, #19]
      break;
 80030a0:	e000      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80030a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10b      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030aa:	4b79      	ldr	r3, [pc, #484]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030b0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b8:	4975      	ldr	r1, [pc, #468]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80030c0:	e001      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d047      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030da:	d030      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80030dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e0:	d82a      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e6:	d02a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80030e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ec:	d824      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f2:	d008      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80030f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f8:	d81e      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80030fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003102:	d010      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003104:	e018      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003106:	4b62      	ldr	r3, [pc, #392]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	4a61      	ldr	r2, [pc, #388]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003112:	e015      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3304      	adds	r3, #4
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fab4 	bl	8003688 <RCCEx_PLLSAI1_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003124:	e00c      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3320      	adds	r3, #32
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fb9f 	bl	8003870 <RCCEx_PLLSAI2_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003136:	e003      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	74fb      	strb	r3, [r7, #19]
      break;
 800313c:	e000      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800313e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003140:	7cfb      	ldrb	r3, [r7, #19]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003146:	4b52      	ldr	r3, [pc, #328]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003148:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800314c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	494e      	ldr	r1, [pc, #312]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800315c:	e001      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 809f 	beq.w	80032ae <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003170:	2300      	movs	r3, #0
 8003172:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003174:	4b46      	ldr	r3, [pc, #280]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003184:	2300      	movs	r3, #0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00d      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	4a40      	ldr	r2, [pc, #256]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003194:	6593      	str	r3, [r2, #88]	; 0x58
 8003196:	4b3e      	ldr	r3, [pc, #248]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a2:	2301      	movs	r3, #1
 80031a4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a6:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a3a      	ldr	r2, [pc, #232]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031b2:	f7fe f8d5 	bl	8001360 <HAL_GetTick>
 80031b6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031b8:	e009      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ba:	f7fe f8d1 	bl	8001360 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d902      	bls.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	74fb      	strb	r3, [r7, #19]
        break;
 80031cc:	e005      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ce:	4b31      	ldr	r3, [pc, #196]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ef      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80031da:	7cfb      	ldrb	r3, [r7, #19]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d15b      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031e0:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ea:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01f      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d019      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031fe:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003208:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800320a:	4b21      	ldr	r3, [pc, #132]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003210:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800321a:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800322a:	4a19      	ldr	r2, [pc, #100]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d016      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe f890 	bl	8001360 <HAL_GetTick>
 8003240:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003242:	e00b      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fe f88c 	bl	8001360 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d902      	bls.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	74fb      	strb	r3, [r7, #19]
            break;
 800325a:	e006      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0ec      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800326a:	7cfb      	ldrb	r3, [r7, #19]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10c      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003270:	4b07      	ldr	r3, [pc, #28]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	4903      	ldr	r1, [pc, #12]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003288:	e008      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	74bb      	strb	r3, [r7, #18]
 800328e:	e005      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003290:	40021000 	.word	0x40021000
 8003294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800329c:	7c7b      	ldrb	r3, [r7, #17]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4ba0      	ldr	r3, [pc, #640]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	4a9f      	ldr	r2, [pc, #636]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ba:	4b9a      	ldr	r3, [pc, #616]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c0:	f023 0203 	bic.w	r2, r3, #3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c8:	4996      	ldr	r1, [pc, #600]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032dc:	4b91      	ldr	r3, [pc, #580]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f023 020c 	bic.w	r2, r3, #12
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	498e      	ldr	r1, [pc, #568]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032fe:	4b89      	ldr	r3, [pc, #548]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	4985      	ldr	r1, [pc, #532]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003320:	4b80      	ldr	r3, [pc, #512]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332e:	497d      	ldr	r1, [pc, #500]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003342:	4b78      	ldr	r3, [pc, #480]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003350:	4974      	ldr	r1, [pc, #464]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003364:	4b6f      	ldr	r3, [pc, #444]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	496c      	ldr	r1, [pc, #432]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003386:	4b67      	ldr	r3, [pc, #412]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003394:	4963      	ldr	r1, [pc, #396]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033a8:	4b5e      	ldr	r3, [pc, #376]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b6:	495b      	ldr	r1, [pc, #364]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ca:	4b56      	ldr	r3, [pc, #344]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	4952      	ldr	r1, [pc, #328]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033ec:	4b4d      	ldr	r3, [pc, #308]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fa:	494a      	ldr	r1, [pc, #296]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800340e:	4b45      	ldr	r3, [pc, #276]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003414:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	4941      	ldr	r1, [pc, #260]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003430:	4b3c      	ldr	r3, [pc, #240]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003436:	f023 0203 	bic.w	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343e:	4939      	ldr	r1, [pc, #228]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d028      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003452:	4b34      	ldr	r3, [pc, #208]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003460:	4930      	ldr	r1, [pc, #192]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003470:	d106      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003472:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347c:	60d3      	str	r3, [r2, #12]
 800347e:	e011      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003484:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003488:	d10c      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	2101      	movs	r1, #1
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f8f9 	bl	8003688 <RCCEx_PLLSAI1_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800349a:	7cfb      	ldrb	r3, [r7, #19]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d04d      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b8:	d108      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034c0:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80034ca:	e012      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80034cc:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034d2:	4a14      	ldr	r2, [pc, #80]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ea:	490e      	ldr	r1, [pc, #56]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034fa:	d106      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a08      	ldr	r2, [pc, #32]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003506:	60d3      	str	r3, [r2, #12]
 8003508:	e020      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800350e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003512:	d109      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a02      	ldr	r2, [pc, #8]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	60d3      	str	r3, [r2, #12]
 8003520:	e014      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800352c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003530:	d10c      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3304      	adds	r3, #4
 8003536:	2101      	movs	r1, #1
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f8a5 	bl	8003688 <RCCEx_PLLSAI1_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d028      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003558:	4b4a      	ldr	r3, [pc, #296]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003566:	4947      	ldr	r1, [pc, #284]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003576:	d106      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003578:	4b42      	ldr	r3, [pc, #264]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a41      	ldr	r2, [pc, #260]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003582:	60d3      	str	r3, [r2, #12]
 8003584:	e011      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800358a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800358e:	d10c      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f876 	bl	8003688 <RCCEx_PLLSAI1_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d01e      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035b6:	4b33      	ldr	r3, [pc, #204]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c6:	492f      	ldr	r1, [pc, #188]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f851 	bl	8003688 <RCCEx_PLLSAI1_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ea:	7cfb      	ldrb	r3, [r7, #19]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00b      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003600:	4b20      	ldr	r3, [pc, #128]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003602:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003606:	f023 0204 	bic.w	r2, r3, #4
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003610:	491c      	ldr	r1, [pc, #112]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00b      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003624:	4b17      	ldr	r3, [pc, #92]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800362a:	f023 0218 	bic.w	r2, r3, #24
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	4913      	ldr	r1, [pc, #76]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d017      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003648:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800364e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003658:	490a      	ldr	r1, [pc, #40]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800366a:	d105      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a04      	ldr	r2, [pc, #16]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003676:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003678:	7cbb      	ldrb	r3, [r7, #18]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000

08003688 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003696:	4b72      	ldr	r3, [pc, #456]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00e      	beq.n	80036c0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036a2:	4b6f      	ldr	r3, [pc, #444]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0203 	and.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d103      	bne.n	80036ba <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
       ||
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d142      	bne.n	8003740 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	e03f      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d018      	beq.n	80036fa <RCCEx_PLLSAI1_Config+0x72>
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d825      	bhi.n	8003718 <RCCEx_PLLSAI1_Config+0x90>
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d002      	beq.n	80036d6 <RCCEx_PLLSAI1_Config+0x4e>
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d009      	beq.n	80036e8 <RCCEx_PLLSAI1_Config+0x60>
 80036d4:	e020      	b.n	8003718 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036d6:	4b62      	ldr	r3, [pc, #392]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11d      	bne.n	800371e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e6:	e01a      	b.n	800371e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036e8:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d116      	bne.n	8003722 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f8:	e013      	b.n	8003722 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036fa:	4b59      	ldr	r3, [pc, #356]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003706:	4b56      	ldr	r3, [pc, #344]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003716:	e006      	b.n	8003726 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e004      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800371e:	bf00      	nop
 8003720:	e002      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003726:	bf00      	nop
    }

    if(status == HAL_OK)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d108      	bne.n	8003740 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800372e:	4b4c      	ldr	r3, [pc, #304]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f023 0203 	bic.w	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4949      	ldr	r1, [pc, #292]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800373c:	4313      	orrs	r3, r2
 800373e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 8086 	bne.w	8003854 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003748:	4b45      	ldr	r3, [pc, #276]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a44      	ldr	r2, [pc, #272]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800374e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003754:	f7fd fe04 	bl	8001360 <HAL_GetTick>
 8003758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800375a:	e009      	b.n	8003770 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800375c:	f7fd fe00 	bl	8001360 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d902      	bls.n	8003770 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	73fb      	strb	r3, [r7, #15]
        break;
 800376e:	e005      	b.n	800377c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003770:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ef      	bne.n	800375c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d168      	bne.n	8003854 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d113      	bne.n	80037b0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003788:	4b35      	ldr	r3, [pc, #212]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	4b35      	ldr	r3, [pc, #212]	; (8003864 <RCCEx_PLLSAI1_Config+0x1dc>)
 800378e:	4013      	ands	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6892      	ldr	r2, [r2, #8]
 8003794:	0211      	lsls	r1, r2, #8
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68d2      	ldr	r2, [r2, #12]
 800379a:	06d2      	lsls	r2, r2, #27
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6852      	ldr	r2, [r2, #4]
 80037a2:	3a01      	subs	r2, #1
 80037a4:	0112      	lsls	r2, r2, #4
 80037a6:	430a      	orrs	r2, r1
 80037a8:	492d      	ldr	r1, [pc, #180]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	610b      	str	r3, [r1, #16]
 80037ae:	e02d      	b.n	800380c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d115      	bne.n	80037e2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b6:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	4b2b      	ldr	r3, [pc, #172]	; (8003868 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037bc:	4013      	ands	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6892      	ldr	r2, [r2, #8]
 80037c2:	0211      	lsls	r1, r2, #8
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6912      	ldr	r2, [r2, #16]
 80037c8:	0852      	lsrs	r2, r2, #1
 80037ca:	3a01      	subs	r2, #1
 80037cc:	0552      	lsls	r2, r2, #21
 80037ce:	4311      	orrs	r1, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6852      	ldr	r2, [r2, #4]
 80037d4:	3a01      	subs	r2, #1
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	430a      	orrs	r2, r1
 80037da:	4921      	ldr	r1, [pc, #132]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	610b      	str	r3, [r1, #16]
 80037e0:	e014      	b.n	800380c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e2:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	4b21      	ldr	r3, [pc, #132]	; (800386c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6892      	ldr	r2, [r2, #8]
 80037ee:	0211      	lsls	r1, r2, #8
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6952      	ldr	r2, [r2, #20]
 80037f4:	0852      	lsrs	r2, r2, #1
 80037f6:	3a01      	subs	r2, #1
 80037f8:	0652      	lsls	r2, r2, #25
 80037fa:	4311      	orrs	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6852      	ldr	r2, [r2, #4]
 8003800:	3a01      	subs	r2, #1
 8003802:	0112      	lsls	r2, r2, #4
 8003804:	430a      	orrs	r2, r1
 8003806:	4916      	ldr	r1, [pc, #88]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003808:	4313      	orrs	r3, r2
 800380a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a13      	ldr	r2, [pc, #76]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003812:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fd fda2 	bl	8001360 <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800381e:	e009      	b.n	8003834 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003820:	f7fd fd9e 	bl	8001360 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d902      	bls.n	8003834 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	73fb      	strb	r3, [r7, #15]
          break;
 8003832:	e005      	b.n	8003840 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ef      	beq.n	8003820 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	4904      	ldr	r1, [pc, #16]	; (8003860 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003850:	4313      	orrs	r3, r2
 8003852:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	07ff800f 	.word	0x07ff800f
 8003868:	ff9f800f 	.word	0xff9f800f
 800386c:	f9ff800f 	.word	0xf9ff800f

08003870 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800387e:	4b72      	ldr	r3, [pc, #456]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00e      	beq.n	80038a8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800388a:	4b6f      	ldr	r3, [pc, #444]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0203 	and.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d103      	bne.n	80038a2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
       ||
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d142      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
 80038a6:	e03f      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d018      	beq.n	80038e2 <RCCEx_PLLSAI2_Config+0x72>
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d825      	bhi.n	8003900 <RCCEx_PLLSAI2_Config+0x90>
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d002      	beq.n	80038be <RCCEx_PLLSAI2_Config+0x4e>
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d009      	beq.n	80038d0 <RCCEx_PLLSAI2_Config+0x60>
 80038bc:	e020      	b.n	8003900 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038be:	4b62      	ldr	r3, [pc, #392]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d11d      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ce:	e01a      	b.n	8003906 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038d0:	4b5d      	ldr	r3, [pc, #372]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d116      	bne.n	800390a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e0:	e013      	b.n	800390a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038e2:	4b59      	ldr	r3, [pc, #356]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10f      	bne.n	800390e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ee:	4b56      	ldr	r3, [pc, #344]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038fe:	e006      	b.n	800390e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      break;
 8003904:	e004      	b.n	8003910 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003906:	bf00      	nop
 8003908:	e002      	b.n	8003910 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800390e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d108      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003916:	4b4c      	ldr	r3, [pc, #304]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4949      	ldr	r1, [pc, #292]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003924:	4313      	orrs	r3, r2
 8003926:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 8086 	bne.w	8003a3c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003930:	4b45      	ldr	r3, [pc, #276]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a44      	ldr	r2, [pc, #272]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393c:	f7fd fd10 	bl	8001360 <HAL_GetTick>
 8003940:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003942:	e009      	b.n	8003958 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003944:	f7fd fd0c 	bl	8001360 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d902      	bls.n	8003958 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	73fb      	strb	r3, [r7, #15]
        break;
 8003956:	e005      	b.n	8003964 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003958:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ef      	bne.n	8003944 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d168      	bne.n	8003a3c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d113      	bne.n	8003998 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	4b35      	ldr	r3, [pc, #212]	; (8003a4c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003976:	4013      	ands	r3, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6892      	ldr	r2, [r2, #8]
 800397c:	0211      	lsls	r1, r2, #8
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68d2      	ldr	r2, [r2, #12]
 8003982:	06d2      	lsls	r2, r2, #27
 8003984:	4311      	orrs	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6852      	ldr	r2, [r2, #4]
 800398a:	3a01      	subs	r2, #1
 800398c:	0112      	lsls	r2, r2, #4
 800398e:	430a      	orrs	r2, r1
 8003990:	492d      	ldr	r1, [pc, #180]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003992:	4313      	orrs	r3, r2
 8003994:	614b      	str	r3, [r1, #20]
 8003996:	e02d      	b.n	80039f4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d115      	bne.n	80039ca <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800399e:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	4b2b      	ldr	r3, [pc, #172]	; (8003a50 <RCCEx_PLLSAI2_Config+0x1e0>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6892      	ldr	r2, [r2, #8]
 80039aa:	0211      	lsls	r1, r2, #8
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6912      	ldr	r2, [r2, #16]
 80039b0:	0852      	lsrs	r2, r2, #1
 80039b2:	3a01      	subs	r2, #1
 80039b4:	0552      	lsls	r2, r2, #21
 80039b6:	4311      	orrs	r1, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6852      	ldr	r2, [r2, #4]
 80039bc:	3a01      	subs	r2, #1
 80039be:	0112      	lsls	r2, r2, #4
 80039c0:	430a      	orrs	r2, r1
 80039c2:	4921      	ldr	r1, [pc, #132]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	614b      	str	r3, [r1, #20]
 80039c8:	e014      	b.n	80039f4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039ca:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <RCCEx_PLLSAI2_Config+0x1e4>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6892      	ldr	r2, [r2, #8]
 80039d6:	0211      	lsls	r1, r2, #8
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6952      	ldr	r2, [r2, #20]
 80039dc:	0852      	lsrs	r2, r2, #1
 80039de:	3a01      	subs	r2, #1
 80039e0:	0652      	lsls	r2, r2, #25
 80039e2:	4311      	orrs	r1, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6852      	ldr	r2, [r2, #4]
 80039e8:	3a01      	subs	r2, #1
 80039ea:	0112      	lsls	r2, r2, #4
 80039ec:	430a      	orrs	r2, r1
 80039ee:	4916      	ldr	r1, [pc, #88]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fd fcae 	bl	8001360 <HAL_GetTick>
 8003a04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a06:	e009      	b.n	8003a1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a08:	f7fd fcaa 	bl	8001360 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d902      	bls.n	8003a1c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	73fb      	strb	r3, [r7, #15]
          break;
 8003a1a:	e005      	b.n	8003a28 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ef      	beq.n	8003a08 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	4904      	ldr	r1, [pc, #16]	; (8003a48 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	07ff800f 	.word	0x07ff800f
 8003a50:	ff9f800f 	.word	0xff9f800f
 8003a54:	f9ff800f 	.word	0xf9ff800f

08003a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e095      	b.n	8003b96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d108      	bne.n	8003a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a7a:	d009      	beq.n	8003a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	61da      	str	r2, [r3, #28]
 8003a82:	e005      	b.n	8003a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fc ff76 	bl	800099c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ad0:	d902      	bls.n	8003ad8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	e002      	b.n	8003ade <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ae6:	d007      	beq.n	8003af8 <HAL_SPI_Init+0xa0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003af0:	d002      	beq.n	8003af8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3a:	ea42 0103 	orr.w	r1, r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	0c1b      	lsrs	r3, r3, #16
 8003b54:	f003 0204 	and.w	r2, r3, #4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b74:	ea42 0103 	orr.w	r1, r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e049      	b.n	8003c44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f841 	bl	8003c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4610      	mov	r0, r2
 8003bde:	f000 f9f7 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d001      	beq.n	8003c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e04f      	b.n	8003d18 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a23      	ldr	r2, [pc, #140]	; (8003d24 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01d      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0x76>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca2:	d018      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0x76>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1f      	ldr	r2, [pc, #124]	; (8003d28 <HAL_TIM_Base_Start_IT+0xc8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0x76>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <HAL_TIM_Base_Start_IT+0xcc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0x76>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d009      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0x76>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d004      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0x76>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a19      	ldr	r2, [pc, #100]	; (8003d38 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d115      	bne.n	8003d02 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <HAL_TIM_Base_Start_IT+0xdc>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b06      	cmp	r3, #6
 8003ce6:	d015      	beq.n	8003d14 <HAL_TIM_Base_Start_IT+0xb4>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cee:	d011      	beq.n	8003d14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d00:	e008      	b.n	8003d14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0201 	orr.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	e000      	b.n	8003d16 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800
 8003d30:	40000c00 	.word	0x40000c00
 8003d34:	40013400 	.word	0x40013400
 8003d38:	40014000 	.word	0x40014000
 8003d3c:	00010007 	.word	0x00010007

08003d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d122      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d11b      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0202 	mvn.w	r2, #2
 8003d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f905 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003d88:	e005      	b.n	8003d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f8f7 	bl	8003f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f908 	bl	8003fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d122      	bne.n	8003df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d11b      	bne.n	8003df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0204 	mvn.w	r2, #4
 8003dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8db 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8cd 	bl	8003f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f8de 	bl	8003fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d122      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d11b      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0208 	mvn.w	r2, #8
 8003e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2204      	movs	r2, #4
 8003e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8b1 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8a3 	bl	8003f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f8b4 	bl	8003fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d122      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d11b      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0210 	mvn.w	r2, #16
 8003e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f887 	bl	8003f92 <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f879 	bl	8003f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f88a 	bl	8003fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d107      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0201 	mvn.w	r2, #1
 8003ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fd f9c8 	bl	8001254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b80      	cmp	r3, #128	; 0x80
 8003ed0:	d10e      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003edc:	2b80      	cmp	r3, #128	; 0x80
 8003ede:	d107      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f914 	bl	8004118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efe:	d10e      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	2b80      	cmp	r3, #128	; 0x80
 8003f0c:	d107      	bne.n	8003f1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f907 	bl	800412c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d10e      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d107      	bne.n	8003f4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f838 	bl	8003fba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d10e      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d107      	bne.n	8003f76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f06f 0220 	mvn.w	r2, #32
 8003f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f8c7 	bl	8004104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
	...

08003fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a40      	ldr	r2, [pc, #256]	; (80040e4 <TIM_Base_SetConfig+0x114>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fee:	d00f      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3d      	ldr	r2, [pc, #244]	; (80040e8 <TIM_Base_SetConfig+0x118>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3c      	ldr	r2, [pc, #240]	; (80040ec <TIM_Base_SetConfig+0x11c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d007      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a3b      	ldr	r2, [pc, #236]	; (80040f0 <TIM_Base_SetConfig+0x120>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3a      	ldr	r2, [pc, #232]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d108      	bne.n	8004022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2f      	ldr	r2, [pc, #188]	; (80040e4 <TIM_Base_SetConfig+0x114>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d01f      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d01b      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2c      	ldr	r2, [pc, #176]	; (80040e8 <TIM_Base_SetConfig+0x118>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d017      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2b      	ldr	r2, [pc, #172]	; (80040ec <TIM_Base_SetConfig+0x11c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <TIM_Base_SetConfig+0x120>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00f      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a29      	ldr	r2, [pc, #164]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00b      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a28      	ldr	r2, [pc, #160]	; (80040f8 <TIM_Base_SetConfig+0x128>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d007      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a27      	ldr	r2, [pc, #156]	; (80040fc <TIM_Base_SetConfig+0x12c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d003      	beq.n	800406a <TIM_Base_SetConfig+0x9a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a26      	ldr	r2, [pc, #152]	; (8004100 <TIM_Base_SetConfig+0x130>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d108      	bne.n	800407c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a10      	ldr	r2, [pc, #64]	; (80040e4 <TIM_Base_SetConfig+0x114>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00f      	beq.n	80040c8 <TIM_Base_SetConfig+0xf8>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <TIM_Base_SetConfig+0x124>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00b      	beq.n	80040c8 <TIM_Base_SetConfig+0xf8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a11      	ldr	r2, [pc, #68]	; (80040f8 <TIM_Base_SetConfig+0x128>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d007      	beq.n	80040c8 <TIM_Base_SetConfig+0xf8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a10      	ldr	r2, [pc, #64]	; (80040fc <TIM_Base_SetConfig+0x12c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_Base_SetConfig+0xf8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a0f      	ldr	r2, [pc, #60]	; (8004100 <TIM_Base_SetConfig+0x130>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d103      	bne.n	80040d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	615a      	str	r2, [r3, #20]
}
 80040d6:	bf00      	nop
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40012c00 	.word	0x40012c00
 80040e8:	40000400 	.word	0x40000400
 80040ec:	40000800 	.word	0x40000800
 80040f0:	40000c00 	.word	0x40000c00
 80040f4:	40013400 	.word	0x40013400
 80040f8:	40014000 	.word	0x40014000
 80040fc:	40014400 	.word	0x40014400
 8004100:	40014800 	.word	0x40014800

08004104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e042      	b.n	80041d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fc fb73 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2224      	movs	r2, #36	; 0x24
 800416e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0201 	bic.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f960 	bl	8004448 <UART_SetConfig>
 8004188:	4603      	mov	r3, r0
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e022      	b.n	80041d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fc56 	bl	8004a4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fcdd 	bl	8004b90 <UART_CheckIdleState>
 80041d6:	4603      	mov	r3, r0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	f040 8084 	bne.w	8004304 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_UART_Transmit+0x28>
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e07c      	b.n	8004306 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_UART_Transmit+0x3a>
 8004216:	2302      	movs	r3, #2
 8004218:	e075      	b.n	8004306 <HAL_UART_Transmit+0x126>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2221      	movs	r2, #33	; 0x21
 800422e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004232:	f7fd f895 	bl	8001360 <HAL_GetTick>
 8004236:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	88fa      	ldrh	r2, [r7, #6]
 800423c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	88fa      	ldrh	r2, [r7, #6]
 8004244:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004250:	d108      	bne.n	8004264 <HAL_UART_Transmit+0x84>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d104      	bne.n	8004264 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	e003      	b.n	800426c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004268:	2300      	movs	r3, #0
 800426a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004274:	e02d      	b.n	80042d2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2200      	movs	r2, #0
 800427e:	2180      	movs	r1, #128	; 0x80
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fccd 	bl	8004c20 <UART_WaitOnFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e03a      	b.n	8004306 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10b      	bne.n	80042ae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	881a      	ldrh	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a2:	b292      	uxth	r2, r2
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	3302      	adds	r3, #2
 80042aa:	61bb      	str	r3, [r7, #24]
 80042ac:	e008      	b.n	80042c0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	b292      	uxth	r2, r2
 80042b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3301      	adds	r3, #1
 80042be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1cb      	bne.n	8004276 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2200      	movs	r2, #0
 80042e6:	2140      	movs	r1, #64	; 0x40
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fc99 	bl	8004c20 <UART_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e006      	b.n	8004306 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	e000      	b.n	8004306 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
  }
}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004324:	2b20      	cmp	r3, #32
 8004326:	d170      	bne.n	800440a <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_UART_Receive_DMA+0x24>
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e069      	b.n	800440c <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_UART_Receive_DMA+0x36>
 8004342:	2302      	movs	r3, #2
 8004344:	e062      	b.n	800440c <HAL_UART_Receive_DMA+0xfc>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	88fa      	ldrh	r2, [r7, #6]
 8004358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2222      	movs	r2, #34	; 0x22
 8004368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004370:	2b00      	cmp	r3, #0
 8004372:	d02c      	beq.n	80043ce <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004378:	4a26      	ldr	r2, [pc, #152]	; (8004414 <HAL_UART_Receive_DMA+0x104>)
 800437a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004380:	4a25      	ldr	r2, [pc, #148]	; (8004418 <HAL_UART_Receive_DMA+0x108>)
 8004382:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004388:	4a24      	ldr	r2, [pc, #144]	; (800441c <HAL_UART_Receive_DMA+0x10c>)
 800438a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004390:	2200      	movs	r2, #0
 8004392:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3324      	adds	r3, #36	; 0x24
 800439e:	4619      	mov	r1, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	461a      	mov	r2, r3
 80043a6:	88fb      	ldrh	r3, [r7, #6]
 80043a8:	f7fd f994 	bl	80016d4 <HAL_DMA_Start_IT>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00d      	beq.n	80043ce <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2210      	movs	r2, #16
 80043b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e01e      	b.n	800440c <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e4:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004404:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
  }
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	08004da3 	.word	0x08004da3
 8004418:	08004e0d 	.word	0x08004e0d
 800441c:	08004e29 	.word	0x08004e29

08004420 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800444c:	b08c      	sub	sp, #48	; 0x30
 800444e:	af00      	add	r7, sp, #0
 8004450:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	431a      	orrs	r2, r3
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	431a      	orrs	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	4313      	orrs	r3, r2
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004476:	4313      	orrs	r3, r2
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4baa      	ldr	r3, [pc, #680]	; (800472c <UART_SetConfig+0x2e4>)
 8004482:	4013      	ands	r3, r2
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800448a:	430b      	orrs	r3, r1
 800448c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4aa0      	ldr	r2, [pc, #640]	; (8004730 <UART_SetConfig+0x2e8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d004      	beq.n	80044be <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ba:	4313      	orrs	r3, r2
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80044c8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044d2:	430b      	orrs	r3, r1
 80044d4:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	f023 010f 	bic.w	r1, r3, #15
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a90      	ldr	r2, [pc, #576]	; (8004734 <UART_SetConfig+0x2ec>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d126      	bne.n	8004544 <UART_SetConfig+0xfc>
 80044f6:	4b90      	ldr	r3, [pc, #576]	; (8004738 <UART_SetConfig+0x2f0>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b03      	cmp	r3, #3
 8004502:	d81b      	bhi.n	800453c <UART_SetConfig+0xf4>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0xc4>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	0800451d 	.word	0x0800451d
 8004510:	0800452d 	.word	0x0800452d
 8004514:	08004525 	.word	0x08004525
 8004518:	08004535 	.word	0x08004535
 800451c:	2301      	movs	r3, #1
 800451e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004522:	e116      	b.n	8004752 <UART_SetConfig+0x30a>
 8004524:	2302      	movs	r3, #2
 8004526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800452a:	e112      	b.n	8004752 <UART_SetConfig+0x30a>
 800452c:	2304      	movs	r3, #4
 800452e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004532:	e10e      	b.n	8004752 <UART_SetConfig+0x30a>
 8004534:	2308      	movs	r3, #8
 8004536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800453a:	e10a      	b.n	8004752 <UART_SetConfig+0x30a>
 800453c:	2310      	movs	r3, #16
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004542:	e106      	b.n	8004752 <UART_SetConfig+0x30a>
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a7c      	ldr	r2, [pc, #496]	; (800473c <UART_SetConfig+0x2f4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d138      	bne.n	80045c0 <UART_SetConfig+0x178>
 800454e:	4b7a      	ldr	r3, [pc, #488]	; (8004738 <UART_SetConfig+0x2f0>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b0c      	cmp	r3, #12
 800455a:	d82d      	bhi.n	80045b8 <UART_SetConfig+0x170>
 800455c:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x11c>)
 800455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004599 	.word	0x08004599
 8004568:	080045b9 	.word	0x080045b9
 800456c:	080045b9 	.word	0x080045b9
 8004570:	080045b9 	.word	0x080045b9
 8004574:	080045a9 	.word	0x080045a9
 8004578:	080045b9 	.word	0x080045b9
 800457c:	080045b9 	.word	0x080045b9
 8004580:	080045b9 	.word	0x080045b9
 8004584:	080045a1 	.word	0x080045a1
 8004588:	080045b9 	.word	0x080045b9
 800458c:	080045b9 	.word	0x080045b9
 8004590:	080045b9 	.word	0x080045b9
 8004594:	080045b1 	.word	0x080045b1
 8004598:	2300      	movs	r3, #0
 800459a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800459e:	e0d8      	b.n	8004752 <UART_SetConfig+0x30a>
 80045a0:	2302      	movs	r3, #2
 80045a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a6:	e0d4      	b.n	8004752 <UART_SetConfig+0x30a>
 80045a8:	2304      	movs	r3, #4
 80045aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ae:	e0d0      	b.n	8004752 <UART_SetConfig+0x30a>
 80045b0:	2308      	movs	r3, #8
 80045b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045b6:	e0cc      	b.n	8004752 <UART_SetConfig+0x30a>
 80045b8:	2310      	movs	r3, #16
 80045ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045be:	e0c8      	b.n	8004752 <UART_SetConfig+0x30a>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a5e      	ldr	r2, [pc, #376]	; (8004740 <UART_SetConfig+0x2f8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d125      	bne.n	8004616 <UART_SetConfig+0x1ce>
 80045ca:	4b5b      	ldr	r3, [pc, #364]	; (8004738 <UART_SetConfig+0x2f0>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045d4:	2b30      	cmp	r3, #48	; 0x30
 80045d6:	d016      	beq.n	8004606 <UART_SetConfig+0x1be>
 80045d8:	2b30      	cmp	r3, #48	; 0x30
 80045da:	d818      	bhi.n	800460e <UART_SetConfig+0x1c6>
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d00a      	beq.n	80045f6 <UART_SetConfig+0x1ae>
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d814      	bhi.n	800460e <UART_SetConfig+0x1c6>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <UART_SetConfig+0x1a6>
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d008      	beq.n	80045fe <UART_SetConfig+0x1b6>
 80045ec:	e00f      	b.n	800460e <UART_SetConfig+0x1c6>
 80045ee:	2300      	movs	r3, #0
 80045f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045f4:	e0ad      	b.n	8004752 <UART_SetConfig+0x30a>
 80045f6:	2302      	movs	r3, #2
 80045f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045fc:	e0a9      	b.n	8004752 <UART_SetConfig+0x30a>
 80045fe:	2304      	movs	r3, #4
 8004600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004604:	e0a5      	b.n	8004752 <UART_SetConfig+0x30a>
 8004606:	2308      	movs	r3, #8
 8004608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800460c:	e0a1      	b.n	8004752 <UART_SetConfig+0x30a>
 800460e:	2310      	movs	r3, #16
 8004610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004614:	e09d      	b.n	8004752 <UART_SetConfig+0x30a>
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a4a      	ldr	r2, [pc, #296]	; (8004744 <UART_SetConfig+0x2fc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d125      	bne.n	800466c <UART_SetConfig+0x224>
 8004620:	4b45      	ldr	r3, [pc, #276]	; (8004738 <UART_SetConfig+0x2f0>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800462a:	2bc0      	cmp	r3, #192	; 0xc0
 800462c:	d016      	beq.n	800465c <UART_SetConfig+0x214>
 800462e:	2bc0      	cmp	r3, #192	; 0xc0
 8004630:	d818      	bhi.n	8004664 <UART_SetConfig+0x21c>
 8004632:	2b80      	cmp	r3, #128	; 0x80
 8004634:	d00a      	beq.n	800464c <UART_SetConfig+0x204>
 8004636:	2b80      	cmp	r3, #128	; 0x80
 8004638:	d814      	bhi.n	8004664 <UART_SetConfig+0x21c>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <UART_SetConfig+0x1fc>
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	d008      	beq.n	8004654 <UART_SetConfig+0x20c>
 8004642:	e00f      	b.n	8004664 <UART_SetConfig+0x21c>
 8004644:	2300      	movs	r3, #0
 8004646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800464a:	e082      	b.n	8004752 <UART_SetConfig+0x30a>
 800464c:	2302      	movs	r3, #2
 800464e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004652:	e07e      	b.n	8004752 <UART_SetConfig+0x30a>
 8004654:	2304      	movs	r3, #4
 8004656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800465a:	e07a      	b.n	8004752 <UART_SetConfig+0x30a>
 800465c:	2308      	movs	r3, #8
 800465e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004662:	e076      	b.n	8004752 <UART_SetConfig+0x30a>
 8004664:	2310      	movs	r3, #16
 8004666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800466a:	e072      	b.n	8004752 <UART_SetConfig+0x30a>
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a35      	ldr	r2, [pc, #212]	; (8004748 <UART_SetConfig+0x300>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d12a      	bne.n	80046cc <UART_SetConfig+0x284>
 8004676:	4b30      	ldr	r3, [pc, #192]	; (8004738 <UART_SetConfig+0x2f0>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004680:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004684:	d01a      	beq.n	80046bc <UART_SetConfig+0x274>
 8004686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468a:	d81b      	bhi.n	80046c4 <UART_SetConfig+0x27c>
 800468c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004690:	d00c      	beq.n	80046ac <UART_SetConfig+0x264>
 8004692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004696:	d815      	bhi.n	80046c4 <UART_SetConfig+0x27c>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <UART_SetConfig+0x25c>
 800469c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a0:	d008      	beq.n	80046b4 <UART_SetConfig+0x26c>
 80046a2:	e00f      	b.n	80046c4 <UART_SetConfig+0x27c>
 80046a4:	2300      	movs	r3, #0
 80046a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046aa:	e052      	b.n	8004752 <UART_SetConfig+0x30a>
 80046ac:	2302      	movs	r3, #2
 80046ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046b2:	e04e      	b.n	8004752 <UART_SetConfig+0x30a>
 80046b4:	2304      	movs	r3, #4
 80046b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ba:	e04a      	b.n	8004752 <UART_SetConfig+0x30a>
 80046bc:	2308      	movs	r3, #8
 80046be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046c2:	e046      	b.n	8004752 <UART_SetConfig+0x30a>
 80046c4:	2310      	movs	r3, #16
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ca:	e042      	b.n	8004752 <UART_SetConfig+0x30a>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a17      	ldr	r2, [pc, #92]	; (8004730 <UART_SetConfig+0x2e8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d13a      	bne.n	800474c <UART_SetConfig+0x304>
 80046d6:	4b18      	ldr	r3, [pc, #96]	; (8004738 <UART_SetConfig+0x2f0>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046e4:	d01a      	beq.n	800471c <UART_SetConfig+0x2d4>
 80046e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ea:	d81b      	bhi.n	8004724 <UART_SetConfig+0x2dc>
 80046ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f0:	d00c      	beq.n	800470c <UART_SetConfig+0x2c4>
 80046f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f6:	d815      	bhi.n	8004724 <UART_SetConfig+0x2dc>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <UART_SetConfig+0x2bc>
 80046fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004700:	d008      	beq.n	8004714 <UART_SetConfig+0x2cc>
 8004702:	e00f      	b.n	8004724 <UART_SetConfig+0x2dc>
 8004704:	2300      	movs	r3, #0
 8004706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800470a:	e022      	b.n	8004752 <UART_SetConfig+0x30a>
 800470c:	2302      	movs	r3, #2
 800470e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004712:	e01e      	b.n	8004752 <UART_SetConfig+0x30a>
 8004714:	2304      	movs	r3, #4
 8004716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800471a:	e01a      	b.n	8004752 <UART_SetConfig+0x30a>
 800471c:	2308      	movs	r3, #8
 800471e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004722:	e016      	b.n	8004752 <UART_SetConfig+0x30a>
 8004724:	2310      	movs	r3, #16
 8004726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800472a:	e012      	b.n	8004752 <UART_SetConfig+0x30a>
 800472c:	cfff69f3 	.word	0xcfff69f3
 8004730:	40008000 	.word	0x40008000
 8004734:	40013800 	.word	0x40013800
 8004738:	40021000 	.word	0x40021000
 800473c:	40004400 	.word	0x40004400
 8004740:	40004800 	.word	0x40004800
 8004744:	40004c00 	.word	0x40004c00
 8004748:	40005000 	.word	0x40005000
 800474c:	2310      	movs	r3, #16
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4aae      	ldr	r2, [pc, #696]	; (8004a10 <UART_SetConfig+0x5c8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	f040 8097 	bne.w	800488c <UART_SetConfig+0x444>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800475e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004762:	2b08      	cmp	r3, #8
 8004764:	d823      	bhi.n	80047ae <UART_SetConfig+0x366>
 8004766:	a201      	add	r2, pc, #4	; (adr r2, 800476c <UART_SetConfig+0x324>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	08004791 	.word	0x08004791
 8004770:	080047af 	.word	0x080047af
 8004774:	08004799 	.word	0x08004799
 8004778:	080047af 	.word	0x080047af
 800477c:	0800479f 	.word	0x0800479f
 8004780:	080047af 	.word	0x080047af
 8004784:	080047af 	.word	0x080047af
 8004788:	080047af 	.word	0x080047af
 800478c:	080047a7 	.word	0x080047a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004790:	f7fe fb2a 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8004794:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004796:	e010      	b.n	80047ba <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004798:	4b9e      	ldr	r3, [pc, #632]	; (8004a14 <UART_SetConfig+0x5cc>)
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800479c:	e00d      	b.n	80047ba <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800479e:	f7fe fa8b 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 80047a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047a4:	e009      	b.n	80047ba <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047ac:	e005      	b.n	80047ba <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80047b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8130 	beq.w	8004a22 <UART_SetConfig+0x5da>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	4a94      	ldr	r2, [pc, #592]	; (8004a18 <UART_SetConfig+0x5d0>)
 80047c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047cc:	461a      	mov	r2, r3
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	4413      	add	r3, r2
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d305      	bcc.n	80047f2 <UART_SetConfig+0x3aa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d903      	bls.n	80047fa <UART_SetConfig+0x3b2>
      {
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047f8:	e113      	b.n	8004a22 <UART_SetConfig+0x5da>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	2200      	movs	r2, #0
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	60fa      	str	r2, [r7, #12]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	4a84      	ldr	r2, [pc, #528]	; (8004a18 <UART_SetConfig+0x5d0>)
 8004808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800480c:	b29b      	uxth	r3, r3
 800480e:	2200      	movs	r2, #0
 8004810:	603b      	str	r3, [r7, #0]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004818:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800481c:	f7fb fcf0 	bl	8000200 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4610      	mov	r0, r2
 8004826:	4619      	mov	r1, r3
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	020b      	lsls	r3, r1, #8
 8004832:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004836:	0202      	lsls	r2, r0, #8
 8004838:	6979      	ldr	r1, [r7, #20]
 800483a:	6849      	ldr	r1, [r1, #4]
 800483c:	0849      	lsrs	r1, r1, #1
 800483e:	2000      	movs	r0, #0
 8004840:	460c      	mov	r4, r1
 8004842:	4605      	mov	r5, r0
 8004844:	eb12 0804 	adds.w	r8, r2, r4
 8004848:	eb43 0905 	adc.w	r9, r3, r5
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	469a      	mov	sl, r3
 8004854:	4693      	mov	fp, r2
 8004856:	4652      	mov	r2, sl
 8004858:	465b      	mov	r3, fp
 800485a:	4640      	mov	r0, r8
 800485c:	4649      	mov	r1, r9
 800485e:	f7fb fccf 	bl	8000200 <__aeabi_uldivmod>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4613      	mov	r3, r2
 8004868:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004870:	d308      	bcc.n	8004884 <UART_SetConfig+0x43c>
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004878:	d204      	bcs.n	8004884 <UART_SetConfig+0x43c>
        {
          huart->Instance->BRR = usartdiv;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6a3a      	ldr	r2, [r7, #32]
 8004880:	60da      	str	r2, [r3, #12]
 8004882:	e0ce      	b.n	8004a22 <UART_SetConfig+0x5da>
        }
        else
        {
          ret = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800488a:	e0ca      	b.n	8004a22 <UART_SetConfig+0x5da>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004894:	d167      	bne.n	8004966 <UART_SetConfig+0x51e>
  {
    switch (clocksource)
 8004896:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800489a:	2b08      	cmp	r3, #8
 800489c:	d827      	bhi.n	80048ee <UART_SetConfig+0x4a6>
 800489e:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <UART_SetConfig+0x45c>)
 80048a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a4:	080048c9 	.word	0x080048c9
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048d9 	.word	0x080048d9
 80048b0:	080048ef 	.word	0x080048ef
 80048b4:	080048df 	.word	0x080048df
 80048b8:	080048ef 	.word	0x080048ef
 80048bc:	080048ef 	.word	0x080048ef
 80048c0:	080048ef 	.word	0x080048ef
 80048c4:	080048e7 	.word	0x080048e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c8:	f7fe fa8e 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 80048cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048ce:	e014      	b.n	80048fa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d0:	f7fe faa0 	bl	8002e14 <HAL_RCC_GetPCLK2Freq>
 80048d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048d6:	e010      	b.n	80048fa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d8:	4b4e      	ldr	r3, [pc, #312]	; (8004a14 <UART_SetConfig+0x5cc>)
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048dc:	e00d      	b.n	80048fa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048de:	f7fe f9eb 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 80048e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048e4:	e009      	b.n	80048fa <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048ec:	e005      	b.n	80048fa <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 8090 	beq.w	8004a22 <UART_SetConfig+0x5da>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	4a44      	ldr	r2, [pc, #272]	; (8004a18 <UART_SetConfig+0x5d0>)
 8004908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800490c:	461a      	mov	r2, r3
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	fbb3 f3f2 	udiv	r3, r3, r2
 8004914:	005a      	lsls	r2, r3, #1
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	085b      	lsrs	r3, r3, #1
 800491c:	441a      	add	r2, r3
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	fbb2 f3f3 	udiv	r3, r2, r3
 8004926:	b29b      	uxth	r3, r3
 8004928:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	2b0f      	cmp	r3, #15
 800492e:	d916      	bls.n	800495e <UART_SetConfig+0x516>
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004936:	d212      	bcs.n	800495e <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f023 030f 	bic.w	r3, r3, #15
 8004940:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	b29b      	uxth	r3, r3
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	b29a      	uxth	r2, r3
 800494e:	8bfb      	ldrh	r3, [r7, #30]
 8004950:	4313      	orrs	r3, r2
 8004952:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	8bfa      	ldrh	r2, [r7, #30]
 800495a:	60da      	str	r2, [r3, #12]
 800495c:	e061      	b.n	8004a22 <UART_SetConfig+0x5da>
      }
      else
      {
        ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004964:	e05d      	b.n	8004a22 <UART_SetConfig+0x5da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004966:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800496a:	2b08      	cmp	r3, #8
 800496c:	d827      	bhi.n	80049be <UART_SetConfig+0x576>
 800496e:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <UART_SetConfig+0x52c>)
 8004970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004974:	08004999 	.word	0x08004999
 8004978:	080049a1 	.word	0x080049a1
 800497c:	080049a9 	.word	0x080049a9
 8004980:	080049bf 	.word	0x080049bf
 8004984:	080049af 	.word	0x080049af
 8004988:	080049bf 	.word	0x080049bf
 800498c:	080049bf 	.word	0x080049bf
 8004990:	080049bf 	.word	0x080049bf
 8004994:	080049b7 	.word	0x080049b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004998:	f7fe fa26 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 800499c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800499e:	e014      	b.n	80049ca <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049a0:	f7fe fa38 	bl	8002e14 <HAL_RCC_GetPCLK2Freq>
 80049a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049a6:	e010      	b.n	80049ca <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a8:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <UART_SetConfig+0x5cc>)
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049ac:	e00d      	b.n	80049ca <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ae:	f7fe f983 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 80049b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049b4:	e009      	b.n	80049ca <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049bc:	e005      	b.n	80049ca <UART_SetConfig+0x582>
      default:
        pclk = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049c8:	bf00      	nop
    }

    if (pclk != 0U)
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d028      	beq.n	8004a22 <UART_SetConfig+0x5da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	4a10      	ldr	r2, [pc, #64]	; (8004a18 <UART_SetConfig+0x5d0>)
 80049d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049da:	461a      	mov	r2, r3
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	fbb3 f2f2 	udiv	r2, r3, r2
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	441a      	add	r2, r3
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	2b0f      	cmp	r3, #15
 80049fa:	d90f      	bls.n	8004a1c <UART_SetConfig+0x5d4>
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a02:	d20b      	bcs.n	8004a1c <UART_SetConfig+0x5d4>
      {
        huart->Instance->BRR = usartdiv;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6a3a      	ldr	r2, [r7, #32]
 8004a0a:	60da      	str	r2, [r3, #12]
 8004a0c:	e009      	b.n	8004a22 <UART_SetConfig+0x5da>
 8004a0e:	bf00      	nop
 8004a10:	40008000 	.word	0x40008000
 8004a14:	00f42400 	.word	0x00f42400
 8004a18:	08008374 	.word	0x08008374
      }
      else
      {
        ret = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2200      	movs	r2, #0
 8004a36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004a3e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3730      	adds	r7, #48	; 0x30
 8004a46:	46bd      	mov	sp, r7
 8004a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01a      	beq.n	8004b62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b4a:	d10a      	bne.n	8004b62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
  }
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ba0:	f7fc fbde 	bl	8001360 <HAL_GetTick>
 8004ba4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d10e      	bne.n	8004bd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f82c 	bl	8004c20 <UART_WaitOnFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e022      	b.n	8004c18 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d10e      	bne.n	8004bfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f816 	bl	8004c20 <UART_WaitOnFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e00c      	b.n	8004c18 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c30:	e062      	b.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c38:	d05e      	beq.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c3a:	f7fc fb91 	bl	8001360 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d302      	bcc.n	8004c50 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d11d      	bne.n	8004c8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c5e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0201 	bic.w	r2, r2, #1
 8004c6e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e045      	b.n	8004d18 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d02e      	beq.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca8:	d126      	bne.n	8004cf8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cc2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0201 	bic.w	r2, r2, #1
 8004cd2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e00f      	b.n	8004d18 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69da      	ldr	r2, [r3, #28]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4013      	ands	r3, r2
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d08d      	beq.n	8004c32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004d36:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004d46:	609a      	str	r2, [r3, #8]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d72:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d82:	f023 0301 	bic.w	r3, r3, #1
 8004d86:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d11f      	bne.n	8004dfe <UART_DMAReceiveCplt+0x5c>
  {
    huart->RxXferCount = 0U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dd4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0201 	bic.w	r2, r2, #1
 8004de4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7fc fa3a 	bl	8001278 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e04:	bf00      	nop
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f7ff fb00 	bl	8004420 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e20:	bf00      	nop
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e3c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e50:	2b80      	cmp	r3, #128	; 0x80
 8004e52:	d109      	bne.n	8004e68 <UART_DMAError+0x40>
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	2b21      	cmp	r3, #33	; 0x21
 8004e58:	d106      	bne.n	8004e68 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004e62:	6978      	ldr	r0, [r7, #20]
 8004e64:	f7ff ff5c 	bl	8004d20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d109      	bne.n	8004e8a <UART_DMAError+0x62>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b22      	cmp	r3, #34	; 0x22
 8004e7a:	d106      	bne.n	8004e8a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004e84:	6978      	ldr	r0, [r7, #20]
 8004e86:	f7ff ff69 	bl	8004d5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e90:	f043 0210 	orr.w	r2, r3, #16
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e9a:	6978      	ldr	r0, [r7, #20]
 8004e9c:	f7ff faca 	bl	8004434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ea0:	bf00      	nop
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_UARTEx_DisableFifoMode+0x16>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e027      	b.n	8004f0e <HAL_UARTEx_DisableFifoMode+0x66>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2224      	movs	r2, #36	; 0x24
 8004eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0201 	bic.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004eec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e02d      	b.n	8004f8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2224      	movs	r2, #36	; 0x24
 8004f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f850 	bl	8005014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e02d      	b.n	800500a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2224      	movs	r2, #36	; 0x24
 8004fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0201 	bic.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f812 	bl	8005014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005014:	b480      	push	{r7}
 8005016:	b089      	sub	sp, #36	; 0x24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800501c:	4a2d      	ldr	r2, [pc, #180]	; (80050d4 <UARTEx_SetNbDataToProcess+0xc0>)
 800501e:	f107 0314 	add.w	r3, r7, #20
 8005022:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005026:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800502a:	4a2b      	ldr	r2, [pc, #172]	; (80050d8 <UARTEx_SetNbDataToProcess+0xc4>)
 800502c:	f107 030c 	add.w	r3, r7, #12
 8005030:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005034:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800503c:	2b00      	cmp	r3, #0
 800503e:	d108      	bne.n	8005052 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005050:	e039      	b.n	80050c6 <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005052:	2308      	movs	r3, #8
 8005054:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005056:	2308      	movs	r3, #8
 8005058:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	0e5b      	lsrs	r3, r3, #25
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	0f5b      	lsrs	r3, r3, #29
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800507a:	7fbb      	ldrb	r3, [r7, #30]
 800507c:	7f3a      	ldrb	r2, [r7, #28]
 800507e:	3220      	adds	r2, #32
 8005080:	443a      	add	r2, r7
 8005082:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	7f3a      	ldrb	r2, [r7, #28]
 800508c:	3220      	adds	r2, #32
 800508e:	443a      	add	r2, r7
 8005090:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005094:	fb93 f3f2 	sdiv	r3, r3, r2
 8005098:	b29a      	uxth	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80050a0:	7ffb      	ldrb	r3, [r7, #31]
 80050a2:	7f7a      	ldrb	r2, [r7, #29]
 80050a4:	3220      	adds	r2, #32
 80050a6:	443a      	add	r2, r7
 80050a8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80050ac:	fb02 f303 	mul.w	r3, r2, r3
 80050b0:	7f7a      	ldrb	r2, [r7, #29]
 80050b2:	3220      	adds	r2, #32
 80050b4:	443a      	add	r2, r7
 80050b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80050ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80050be:	b29a      	uxth	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050c6:	bf00      	nop
 80050c8:	3724      	adds	r7, #36	; 0x24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	080082fc 	.word	0x080082fc
 80050d8:	08008304 	.word	0x08008304

080050dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050dc:	b084      	sub	sp, #16
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	f107 001c 	add.w	r0, r7, #28
 80050ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d122      	bne.n	800513a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800511c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511e:	2b01      	cmp	r3, #1
 8005120:	d105      	bne.n	800512e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fa30 	bl	8005594 <USB_CoreReset>
 8005134:	4603      	mov	r3, r0
 8005136:	73fb      	strb	r3, [r7, #15]
 8005138:	e01a      	b.n	8005170 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fa24 	bl	8005594 <USB_CoreReset>
 800514c:	4603      	mov	r3, r0
 800514e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
 8005162:	e005      	b.n	8005170 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8005170:	7bfb      	ldrb	r3, [r7, #15]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800517c:	b004      	add	sp, #16
 800517e:	4770      	bx	lr

08005180 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f023 0201 	bic.w	r2, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	460b      	mov	r3, r1
 80051ac:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d106      	bne.n	80051ce <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	e00b      	b.n	80051e6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d106      	bne.n	80051e2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	60da      	str	r2, [r3, #12]
 80051e0:	e001      	b.n	80051e6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e003      	b.n	80051ee <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80051e6:	2032      	movs	r0, #50	; 0x32
 80051e8:	f7fc f8c6 	bl	8001378 <HAL_Delay>

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051f8:	b084      	sub	sp, #16
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b086      	sub	sp, #24
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	e009      	b.n	800522c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	3340      	adds	r3, #64	; 0x40
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	2200      	movs	r2, #0
 8005224:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	3301      	adds	r3, #1
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b0e      	cmp	r3, #14
 8005230:	d9f2      	bls.n	8005218 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d11c      	bne.n	8005272 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005246:	f043 0302 	orr.w	r3, r3, #2
 800524a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e005      	b.n	800527e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005284:	461a      	mov	r2, r3
 8005286:	2300      	movs	r3, #0
 8005288:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005290:	4619      	mov	r1, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005298:	461a      	mov	r2, r3
 800529a:	680b      	ldr	r3, [r1, #0]
 800529c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800529e:	2103      	movs	r1, #3
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f93d 	bl	8005520 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052a6:	2110      	movs	r1, #16
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f8f1 	bl	8005490 <USB_FlushTxFifo>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f90f 	bl	80054dc <USB_FlushRxFifo>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	461a      	mov	r2, r3
 80052d0:	2300      	movs	r3, #0
 80052d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052da:	461a      	mov	r2, r3
 80052dc:	2300      	movs	r3, #0
 80052de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e6:	461a      	mov	r2, r3
 80052e8:	2300      	movs	r3, #0
 80052ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ec:	2300      	movs	r3, #0
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	e043      	b.n	800537a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005308:	d118      	bne.n	800533c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10a      	bne.n	8005326 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531c:	461a      	mov	r2, r3
 800531e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e013      	b.n	800534e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	461a      	mov	r2, r3
 8005334:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e008      	b.n	800534e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005348:	461a      	mov	r2, r3
 800534a:	2300      	movs	r3, #0
 800534c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	461a      	mov	r2, r3
 800535c:	2300      	movs	r3, #0
 800535e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536c:	461a      	mov	r2, r3
 800536e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005372:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	3301      	adds	r3, #1
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	429a      	cmp	r2, r3
 8005380:	d3b7      	bcc.n	80052f2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005382:	2300      	movs	r3, #0
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	e043      	b.n	8005410 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800539a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539e:	d118      	bne.n	80053d2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b2:	461a      	mov	r2, r3
 80053b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	e013      	b.n	80053e4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c8:	461a      	mov	r2, r3
 80053ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	e008      	b.n	80053e4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053de:	461a      	mov	r2, r3
 80053e0:	2300      	movs	r3, #0
 80053e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f0:	461a      	mov	r2, r3
 80053f2:	2300      	movs	r3, #0
 80053f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005402:	461a      	mov	r2, r3
 8005404:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005408:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	3301      	adds	r3, #1
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	429a      	cmp	r2, r3
 8005416:	d3b7      	bcc.n	8005388 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800542a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005438:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f043 0210 	orr.w	r2, r3, #16
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	4b10      	ldr	r3, [pc, #64]	; (800548c <USB_DevInit+0x294>)
 800544c:	4313      	orrs	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f043 0208 	orr.w	r2, r3, #8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005466:	2b01      	cmp	r3, #1
 8005468:	d107      	bne.n	800547a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005472:	f043 0304 	orr.w	r3, r3, #4
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800547a:	7dfb      	ldrb	r3, [r7, #23]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005486:	b004      	add	sp, #16
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	803c3800 	.word	0x803c3800

08005490 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	019b      	lsls	r3, r3, #6
 80054a2:	f043 0220 	orr.w	r2, r3, #32
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3301      	adds	r3, #1
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4a09      	ldr	r2, [pc, #36]	; (80054d8 <USB_FlushTxFifo+0x48>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d901      	bls.n	80054bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e006      	b.n	80054ca <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d0f0      	beq.n	80054aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	00030d40 	.word	0x00030d40

080054dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2210      	movs	r2, #16
 80054ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3301      	adds	r3, #1
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4a09      	ldr	r2, [pc, #36]	; (800551c <USB_FlushRxFifo+0x40>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d901      	bls.n	8005500 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e006      	b.n	800550e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b10      	cmp	r3, #16
 800550a:	d0f0      	beq.n	80054ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	00030d40 	.word	0x00030d40

08005520 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800556c:	f023 0303 	bic.w	r3, r3, #3
 8005570:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005580:	f043 0302 	orr.w	r3, r3, #2
 8005584:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3301      	adds	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a13      	ldr	r2, [pc, #76]	; (80055f8 <USB_CoreReset+0x64>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e01b      	b.n	80055ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	daf2      	bge.n	80055a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f043 0201 	orr.w	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3301      	adds	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a09      	ldr	r2, [pc, #36]	; (80055f8 <USB_CoreReset+0x64>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d901      	bls.n	80055dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e006      	b.n	80055ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d0f0      	beq.n	80055ca <USB_CoreReset+0x36>

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	00030d40 	.word	0x00030d40

080055fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005600:	bf00      	nop
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
	...

0800560c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005612:	f3ef 8305 	mrs	r3, IPSR
 8005616:	60bb      	str	r3, [r7, #8]
  return(result);
 8005618:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10f      	bne.n	800563e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561e:	f3ef 8310 	mrs	r3, PRIMASK
 8005622:	607b      	str	r3, [r7, #4]
  return(result);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d105      	bne.n	8005636 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800562a:	f3ef 8311 	mrs	r3, BASEPRI
 800562e:	603b      	str	r3, [r7, #0]
  return(result);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <osKernelInitialize+0x3a>
 8005636:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <osKernelInitialize+0x64>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d103      	bne.n	8005646 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800563e:	f06f 0305 	mvn.w	r3, #5
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e00c      	b.n	8005660 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005646:	4b0a      	ldr	r3, [pc, #40]	; (8005670 <osKernelInitialize+0x64>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800564e:	4b08      	ldr	r3, [pc, #32]	; (8005670 <osKernelInitialize+0x64>)
 8005650:	2201      	movs	r2, #1
 8005652:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	e002      	b.n	8005660 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800565a:	f04f 33ff 	mov.w	r3, #4294967295
 800565e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005660:	68fb      	ldr	r3, [r7, #12]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20000700 	.word	0x20000700

08005674 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800567a:	f3ef 8305 	mrs	r3, IPSR
 800567e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005680:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10f      	bne.n	80056a6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005686:	f3ef 8310 	mrs	r3, PRIMASK
 800568a:	607b      	str	r3, [r7, #4]
  return(result);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d105      	bne.n	800569e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005692:	f3ef 8311 	mrs	r3, BASEPRI
 8005696:	603b      	str	r3, [r7, #0]
  return(result);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <osKernelStart+0x3a>
 800569e:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <osKernelStart+0x68>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d103      	bne.n	80056ae <osKernelStart+0x3a>
    stat = osErrorISR;
 80056a6:	f06f 0305 	mvn.w	r3, #5
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	e010      	b.n	80056d0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <osKernelStart+0x68>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d109      	bne.n	80056ca <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056b6:	f7ff ffa1 	bl	80055fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056ba:	4b08      	ldr	r3, [pc, #32]	; (80056dc <osKernelStart+0x68>)
 80056bc:	2202      	movs	r2, #2
 80056be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056c0:	f001 f8b8 	bl	8006834 <vTaskStartScheduler>
      stat = osOK;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	e002      	b.n	80056d0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80056ca:	f04f 33ff 	mov.w	r3, #4294967295
 80056ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80056d0:	68fb      	ldr	r3, [r7, #12]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000700 	.word	0x20000700

080056e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b090      	sub	sp, #64	; 0x40
 80056e4:	af04      	add	r7, sp, #16
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056ec:	2300      	movs	r3, #0
 80056ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056f0:	f3ef 8305 	mrs	r3, IPSR
 80056f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80056f6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f040 808f 	bne.w	800581c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005702:	61bb      	str	r3, [r7, #24]
  return(result);
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d105      	bne.n	8005716 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800570a:	f3ef 8311 	mrs	r3, BASEPRI
 800570e:	617b      	str	r3, [r7, #20]
  return(result);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <osThreadNew+0x3e>
 8005716:	4b44      	ldr	r3, [pc, #272]	; (8005828 <osThreadNew+0x148>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d07e      	beq.n	800581c <osThreadNew+0x13c>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d07b      	beq.n	800581c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005724:	2380      	movs	r3, #128	; 0x80
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005728:	2318      	movs	r3, #24
 800572a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800572c:	2300      	movs	r3, #0
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005730:	f04f 33ff 	mov.w	r3, #4294967295
 8005734:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d045      	beq.n	80057c8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <osThreadNew+0x6a>
        name = attr->name;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <osThreadNew+0x90>
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	2b38      	cmp	r3, #56	; 0x38
 8005762:	d805      	bhi.n	8005770 <osThreadNew+0x90>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <osThreadNew+0x94>
        return (NULL);
 8005770:	2300      	movs	r3, #0
 8005772:	e054      	b.n	800581e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	089b      	lsrs	r3, r3, #2
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00e      	beq.n	80057aa <osThreadNew+0xca>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	2b5b      	cmp	r3, #91	; 0x5b
 8005792:	d90a      	bls.n	80057aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005798:	2b00      	cmp	r3, #0
 800579a:	d006      	beq.n	80057aa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <osThreadNew+0xca>
        mem = 1;
 80057a4:	2301      	movs	r3, #1
 80057a6:	623b      	str	r3, [r7, #32]
 80057a8:	e010      	b.n	80057cc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10c      	bne.n	80057cc <osThreadNew+0xec>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d108      	bne.n	80057cc <osThreadNew+0xec>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <osThreadNew+0xec>
          mem = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	623b      	str	r3, [r7, #32]
 80057c6:	e001      	b.n	80057cc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d110      	bne.n	80057f4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057da:	9202      	str	r2, [sp, #8]
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fe4d 	bl	8006488 <xTaskCreateStatic>
 80057ee:	4603      	mov	r3, r0
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	e013      	b.n	800581c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d110      	bne.n	800581c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	f107 0310 	add.w	r3, r7, #16
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fe98 	bl	8006542 <xTaskCreate>
 8005812:	4603      	mov	r3, r0
 8005814:	2b01      	cmp	r3, #1
 8005816:	d001      	beq.n	800581c <osThreadNew+0x13c>
          hTask = NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800581c:	693b      	ldr	r3, [r7, #16]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3730      	adds	r7, #48	; 0x30
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000700 	.word	0x20000700

0800582c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4a07      	ldr	r2, [pc, #28]	; (8005858 <vApplicationGetIdleTaskMemory+0x2c>)
 800583c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4a06      	ldr	r2, [pc, #24]	; (800585c <vApplicationGetIdleTaskMemory+0x30>)
 8005842:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2280      	movs	r2, #128	; 0x80
 8005848:	601a      	str	r2, [r3, #0]
}
 800584a:	bf00      	nop
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20000704 	.word	0x20000704
 800585c:	20000760 	.word	0x20000760

08005860 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4a07      	ldr	r2, [pc, #28]	; (800588c <vApplicationGetTimerTaskMemory+0x2c>)
 8005870:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4a06      	ldr	r2, [pc, #24]	; (8005890 <vApplicationGetTimerTaskMemory+0x30>)
 8005876:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800587e:	601a      	str	r2, [r3, #0]
}
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	20000960 	.word	0x20000960
 8005890:	200009bc 	.word	0x200009bc

08005894 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f103 0208 	add.w	r2, r3, #8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f04f 32ff 	mov.w	r2, #4294967295
 80058ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f103 0208 	add.w	r2, r3, #8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f103 0208 	add.w	r2, r3, #8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	601a      	str	r2, [r3, #0]
}
 800592a:	bf00      	nop
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594c:	d103      	bne.n	8005956 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e00c      	b.n	8005970 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3308      	adds	r3, #8
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	e002      	b.n	8005964 <vListInsert+0x2e>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	429a      	cmp	r2, r3
 800596e:	d2f6      	bcs.n	800595e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	601a      	str	r2, [r3, #0]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6892      	ldr	r2, [r2, #8]
 80059be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6852      	ldr	r2, [r2, #4]
 80059c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d103      	bne.n	80059dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	1e5a      	subs	r2, r3, #1
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a26:	f002 f8a5 	bl	8007b74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a32:	68f9      	ldr	r1, [r7, #12]
 8005a34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a36:	fb01 f303 	mul.w	r3, r1, r3
 8005a3a:	441a      	add	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a56:	3b01      	subs	r3, #1
 8005a58:	68f9      	ldr	r1, [r7, #12]
 8005a5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a5c:	fb01 f303 	mul.w	r3, r1, r3
 8005a60:	441a      	add	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	22ff      	movs	r2, #255	; 0xff
 8005a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	22ff      	movs	r2, #255	; 0xff
 8005a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d114      	bne.n	8005aa6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01a      	beq.n	8005aba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3310      	adds	r3, #16
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 f95d 	bl	8006d48 <xTaskRemoveFromEventList>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d012      	beq.n	8005aba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <xQueueGenericReset+0xcc>)
 8005a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	e009      	b.n	8005aba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3310      	adds	r3, #16
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff fef2 	bl	8005894 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3324      	adds	r3, #36	; 0x24
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff feed 	bl	8005894 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005aba:	f002 f88b 	bl	8007bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005abe:	2301      	movs	r3, #1
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08e      	sub	sp, #56	; 0x38
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <xQueueGenericCreateStatic+0x52>
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <xQueueGenericCreateStatic+0x56>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <xQueueGenericCreateStatic+0x58>
 8005b22:	2300      	movs	r3, #0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	623b      	str	r3, [r7, #32]
}
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <xQueueGenericCreateStatic+0x7e>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <xQueueGenericCreateStatic+0x82>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <xQueueGenericCreateStatic+0x84>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	61fb      	str	r3, [r7, #28]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b6a:	2350      	movs	r3, #80	; 0x50
 8005b6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b50      	cmp	r3, #80	; 0x50
 8005b72:	d00a      	beq.n	8005b8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	61bb      	str	r3, [r7, #24]
}
 8005b86:	bf00      	nop
 8005b88:	e7fe      	b.n	8005b88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00d      	beq.n	8005bb2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f845 	bl	8005c3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3730      	adds	r7, #48	; 0x30
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08a      	sub	sp, #40	; 0x28
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	613b      	str	r3, [r7, #16]
}
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d102      	bne.n	8005bf2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005bec:	2300      	movs	r3, #0
 8005bee:	61fb      	str	r3, [r7, #28]
 8005bf0:	e004      	b.n	8005bfc <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	fb02 f303 	mul.w	r3, r2, r3
 8005bfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	3350      	adds	r3, #80	; 0x50
 8005c00:	4618      	mov	r0, r3
 8005c02:	f002 f8d9 	bl	8007db8 <pvPortMalloc>
 8005c06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d011      	beq.n	8005c32 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	3350      	adds	r3, #80	; 0x50
 8005c16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c20:	79fa      	ldrb	r2, [r7, #7]
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	4613      	mov	r3, r2
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f805 	bl	8005c3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c32:	69bb      	ldr	r3, [r7, #24]
	}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3720      	adds	r7, #32
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d103      	bne.n	8005c58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	e002      	b.n	8005c5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	69b8      	ldr	r0, [r7, #24]
 8005c6e:	f7ff fec5 	bl	80059fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	78fa      	ldrb	r2, [r7, #3]
 8005c76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c7a:	bf00      	nop
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08e      	sub	sp, #56	; 0x38
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c92:	2300      	movs	r3, #0
 8005c94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10a      	bne.n	8005cb6 <xQueueGenericSend+0x32>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cb2:	bf00      	nop
 8005cb4:	e7fe      	b.n	8005cb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d103      	bne.n	8005cc4 <xQueueGenericSend+0x40>
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <xQueueGenericSend+0x44>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e000      	b.n	8005cca <xQueueGenericSend+0x46>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <xQueueGenericSend+0x60>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d103      	bne.n	8005cf2 <xQueueGenericSend+0x6e>
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <xQueueGenericSend+0x72>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <xQueueGenericSend+0x74>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <xQueueGenericSend+0x8e>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	623b      	str	r3, [r7, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	e7fe      	b.n	8005d10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d12:	f001 f9d7 	bl	80070c4 <xTaskGetSchedulerState>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <xQueueGenericSend+0x9e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <xQueueGenericSend+0xa2>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <xQueueGenericSend+0xa4>
 8005d26:	2300      	movs	r3, #0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <xQueueGenericSend+0xbe>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	61fb      	str	r3, [r7, #28]
}
 8005d3e:	bf00      	nop
 8005d40:	e7fe      	b.n	8005d40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d42:	f001 ff17 	bl	8007b74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d302      	bcc.n	8005d58 <xQueueGenericSend+0xd4>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d129      	bne.n	8005dac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d5e:	f000 fa25 	bl	80061ac <prvCopyDataToQueue>
 8005d62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d010      	beq.n	8005d8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	3324      	adds	r3, #36	; 0x24
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 ffe9 	bl	8006d48 <xTaskRemoveFromEventList>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d013      	beq.n	8005da4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d7c:	4b3f      	ldr	r3, [pc, #252]	; (8005e7c <xQueueGenericSend+0x1f8>)
 8005d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	e00a      	b.n	8005da4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d94:	4b39      	ldr	r3, [pc, #228]	; (8005e7c <xQueueGenericSend+0x1f8>)
 8005d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005da4:	f001 ff16 	bl	8007bd4 <vPortExitCritical>
				return pdPASS;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e063      	b.n	8005e74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d103      	bne.n	8005dba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005db2:	f001 ff0f 	bl	8007bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e05c      	b.n	8005e74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d106      	bne.n	8005dce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dc0:	f107 0314 	add.w	r3, r7, #20
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f001 f823 	bl	8006e10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dce:	f001 ff01 	bl	8007bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dd2:	f000 fd95 	bl	8006900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dd6:	f001 fecd 	bl	8007b74 <vPortEnterCritical>
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005de0:	b25b      	sxtb	r3, r3
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de6:	d103      	bne.n	8005df0 <xQueueGenericSend+0x16c>
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005df6:	b25b      	sxtb	r3, r3
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d103      	bne.n	8005e06 <xQueueGenericSend+0x182>
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e06:	f001 fee5 	bl	8007bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e0a:	1d3a      	adds	r2, r7, #4
 8005e0c:	f107 0314 	add.w	r3, r7, #20
 8005e10:	4611      	mov	r1, r2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f001 f812 	bl	8006e3c <xTaskCheckForTimeOut>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d124      	bne.n	8005e68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e20:	f000 fabc 	bl	800639c <prvIsQueueFull>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d018      	beq.n	8005e5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	3310      	adds	r3, #16
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	4611      	mov	r1, r2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 ff38 	bl	8006ca8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e3a:	f000 fa47 	bl	80062cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e3e:	f000 fd6d 	bl	800691c <xTaskResumeAll>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f47f af7c 	bne.w	8005d42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e4a:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <xQueueGenericSend+0x1f8>)
 8005e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	e772      	b.n	8005d42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e5e:	f000 fa35 	bl	80062cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e62:	f000 fd5b 	bl	800691c <xTaskResumeAll>
 8005e66:	e76c      	b.n	8005d42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e6a:	f000 fa2f 	bl	80062cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e6e:	f000 fd55 	bl	800691c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3738      	adds	r7, #56	; 0x38
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08e      	sub	sp, #56	; 0x38
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005eaa:	bf00      	nop
 8005eac:	e7fe      	b.n	8005eac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d103      	bne.n	8005ebc <xQueueGenericSendFromISR+0x3c>
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <xQueueGenericSendFromISR+0x40>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <xQueueGenericSendFromISR+0x42>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	623b      	str	r3, [r7, #32]
}
 8005ed8:	bf00      	nop
 8005eda:	e7fe      	b.n	8005eda <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d103      	bne.n	8005eea <xQueueGenericSendFromISR+0x6a>
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <xQueueGenericSendFromISR+0x6e>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <xQueueGenericSendFromISR+0x70>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	61fb      	str	r3, [r7, #28]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f0a:	f001 ff15 	bl	8007d38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f0e:	f3ef 8211 	mrs	r2, BASEPRI
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	61ba      	str	r2, [r7, #24]
 8005f24:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f26:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d302      	bcc.n	8005f3c <xQueueGenericSendFromISR+0xbc>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d12c      	bne.n	8005f96 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f4c:	f000 f92e 	bl	80061ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f50:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f58:	d112      	bne.n	8005f80 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d016      	beq.n	8005f90 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	3324      	adds	r3, #36	; 0x24
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 feee 	bl	8006d48 <xTaskRemoveFromEventList>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00e      	beq.n	8005f90 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00b      	beq.n	8005f90 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	e007      	b.n	8005f90 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f84:	3301      	adds	r3, #1
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	b25a      	sxtb	r2, r3
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f90:	2301      	movs	r3, #1
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005f94:	e001      	b.n	8005f9a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fa4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3738      	adds	r7, #56	; 0x38
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08c      	sub	sp, #48	; 0x30
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10a      	bne.n	8005fe0 <xQueueReceive+0x30>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	623b      	str	r3, [r7, #32]
}
 8005fdc:	bf00      	nop
 8005fde:	e7fe      	b.n	8005fde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d103      	bne.n	8005fee <xQueueReceive+0x3e>
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <xQueueReceive+0x42>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <xQueueReceive+0x44>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <xQueueReceive+0x5e>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	61fb      	str	r3, [r7, #28]
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800600e:	f001 f859 	bl	80070c4 <xTaskGetSchedulerState>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <xQueueReceive+0x6e>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <xQueueReceive+0x72>
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <xQueueReceive+0x74>
 8006022:	2300      	movs	r3, #0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <xQueueReceive+0x8e>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	61bb      	str	r3, [r7, #24]
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800603e:	f001 fd99 	bl	8007b74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01f      	beq.n	800608e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006052:	f000 f915 	bl	8006280 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	1e5a      	subs	r2, r3, #1
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00f      	beq.n	8006086 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	3310      	adds	r3, #16
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fe6c 	bl	8006d48 <xTaskRemoveFromEventList>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006076:	4b3d      	ldr	r3, [pc, #244]	; (800616c <xQueueReceive+0x1bc>)
 8006078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006086:	f001 fda5 	bl	8007bd4 <vPortExitCritical>
				return pdPASS;
 800608a:	2301      	movs	r3, #1
 800608c:	e069      	b.n	8006162 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006094:	f001 fd9e 	bl	8007bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006098:	2300      	movs	r3, #0
 800609a:	e062      	b.n	8006162 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060a2:	f107 0310 	add.w	r3, r7, #16
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 feb2 	bl	8006e10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060ac:	2301      	movs	r3, #1
 80060ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060b0:	f001 fd90 	bl	8007bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060b4:	f000 fc24 	bl	8006900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060b8:	f001 fd5c 	bl	8007b74 <vPortEnterCritical>
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060c2:	b25b      	sxtb	r3, r3
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d103      	bne.n	80060d2 <xQueueReceive+0x122>
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060d8:	b25b      	sxtb	r3, r3
 80060da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060de:	d103      	bne.n	80060e8 <xQueueReceive+0x138>
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060e8:	f001 fd74 	bl	8007bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060ec:	1d3a      	adds	r2, r7, #4
 80060ee:	f107 0310 	add.w	r3, r7, #16
 80060f2:	4611      	mov	r1, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fea1 	bl	8006e3c <xTaskCheckForTimeOut>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d123      	bne.n	8006148 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006102:	f000 f935 	bl	8006370 <prvIsQueueEmpty>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d017      	beq.n	800613c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	3324      	adds	r3, #36	; 0x24
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	4611      	mov	r1, r2
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fdc7 	bl	8006ca8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800611a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800611c:	f000 f8d6 	bl	80062cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006120:	f000 fbfc 	bl	800691c <xTaskResumeAll>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d189      	bne.n	800603e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800612a:	4b10      	ldr	r3, [pc, #64]	; (800616c <xQueueReceive+0x1bc>)
 800612c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	e780      	b.n	800603e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800613c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800613e:	f000 f8c5 	bl	80062cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006142:	f000 fbeb 	bl	800691c <xTaskResumeAll>
 8006146:	e77a      	b.n	800603e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800614a:	f000 f8bf 	bl	80062cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800614e:	f000 fbe5 	bl	800691c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006154:	f000 f90c 	bl	8006370 <prvIsQueueEmpty>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	f43f af6f 	beq.w	800603e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006160:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006162:	4618      	mov	r0, r3
 8006164:	3730      	adds	r7, #48	; 0x30
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	e000ed04 	.word	0xe000ed04

08006170 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	60bb      	str	r3, [r7, #8]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006194:	f001 fcee 	bl	8007b74 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800619e:	f001 fd19 	bl	8007bd4 <vPortExitCritical>

	return uxReturn;
 80061a2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10d      	bne.n	80061e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d14d      	bne.n	800626e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 ff92 	bl	8007100 <xTaskPriorityDisinherit>
 80061dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	609a      	str	r2, [r3, #8]
 80061e4:	e043      	b.n	800626e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d119      	bne.n	8006220 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6858      	ldr	r0, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	461a      	mov	r2, r3
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	f001 ffdc 	bl	80081b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	441a      	add	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	429a      	cmp	r2, r3
 8006214:	d32b      	bcc.n	800626e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	605a      	str	r2, [r3, #4]
 800621e:	e026      	b.n	800626e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68d8      	ldr	r0, [r3, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	461a      	mov	r2, r3
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	f001 ffc2 	bl	80081b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	425b      	negs	r3, r3
 800623a:	441a      	add	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d207      	bcs.n	800625c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006254:	425b      	negs	r3, r3
 8006256:	441a      	add	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d105      	bne.n	800626e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	3b01      	subs	r3, #1
 800626c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006276:	697b      	ldr	r3, [r7, #20]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	2b00      	cmp	r3, #0
 8006290:	d018      	beq.n	80062c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	441a      	add	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d303      	bcc.n	80062b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68d9      	ldr	r1, [r3, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	461a      	mov	r2, r3
 80062be:	6838      	ldr	r0, [r7, #0]
 80062c0:	f001 ff78 	bl	80081b4 <memcpy>
	}
}
 80062c4:	bf00      	nop
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062d4:	f001 fc4e 	bl	8007b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062e0:	e011      	b.n	8006306 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d012      	beq.n	8006310 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3324      	adds	r3, #36	; 0x24
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fd2a 	bl	8006d48 <xTaskRemoveFromEventList>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062fa:	f000 fe01 	bl	8006f00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	3b01      	subs	r3, #1
 8006302:	b2db      	uxtb	r3, r3
 8006304:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800630a:	2b00      	cmp	r3, #0
 800630c:	dce9      	bgt.n	80062e2 <prvUnlockQueue+0x16>
 800630e:	e000      	b.n	8006312 <prvUnlockQueue+0x46>
					break;
 8006310:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	22ff      	movs	r2, #255	; 0xff
 8006316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800631a:	f001 fc5b 	bl	8007bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800631e:	f001 fc29 	bl	8007b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006328:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800632a:	e011      	b.n	8006350 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d012      	beq.n	800635a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3310      	adds	r3, #16
 8006338:	4618      	mov	r0, r3
 800633a:	f000 fd05 	bl	8006d48 <xTaskRemoveFromEventList>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006344:	f000 fddc 	bl	8006f00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	3b01      	subs	r3, #1
 800634c:	b2db      	uxtb	r3, r3
 800634e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006354:	2b00      	cmp	r3, #0
 8006356:	dce9      	bgt.n	800632c <prvUnlockQueue+0x60>
 8006358:	e000      	b.n	800635c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800635a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	22ff      	movs	r2, #255	; 0xff
 8006360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006364:	f001 fc36 	bl	8007bd4 <vPortExitCritical>
}
 8006368:	bf00      	nop
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006378:	f001 fbfc 	bl	8007b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006384:	2301      	movs	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	e001      	b.n	800638e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800638e:	f001 fc21 	bl	8007bd4 <vPortExitCritical>

	return xReturn;
 8006392:	68fb      	ldr	r3, [r7, #12]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063a4:	f001 fbe6 	bl	8007b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d102      	bne.n	80063ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	e001      	b.n	80063be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063be:	f001 fc09 	bl	8007bd4 <vPortExitCritical>

	return xReturn;
 80063c2:	68fb      	ldr	r3, [r7, #12]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	e014      	b.n	8006406 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80063dc:	4a0f      	ldr	r2, [pc, #60]	; (800641c <vQueueAddToRegistry+0x50>)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10b      	bne.n	8006400 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80063e8:	490c      	ldr	r1, [pc, #48]	; (800641c <vQueueAddToRegistry+0x50>)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80063f2:	4a0a      	ldr	r2, [pc, #40]	; (800641c <vQueueAddToRegistry+0x50>)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	4413      	add	r3, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80063fe:	e006      	b.n	800640e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b07      	cmp	r3, #7
 800640a:	d9e7      	bls.n	80063dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800640c:	bf00      	nop
 800640e:	bf00      	nop
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	20000dbc 	.word	0x20000dbc

08006420 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006430:	f001 fba0 	bl	8007b74 <vPortEnterCritical>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800643a:	b25b      	sxtb	r3, r3
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d103      	bne.n	800644a <vQueueWaitForMessageRestricted+0x2a>
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006450:	b25b      	sxtb	r3, r3
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d103      	bne.n	8006460 <vQueueWaitForMessageRestricted+0x40>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006460:	f001 fbb8 	bl	8007bd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	3324      	adds	r3, #36	; 0x24
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fc3b 	bl	8006cf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800647a:	6978      	ldr	r0, [r7, #20]
 800647c:	f7ff ff26 	bl	80062cc <prvUnlockQueue>
	}
 8006480:	bf00      	nop
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08e      	sub	sp, #56	; 0x38
 800648c:	af04      	add	r7, sp, #16
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	623b      	str	r3, [r7, #32]
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <xTaskCreateStatic+0x46>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	61fb      	str	r3, [r7, #28]
}
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064ce:	235c      	movs	r3, #92	; 0x5c
 80064d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b5c      	cmp	r3, #92	; 0x5c
 80064d6:	d00a      	beq.n	80064ee <xTaskCreateStatic+0x66>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	61bb      	str	r3, [r7, #24]
}
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01e      	beq.n	8006534 <xTaskCreateStatic+0xac>
 80064f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01b      	beq.n	8006534 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006504:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	2202      	movs	r2, #2
 800650a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800650e:	2300      	movs	r3, #0
 8006510:	9303      	str	r3, [sp, #12]
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	9302      	str	r3, [sp, #8]
 8006516:	f107 0314 	add.w	r3, r7, #20
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 f850 	bl	80065cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800652c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800652e:	f000 f8dd 	bl	80066ec <prvAddNewTaskToReadyList>
 8006532:	e001      	b.n	8006538 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006538:	697b      	ldr	r3, [r7, #20]
	}
 800653a:	4618      	mov	r0, r3
 800653c:	3728      	adds	r7, #40	; 0x28
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006542:	b580      	push	{r7, lr}
 8006544:	b08c      	sub	sp, #48	; 0x30
 8006546:	af04      	add	r7, sp, #16
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	603b      	str	r3, [r7, #0]
 800654e:	4613      	mov	r3, r2
 8006550:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4618      	mov	r0, r3
 8006558:	f001 fc2e 	bl	8007db8 <pvPortMalloc>
 800655c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00e      	beq.n	8006582 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006564:	205c      	movs	r0, #92	; 0x5c
 8006566:	f001 fc27 	bl	8007db8 <pvPortMalloc>
 800656a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	631a      	str	r2, [r3, #48]	; 0x30
 8006578:	e005      	b.n	8006586 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800657a:	6978      	ldr	r0, [r7, #20]
 800657c:	f001 fce0 	bl	8007f40 <vPortFree>
 8006580:	e001      	b.n	8006586 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d017      	beq.n	80065bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006594:	88fa      	ldrh	r2, [r7, #6]
 8006596:	2300      	movs	r3, #0
 8006598:	9303      	str	r3, [sp, #12]
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	9302      	str	r3, [sp, #8]
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f80e 	bl	80065cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065b0:	69f8      	ldr	r0, [r7, #28]
 80065b2:	f000 f89b 	bl	80066ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065b6:	2301      	movs	r3, #1
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	e002      	b.n	80065c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065bc:	f04f 33ff 	mov.w	r3, #4294967295
 80065c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065c2:	69bb      	ldr	r3, [r7, #24]
	}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3720      	adds	r7, #32
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	461a      	mov	r2, r3
 80065e4:	21a5      	movs	r1, #165	; 0xa5
 80065e6:	f001 fdf3 	bl	80081d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065f4:	3b01      	subs	r3, #1
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	f023 0307 	bic.w	r3, r3, #7
 8006602:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <prvInitialiseNewTask+0x58>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	617b      	str	r3, [r7, #20]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01f      	beq.n	800666a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800662a:	2300      	movs	r3, #0
 800662c:	61fb      	str	r3, [r7, #28]
 800662e:	e012      	b.n	8006656 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	4413      	add	r3, r2
 8006636:	7819      	ldrb	r1, [r3, #0]
 8006638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4413      	add	r3, r2
 800663e:	3334      	adds	r3, #52	; 0x34
 8006640:	460a      	mov	r2, r1
 8006642:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d006      	beq.n	800665e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	3301      	adds	r3, #1
 8006654:	61fb      	str	r3, [r7, #28]
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	2b0f      	cmp	r3, #15
 800665a:	d9e9      	bls.n	8006630 <prvInitialiseNewTask+0x64>
 800665c:	e000      	b.n	8006660 <prvInitialiseNewTask+0x94>
			{
				break;
 800665e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006668:	e003      	b.n	8006672 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	2b37      	cmp	r3, #55	; 0x37
 8006676:	d901      	bls.n	800667c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006678:	2337      	movs	r3, #55	; 0x37
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006680:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006686:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	2200      	movs	r2, #0
 800668c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	3304      	adds	r3, #4
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff f91e 	bl	80058d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	3318      	adds	r3, #24
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff f919 	bl	80058d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	2200      	movs	r2, #0
 80066bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	68f9      	ldr	r1, [r7, #12]
 80066ca:	69b8      	ldr	r0, [r7, #24]
 80066cc:	f001 f928 	bl	8007920 <pxPortInitialiseStack>
 80066d0:	4602      	mov	r2, r0
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066e2:	bf00      	nop
 80066e4:	3720      	adds	r7, #32
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
	...

080066ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066f4:	f001 fa3e 	bl	8007b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066f8:	4b2d      	ldr	r3, [pc, #180]	; (80067b0 <prvAddNewTaskToReadyList+0xc4>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3301      	adds	r3, #1
 80066fe:	4a2c      	ldr	r2, [pc, #176]	; (80067b0 <prvAddNewTaskToReadyList+0xc4>)
 8006700:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006702:	4b2c      	ldr	r3, [pc, #176]	; (80067b4 <prvAddNewTaskToReadyList+0xc8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800670a:	4a2a      	ldr	r2, [pc, #168]	; (80067b4 <prvAddNewTaskToReadyList+0xc8>)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006710:	4b27      	ldr	r3, [pc, #156]	; (80067b0 <prvAddNewTaskToReadyList+0xc4>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d110      	bne.n	800673a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006718:	f000 fc16 	bl	8006f48 <prvInitialiseTaskLists>
 800671c:	e00d      	b.n	800673a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800671e:	4b26      	ldr	r3, [pc, #152]	; (80067b8 <prvAddNewTaskToReadyList+0xcc>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006726:	4b23      	ldr	r3, [pc, #140]	; (80067b4 <prvAddNewTaskToReadyList+0xc8>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	429a      	cmp	r2, r3
 8006732:	d802      	bhi.n	800673a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006734:	4a1f      	ldr	r2, [pc, #124]	; (80067b4 <prvAddNewTaskToReadyList+0xc8>)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800673a:	4b20      	ldr	r3, [pc, #128]	; (80067bc <prvAddNewTaskToReadyList+0xd0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3301      	adds	r3, #1
 8006740:	4a1e      	ldr	r2, [pc, #120]	; (80067bc <prvAddNewTaskToReadyList+0xd0>)
 8006742:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006744:	4b1d      	ldr	r3, [pc, #116]	; (80067bc <prvAddNewTaskToReadyList+0xd0>)
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006750:	4b1b      	ldr	r3, [pc, #108]	; (80067c0 <prvAddNewTaskToReadyList+0xd4>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	429a      	cmp	r2, r3
 8006756:	d903      	bls.n	8006760 <prvAddNewTaskToReadyList+0x74>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	4a18      	ldr	r2, [pc, #96]	; (80067c0 <prvAddNewTaskToReadyList+0xd4>)
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4a15      	ldr	r2, [pc, #84]	; (80067c4 <prvAddNewTaskToReadyList+0xd8>)
 800676e:	441a      	add	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3304      	adds	r3, #4
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f7ff f8b9 	bl	80058ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800677c:	f001 fa2a 	bl	8007bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006780:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <prvAddNewTaskToReadyList+0xcc>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00e      	beq.n	80067a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006788:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <prvAddNewTaskToReadyList+0xc8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	429a      	cmp	r2, r3
 8006794:	d207      	bcs.n	80067a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006796:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <prvAddNewTaskToReadyList+0xdc>)
 8006798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067a6:	bf00      	nop
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	200012d0 	.word	0x200012d0
 80067b4:	20000dfc 	.word	0x20000dfc
 80067b8:	200012dc 	.word	0x200012dc
 80067bc:	200012ec 	.word	0x200012ec
 80067c0:	200012d8 	.word	0x200012d8
 80067c4:	20000e00 	.word	0x20000e00
 80067c8:	e000ed04 	.word	0xe000ed04

080067cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d017      	beq.n	800680e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067de:	4b13      	ldr	r3, [pc, #76]	; (800682c <vTaskDelay+0x60>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <vTaskDelay+0x30>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60bb      	str	r3, [r7, #8]
}
 80067f8:	bf00      	nop
 80067fa:	e7fe      	b.n	80067fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067fc:	f000 f880 	bl	8006900 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006800:	2100      	movs	r1, #0
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fcea 	bl	80071dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006808:	f000 f888 	bl	800691c <xTaskResumeAll>
 800680c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d107      	bne.n	8006824 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006814:	4b06      	ldr	r3, [pc, #24]	; (8006830 <vTaskDelay+0x64>)
 8006816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006824:	bf00      	nop
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	200012f8 	.word	0x200012f8
 8006830:	e000ed04 	.word	0xe000ed04

08006834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08a      	sub	sp, #40	; 0x28
 8006838:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800683a:	2300      	movs	r3, #0
 800683c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800683e:	2300      	movs	r3, #0
 8006840:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006842:	463a      	mov	r2, r7
 8006844:	1d39      	adds	r1, r7, #4
 8006846:	f107 0308 	add.w	r3, r7, #8
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe ffee 	bl	800582c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	9202      	str	r2, [sp, #8]
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	2300      	movs	r3, #0
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	2300      	movs	r3, #0
 8006860:	460a      	mov	r2, r1
 8006862:	4921      	ldr	r1, [pc, #132]	; (80068e8 <vTaskStartScheduler+0xb4>)
 8006864:	4821      	ldr	r0, [pc, #132]	; (80068ec <vTaskStartScheduler+0xb8>)
 8006866:	f7ff fe0f 	bl	8006488 <xTaskCreateStatic>
 800686a:	4603      	mov	r3, r0
 800686c:	4a20      	ldr	r2, [pc, #128]	; (80068f0 <vTaskStartScheduler+0xbc>)
 800686e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006870:	4b1f      	ldr	r3, [pc, #124]	; (80068f0 <vTaskStartScheduler+0xbc>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006878:	2301      	movs	r3, #1
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	e001      	b.n	8006882 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800687e:	2300      	movs	r3, #0
 8006880:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d102      	bne.n	800688e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006888:	f000 fcfc 	bl	8007284 <xTimerCreateTimerTask>
 800688c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d116      	bne.n	80068c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	613b      	str	r3, [r7, #16]
}
 80068a6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068a8:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <vTaskStartScheduler+0xc0>)
 80068aa:	f04f 32ff 	mov.w	r2, #4294967295
 80068ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068b0:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <vTaskStartScheduler+0xc4>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068b6:	4b11      	ldr	r3, [pc, #68]	; (80068fc <vTaskStartScheduler+0xc8>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068bc:	f001 f8b8 	bl	8007a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068c0:	e00e      	b.n	80068e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d10a      	bne.n	80068e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	60fb      	str	r3, [r7, #12]
}
 80068dc:	bf00      	nop
 80068de:	e7fe      	b.n	80068de <vTaskStartScheduler+0xaa>
}
 80068e0:	bf00      	nop
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	0800830c 	.word	0x0800830c
 80068ec:	08006f19 	.word	0x08006f19
 80068f0:	200012f4 	.word	0x200012f4
 80068f4:	200012f0 	.word	0x200012f0
 80068f8:	200012dc 	.word	0x200012dc
 80068fc:	200012d4 	.word	0x200012d4

08006900 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006904:	4b04      	ldr	r3, [pc, #16]	; (8006918 <vTaskSuspendAll+0x18>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3301      	adds	r3, #1
 800690a:	4a03      	ldr	r2, [pc, #12]	; (8006918 <vTaskSuspendAll+0x18>)
 800690c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800690e:	bf00      	nop
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	200012f8 	.word	0x200012f8

0800691c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006926:	2300      	movs	r3, #0
 8006928:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800692a:	4b42      	ldr	r3, [pc, #264]	; (8006a34 <xTaskResumeAll+0x118>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <xTaskResumeAll+0x2c>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	603b      	str	r3, [r7, #0]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006948:	f001 f914 	bl	8007b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800694c:	4b39      	ldr	r3, [pc, #228]	; (8006a34 <xTaskResumeAll+0x118>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3b01      	subs	r3, #1
 8006952:	4a38      	ldr	r2, [pc, #224]	; (8006a34 <xTaskResumeAll+0x118>)
 8006954:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006956:	4b37      	ldr	r3, [pc, #220]	; (8006a34 <xTaskResumeAll+0x118>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d162      	bne.n	8006a24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800695e:	4b36      	ldr	r3, [pc, #216]	; (8006a38 <xTaskResumeAll+0x11c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d05e      	beq.n	8006a24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006966:	e02f      	b.n	80069c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006968:	4b34      	ldr	r3, [pc, #208]	; (8006a3c <xTaskResumeAll+0x120>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3318      	adds	r3, #24
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff f817 	bl	80059a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3304      	adds	r3, #4
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff f812 	bl	80059a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006988:	4b2d      	ldr	r3, [pc, #180]	; (8006a40 <xTaskResumeAll+0x124>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	d903      	bls.n	8006998 <xTaskResumeAll+0x7c>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	4a2a      	ldr	r2, [pc, #168]	; (8006a40 <xTaskResumeAll+0x124>)
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4a27      	ldr	r2, [pc, #156]	; (8006a44 <xTaskResumeAll+0x128>)
 80069a6:	441a      	add	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3304      	adds	r3, #4
 80069ac:	4619      	mov	r1, r3
 80069ae:	4610      	mov	r0, r2
 80069b0:	f7fe ff9d 	bl	80058ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b8:	4b23      	ldr	r3, [pc, #140]	; (8006a48 <xTaskResumeAll+0x12c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069be:	429a      	cmp	r2, r3
 80069c0:	d302      	bcc.n	80069c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80069c2:	4b22      	ldr	r3, [pc, #136]	; (8006a4c <xTaskResumeAll+0x130>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069c8:	4b1c      	ldr	r3, [pc, #112]	; (8006a3c <xTaskResumeAll+0x120>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1cb      	bne.n	8006968 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069d6:	f000 fb55 	bl	8007084 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80069da:	4b1d      	ldr	r3, [pc, #116]	; (8006a50 <xTaskResumeAll+0x134>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d010      	beq.n	8006a08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069e6:	f000 f847 	bl	8006a78 <xTaskIncrementTick>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80069f0:	4b16      	ldr	r3, [pc, #88]	; (8006a4c <xTaskResumeAll+0x130>)
 80069f2:	2201      	movs	r2, #1
 80069f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f1      	bne.n	80069e6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006a02:	4b13      	ldr	r3, [pc, #76]	; (8006a50 <xTaskResumeAll+0x134>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a08:	4b10      	ldr	r3, [pc, #64]	; (8006a4c <xTaskResumeAll+0x130>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d009      	beq.n	8006a24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a10:	2301      	movs	r3, #1
 8006a12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a14:	4b0f      	ldr	r3, [pc, #60]	; (8006a54 <xTaskResumeAll+0x138>)
 8006a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a24:	f001 f8d6 	bl	8007bd4 <vPortExitCritical>

	return xAlreadyYielded;
 8006a28:	68bb      	ldr	r3, [r7, #8]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	200012f8 	.word	0x200012f8
 8006a38:	200012d0 	.word	0x200012d0
 8006a3c:	20001290 	.word	0x20001290
 8006a40:	200012d8 	.word	0x200012d8
 8006a44:	20000e00 	.word	0x20000e00
 8006a48:	20000dfc 	.word	0x20000dfc
 8006a4c:	200012e4 	.word	0x200012e4
 8006a50:	200012e0 	.word	0x200012e0
 8006a54:	e000ed04 	.word	0xe000ed04

08006a58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a5e:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <xTaskGetTickCount+0x1c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a64:	687b      	ldr	r3, [r7, #4]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	200012d4 	.word	0x200012d4

08006a78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a82:	4b4f      	ldr	r3, [pc, #316]	; (8006bc0 <xTaskIncrementTick+0x148>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f040 8089 	bne.w	8006b9e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a8c:	4b4d      	ldr	r3, [pc, #308]	; (8006bc4 <xTaskIncrementTick+0x14c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3301      	adds	r3, #1
 8006a92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a94:	4a4b      	ldr	r2, [pc, #300]	; (8006bc4 <xTaskIncrementTick+0x14c>)
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d120      	bne.n	8006ae2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006aa0:	4b49      	ldr	r3, [pc, #292]	; (8006bc8 <xTaskIncrementTick+0x150>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	603b      	str	r3, [r7, #0]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <xTaskIncrementTick+0x46>
 8006ac0:	4b41      	ldr	r3, [pc, #260]	; (8006bc8 <xTaskIncrementTick+0x150>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	4b41      	ldr	r3, [pc, #260]	; (8006bcc <xTaskIncrementTick+0x154>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a3f      	ldr	r2, [pc, #252]	; (8006bc8 <xTaskIncrementTick+0x150>)
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	4a3f      	ldr	r2, [pc, #252]	; (8006bcc <xTaskIncrementTick+0x154>)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	4b3e      	ldr	r3, [pc, #248]	; (8006bd0 <xTaskIncrementTick+0x158>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	4a3d      	ldr	r2, [pc, #244]	; (8006bd0 <xTaskIncrementTick+0x158>)
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	f000 fad1 	bl	8007084 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ae2:	4b3c      	ldr	r3, [pc, #240]	; (8006bd4 <xTaskIncrementTick+0x15c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d349      	bcc.n	8006b80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aec:	4b36      	ldr	r3, [pc, #216]	; (8006bc8 <xTaskIncrementTick+0x150>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d104      	bne.n	8006b00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af6:	4b37      	ldr	r3, [pc, #220]	; (8006bd4 <xTaskIncrementTick+0x15c>)
 8006af8:	f04f 32ff 	mov.w	r2, #4294967295
 8006afc:	601a      	str	r2, [r3, #0]
					break;
 8006afe:	e03f      	b.n	8006b80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b00:	4b31      	ldr	r3, [pc, #196]	; (8006bc8 <xTaskIncrementTick+0x150>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d203      	bcs.n	8006b20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b18:	4a2e      	ldr	r2, [pc, #184]	; (8006bd4 <xTaskIncrementTick+0x15c>)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b1e:	e02f      	b.n	8006b80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fe ff3f 	bl	80059a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d004      	beq.n	8006b3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	3318      	adds	r3, #24
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fe ff36 	bl	80059a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b40:	4b25      	ldr	r3, [pc, #148]	; (8006bd8 <xTaskIncrementTick+0x160>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d903      	bls.n	8006b50 <xTaskIncrementTick+0xd8>
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	4a22      	ldr	r2, [pc, #136]	; (8006bd8 <xTaskIncrementTick+0x160>)
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4a1f      	ldr	r2, [pc, #124]	; (8006bdc <xTaskIncrementTick+0x164>)
 8006b5e:	441a      	add	r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4619      	mov	r1, r3
 8006b66:	4610      	mov	r0, r2
 8006b68:	f7fe fec1 	bl	80058ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b70:	4b1b      	ldr	r3, [pc, #108]	; (8006be0 <xTaskIncrementTick+0x168>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d3b8      	bcc.n	8006aec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b7e:	e7b5      	b.n	8006aec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b80:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <xTaskIncrementTick+0x168>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	4915      	ldr	r1, [pc, #84]	; (8006bdc <xTaskIncrementTick+0x164>)
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	440b      	add	r3, r1
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d907      	bls.n	8006ba8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	e004      	b.n	8006ba8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b9e:	4b11      	ldr	r3, [pc, #68]	; (8006be4 <xTaskIncrementTick+0x16c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	4a0f      	ldr	r2, [pc, #60]	; (8006be4 <xTaskIncrementTick+0x16c>)
 8006ba6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ba8:	4b0f      	ldr	r3, [pc, #60]	; (8006be8 <xTaskIncrementTick+0x170>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006bb4:	697b      	ldr	r3, [r7, #20]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	200012f8 	.word	0x200012f8
 8006bc4:	200012d4 	.word	0x200012d4
 8006bc8:	20001288 	.word	0x20001288
 8006bcc:	2000128c 	.word	0x2000128c
 8006bd0:	200012e8 	.word	0x200012e8
 8006bd4:	200012f0 	.word	0x200012f0
 8006bd8:	200012d8 	.word	0x200012d8
 8006bdc:	20000e00 	.word	0x20000e00
 8006be0:	20000dfc 	.word	0x20000dfc
 8006be4:	200012e0 	.word	0x200012e0
 8006be8:	200012e4 	.word	0x200012e4

08006bec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bf2:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <vTaskSwitchContext+0xa8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bfa:	4b27      	ldr	r3, [pc, #156]	; (8006c98 <vTaskSwitchContext+0xac>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c00:	e041      	b.n	8006c86 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006c02:	4b25      	ldr	r3, [pc, #148]	; (8006c98 <vTaskSwitchContext+0xac>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c08:	4b24      	ldr	r3, [pc, #144]	; (8006c9c <vTaskSwitchContext+0xb0>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	e010      	b.n	8006c32 <vTaskSwitchContext+0x46>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10a      	bne.n	8006c2c <vTaskSwitchContext+0x40>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	607b      	str	r3, [r7, #4]
}
 8006c28:	bf00      	nop
 8006c2a:	e7fe      	b.n	8006c2a <vTaskSwitchContext+0x3e>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	491b      	ldr	r1, [pc, #108]	; (8006ca0 <vTaskSwitchContext+0xb4>)
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	440b      	add	r3, r1
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0e4      	beq.n	8006c10 <vTaskSwitchContext+0x24>
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4a13      	ldr	r2, [pc, #76]	; (8006ca0 <vTaskSwitchContext+0xb4>)
 8006c52:	4413      	add	r3, r2
 8006c54:	60bb      	str	r3, [r7, #8]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	605a      	str	r2, [r3, #4]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	3308      	adds	r3, #8
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d104      	bne.n	8006c76 <vTaskSwitchContext+0x8a>
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	605a      	str	r2, [r3, #4]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	4a09      	ldr	r2, [pc, #36]	; (8006ca4 <vTaskSwitchContext+0xb8>)
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	4a06      	ldr	r2, [pc, #24]	; (8006c9c <vTaskSwitchContext+0xb0>)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6013      	str	r3, [r2, #0]
}
 8006c86:	bf00      	nop
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	200012f8 	.word	0x200012f8
 8006c98:	200012e4 	.word	0x200012e4
 8006c9c:	200012d8 	.word	0x200012d8
 8006ca0:	20000e00 	.word	0x20000e00
 8006ca4:	20000dfc 	.word	0x20000dfc

08006ca8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	60fb      	str	r3, [r7, #12]
}
 8006cca:	bf00      	nop
 8006ccc:	e7fe      	b.n	8006ccc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cce:	4b07      	ldr	r3, [pc, #28]	; (8006cec <vTaskPlaceOnEventList+0x44>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3318      	adds	r3, #24
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fe fe2d 	bl	8005936 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cdc:	2101      	movs	r1, #1
 8006cde:	6838      	ldr	r0, [r7, #0]
 8006ce0:	f000 fa7c 	bl	80071dc <prvAddCurrentTaskToDelayedList>
}
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20000dfc 	.word	0x20000dfc

08006cf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	617b      	str	r3, [r7, #20]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d18:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3318      	adds	r3, #24
 8006d1e:	4619      	mov	r1, r3
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f7fe fde4 	bl	80058ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	68b8      	ldr	r0, [r7, #8]
 8006d36:	f000 fa51 	bl	80071dc <prvAddCurrentTaskToDelayedList>
	}
 8006d3a:	bf00      	nop
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	20000dfc 	.word	0x20000dfc

08006d48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10a      	bne.n	8006d74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	60fb      	str	r3, [r7, #12]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	3318      	adds	r3, #24
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fe fe15 	bl	80059a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d7e:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <xTaskRemoveFromEventList+0xb0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d11d      	bne.n	8006dc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fe fe0c 	bl	80059a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d94:	4b19      	ldr	r3, [pc, #100]	; (8006dfc <xTaskRemoveFromEventList+0xb4>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d903      	bls.n	8006da4 <xTaskRemoveFromEventList+0x5c>
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da0:	4a16      	ldr	r2, [pc, #88]	; (8006dfc <xTaskRemoveFromEventList+0xb4>)
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da8:	4613      	mov	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4a13      	ldr	r2, [pc, #76]	; (8006e00 <xTaskRemoveFromEventList+0xb8>)
 8006db2:	441a      	add	r2, r3
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	3304      	adds	r3, #4
 8006db8:	4619      	mov	r1, r3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	f7fe fd97 	bl	80058ee <vListInsertEnd>
 8006dc0:	e005      	b.n	8006dce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	3318      	adds	r3, #24
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	480e      	ldr	r0, [pc, #56]	; (8006e04 <xTaskRemoveFromEventList+0xbc>)
 8006dca:	f7fe fd90 	bl	80058ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd2:	4b0d      	ldr	r3, [pc, #52]	; (8006e08 <xTaskRemoveFromEventList+0xc0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d905      	bls.n	8006de8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006de0:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <xTaskRemoveFromEventList+0xc4>)
 8006de2:	2201      	movs	r2, #1
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	e001      	b.n	8006dec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006dec:	697b      	ldr	r3, [r7, #20]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	200012f8 	.word	0x200012f8
 8006dfc:	200012d8 	.word	0x200012d8
 8006e00:	20000e00 	.word	0x20000e00
 8006e04:	20001290 	.word	0x20001290
 8006e08:	20000dfc 	.word	0x20000dfc
 8006e0c:	200012e4 	.word	0x200012e4

08006e10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e18:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <vTaskInternalSetTimeOutState+0x24>)
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e20:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <vTaskInternalSetTimeOutState+0x28>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	605a      	str	r2, [r3, #4]
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	200012e8 	.word	0x200012e8
 8006e38:	200012d4 	.word	0x200012d4

08006e3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	613b      	str	r3, [r7, #16]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10a      	bne.n	8006e7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	60fb      	str	r3, [r7, #12]
}
 8006e7a:	bf00      	nop
 8006e7c:	e7fe      	b.n	8006e7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e7e:	f000 fe79 	bl	8007b74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e82:	4b1d      	ldr	r3, [pc, #116]	; (8006ef8 <xTaskCheckForTimeOut+0xbc>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9a:	d102      	bne.n	8006ea2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61fb      	str	r3, [r7, #28]
 8006ea0:	e023      	b.n	8006eea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	4b15      	ldr	r3, [pc, #84]	; (8006efc <xTaskCheckForTimeOut+0xc0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d007      	beq.n	8006ebe <xTaskCheckForTimeOut+0x82>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d302      	bcc.n	8006ebe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	61fb      	str	r3, [r7, #28]
 8006ebc:	e015      	b.n	8006eea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d20b      	bcs.n	8006ee0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	1ad2      	subs	r2, r2, r3
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff ff9b 	bl	8006e10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
 8006ede:	e004      	b.n	8006eea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006eea:	f000 fe73 	bl	8007bd4 <vPortExitCritical>

	return xReturn;
 8006eee:	69fb      	ldr	r3, [r7, #28]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3720      	adds	r7, #32
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	200012d4 	.word	0x200012d4
 8006efc:	200012e8 	.word	0x200012e8

08006f00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f04:	4b03      	ldr	r3, [pc, #12]	; (8006f14 <vTaskMissedYield+0x14>)
 8006f06:	2201      	movs	r2, #1
 8006f08:	601a      	str	r2, [r3, #0]
}
 8006f0a:	bf00      	nop
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	200012e4 	.word	0x200012e4

08006f18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f20:	f000 f852 	bl	8006fc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f24:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <prvIdleTask+0x28>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d9f9      	bls.n	8006f20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f2c:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <prvIdleTask+0x2c>)
 8006f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f3c:	e7f0      	b.n	8006f20 <prvIdleTask+0x8>
 8006f3e:	bf00      	nop
 8006f40:	20000e00 	.word	0x20000e00
 8006f44:	e000ed04 	.word	0xe000ed04

08006f48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f4e:	2300      	movs	r3, #0
 8006f50:	607b      	str	r3, [r7, #4]
 8006f52:	e00c      	b.n	8006f6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4a12      	ldr	r2, [pc, #72]	; (8006fa8 <prvInitialiseTaskLists+0x60>)
 8006f60:	4413      	add	r3, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe fc96 	bl	8005894 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	607b      	str	r3, [r7, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b37      	cmp	r3, #55	; 0x37
 8006f72:	d9ef      	bls.n	8006f54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f74:	480d      	ldr	r0, [pc, #52]	; (8006fac <prvInitialiseTaskLists+0x64>)
 8006f76:	f7fe fc8d 	bl	8005894 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f7a:	480d      	ldr	r0, [pc, #52]	; (8006fb0 <prvInitialiseTaskLists+0x68>)
 8006f7c:	f7fe fc8a 	bl	8005894 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f80:	480c      	ldr	r0, [pc, #48]	; (8006fb4 <prvInitialiseTaskLists+0x6c>)
 8006f82:	f7fe fc87 	bl	8005894 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f86:	480c      	ldr	r0, [pc, #48]	; (8006fb8 <prvInitialiseTaskLists+0x70>)
 8006f88:	f7fe fc84 	bl	8005894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f8c:	480b      	ldr	r0, [pc, #44]	; (8006fbc <prvInitialiseTaskLists+0x74>)
 8006f8e:	f7fe fc81 	bl	8005894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f92:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <prvInitialiseTaskLists+0x78>)
 8006f94:	4a05      	ldr	r2, [pc, #20]	; (8006fac <prvInitialiseTaskLists+0x64>)
 8006f96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f98:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <prvInitialiseTaskLists+0x7c>)
 8006f9a:	4a05      	ldr	r2, [pc, #20]	; (8006fb0 <prvInitialiseTaskLists+0x68>)
 8006f9c:	601a      	str	r2, [r3, #0]
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000e00 	.word	0x20000e00
 8006fac:	20001260 	.word	0x20001260
 8006fb0:	20001274 	.word	0x20001274
 8006fb4:	20001290 	.word	0x20001290
 8006fb8:	200012a4 	.word	0x200012a4
 8006fbc:	200012bc 	.word	0x200012bc
 8006fc0:	20001288 	.word	0x20001288
 8006fc4:	2000128c 	.word	0x2000128c

08006fc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fce:	e019      	b.n	8007004 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fd0:	f000 fdd0 	bl	8007b74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd4:	4b10      	ldr	r3, [pc, #64]	; (8007018 <prvCheckTasksWaitingTermination+0x50>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fe fce1 	bl	80059a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	; (800701c <prvCheckTasksWaitingTermination+0x54>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3b01      	subs	r3, #1
 8006fec:	4a0b      	ldr	r2, [pc, #44]	; (800701c <prvCheckTasksWaitingTermination+0x54>)
 8006fee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <prvCheckTasksWaitingTermination+0x58>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	4a0a      	ldr	r2, [pc, #40]	; (8007020 <prvCheckTasksWaitingTermination+0x58>)
 8006ff8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ffa:	f000 fdeb 	bl	8007bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f810 	bl	8007024 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007004:	4b06      	ldr	r3, [pc, #24]	; (8007020 <prvCheckTasksWaitingTermination+0x58>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e1      	bne.n	8006fd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	200012a4 	.word	0x200012a4
 800701c:	200012d0 	.word	0x200012d0
 8007020:	200012b8 	.word	0x200012b8

08007024 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007032:	2b00      	cmp	r3, #0
 8007034:	d108      	bne.n	8007048 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703a:	4618      	mov	r0, r3
 800703c:	f000 ff80 	bl	8007f40 <vPortFree>
				vPortFree( pxTCB );
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 ff7d 	bl	8007f40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007046:	e018      	b.n	800707a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800704e:	2b01      	cmp	r3, #1
 8007050:	d103      	bne.n	800705a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 ff74 	bl	8007f40 <vPortFree>
	}
 8007058:	e00f      	b.n	800707a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007060:	2b02      	cmp	r3, #2
 8007062:	d00a      	beq.n	800707a <prvDeleteTCB+0x56>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	60fb      	str	r3, [r7, #12]
}
 8007076:	bf00      	nop
 8007078:	e7fe      	b.n	8007078 <prvDeleteTCB+0x54>
	}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800708a:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <prvResetNextTaskUnblockTime+0x38>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d104      	bne.n	800709e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007094:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <prvResetNextTaskUnblockTime+0x3c>)
 8007096:	f04f 32ff 	mov.w	r2, #4294967295
 800709a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800709c:	e008      	b.n	80070b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800709e:	4b07      	ldr	r3, [pc, #28]	; (80070bc <prvResetNextTaskUnblockTime+0x38>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	4a04      	ldr	r2, [pc, #16]	; (80070c0 <prvResetNextTaskUnblockTime+0x3c>)
 80070ae:	6013      	str	r3, [r2, #0]
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	20001288 	.word	0x20001288
 80070c0:	200012f0 	.word	0x200012f0

080070c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070ca:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <xTaskGetSchedulerState+0x34>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d102      	bne.n	80070d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070d2:	2301      	movs	r3, #1
 80070d4:	607b      	str	r3, [r7, #4]
 80070d6:	e008      	b.n	80070ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070d8:	4b08      	ldr	r3, [pc, #32]	; (80070fc <xTaskGetSchedulerState+0x38>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d102      	bne.n	80070e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070e0:	2302      	movs	r3, #2
 80070e2:	607b      	str	r3, [r7, #4]
 80070e4:	e001      	b.n	80070ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070ea:	687b      	ldr	r3, [r7, #4]
	}
 80070ec:	4618      	mov	r0, r3
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	200012dc 	.word	0x200012dc
 80070fc:	200012f8 	.word	0x200012f8

08007100 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d056      	beq.n	80071c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007116:	4b2e      	ldr	r3, [pc, #184]	; (80071d0 <xTaskPriorityDisinherit+0xd0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	429a      	cmp	r2, r3
 800711e:	d00a      	beq.n	8007136 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	60bb      	str	r3, [r7, #8]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007158:	1e5a      	subs	r2, r3, #1
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007166:	429a      	cmp	r2, r3
 8007168:	d02c      	beq.n	80071c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800716e:	2b00      	cmp	r3, #0
 8007170:	d128      	bne.n	80071c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	3304      	adds	r3, #4
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fc16 	bl	80059a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007194:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <xTaskPriorityDisinherit+0xd4>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d903      	bls.n	80071a4 <xTaskPriorityDisinherit+0xa4>
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	4a0c      	ldr	r2, [pc, #48]	; (80071d4 <xTaskPriorityDisinherit+0xd4>)
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a8:	4613      	mov	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <xTaskPriorityDisinherit+0xd8>)
 80071b2:	441a      	add	r2, r3
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4619      	mov	r1, r3
 80071ba:	4610      	mov	r0, r2
 80071bc:	f7fe fb97 	bl	80058ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071c0:	2301      	movs	r3, #1
 80071c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071c4:	697b      	ldr	r3, [r7, #20]
	}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20000dfc 	.word	0x20000dfc
 80071d4:	200012d8 	.word	0x200012d8
 80071d8:	20000e00 	.word	0x20000e00

080071dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071e6:	4b21      	ldr	r3, [pc, #132]	; (800726c <prvAddCurrentTaskToDelayedList+0x90>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071ec:	4b20      	ldr	r3, [pc, #128]	; (8007270 <prvAddCurrentTaskToDelayedList+0x94>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3304      	adds	r3, #4
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fe fbd8 	bl	80059a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fe:	d10a      	bne.n	8007216 <prvAddCurrentTaskToDelayedList+0x3a>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d007      	beq.n	8007216 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007206:	4b1a      	ldr	r3, [pc, #104]	; (8007270 <prvAddCurrentTaskToDelayedList+0x94>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3304      	adds	r3, #4
 800720c:	4619      	mov	r1, r3
 800720e:	4819      	ldr	r0, [pc, #100]	; (8007274 <prvAddCurrentTaskToDelayedList+0x98>)
 8007210:	f7fe fb6d 	bl	80058ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007214:	e026      	b.n	8007264 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4413      	add	r3, r2
 800721c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800721e:	4b14      	ldr	r3, [pc, #80]	; (8007270 <prvAddCurrentTaskToDelayedList+0x94>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	429a      	cmp	r2, r3
 800722c:	d209      	bcs.n	8007242 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <prvAddCurrentTaskToDelayedList+0x94>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3304      	adds	r3, #4
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f7fe fb7b 	bl	8005936 <vListInsert>
}
 8007240:	e010      	b.n	8007264 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007242:	4b0e      	ldr	r3, [pc, #56]	; (800727c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <prvAddCurrentTaskToDelayedList+0x94>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3304      	adds	r3, #4
 800724c:	4619      	mov	r1, r3
 800724e:	4610      	mov	r0, r2
 8007250:	f7fe fb71 	bl	8005936 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007254:	4b0a      	ldr	r3, [pc, #40]	; (8007280 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	429a      	cmp	r2, r3
 800725c:	d202      	bcs.n	8007264 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800725e:	4a08      	ldr	r2, [pc, #32]	; (8007280 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	6013      	str	r3, [r2, #0]
}
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	200012d4 	.word	0x200012d4
 8007270:	20000dfc 	.word	0x20000dfc
 8007274:	200012bc 	.word	0x200012bc
 8007278:	2000128c 	.word	0x2000128c
 800727c:	20001288 	.word	0x20001288
 8007280:	200012f0 	.word	0x200012f0

08007284 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08a      	sub	sp, #40	; 0x28
 8007288:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800728e:	f000 fb07 	bl	80078a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007292:	4b1c      	ldr	r3, [pc, #112]	; (8007304 <xTimerCreateTimerTask+0x80>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d021      	beq.n	80072de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800729e:	2300      	movs	r3, #0
 80072a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072a2:	1d3a      	adds	r2, r7, #4
 80072a4:	f107 0108 	add.w	r1, r7, #8
 80072a8:	f107 030c 	add.w	r3, r7, #12
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe fad7 	bl	8005860 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	9202      	str	r2, [sp, #8]
 80072ba:	9301      	str	r3, [sp, #4]
 80072bc:	2302      	movs	r3, #2
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	2300      	movs	r3, #0
 80072c2:	460a      	mov	r2, r1
 80072c4:	4910      	ldr	r1, [pc, #64]	; (8007308 <xTimerCreateTimerTask+0x84>)
 80072c6:	4811      	ldr	r0, [pc, #68]	; (800730c <xTimerCreateTimerTask+0x88>)
 80072c8:	f7ff f8de 	bl	8006488 <xTaskCreateStatic>
 80072cc:	4603      	mov	r3, r0
 80072ce:	4a10      	ldr	r2, [pc, #64]	; (8007310 <xTimerCreateTimerTask+0x8c>)
 80072d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072d2:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <xTimerCreateTimerTask+0x8c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80072da:	2301      	movs	r3, #1
 80072dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10a      	bne.n	80072fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	613b      	str	r3, [r7, #16]
}
 80072f6:	bf00      	nop
 80072f8:	e7fe      	b.n	80072f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80072fa:	697b      	ldr	r3, [r7, #20]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	2000132c 	.word	0x2000132c
 8007308:	08008314 	.word	0x08008314
 800730c:	08007449 	.word	0x08007449
 8007310:	20001330 	.word	0x20001330

08007314 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b08a      	sub	sp, #40	; 0x28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
 8007320:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007322:	2300      	movs	r3, #0
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <xTimerGenericCommand+0x2e>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	623b      	str	r3, [r7, #32]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007342:	4b1a      	ldr	r3, [pc, #104]	; (80073ac <xTimerGenericCommand+0x98>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d02a      	beq.n	80073a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b05      	cmp	r3, #5
 800735a:	dc18      	bgt.n	800738e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800735c:	f7ff feb2 	bl	80070c4 <xTaskGetSchedulerState>
 8007360:	4603      	mov	r3, r0
 8007362:	2b02      	cmp	r3, #2
 8007364:	d109      	bne.n	800737a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007366:	4b11      	ldr	r3, [pc, #68]	; (80073ac <xTimerGenericCommand+0x98>)
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	f107 0110 	add.w	r1, r7, #16
 800736e:	2300      	movs	r3, #0
 8007370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007372:	f7fe fc87 	bl	8005c84 <xQueueGenericSend>
 8007376:	6278      	str	r0, [r7, #36]	; 0x24
 8007378:	e012      	b.n	80073a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800737a:	4b0c      	ldr	r3, [pc, #48]	; (80073ac <xTimerGenericCommand+0x98>)
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	f107 0110 	add.w	r1, r7, #16
 8007382:	2300      	movs	r3, #0
 8007384:	2200      	movs	r2, #0
 8007386:	f7fe fc7d 	bl	8005c84 <xQueueGenericSend>
 800738a:	6278      	str	r0, [r7, #36]	; 0x24
 800738c:	e008      	b.n	80073a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800738e:	4b07      	ldr	r3, [pc, #28]	; (80073ac <xTimerGenericCommand+0x98>)
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	f107 0110 	add.w	r1, r7, #16
 8007396:	2300      	movs	r3, #0
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	f7fe fd71 	bl	8005e80 <xQueueGenericSendFromISR>
 800739e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3728      	adds	r7, #40	; 0x28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	2000132c 	.word	0x2000132c

080073b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ba:	4b22      	ldr	r3, [pc, #136]	; (8007444 <prvProcessExpiredTimer+0x94>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	3304      	adds	r3, #4
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe faed 	bl	80059a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073d4:	f003 0304 	and.w	r3, r3, #4
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d022      	beq.n	8007422 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	699a      	ldr	r2, [r3, #24]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	18d1      	adds	r1, r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	6978      	ldr	r0, [r7, #20]
 80073ea:	f000 f8d1 	bl	8007590 <prvInsertTimerInActiveList>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01f      	beq.n	8007434 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073f4:	2300      	movs	r3, #0
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	2300      	movs	r3, #0
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	2100      	movs	r1, #0
 80073fe:	6978      	ldr	r0, [r7, #20]
 8007400:	f7ff ff88 	bl	8007314 <xTimerGenericCommand>
 8007404:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d113      	bne.n	8007434 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	60fb      	str	r3, [r7, #12]
}
 800741e:	bf00      	nop
 8007420:	e7fe      	b.n	8007420 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	b2da      	uxtb	r2, r3
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	6978      	ldr	r0, [r7, #20]
 800743a:	4798      	blx	r3
}
 800743c:	bf00      	nop
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20001324 	.word	0x20001324

08007448 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007450:	f107 0308 	add.w	r3, r7, #8
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f857 	bl	8007508 <prvGetNextExpireTime>
 800745a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4619      	mov	r1, r3
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f803 	bl	800746c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007466:	f000 f8d5 	bl	8007614 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800746a:	e7f1      	b.n	8007450 <prvTimerTask+0x8>

0800746c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007476:	f7ff fa43 	bl	8006900 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800747a:	f107 0308 	add.w	r3, r7, #8
 800747e:	4618      	mov	r0, r3
 8007480:	f000 f866 	bl	8007550 <prvSampleTimeNow>
 8007484:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d130      	bne.n	80074ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <prvProcessTimerOrBlockTask+0x3c>
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	429a      	cmp	r2, r3
 8007498:	d806      	bhi.n	80074a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800749a:	f7ff fa3f 	bl	800691c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800749e:	68f9      	ldr	r1, [r7, #12]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7ff ff85 	bl	80073b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074a6:	e024      	b.n	80074f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d008      	beq.n	80074c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074ae:	4b13      	ldr	r3, [pc, #76]	; (80074fc <prvProcessTimerOrBlockTask+0x90>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <prvProcessTimerOrBlockTask+0x50>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <prvProcessTimerOrBlockTask+0x52>
 80074bc:	2300      	movs	r3, #0
 80074be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074c0:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <prvProcessTimerOrBlockTask+0x94>)
 80074c2:	6818      	ldr	r0, [r3, #0]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	4619      	mov	r1, r3
 80074ce:	f7fe ffa7 	bl	8006420 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074d2:	f7ff fa23 	bl	800691c <xTaskResumeAll>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80074dc:	4b09      	ldr	r3, [pc, #36]	; (8007504 <prvProcessTimerOrBlockTask+0x98>)
 80074de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	f3bf 8f6f 	isb	sy
}
 80074ec:	e001      	b.n	80074f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80074ee:	f7ff fa15 	bl	800691c <xTaskResumeAll>
}
 80074f2:	bf00      	nop
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20001328 	.word	0x20001328
 8007500:	2000132c 	.word	0x2000132c
 8007504:	e000ed04 	.word	0xe000ed04

08007508 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007510:	4b0e      	ldr	r3, [pc, #56]	; (800754c <prvGetNextExpireTime+0x44>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <prvGetNextExpireTime+0x16>
 800751a:	2201      	movs	r2, #1
 800751c:	e000      	b.n	8007520 <prvGetNextExpireTime+0x18>
 800751e:	2200      	movs	r2, #0
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d105      	bne.n	8007538 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800752c:	4b07      	ldr	r3, [pc, #28]	; (800754c <prvGetNextExpireTime+0x44>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	e001      	b.n	800753c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800753c:	68fb      	ldr	r3, [r7, #12]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	20001324 	.word	0x20001324

08007550 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007558:	f7ff fa7e 	bl	8006a58 <xTaskGetTickCount>
 800755c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800755e:	4b0b      	ldr	r3, [pc, #44]	; (800758c <prvSampleTimeNow+0x3c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	429a      	cmp	r2, r3
 8007566:	d205      	bcs.n	8007574 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007568:	f000 f936 	bl	80077d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	e002      	b.n	800757a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800757a:	4a04      	ldr	r2, [pc, #16]	; (800758c <prvSampleTimeNow+0x3c>)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007580:	68fb      	ldr	r3, [r7, #12]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20001334 	.word	0x20001334

08007590 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
 800759c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d812      	bhi.n	80075dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	1ad2      	subs	r2, r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d302      	bcc.n	80075ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80075c4:	2301      	movs	r3, #1
 80075c6:	617b      	str	r3, [r7, #20]
 80075c8:	e01b      	b.n	8007602 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80075ca:	4b10      	ldr	r3, [pc, #64]	; (800760c <prvInsertTimerInActiveList+0x7c>)
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3304      	adds	r3, #4
 80075d2:	4619      	mov	r1, r3
 80075d4:	4610      	mov	r0, r2
 80075d6:	f7fe f9ae 	bl	8005936 <vListInsert>
 80075da:	e012      	b.n	8007602 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d206      	bcs.n	80075f2 <prvInsertTimerInActiveList+0x62>
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d302      	bcc.n	80075f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80075ec:	2301      	movs	r3, #1
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	e007      	b.n	8007602 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075f2:	4b07      	ldr	r3, [pc, #28]	; (8007610 <prvInsertTimerInActiveList+0x80>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4619      	mov	r1, r3
 80075fc:	4610      	mov	r0, r2
 80075fe:	f7fe f99a 	bl	8005936 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007602:	697b      	ldr	r3, [r7, #20]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	20001328 	.word	0x20001328
 8007610:	20001324 	.word	0x20001324

08007614 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08e      	sub	sp, #56	; 0x38
 8007618:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800761a:	e0ca      	b.n	80077b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	da18      	bge.n	8007654 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007622:	1d3b      	adds	r3, r7, #4
 8007624:	3304      	adds	r3, #4
 8007626:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	61fb      	str	r3, [r7, #28]
}
 8007640:	bf00      	nop
 8007642:	e7fe      	b.n	8007642 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764a:	6850      	ldr	r0, [r2, #4]
 800764c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764e:	6892      	ldr	r2, [r2, #8]
 8007650:	4611      	mov	r1, r2
 8007652:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f2c0 80aa 	blt.w	80077b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d004      	beq.n	8007672 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	3304      	adds	r3, #4
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe f99b 	bl	80059a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007672:	463b      	mov	r3, r7
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff ff6b 	bl	8007550 <prvSampleTimeNow>
 800767a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b09      	cmp	r3, #9
 8007680:	f200 8097 	bhi.w	80077b2 <prvProcessReceivedCommands+0x19e>
 8007684:	a201      	add	r2, pc, #4	; (adr r2, 800768c <prvProcessReceivedCommands+0x78>)
 8007686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768a:	bf00      	nop
 800768c:	080076b5 	.word	0x080076b5
 8007690:	080076b5 	.word	0x080076b5
 8007694:	080076b5 	.word	0x080076b5
 8007698:	08007729 	.word	0x08007729
 800769c:	0800773d 	.word	0x0800773d
 80076a0:	08007787 	.word	0x08007787
 80076a4:	080076b5 	.word	0x080076b5
 80076a8:	080076b5 	.word	0x080076b5
 80076ac:	08007729 	.word	0x08007729
 80076b0:	0800773d 	.word	0x0800773d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076ba:	f043 0301 	orr.w	r3, r3, #1
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	18d1      	adds	r1, r2, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076d4:	f7ff ff5c 	bl	8007590 <prvInsertTimerInActiveList>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d069      	beq.n	80077b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d05e      	beq.n	80077b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	441a      	add	r2, r3
 80076fc:	2300      	movs	r3, #0
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	2300      	movs	r3, #0
 8007702:	2100      	movs	r1, #0
 8007704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007706:	f7ff fe05 	bl	8007314 <xTimerGenericCommand>
 800770a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d14f      	bne.n	80077b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	61bb      	str	r3, [r7, #24]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800772e:	f023 0301 	bic.w	r3, r3, #1
 8007732:	b2da      	uxtb	r2, r3
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800773a:	e03a      	b.n	80077b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007742:	f043 0301 	orr.w	r3, r3, #1
 8007746:	b2da      	uxtb	r2, r3
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	617b      	str	r3, [r7, #20]
}
 800776e:	bf00      	nop
 8007770:	e7fe      	b.n	8007770 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	699a      	ldr	r2, [r3, #24]
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	18d1      	adds	r1, r2, r3
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007780:	f7ff ff06 	bl	8007590 <prvInsertTimerInActiveList>
					break;
 8007784:	e015      	b.n	80077b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b00      	cmp	r3, #0
 8007792:	d103      	bne.n	800779c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007796:	f000 fbd3 	bl	8007f40 <vPortFree>
 800779a:	e00a      	b.n	80077b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077a2:	f023 0301 	bic.w	r3, r3, #1
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80077ae:	e000      	b.n	80077b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80077b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077b2:	4b08      	ldr	r3, [pc, #32]	; (80077d4 <prvProcessReceivedCommands+0x1c0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	1d39      	adds	r1, r7, #4
 80077b8:	2200      	movs	r2, #0
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe fbf8 	bl	8005fb0 <xQueueReceive>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f47f af2a 	bne.w	800761c <prvProcessReceivedCommands+0x8>
	}
}
 80077c8:	bf00      	nop
 80077ca:	bf00      	nop
 80077cc:	3730      	adds	r7, #48	; 0x30
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	2000132c 	.word	0x2000132c

080077d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077de:	e048      	b.n	8007872 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077e0:	4b2d      	ldr	r3, [pc, #180]	; (8007898 <prvSwitchTimerLists+0xc0>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ea:	4b2b      	ldr	r3, [pc, #172]	; (8007898 <prvSwitchTimerLists+0xc0>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fe f8d5 	bl	80059a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800780c:	f003 0304 	and.w	r3, r3, #4
 8007810:	2b00      	cmp	r3, #0
 8007812:	d02e      	beq.n	8007872 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4413      	add	r3, r2
 800781c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	429a      	cmp	r2, r3
 8007824:	d90e      	bls.n	8007844 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007832:	4b19      	ldr	r3, [pc, #100]	; (8007898 <prvSwitchTimerLists+0xc0>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3304      	adds	r3, #4
 800783a:	4619      	mov	r1, r3
 800783c:	4610      	mov	r0, r2
 800783e:	f7fe f87a 	bl	8005936 <vListInsert>
 8007842:	e016      	b.n	8007872 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007844:	2300      	movs	r3, #0
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	2300      	movs	r3, #0
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	2100      	movs	r1, #0
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f7ff fd60 	bl	8007314 <xTimerGenericCommand>
 8007854:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	603b      	str	r3, [r7, #0]
}
 800786e:	bf00      	nop
 8007870:	e7fe      	b.n	8007870 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007872:	4b09      	ldr	r3, [pc, #36]	; (8007898 <prvSwitchTimerLists+0xc0>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1b1      	bne.n	80077e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800787c:	4b06      	ldr	r3, [pc, #24]	; (8007898 <prvSwitchTimerLists+0xc0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007882:	4b06      	ldr	r3, [pc, #24]	; (800789c <prvSwitchTimerLists+0xc4>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a04      	ldr	r2, [pc, #16]	; (8007898 <prvSwitchTimerLists+0xc0>)
 8007888:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800788a:	4a04      	ldr	r2, [pc, #16]	; (800789c <prvSwitchTimerLists+0xc4>)
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	6013      	str	r3, [r2, #0]
}
 8007890:	bf00      	nop
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	20001324 	.word	0x20001324
 800789c:	20001328 	.word	0x20001328

080078a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80078a6:	f000 f965 	bl	8007b74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80078aa:	4b15      	ldr	r3, [pc, #84]	; (8007900 <prvCheckForValidListAndQueue+0x60>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d120      	bne.n	80078f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80078b2:	4814      	ldr	r0, [pc, #80]	; (8007904 <prvCheckForValidListAndQueue+0x64>)
 80078b4:	f7fd ffee 	bl	8005894 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80078b8:	4813      	ldr	r0, [pc, #76]	; (8007908 <prvCheckForValidListAndQueue+0x68>)
 80078ba:	f7fd ffeb 	bl	8005894 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80078be:	4b13      	ldr	r3, [pc, #76]	; (800790c <prvCheckForValidListAndQueue+0x6c>)
 80078c0:	4a10      	ldr	r2, [pc, #64]	; (8007904 <prvCheckForValidListAndQueue+0x64>)
 80078c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80078c4:	4b12      	ldr	r3, [pc, #72]	; (8007910 <prvCheckForValidListAndQueue+0x70>)
 80078c6:	4a10      	ldr	r2, [pc, #64]	; (8007908 <prvCheckForValidListAndQueue+0x68>)
 80078c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80078ca:	2300      	movs	r3, #0
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	4b11      	ldr	r3, [pc, #68]	; (8007914 <prvCheckForValidListAndQueue+0x74>)
 80078d0:	4a11      	ldr	r2, [pc, #68]	; (8007918 <prvCheckForValidListAndQueue+0x78>)
 80078d2:	2110      	movs	r1, #16
 80078d4:	200a      	movs	r0, #10
 80078d6:	f7fe f8f9 	bl	8005acc <xQueueGenericCreateStatic>
 80078da:	4603      	mov	r3, r0
 80078dc:	4a08      	ldr	r2, [pc, #32]	; (8007900 <prvCheckForValidListAndQueue+0x60>)
 80078de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <prvCheckForValidListAndQueue+0x60>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80078e8:	4b05      	ldr	r3, [pc, #20]	; (8007900 <prvCheckForValidListAndQueue+0x60>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	490b      	ldr	r1, [pc, #44]	; (800791c <prvCheckForValidListAndQueue+0x7c>)
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fe fd6c 	bl	80063cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078f4:	f000 f96e 	bl	8007bd4 <vPortExitCritical>
}
 80078f8:	bf00      	nop
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	2000132c 	.word	0x2000132c
 8007904:	200012fc 	.word	0x200012fc
 8007908:	20001310 	.word	0x20001310
 800790c:	20001324 	.word	0x20001324
 8007910:	20001328 	.word	0x20001328
 8007914:	200013d8 	.word	0x200013d8
 8007918:	20001338 	.word	0x20001338
 800791c:	0800831c 	.word	0x0800831c

08007920 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3b04      	subs	r3, #4
 8007930:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3b04      	subs	r3, #4
 800793e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f023 0201 	bic.w	r2, r3, #1
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3b04      	subs	r3, #4
 800794e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007950:	4a0c      	ldr	r2, [pc, #48]	; (8007984 <pxPortInitialiseStack+0x64>)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3b14      	subs	r3, #20
 800795a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3b04      	subs	r3, #4
 8007966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f06f 0202 	mvn.w	r2, #2
 800796e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3b20      	subs	r3, #32
 8007974:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007976:	68fb      	ldr	r3, [r7, #12]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	08007989 	.word	0x08007989

08007988 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007992:	4b12      	ldr	r3, [pc, #72]	; (80079dc <prvTaskExitError+0x54>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799a:	d00a      	beq.n	80079b2 <prvTaskExitError+0x2a>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	60fb      	str	r3, [r7, #12]
}
 80079ae:	bf00      	nop
 80079b0:	e7fe      	b.n	80079b0 <prvTaskExitError+0x28>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	60bb      	str	r3, [r7, #8]
}
 80079c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079c6:	bf00      	nop
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0fc      	beq.n	80079c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079ce:	bf00      	nop
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	2000000c 	.word	0x2000000c

080079e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079e0:	4b07      	ldr	r3, [pc, #28]	; (8007a00 <pxCurrentTCBConst2>)
 80079e2:	6819      	ldr	r1, [r3, #0]
 80079e4:	6808      	ldr	r0, [r1, #0]
 80079e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ea:	f380 8809 	msr	PSP, r0
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f04f 0000 	mov.w	r0, #0
 80079f6:	f380 8811 	msr	BASEPRI, r0
 80079fa:	4770      	bx	lr
 80079fc:	f3af 8000 	nop.w

08007a00 <pxCurrentTCBConst2>:
 8007a00:	20000dfc 	.word	0x20000dfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop

08007a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a08:	4808      	ldr	r0, [pc, #32]	; (8007a2c <prvPortStartFirstTask+0x24>)
 8007a0a:	6800      	ldr	r0, [r0, #0]
 8007a0c:	6800      	ldr	r0, [r0, #0]
 8007a0e:	f380 8808 	msr	MSP, r0
 8007a12:	f04f 0000 	mov.w	r0, #0
 8007a16:	f380 8814 	msr	CONTROL, r0
 8007a1a:	b662      	cpsie	i
 8007a1c:	b661      	cpsie	f
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	df00      	svc	0
 8007a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a2a:	bf00      	nop
 8007a2c:	e000ed08 	.word	0xe000ed08

08007a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a36:	4b46      	ldr	r3, [pc, #280]	; (8007b50 <xPortStartScheduler+0x120>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a46      	ldr	r2, [pc, #280]	; (8007b54 <xPortStartScheduler+0x124>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d10a      	bne.n	8007a56 <xPortStartScheduler+0x26>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	613b      	str	r3, [r7, #16]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a56:	4b3e      	ldr	r3, [pc, #248]	; (8007b50 <xPortStartScheduler+0x120>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a3f      	ldr	r2, [pc, #252]	; (8007b58 <xPortStartScheduler+0x128>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d10a      	bne.n	8007a76 <xPortStartScheduler+0x46>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	60fb      	str	r3, [r7, #12]
}
 8007a72:	bf00      	nop
 8007a74:	e7fe      	b.n	8007a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a76:	4b39      	ldr	r3, [pc, #228]	; (8007b5c <xPortStartScheduler+0x12c>)
 8007a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	22ff      	movs	r2, #255	; 0xff
 8007a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <xPortStartScheduler+0x130>)
 8007a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a9e:	4b31      	ldr	r3, [pc, #196]	; (8007b64 <xPortStartScheduler+0x134>)
 8007aa0:	2207      	movs	r2, #7
 8007aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aa4:	e009      	b.n	8007aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007aa6:	4b2f      	ldr	r3, [pc, #188]	; (8007b64 <xPortStartScheduler+0x134>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	4a2d      	ldr	r2, [pc, #180]	; (8007b64 <xPortStartScheduler+0x134>)
 8007aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aba:	78fb      	ldrb	r3, [r7, #3]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac2:	2b80      	cmp	r3, #128	; 0x80
 8007ac4:	d0ef      	beq.n	8007aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ac6:	4b27      	ldr	r3, [pc, #156]	; (8007b64 <xPortStartScheduler+0x134>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f1c3 0307 	rsb	r3, r3, #7
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d00a      	beq.n	8007ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	60bb      	str	r3, [r7, #8]
}
 8007ae4:	bf00      	nop
 8007ae6:	e7fe      	b.n	8007ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ae8:	4b1e      	ldr	r3, [pc, #120]	; (8007b64 <xPortStartScheduler+0x134>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	021b      	lsls	r3, r3, #8
 8007aee:	4a1d      	ldr	r2, [pc, #116]	; (8007b64 <xPortStartScheduler+0x134>)
 8007af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007af2:	4b1c      	ldr	r3, [pc, #112]	; (8007b64 <xPortStartScheduler+0x134>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007afa:	4a1a      	ldr	r2, [pc, #104]	; (8007b64 <xPortStartScheduler+0x134>)
 8007afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b06:	4b18      	ldr	r3, [pc, #96]	; (8007b68 <xPortStartScheduler+0x138>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <xPortStartScheduler+0x138>)
 8007b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b12:	4b15      	ldr	r3, [pc, #84]	; (8007b68 <xPortStartScheduler+0x138>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a14      	ldr	r2, [pc, #80]	; (8007b68 <xPortStartScheduler+0x138>)
 8007b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b1e:	f000 f8dd 	bl	8007cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b22:	4b12      	ldr	r3, [pc, #72]	; (8007b6c <xPortStartScheduler+0x13c>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b28:	f000 f8fc 	bl	8007d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b2c:	4b10      	ldr	r3, [pc, #64]	; (8007b70 <xPortStartScheduler+0x140>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a0f      	ldr	r2, [pc, #60]	; (8007b70 <xPortStartScheduler+0x140>)
 8007b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b38:	f7ff ff66 	bl	8007a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b3c:	f7ff f856 	bl	8006bec <vTaskSwitchContext>
	prvTaskExitError();
 8007b40:	f7ff ff22 	bl	8007988 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	e000ed00 	.word	0xe000ed00
 8007b54:	410fc271 	.word	0x410fc271
 8007b58:	410fc270 	.word	0x410fc270
 8007b5c:	e000e400 	.word	0xe000e400
 8007b60:	20001428 	.word	0x20001428
 8007b64:	2000142c 	.word	0x2000142c
 8007b68:	e000ed20 	.word	0xe000ed20
 8007b6c:	2000000c 	.word	0x2000000c
 8007b70:	e000ef34 	.word	0xe000ef34

08007b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
	__asm volatile
 8007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7e:	f383 8811 	msr	BASEPRI, r3
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	607b      	str	r3, [r7, #4]
}
 8007b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b8e:	4b0f      	ldr	r3, [pc, #60]	; (8007bcc <vPortEnterCritical+0x58>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	4a0d      	ldr	r2, [pc, #52]	; (8007bcc <vPortEnterCritical+0x58>)
 8007b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b98:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <vPortEnterCritical+0x58>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d10f      	bne.n	8007bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	; (8007bd0 <vPortEnterCritical+0x5c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	603b      	str	r3, [r7, #0]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <vPortEnterCritical+0x4a>
	}
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	2000000c 	.word	0x2000000c
 8007bd0:	e000ed04 	.word	0xe000ed04

08007bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bda:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <vPortExitCritical+0x50>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10a      	bne.n	8007bf8 <vPortExitCritical+0x24>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	607b      	str	r3, [r7, #4]
}
 8007bf4:	bf00      	nop
 8007bf6:	e7fe      	b.n	8007bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bf8:	4b0a      	ldr	r3, [pc, #40]	; (8007c24 <vPortExitCritical+0x50>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <vPortExitCritical+0x50>)
 8007c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c02:	4b08      	ldr	r3, [pc, #32]	; (8007c24 <vPortExitCritical+0x50>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d105      	bne.n	8007c16 <vPortExitCritical+0x42>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	f383 8811 	msr	BASEPRI, r3
}
 8007c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	2000000c 	.word	0x2000000c
	...

08007c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c30:	f3ef 8009 	mrs	r0, PSP
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	4b15      	ldr	r3, [pc, #84]	; (8007c90 <pxCurrentTCBConst>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	f01e 0f10 	tst.w	lr, #16
 8007c40:	bf08      	it	eq
 8007c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4a:	6010      	str	r0, [r2, #0]
 8007c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c54:	f380 8811 	msr	BASEPRI, r0
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f7fe ffc4 	bl	8006bec <vTaskSwitchContext>
 8007c64:	f04f 0000 	mov.w	r0, #0
 8007c68:	f380 8811 	msr	BASEPRI, r0
 8007c6c:	bc09      	pop	{r0, r3}
 8007c6e:	6819      	ldr	r1, [r3, #0]
 8007c70:	6808      	ldr	r0, [r1, #0]
 8007c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c76:	f01e 0f10 	tst.w	lr, #16
 8007c7a:	bf08      	it	eq
 8007c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c80:	f380 8809 	msr	PSP, r0
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	f3af 8000 	nop.w

08007c90 <pxCurrentTCBConst>:
 8007c90:	20000dfc 	.word	0x20000dfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c94:	bf00      	nop
 8007c96:	bf00      	nop

08007c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	607b      	str	r3, [r7, #4]
}
 8007cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cb2:	f7fe fee1 	bl	8006a78 <xTaskIncrementTick>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cbc:	4b06      	ldr	r3, [pc, #24]	; (8007cd8 <SysTick_Handler+0x40>)
 8007cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	f383 8811 	msr	BASEPRI, r3
}
 8007cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <vPortSetupTimerInterrupt+0x34>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <vPortSetupTimerInterrupt+0x38>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cec:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <vPortSetupTimerInterrupt+0x3c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a0a      	ldr	r2, [pc, #40]	; (8007d1c <vPortSetupTimerInterrupt+0x40>)
 8007cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf6:	099b      	lsrs	r3, r3, #6
 8007cf8:	4a09      	ldr	r2, [pc, #36]	; (8007d20 <vPortSetupTimerInterrupt+0x44>)
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cfe:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <vPortSetupTimerInterrupt+0x34>)
 8007d00:	2207      	movs	r2, #7
 8007d02:	601a      	str	r2, [r3, #0]
}
 8007d04:	bf00      	nop
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	e000e010 	.word	0xe000e010
 8007d14:	e000e018 	.word	0xe000e018
 8007d18:	20000000 	.word	0x20000000
 8007d1c:	10624dd3 	.word	0x10624dd3
 8007d20:	e000e014 	.word	0xe000e014

08007d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d34 <vPortEnableVFP+0x10>
 8007d28:	6801      	ldr	r1, [r0, #0]
 8007d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d2e:	6001      	str	r1, [r0, #0]
 8007d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d32:	bf00      	nop
 8007d34:	e000ed88 	.word	0xe000ed88

08007d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d3e:	f3ef 8305 	mrs	r3, IPSR
 8007d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b0f      	cmp	r3, #15
 8007d48:	d914      	bls.n	8007d74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d4a:	4a17      	ldr	r2, [pc, #92]	; (8007da8 <vPortValidateInterruptPriority+0x70>)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d54:	4b15      	ldr	r3, [pc, #84]	; (8007dac <vPortValidateInterruptPriority+0x74>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	7afa      	ldrb	r2, [r7, #11]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d20a      	bcs.n	8007d74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	607b      	str	r3, [r7, #4]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d74:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <vPortValidateInterruptPriority+0x78>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d7c:	4b0d      	ldr	r3, [pc, #52]	; (8007db4 <vPortValidateInterruptPriority+0x7c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d90a      	bls.n	8007d9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	603b      	str	r3, [r7, #0]
}
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <vPortValidateInterruptPriority+0x60>
	}
 8007d9a:	bf00      	nop
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	e000e3f0 	.word	0xe000e3f0
 8007dac:	20001428 	.word	0x20001428
 8007db0:	e000ed0c 	.word	0xe000ed0c
 8007db4:	2000142c 	.word	0x2000142c

08007db8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	; 0x28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007dc4:	f7fe fd9c 	bl	8006900 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007dc8:	4b58      	ldr	r3, [pc, #352]	; (8007f2c <pvPortMalloc+0x174>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007dd0:	f000 f910 	bl	8007ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007dd4:	4b56      	ldr	r3, [pc, #344]	; (8007f30 <pvPortMalloc+0x178>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f040 808e 	bne.w	8007efe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01d      	beq.n	8007e24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007de8:	2208      	movs	r2, #8
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4413      	add	r3, r2
 8007dee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d014      	beq.n	8007e24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f023 0307 	bic.w	r3, r3, #7
 8007e00:	3308      	adds	r3, #8
 8007e02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <pvPortMalloc+0x6c>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	617b      	str	r3, [r7, #20]
}
 8007e20:	bf00      	nop
 8007e22:	e7fe      	b.n	8007e22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d069      	beq.n	8007efe <pvPortMalloc+0x146>
 8007e2a:	4b42      	ldr	r3, [pc, #264]	; (8007f34 <pvPortMalloc+0x17c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d864      	bhi.n	8007efe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e34:	4b40      	ldr	r3, [pc, #256]	; (8007f38 <pvPortMalloc+0x180>)
 8007e36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e38:	4b3f      	ldr	r3, [pc, #252]	; (8007f38 <pvPortMalloc+0x180>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e3e:	e004      	b.n	8007e4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d903      	bls.n	8007e5c <pvPortMalloc+0xa4>
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1f1      	bne.n	8007e40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e5c:	4b33      	ldr	r3, [pc, #204]	; (8007f2c <pvPortMalloc+0x174>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d04b      	beq.n	8007efe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2208      	movs	r2, #8
 8007e6c:	4413      	add	r3, r2
 8007e6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	1ad2      	subs	r2, r2, r3
 8007e80:	2308      	movs	r3, #8
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d91f      	bls.n	8007ec8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <pvPortMalloc+0xf8>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	613b      	str	r3, [r7, #16]
}
 8007eac:	bf00      	nop
 8007eae:	e7fe      	b.n	8007eae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	1ad2      	subs	r2, r2, r3
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ec2:	69b8      	ldr	r0, [r7, #24]
 8007ec4:	f000 f8f8 	bl	80080b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ec8:	4b1a      	ldr	r3, [pc, #104]	; (8007f34 <pvPortMalloc+0x17c>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	4a18      	ldr	r2, [pc, #96]	; (8007f34 <pvPortMalloc+0x17c>)
 8007ed4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ed6:	4b17      	ldr	r3, [pc, #92]	; (8007f34 <pvPortMalloc+0x17c>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4b18      	ldr	r3, [pc, #96]	; (8007f3c <pvPortMalloc+0x184>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d203      	bcs.n	8007eea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ee2:	4b14      	ldr	r3, [pc, #80]	; (8007f34 <pvPortMalloc+0x17c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a15      	ldr	r2, [pc, #84]	; (8007f3c <pvPortMalloc+0x184>)
 8007ee8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	4b10      	ldr	r3, [pc, #64]	; (8007f30 <pvPortMalloc+0x178>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	2200      	movs	r2, #0
 8007efc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007efe:	f7fe fd0d 	bl	800691c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00a      	beq.n	8007f22 <pvPortMalloc+0x16a>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	60fb      	str	r3, [r7, #12]
}
 8007f1e:	bf00      	nop
 8007f20:	e7fe      	b.n	8007f20 <pvPortMalloc+0x168>
	return pvReturn;
 8007f22:	69fb      	ldr	r3, [r7, #28]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3728      	adds	r7, #40	; 0x28
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20001ff0 	.word	0x20001ff0
 8007f30:	20001ffc 	.word	0x20001ffc
 8007f34:	20001ff4 	.word	0x20001ff4
 8007f38:	20001fe8 	.word	0x20001fe8
 8007f3c:	20001ff8 	.word	0x20001ff8

08007f40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d048      	beq.n	8007fe4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f52:	2308      	movs	r3, #8
 8007f54:	425b      	negs	r3, r3
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4413      	add	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	4b21      	ldr	r3, [pc, #132]	; (8007fec <vPortFree+0xac>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <vPortFree+0x44>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	60fb      	str	r3, [r7, #12]
}
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00a      	beq.n	8007fa2 <vPortFree+0x62>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	60bb      	str	r3, [r7, #8]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <vPortFree+0xac>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d019      	beq.n	8007fe4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d115      	bne.n	8007fe4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <vPortFree+0xac>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	401a      	ands	r2, r3
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fc8:	f7fe fc9a 	bl	8006900 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	4b07      	ldr	r3, [pc, #28]	; (8007ff0 <vPortFree+0xb0>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	4a06      	ldr	r2, [pc, #24]	; (8007ff0 <vPortFree+0xb0>)
 8007fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fda:	6938      	ldr	r0, [r7, #16]
 8007fdc:	f000 f86c 	bl	80080b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007fe0:	f7fe fc9c 	bl	800691c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fe4:	bf00      	nop
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	20001ffc 	.word	0x20001ffc
 8007ff0:	20001ff4 	.word	0x20001ff4

08007ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ffa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008000:	4b27      	ldr	r3, [pc, #156]	; (80080a0 <prvHeapInit+0xac>)
 8008002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00c      	beq.n	8008028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3307      	adds	r3, #7
 8008012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0307 	bic.w	r3, r3, #7
 800801a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	4a1f      	ldr	r2, [pc, #124]	; (80080a0 <prvHeapInit+0xac>)
 8008024:	4413      	add	r3, r2
 8008026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800802c:	4a1d      	ldr	r2, [pc, #116]	; (80080a4 <prvHeapInit+0xb0>)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008032:	4b1c      	ldr	r3, [pc, #112]	; (80080a4 <prvHeapInit+0xb0>)
 8008034:	2200      	movs	r2, #0
 8008036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	4413      	add	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008040:	2208      	movs	r2, #8
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	1a9b      	subs	r3, r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0307 	bic.w	r3, r3, #7
 800804e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4a15      	ldr	r2, [pc, #84]	; (80080a8 <prvHeapInit+0xb4>)
 8008054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008056:	4b14      	ldr	r3, [pc, #80]	; (80080a8 <prvHeapInit+0xb4>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2200      	movs	r2, #0
 800805c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <prvHeapInit+0xb4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008074:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <prvHeapInit+0xb4>)
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	4a0a      	ldr	r2, [pc, #40]	; (80080ac <prvHeapInit+0xb8>)
 8008082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	4a09      	ldr	r2, [pc, #36]	; (80080b0 <prvHeapInit+0xbc>)
 800808a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800808c:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <prvHeapInit+0xc0>)
 800808e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008092:	601a      	str	r2, [r3, #0]
}
 8008094:	bf00      	nop
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	20001430 	.word	0x20001430
 80080a4:	20001fe8 	.word	0x20001fe8
 80080a8:	20001ff0 	.word	0x20001ff0
 80080ac:	20001ff8 	.word	0x20001ff8
 80080b0:	20001ff4 	.word	0x20001ff4
 80080b4:	20001ffc 	.word	0x20001ffc

080080b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080c0:	4b28      	ldr	r3, [pc, #160]	; (8008164 <prvInsertBlockIntoFreeList+0xac>)
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	e002      	b.n	80080cc <prvInsertBlockIntoFreeList+0x14>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d8f7      	bhi.n	80080c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	4413      	add	r3, r2
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d108      	bne.n	80080fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	441a      	add	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	441a      	add	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	429a      	cmp	r2, r3
 800810c:	d118      	bne.n	8008140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4b15      	ldr	r3, [pc, #84]	; (8008168 <prvInsertBlockIntoFreeList+0xb0>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	429a      	cmp	r2, r3
 8008118:	d00d      	beq.n	8008136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	441a      	add	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	601a      	str	r2, [r3, #0]
 8008134:	e008      	b.n	8008148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008136:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <prvInsertBlockIntoFreeList+0xb0>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	e003      	b.n	8008148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	429a      	cmp	r2, r3
 800814e:	d002      	beq.n	8008156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20001fe8 	.word	0x20001fe8
 8008168:	20001ff0 	.word	0x20001ff0

0800816c <__libc_init_array>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	4d0d      	ldr	r5, [pc, #52]	; (80081a4 <__libc_init_array+0x38>)
 8008170:	4c0d      	ldr	r4, [pc, #52]	; (80081a8 <__libc_init_array+0x3c>)
 8008172:	1b64      	subs	r4, r4, r5
 8008174:	10a4      	asrs	r4, r4, #2
 8008176:	2600      	movs	r6, #0
 8008178:	42a6      	cmp	r6, r4
 800817a:	d109      	bne.n	8008190 <__libc_init_array+0x24>
 800817c:	4d0b      	ldr	r5, [pc, #44]	; (80081ac <__libc_init_array+0x40>)
 800817e:	4c0c      	ldr	r4, [pc, #48]	; (80081b0 <__libc_init_array+0x44>)
 8008180:	f000 f82e 	bl	80081e0 <_init>
 8008184:	1b64      	subs	r4, r4, r5
 8008186:	10a4      	asrs	r4, r4, #2
 8008188:	2600      	movs	r6, #0
 800818a:	42a6      	cmp	r6, r4
 800818c:	d105      	bne.n	800819a <__libc_init_array+0x2e>
 800818e:	bd70      	pop	{r4, r5, r6, pc}
 8008190:	f855 3b04 	ldr.w	r3, [r5], #4
 8008194:	4798      	blx	r3
 8008196:	3601      	adds	r6, #1
 8008198:	e7ee      	b.n	8008178 <__libc_init_array+0xc>
 800819a:	f855 3b04 	ldr.w	r3, [r5], #4
 800819e:	4798      	blx	r3
 80081a0:	3601      	adds	r6, #1
 80081a2:	e7f2      	b.n	800818a <__libc_init_array+0x1e>
 80081a4:	08008394 	.word	0x08008394
 80081a8:	08008394 	.word	0x08008394
 80081ac:	08008394 	.word	0x08008394
 80081b0:	08008398 	.word	0x08008398

080081b4 <memcpy>:
 80081b4:	440a      	add	r2, r1
 80081b6:	4291      	cmp	r1, r2
 80081b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80081bc:	d100      	bne.n	80081c0 <memcpy+0xc>
 80081be:	4770      	bx	lr
 80081c0:	b510      	push	{r4, lr}
 80081c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ca:	4291      	cmp	r1, r2
 80081cc:	d1f9      	bne.n	80081c2 <memcpy+0xe>
 80081ce:	bd10      	pop	{r4, pc}

080081d0 <memset>:
 80081d0:	4402      	add	r2, r0
 80081d2:	4603      	mov	r3, r0
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d100      	bne.n	80081da <memset+0xa>
 80081d8:	4770      	bx	lr
 80081da:	f803 1b01 	strb.w	r1, [r3], #1
 80081de:	e7f9      	b.n	80081d4 <memset+0x4>

080081e0 <_init>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	bf00      	nop
 80081e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081e6:	bc08      	pop	{r3}
 80081e8:	469e      	mov	lr, r3
 80081ea:	4770      	bx	lr

080081ec <_fini>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	bf00      	nop
 80081f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f2:	bc08      	pop	{r3}
 80081f4:	469e      	mov	lr, r3
 80081f6:	4770      	bx	lr
