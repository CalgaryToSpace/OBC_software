
Okay...LetsDoThisOneLastTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800495c  0800495c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004964  08004964  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800496c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000070  080049dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  080049dc  00020648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013402  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002329  00000000  00000000  000334a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  000357d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00036508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c3f  00000000  00000000  00037178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd18  00000000  00000000  00060db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010077e  00000000  00000000  00070acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017124d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000377c  00000000  00000000  001712a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000070 	.word	0x20000070
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004798 	.word	0x08004798

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000074 	.word	0x20000074
 80001f8:	08004798 	.word	0x08004798

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Change_Bitrate.9299>:
   * 				921600
   */

  enum BitrateStatus{Change_Success, Wrong_input};

  enum BitrateStatus Change_Bitrate(int bitrate){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	f8c7 c000 	str.w	ip, [r7]

  	switch(bitrate)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
 8000506:	f000 80bb 	beq.w	8000680 <Change_Bitrate.9299+0x18c>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
 8000510:	f300 80c2 	bgt.w	8000698 <Change_Bitrate.9299+0x1a4>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
 800051a:	f000 80a5 	beq.w	8000668 <Change_Bitrate.9299+0x174>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
 8000524:	f300 80b8 	bgt.w	8000698 <Change_Bitrate.9299+0x1a4>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
 800052e:	f000 808f 	beq.w	8000650 <Change_Bitrate.9299+0x15c>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
 8000538:	f300 80ae 	bgt.w	8000698 <Change_Bitrate.9299+0x1a4>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8000542:	d079      	beq.n	8000638 <Change_Bitrate.9299+0x144>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 800054a:	f300 80a5 	bgt.w	8000698 <Change_Bitrate.9299+0x1a4>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8000554:	d064      	beq.n	8000620 <Change_Bitrate.9299+0x12c>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 800055c:	f300 809c 	bgt.w	8000698 <Change_Bitrate.9299+0x1a4>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 8000566:	d04f      	beq.n	8000608 <Change_Bitrate.9299+0x114>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 800056e:	f300 8093 	bgt.w	8000698 <Change_Bitrate.9299+0x1a4>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8000578:	d03a      	beq.n	80005f0 <Change_Bitrate.9299+0xfc>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8000580:	f300 808a 	bgt.w	8000698 <Change_Bitrate.9299+0x1a4>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 800058a:	d025      	beq.n	80005d8 <Change_Bitrate.9299+0xe4>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8000592:	f300 8081 	bgt.w	8000698 <Change_Bitrate.9299+0x1a4>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800059c:	d004      	beq.n	80005a8 <Change_Bitrate.9299+0xb4>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80005a4:	d00c      	beq.n	80005c0 <Change_Bitrate.9299+0xcc>
 80005a6:	e077      	b.n	8000698 <Change_Bitrate.9299+0x1a4>
  	{
  	case 1200:
  		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"0", 1, HAL_MAX_DELAY);
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ac:	2201      	movs	r2, #1
 80005ae:	493d      	ldr	r1, [pc, #244]	; (80006a4 <Change_Bitrate.9299+0x1b0>)
 80005b0:	483d      	ldr	r0, [pc, #244]	; (80006a8 <Change_Bitrate.9299+0x1b4>)
 80005b2:	f002 ff69 	bl	8003488 <HAL_UART_Transmit>
  		HAL_Delay(250);
 80005b6:	20fa      	movs	r0, #250	; 0xfa
 80005b8:	f000 fe2c 	bl	8001214 <HAL_Delay>
  		return Change_Success;
 80005bc:	2300      	movs	r3, #0
 80005be:	e06c      	b.n	800069a <Change_Bitrate.9299+0x1a6>
  	case 2400:
  		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"1", 1, HAL_MAX_DELAY);
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	2201      	movs	r2, #1
 80005c6:	4939      	ldr	r1, [pc, #228]	; (80006ac <Change_Bitrate.9299+0x1b8>)
 80005c8:	4837      	ldr	r0, [pc, #220]	; (80006a8 <Change_Bitrate.9299+0x1b4>)
 80005ca:	f002 ff5d 	bl	8003488 <HAL_UART_Transmit>
  		HAL_Delay(250);
 80005ce:	20fa      	movs	r0, #250	; 0xfa
 80005d0:	f000 fe20 	bl	8001214 <HAL_Delay>
  		return Change_Success;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e060      	b.n	800069a <Change_Bitrate.9299+0x1a6>
  	case 9600:
  		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"2", 1, HAL_MAX_DELAY);
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	2201      	movs	r2, #1
 80005de:	4934      	ldr	r1, [pc, #208]	; (80006b0 <Change_Bitrate.9299+0x1bc>)
 80005e0:	4831      	ldr	r0, [pc, #196]	; (80006a8 <Change_Bitrate.9299+0x1b4>)
 80005e2:	f002 ff51 	bl	8003488 <HAL_UART_Transmit>
  		HAL_Delay(250);
 80005e6:	20fa      	movs	r0, #250	; 0xfa
 80005e8:	f000 fe14 	bl	8001214 <HAL_Delay>
  		return Change_Success;
 80005ec:	2300      	movs	r3, #0
 80005ee:	e054      	b.n	800069a <Change_Bitrate.9299+0x1a6>
  	case 19200:
  		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"3", 1, HAL_MAX_DELAY);
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	2201      	movs	r2, #1
 80005f6:	492f      	ldr	r1, [pc, #188]	; (80006b4 <Change_Bitrate.9299+0x1c0>)
 80005f8:	482b      	ldr	r0, [pc, #172]	; (80006a8 <Change_Bitrate.9299+0x1b4>)
 80005fa:	f002 ff45 	bl	8003488 <HAL_UART_Transmit>
  		HAL_Delay(250);
 80005fe:	20fa      	movs	r0, #250	; 0xfa
 8000600:	f000 fe08 	bl	8001214 <HAL_Delay>
  		return Change_Success;
 8000604:	2300      	movs	r3, #0
 8000606:	e048      	b.n	800069a <Change_Bitrate.9299+0x1a6>
  	case 38400:
  		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"4", 1, HAL_MAX_DELAY);
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	2201      	movs	r2, #1
 800060e:	492a      	ldr	r1, [pc, #168]	; (80006b8 <Change_Bitrate.9299+0x1c4>)
 8000610:	4825      	ldr	r0, [pc, #148]	; (80006a8 <Change_Bitrate.9299+0x1b4>)
 8000612:	f002 ff39 	bl	8003488 <HAL_UART_Transmit>
  		HAL_Delay(250);
 8000616:	20fa      	movs	r0, #250	; 0xfa
 8000618:	f000 fdfc 	bl	8001214 <HAL_Delay>
  		return Change_Success;
 800061c:	2300      	movs	r3, #0
 800061e:	e03c      	b.n	800069a <Change_Bitrate.9299+0x1a6>
  	case 57600:
  		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"5", 1, HAL_MAX_DELAY);
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	2201      	movs	r2, #1
 8000626:	4925      	ldr	r1, [pc, #148]	; (80006bc <Change_Bitrate.9299+0x1c8>)
 8000628:	481f      	ldr	r0, [pc, #124]	; (80006a8 <Change_Bitrate.9299+0x1b4>)
 800062a:	f002 ff2d 	bl	8003488 <HAL_UART_Transmit>
  		HAL_Delay(250);
 800062e:	20fa      	movs	r0, #250	; 0xfa
 8000630:	f000 fdf0 	bl	8001214 <HAL_Delay>
  		return Change_Success;
 8000634:	2300      	movs	r3, #0
 8000636:	e030      	b.n	800069a <Change_Bitrate.9299+0x1a6>
  	case 115200:
  		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"6", 1, HAL_MAX_DELAY);
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	2201      	movs	r2, #1
 800063e:	4920      	ldr	r1, [pc, #128]	; (80006c0 <Change_Bitrate.9299+0x1cc>)
 8000640:	4819      	ldr	r0, [pc, #100]	; (80006a8 <Change_Bitrate.9299+0x1b4>)
 8000642:	f002 ff21 	bl	8003488 <HAL_UART_Transmit>
  		HAL_Delay(250);
 8000646:	20fa      	movs	r0, #250	; 0xfa
 8000648:	f000 fde4 	bl	8001214 <HAL_Delay>
  		return Change_Success;
 800064c:	2300      	movs	r3, #0
 800064e:	e024      	b.n	800069a <Change_Bitrate.9299+0x1a6>
  	case 230400:
  		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"7", 1, HAL_MAX_DELAY);
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	2201      	movs	r2, #1
 8000656:	491b      	ldr	r1, [pc, #108]	; (80006c4 <Change_Bitrate.9299+0x1d0>)
 8000658:	4813      	ldr	r0, [pc, #76]	; (80006a8 <Change_Bitrate.9299+0x1b4>)
 800065a:	f002 ff15 	bl	8003488 <HAL_UART_Transmit>
  		HAL_Delay(250);
 800065e:	20fa      	movs	r0, #250	; 0xfa
 8000660:	f000 fdd8 	bl	8001214 <HAL_Delay>
  		return Change_Success;
 8000664:	2300      	movs	r3, #0
 8000666:	e018      	b.n	800069a <Change_Bitrate.9299+0x1a6>
  	case 460800:
  		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"8", 1, HAL_MAX_DELAY);
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	2201      	movs	r2, #1
 800066e:	4916      	ldr	r1, [pc, #88]	; (80006c8 <Change_Bitrate.9299+0x1d4>)
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <Change_Bitrate.9299+0x1b4>)
 8000672:	f002 ff09 	bl	8003488 <HAL_UART_Transmit>
  		HAL_Delay(250);
 8000676:	20fa      	movs	r0, #250	; 0xfa
 8000678:	f000 fdcc 	bl	8001214 <HAL_Delay>
  		return Change_Success;
 800067c:	2300      	movs	r3, #0
 800067e:	e00c      	b.n	800069a <Change_Bitrate.9299+0x1a6>
  	case 921600:
  		HAL_UART_Transmit(&hlpuart1, (uint8_t*)"9", 1, HAL_MAX_DELAY);
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	2201      	movs	r2, #1
 8000686:	4911      	ldr	r1, [pc, #68]	; (80006cc <Change_Bitrate.9299+0x1d8>)
 8000688:	4807      	ldr	r0, [pc, #28]	; (80006a8 <Change_Bitrate.9299+0x1b4>)
 800068a:	f002 fefd 	bl	8003488 <HAL_UART_Transmit>
  		HAL_Delay(250);
 800068e:	20fa      	movs	r0, #250	; 0xfa
 8000690:	f000 fdc0 	bl	8001214 <HAL_Delay>
  		return Change_Success;
 8000694:	2300      	movs	r3, #0
 8000696:	e000      	b.n	800069a <Change_Bitrate.9299+0x1a6>
  	}
  	return Wrong_input;
 8000698:	2301      	movs	r3, #1
  }
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	080047b0 	.word	0x080047b0
 80006a8:	20000524 	.word	0x20000524
 80006ac:	080047b4 	.word	0x080047b4
 80006b0:	080047b8 	.word	0x080047b8
 80006b4:	080047bc 	.word	0x080047bc
 80006b8:	080047c0 	.word	0x080047c0
 80006bc:	080047c4 	.word	0x080047c4
 80006c0:	080047c8 	.word	0x080047c8
 80006c4:	080047cc 	.word	0x080047cc
 80006c8:	080047d0 	.word	0x080047d0
 80006cc:	080047d4 	.word	0x080047d4

080006d0 <main>:
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0a8      	sub	sp, #160	; 0xa0
 80006d4:	af00      	add	r7, sp, #0
int main(void)
 80006d6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80006da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint8_t UART1_rxBuffer[100] = {};
 80006de:	2300      	movs	r3, #0
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e6:	2260      	movs	r2, #96	; 0x60
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 ffbe 	bl	800466c <memset>
  HAL_Init();
 80006f0:	f000 fd1b 	bl	800112a <HAL_Init>
  SystemClock_Config();
 80006f4:	f000 f8e8 	bl	80008c8 <SystemClock_Config>
  MX_GPIO_Init();
 80006f8:	f000 fa4a 	bl	8000b90 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006fc:	f000 f938 	bl	8000970 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000700:	f000 f9d0 	bl	8000aa4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000704:	f000 fa1a 	bl	8000b3c <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8000708:	f000 f980 	bl	8000a0c <MX_UART5_Init>
          return count;
      }
  }


    uint8_t noFT[3] = {3,1,8};
 800070c:	4a23      	ldr	r2, [pc, #140]	; (800079c <main+0xcc>)
 800070e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000712:	6812      	ldr	r2, [r2, #0]
 8000714:	4611      	mov	r1, r2
 8000716:	8019      	strh	r1, [r3, #0]
 8000718:	3302      	adds	r3, #2
 800071a:	0c12      	lsrs	r2, r2, #16
 800071c:	701a      	strb	r2, [r3, #0]
 // const char FT[] = "T";
 // const char *otter = "R";
 // static const char *camControl[] = {"d", "D", "m", "M","n","N","s","S","t","T", "1", "2", "3", "4", "5", "6"};


  Change_Bitrate(19200);
 800071e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000722:	469c      	mov	ip, r3
 8000724:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
 8000728:	f7ff fee4 	bl	80004f4 <Change_Bitrate.9299>

  char *hexstring = "0x03DE ";
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <main+0xd0>)
 800072e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint8_t out[32];
  int res = to_byte_array(hexstring, sizeof(hexstring) - 1, out);
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800073a:	4694      	mov	ip, r2
 800073c:	461a      	mov	r2, r3
 800073e:	2103      	movs	r1, #3
 8000740:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000744:	f000 f850 	bl	80007e8 <to_byte_array.9318>
 8000748:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
  char *ptr;
  int hmm = (int)strtol(hexstring, &ptr, 0);
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	4619      	mov	r1, r3
 8000752:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000756:	f004 f815 	bl	8004784 <strtol>
 800075a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  uint8_t hexnum[] = {hmm};
 800075e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000762:	b2db      	uxtb	r3, r3
 8000764:	703b      	strb	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)hexnum, 3, HAL_MAX_DELAY);
 8000766:	4639      	mov	r1, r7
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	2203      	movs	r2, #3
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <main+0xd4>)
 8000770:	f002 fe8a 	bl	8003488 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t)"\n", 1, HAL_MAX_DELAY);
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <main+0xd8>)
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4619      	mov	r1, r3
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	2201      	movs	r2, #1
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <main+0xd4>)
 8000782:	f002 fe81 	bl	8003488 <HAL_UART_Transmit>
//		  		  }
//	  }


	  	  //flash red led to indicate its running
	  	  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <main+0xdc>)
 800078c:	f000 fff6 	bl	800177c <HAL_GPIO_TogglePin>
	  	  	HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000794:	f000 fd3e 	bl	8001214 <HAL_Delay>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)hexnum, 3, HAL_MAX_DELAY);
 8000798:	e7e5      	b.n	8000766 <main+0x96>
 800079a:	bf00      	nop
 800079c:	080047e4 	.word	0x080047e4
 80007a0:	080047d8 	.word	0x080047d8
 80007a4:	20000524 	.word	0x20000524
 80007a8:	080047e0 	.word	0x080047e0
 80007ac:	48000400 	.word	0x48000400

080007b0 <hex.9312>:
  uint8_t hex(char ch) {
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	f8c7 c000 	str.w	ip, [r7]
      uint8_t r = (ch > 57) ? (ch - 55) : (ch - 48);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b39      	cmp	r3, #57	; 0x39
 80007c2:	d903      	bls.n	80007cc <hex.9312+0x1c>
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	3b37      	subs	r3, #55	; 0x37
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	e002      	b.n	80007d2 <hex.9312+0x22>
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	3b30      	subs	r3, #48	; 0x30
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	73fb      	strb	r3, [r7, #15]
      return r & 0x0F;
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	b2db      	uxtb	r3, r3
  }
 80007dc:	4618      	mov	r0, r3
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <to_byte_array.9318>:
  int to_byte_array(const char *in, size_t in_size, uint8_t *out) {
 80007e8:	b5b0      	push	{r4, r5, r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	4664      	mov	r4, ip
 80007f6:	f8c7 c000 	str.w	ip, [r7]
      int count = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
      if (in_size % 2) {
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d053      	beq.n	80008b0 <to_byte_array.9318+0xc8>
          while (*in && out) {
 8000808:	e02a      	b.n	8000860 <to_byte_array.9318+0x78>
              *out = hex(*in++);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	60fa      	str	r2, [r7, #12]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	46a4      	mov	ip, r4
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ffcb 	bl	80007b0 <hex.9312>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	701a      	strb	r2, [r3, #0]
              if (!*in)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d101      	bne.n	800082e <to_byte_array.9318+0x46>
                  return count;
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	e048      	b.n	80008c0 <to_byte_array.9318+0xd8>
              *out = (*out << 4) | hex(*in++);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	011b      	lsls	r3, r3, #4
 8000834:	b25d      	sxtb	r5, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	60fa      	str	r2, [r7, #12]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	46a4      	mov	ip, r4
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffb5 	bl	80007b0 <hex.9312>
 8000846:	4603      	mov	r3, r0
 8000848:	b25b      	sxtb	r3, r3
 800084a:	432b      	orrs	r3, r5
 800084c:	b25b      	sxtb	r3, r3
 800084e:	b2da      	uxtb	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	701a      	strb	r2, [r3, #0]
              *out++;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3301      	adds	r3, #1
 8000858:	607b      	str	r3, [r7, #4]
              count++;
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
          while (*in && out) {
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d002      	beq.n	800086e <to_byte_array.9318+0x86>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1cd      	bne.n	800080a <to_byte_array.9318+0x22>
          return count;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	e026      	b.n	80008c0 <to_byte_array.9318+0xd8>
              *out++ = (hex(*in++) << 4) | hex(*in++);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	60fa      	str	r2, [r7, #12]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	46a4      	mov	ip, r4
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff97 	bl	80007b0 <hex.9312>
 8000882:	4603      	mov	r3, r0
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	b25d      	sxtb	r5, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	60fa      	str	r2, [r7, #12]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	46a4      	mov	ip, r4
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff8c 	bl	80007b0 <hex.9312>
 8000898:	4603      	mov	r3, r0
 800089a:	b25b      	sxtb	r3, r3
 800089c:	432b      	orrs	r3, r5
 800089e:	b259      	sxtb	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	b2ca      	uxtb	r2, r1
 80008a8:	701a      	strb	r2, [r3, #0]
              count++;
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3301      	adds	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
          while (*in && out) {
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d002      	beq.n	80008be <to_byte_array.9318+0xd6>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1d9      	bne.n	8000872 <to_byte_array.9318+0x8a>
          return count;
 80008be:	697b      	ldr	r3, [r7, #20]
  }
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bdb0      	pop	{r4, r5, r7, pc}

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b096      	sub	sp, #88	; 0x58
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2244      	movs	r2, #68	; 0x44
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 fec8 	bl	800466c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	463b      	mov	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80008ea:	2000      	movs	r0, #0
 80008ec:	f001 f8c8 	bl	8001a80 <HAL_PWREx_ControlVoltageScaling>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x32>
  {
    Error_Handler();
 80008f6:	f000 f9ef 	bl	8000cd8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80008fa:	2322      	movs	r3, #34	; 0x22
 80008fc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090c:	2302      	movs	r3, #2
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000910:	2302      	movs	r3, #2
 8000912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000914:	2302      	movs	r3, #2
 8000916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000918:	231e      	movs	r3, #30
 800091a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091c:	2302      	movs	r3, #2
 800091e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4618      	mov	r0, r3
 800092e:	f001 f96b 	bl	8001c08 <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000938:	f000 f9ce 	bl	8000cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	230f      	movs	r3, #15
 800093e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000940:	2303      	movs	r3, #3
 8000942:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	2105      	movs	r1, #5
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fd7c 	bl	8002454 <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000962:	f000 f9b9 	bl	8000cd8 <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	3758      	adds	r7, #88	; 0x58
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 8000976:	4a23      	ldr	r2, [pc, #140]	; (8000a04 <MX_LPUART1_UART_Init+0x94>)
 8000978:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800097a:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 800097c:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <MX_LPUART1_UART_Init+0x98>)
 800097e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 8000994:	220c      	movs	r2, #12
 8000996:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009b6:	4812      	ldr	r0, [pc, #72]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 80009b8:	f002 fd16 	bl	80033e8 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80009c2:	f000 f989 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 80009ca:	f003 faab 	bl	8003f24 <HAL_UARTEx_SetTxFifoThreshold>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80009d4:	f000 f980 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	4809      	ldr	r0, [pc, #36]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 80009dc:	f003 fae0 	bl	8003fa0 <HAL_UARTEx_SetRxFifoThreshold>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80009e6:	f000 f977 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_LPUART1_UART_Init+0x90>)
 80009ec:	f003 fa61 	bl	8003eb2 <HAL_UARTEx_DisableFifoMode>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80009f6:	f000 f96f 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000524 	.word	0x20000524
 8000a04:	40008000 	.word	0x40008000
 8000a08:	00033324 	.word	0x00033324

08000a0c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <MX_UART5_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a56:	f002 fcc7 	bl	80033e8 <HAL_UART_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 f93a 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a68:	f003 fa5c 	bl	8003f24 <HAL_UARTEx_SetTxFifoThreshold>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 f931 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4808      	ldr	r0, [pc, #32]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a7a:	f003 fa91 	bl	8003fa0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000a84:	f000 f928 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_UART5_Init+0x90>)
 8000a8a:	f003 fa12 	bl	8003eb2 <HAL_UARTEx_DisableFifoMode>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 f920 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200005b4 	.word	0x200005b4
 8000aa0:	40005000 	.word	0x40005000

08000aa4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000aaa:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aec:	4811      	ldr	r0, [pc, #68]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000aee:	f002 fc7b 	bl	80033e8 <HAL_UART_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000af8:	f000 f8ee 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000b00:	f003 fa10 	bl	8003f24 <HAL_UARTEx_SetTxFifoThreshold>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b0a:	f000 f8e5 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4808      	ldr	r0, [pc, #32]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000b12:	f003 fa45 	bl	8003fa0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b1c:	f000 f8dc 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_USART3_UART_Init+0x90>)
 8000b22:	f003 f9c6 	bl	8003eb2 <HAL_UARTEx_DisableFifoMode>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b2c:	f000 f8d4 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000008c 	.word	0x2000008c
 8000b38:	40004800 	.word	0x40004800

08000b3c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b4a:	2206      	movs	r2, #6
 8000b4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b50:	2202      	movs	r2, #2
 8000b52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b54:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b7a:	f000 fe19 	bl	80017b0 <HAL_PCD_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000b84:	f000 f8a8 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000011c 	.word	0x2000011c

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4b48      	ldr	r3, [pc, #288]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a47      	ldr	r2, [pc, #284]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b45      	ldr	r3, [pc, #276]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	61bb      	str	r3, [r7, #24]
 8000bbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbe:	4b42      	ldr	r3, [pc, #264]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a41      	ldr	r2, [pc, #260]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b3f      	ldr	r3, [pc, #252]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b3c      	ldr	r3, [pc, #240]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a3b      	ldr	r2, [pc, #236]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bee:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a35      	ldr	r2, [pc, #212]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c06:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000c1e:	f000 ffe3 	bl	8001be8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	4a28      	ldr	r2, [pc, #160]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2e:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <MX_GPIO_Init+0x138>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000c40:	4822      	ldr	r0, [pc, #136]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000c42:	f000 fd83 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2120      	movs	r1, #32
 8000c4a:	4821      	ldr	r0, [pc, #132]	; (8000cd0 <MX_GPIO_Init+0x140>)
 8000c4c:	f000 fd7e 	bl	800174c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	481b      	ldr	r0, [pc, #108]	; (8000cd4 <MX_GPIO_Init+0x144>)
 8000c68:	f000 fbde 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c6c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4811      	ldr	r0, [pc, #68]	; (8000ccc <MX_GPIO_Init+0x13c>)
 8000c86:	f000 fbcf 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c8a:	2320      	movs	r3, #32
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <MX_GPIO_Init+0x140>)
 8000ca2:	f000 fbc1 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ca6:	2340      	movs	r3, #64	; 0x40
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_GPIO_Init+0x140>)
 8000cba:	f000 fbb5 	bl	8001428 <HAL_GPIO_Init>

}
 8000cbe:	bf00      	nop
 8000cc0:	3730      	adds	r7, #48	; 0x30
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48000400 	.word	0x48000400
 8000cd0:	48001800 	.word	0x48001800
 8000cd4:	48000800 	.word	0x48000800

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_MspInit+0x44>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_MspInit+0x44>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_MspInit+0x44>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_MspInit+0x44>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0b4      	sub	sp, #208	; 0xd0
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d48:	2294      	movs	r2, #148	; 0x94
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 fc8d 	bl	800466c <memset>
  if(huart->Instance==LPUART1)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a75      	ldr	r2, [pc, #468]	; (8000f2c <HAL_UART_MspInit+0x200>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d13e      	bne.n	8000dda <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d5c:	2320      	movs	r3, #32
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fe25 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d74:	f7ff ffb0 	bl	8000cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d78:	4b6d      	ldr	r3, [pc, #436]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d7c:	4a6c      	ldr	r2, [pc, #432]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d84:	4b6a      	ldr	r3, [pc, #424]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d90:	4b67      	ldr	r3, [pc, #412]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d94:	4a66      	ldr	r2, [pc, #408]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9c:	4b64      	ldr	r3, [pc, #400]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da4:	623b      	str	r3, [r7, #32]
 8000da6:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8000da8:	f000 ff1e 	bl	8001be8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000dac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dcc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4858      	ldr	r0, [pc, #352]	; (8000f34 <HAL_UART_MspInit+0x208>)
 8000dd4:	f000 fb28 	bl	8001428 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dd8:	e0a3      	b.n	8000f22 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==UART5)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a56      	ldr	r2, [pc, #344]	; (8000f38 <HAL_UART_MspInit+0x20c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d15d      	bne.n	8000ea0 <HAL_UART_MspInit+0x174>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000de4:	2310      	movs	r3, #16
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 fde1 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000dfc:	f7ff ff6c 	bl	8000cd8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e00:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e04:	4a4a      	ldr	r2, [pc, #296]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0c:	4b48      	ldr	r3, [pc, #288]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e18:	4b45      	ldr	r3, [pc, #276]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	4a44      	ldr	r2, [pc, #272]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e24:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e30:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	4a3e      	ldr	r2, [pc, #248]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3c:	4b3c      	ldr	r3, [pc, #240]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e62:	2308      	movs	r3, #8
 8000e64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4833      	ldr	r0, [pc, #204]	; (8000f3c <HAL_UART_MspInit+0x210>)
 8000e70:	f000 fada 	bl	8001428 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e74:	2304      	movs	r3, #4
 8000e76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e92:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000e96:	4619      	mov	r1, r3
 8000e98:	4829      	ldr	r0, [pc, #164]	; (8000f40 <HAL_UART_MspInit+0x214>)
 8000e9a:	f000 fac5 	bl	8001428 <HAL_GPIO_Init>
}
 8000e9e:	e040      	b.n	8000f22 <HAL_UART_MspInit+0x1f6>
  else if(huart->Instance==USART3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a27      	ldr	r2, [pc, #156]	; (8000f44 <HAL_UART_MspInit+0x218>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d13b      	bne.n	8000f22 <HAL_UART_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fd7e 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8000ec2:	f7ff ff09 	bl	8000cd8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_UART_MspInit+0x204>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ef6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000efa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f10:	2307      	movs	r3, #7
 8000f12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f16:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4808      	ldr	r0, [pc, #32]	; (8000f40 <HAL_UART_MspInit+0x214>)
 8000f1e:	f000 fa83 	bl	8001428 <HAL_GPIO_Init>
}
 8000f22:	bf00      	nop
 8000f24:	37d0      	adds	r7, #208	; 0xd0
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40008000 	.word	0x40008000
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48001800 	.word	0x48001800
 8000f38:	40005000 	.word	0x40005000
 8000f3c:	48000800 	.word	0x48000800
 8000f40:	48000c00 	.word	0x48000c00
 8000f44:	40004800 	.word	0x40004800

08000f48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0b0      	sub	sp, #192	; 0xc0
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0318 	add.w	r3, r7, #24
 8000f64:	2294      	movs	r2, #148	; 0x94
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f003 fb7f 	bl	800466c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f76:	d16c      	bne.n	8001052 <HAL_PCD_MspInit+0x10a>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	f107 0318 	add.w	r3, r7, #24
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fd15 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f94:	f7ff fea0 	bl	8000cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b30      	ldr	r3, [pc, #192]	; (800105c <HAL_PCD_MspInit+0x114>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9c:	4a2f      	ldr	r2, [pc, #188]	; (800105c <HAL_PCD_MspInit+0x114>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa4:	4b2d      	ldr	r3, [pc, #180]	; (800105c <HAL_PCD_MspInit+0x114>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fb0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fca:	230a      	movs	r3, #10
 8000fcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fda:	f000 fa25 	bl	8001428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffc:	f000 fa14 	bl	8001428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_PCD_MspInit+0x114>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001004:	4a15      	ldr	r2, [pc, #84]	; (800105c <HAL_PCD_MspInit+0x114>)
 8001006:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800100a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_PCD_MspInit+0x114>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_PCD_MspInit+0x114>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d114      	bne.n	800104e <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_PCD_MspInit+0x114>)
 8001026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <HAL_PCD_MspInit+0x114>)
 800102a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102e:	6593      	str	r3, [r2, #88]	; 0x58
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_PCD_MspInit+0x114>)
 8001032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800103c:	f000 fdc4 	bl	8001bc8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_PCD_MspInit+0x114>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001044:	4a05      	ldr	r2, [pc, #20]	; (800105c <HAL_PCD_MspInit+0x114>)
 8001046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800104a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800104c:	e001      	b.n	8001052 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 800104e:	f000 fdbb 	bl	8001bc8 <HAL_PWREx_EnableVddUSB>
}
 8001052:	bf00      	nop
 8001054:	37c0      	adds	r7, #192	; 0xc0
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f892 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010dc:	f7ff ffea 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <LoopForever+0xe>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	; (8001124 <LoopForever+0x16>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f003 fa8d 	bl	8004624 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800110a:	f7ff fae1 	bl	80006d0 <main>

0800110e <LoopForever>:

LoopForever:
    b LoopForever
 800110e:	e7fe      	b.n	800110e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001110:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800111c:	0800496c 	.word	0x0800496c
  ldr r2, =_sbss
 8001120:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001124:	20000648 	.word	0x20000648

08001128 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_IRQHandler>

0800112a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f000 f943 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113a:	2000      	movs	r0, #0
 800113c:	f000 f80e 	bl	800115c <HAL_InitTick>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	e001      	b.n	8001150 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800114c:	f7ff fdca 	bl	8000ce4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001150:	79fb      	ldrb	r3, [r7, #7]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_InitTick+0x6c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d023      	beq.n	80011b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_InitTick+0x70>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_InitTick+0x6c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f941 	bl	800140e <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10f      	bne.n	80011b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d809      	bhi.n	80011ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f919 	bl	80013d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_InitTick+0x74>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e007      	b.n	80011bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e004      	b.n	80011bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	e001      	b.n	80011bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000644 	.word	0x20000644

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000644 	.word	0x20000644

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff8e 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff47 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff5c 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff8e 	bl	8001314 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5d 	bl	80012c0 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffb0 	bl	800137c <SysTick_Config>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001436:	e166      	b.n	8001706 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2101      	movs	r1, #1
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	fa01 f303 	lsl.w	r3, r1, r3
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 8158 	beq.w	8001700 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d005      	beq.n	8001468 <HAL_GPIO_Init+0x40>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d130      	bne.n	80014ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800149e:	2201      	movs	r2, #1
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	f003 0201 	and.w	r2, r3, #1
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d017      	beq.n	8001506 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d123      	bne.n	800155a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	08da      	lsrs	r2, r3, #3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3208      	adds	r2, #8
 8001554:	6939      	ldr	r1, [r7, #16]
 8001556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0203 	and.w	r2, r3, #3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80b2 	beq.w	8001700 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159c:	4b61      	ldr	r3, [pc, #388]	; (8001724 <HAL_GPIO_Init+0x2fc>)
 800159e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a0:	4a60      	ldr	r2, [pc, #384]	; (8001724 <HAL_GPIO_Init+0x2fc>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6613      	str	r3, [r2, #96]	; 0x60
 80015a8:	4b5e      	ldr	r3, [pc, #376]	; (8001724 <HAL_GPIO_Init+0x2fc>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015b4:	4a5c      	ldr	r2, [pc, #368]	; (8001728 <HAL_GPIO_Init+0x300>)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015de:	d02b      	beq.n	8001638 <HAL_GPIO_Init+0x210>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a52      	ldr	r2, [pc, #328]	; (800172c <HAL_GPIO_Init+0x304>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d025      	beq.n	8001634 <HAL_GPIO_Init+0x20c>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a51      	ldr	r2, [pc, #324]	; (8001730 <HAL_GPIO_Init+0x308>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d01f      	beq.n	8001630 <HAL_GPIO_Init+0x208>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a50      	ldr	r2, [pc, #320]	; (8001734 <HAL_GPIO_Init+0x30c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d019      	beq.n	800162c <HAL_GPIO_Init+0x204>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a4f      	ldr	r2, [pc, #316]	; (8001738 <HAL_GPIO_Init+0x310>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d013      	beq.n	8001628 <HAL_GPIO_Init+0x200>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a4e      	ldr	r2, [pc, #312]	; (800173c <HAL_GPIO_Init+0x314>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d00d      	beq.n	8001624 <HAL_GPIO_Init+0x1fc>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a4d      	ldr	r2, [pc, #308]	; (8001740 <HAL_GPIO_Init+0x318>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d007      	beq.n	8001620 <HAL_GPIO_Init+0x1f8>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a4c      	ldr	r2, [pc, #304]	; (8001744 <HAL_GPIO_Init+0x31c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d101      	bne.n	800161c <HAL_GPIO_Init+0x1f4>
 8001618:	2307      	movs	r3, #7
 800161a:	e00e      	b.n	800163a <HAL_GPIO_Init+0x212>
 800161c:	2308      	movs	r3, #8
 800161e:	e00c      	b.n	800163a <HAL_GPIO_Init+0x212>
 8001620:	2306      	movs	r3, #6
 8001622:	e00a      	b.n	800163a <HAL_GPIO_Init+0x212>
 8001624:	2305      	movs	r3, #5
 8001626:	e008      	b.n	800163a <HAL_GPIO_Init+0x212>
 8001628:	2304      	movs	r3, #4
 800162a:	e006      	b.n	800163a <HAL_GPIO_Init+0x212>
 800162c:	2303      	movs	r3, #3
 800162e:	e004      	b.n	800163a <HAL_GPIO_Init+0x212>
 8001630:	2302      	movs	r3, #2
 8001632:	e002      	b.n	800163a <HAL_GPIO_Init+0x212>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_GPIO_Init+0x212>
 8001638:	2300      	movs	r3, #0
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	f002 0203 	and.w	r2, r2, #3
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	4093      	lsls	r3, r2
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800164a:	4937      	ldr	r1, [pc, #220]	; (8001728 <HAL_GPIO_Init+0x300>)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001658:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <HAL_GPIO_Init+0x320>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800167c:	4a32      	ldr	r2, [pc, #200]	; (8001748 <HAL_GPIO_Init+0x320>)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <HAL_GPIO_Init+0x320>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016a6:	4a28      	ldr	r2, [pc, #160]	; (8001748 <HAL_GPIO_Init+0x320>)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_GPIO_Init+0x320>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016d0:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <HAL_GPIO_Init+0x320>)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_GPIO_Init+0x320>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016fa:	4a13      	ldr	r2, [pc, #76]	; (8001748 <HAL_GPIO_Init+0x320>)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	f47f ae91 	bne.w	8001438 <HAL_GPIO_Init+0x10>
  }
}
 8001716:	bf00      	nop
 8001718:	bf00      	nop
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000
 8001728:	40010000 	.word	0x40010000
 800172c:	48000400 	.word	0x48000400
 8001730:	48000800 	.word	0x48000800
 8001734:	48000c00 	.word	0x48000c00
 8001738:	48001000 	.word	0x48001000
 800173c:	48001400 	.word	0x48001400
 8001740:	48001800 	.word	0x48001800
 8001744:	48001c00 	.word	0x48001c00
 8001748:	40010400 	.word	0x40010400

0800174c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
 8001758:	4613      	mov	r3, r2
 800175a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800175c:	787b      	ldrb	r3, [r7, #1]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001762:	887a      	ldrh	r2, [r7, #2]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001768:	e002      	b.n	8001770 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	041a      	lsls	r2, r3, #16
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43d9      	mvns	r1, r3
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	400b      	ands	r3, r1
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	619a      	str	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b2:	b08f      	sub	sp, #60	; 0x3c
 80017b4:	af0a      	add	r7, sp, #40	; 0x28
 80017b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e116      	b.n	80019f0 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d106      	bne.n	80017e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fbb3 	bl	8000f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2203      	movs	r2, #3
 80017e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d102      	bne.n	80017fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f002 fc85 	bl	8004110 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	687e      	ldr	r6, [r7, #4]
 800180e:	466d      	mov	r5, sp
 8001810:	f106 0410 	add.w	r4, r6, #16
 8001814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001820:	e885 0003 	stmia.w	r5, {r0, r1}
 8001824:	1d33      	adds	r3, r6, #4
 8001826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001828:	6838      	ldr	r0, [r7, #0]
 800182a:	f002 fc45 	bl	80040b8 <USB_CoreInit>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2202      	movs	r2, #2
 8001838:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0d7      	b.n	80019f0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f002 fc73 	bl	8004132 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e04a      	b.n	80018e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	333d      	adds	r3, #61	; 0x3d
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	1a9b      	subs	r3, r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	333c      	adds	r3, #60	; 0x3c
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	b298      	uxth	r0, r3
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	1a9b      	subs	r3, r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	3342      	adds	r3, #66	; 0x42
 800188e:	4602      	mov	r2, r0
 8001890:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	1a9b      	subs	r3, r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	333f      	adds	r3, #63	; 0x3f
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	3344      	adds	r3, #68	; 0x44
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	3348      	adds	r3, #72	; 0x48
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	3350      	adds	r3, #80	; 0x50
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	3301      	adds	r3, #1
 80018e6:	73fb      	strb	r3, [r7, #15]
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d3af      	bcc.n	8001852 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e044      	b.n	8001982 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	3301      	adds	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	d3b5      	bcc.n	80018f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	687e      	ldr	r6, [r7, #4]
 8001994:	466d      	mov	r5, sp
 8001996:	f106 0410 	add.w	r4, r6, #16
 800199a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80019aa:	1d33      	adds	r3, r6, #4
 80019ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ae:	6838      	ldr	r0, [r7, #0]
 80019b0:	f002 fc0c 	bl	80041cc <USB_DevInit>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2202      	movs	r2, #2
 80019be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e014      	b.n	80019f0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d102      	bne.n	80019e4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f80a 	bl	80019f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 fdb4 	bl	8004556 <USB_DevDisconnect>

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	f043 0303 	orr.w	r3, r3, #3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a50:	d102      	bne.n	8001a58 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a56:	e00b      	b.n	8001a70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a66:	d102      	bne.n	8001a6e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a6c:	e000      	b.n	8001a70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001a6e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40007000 	.word	0x40007000

08001a80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d141      	bne.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a8e:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a9a:	d131      	bne.n	8001b00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a9c:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aa2:	4a46      	ldr	r2, [pc, #280]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aa8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aac:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ab4:	4a41      	ldr	r2, [pc, #260]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001abc:	4b40      	ldr	r3, [pc, #256]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2232      	movs	r2, #50	; 0x32
 8001ac2:	fb02 f303 	mul.w	r3, r2, r3
 8001ac6:	4a3f      	ldr	r2, [pc, #252]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8001acc:	0c9b      	lsrs	r3, r3, #18
 8001ace:	3301      	adds	r3, #1
 8001ad0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad2:	e002      	b.n	8001ada <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ada:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae6:	d102      	bne.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f2      	bne.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aee:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afa:	d158      	bne.n	8001bae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e057      	b.n	8001bb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b00:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b06:	4a2d      	ldr	r2, [pc, #180]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b10:	e04d      	b.n	8001bae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b18:	d141      	bne.n	8001b9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b1a:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b26:	d131      	bne.n	8001b8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b2e:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b38:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b40:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2232      	movs	r2, #50	; 0x32
 8001b4e:	fb02 f303 	mul.w	r3, r2, r3
 8001b52:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b54:	fba2 2303 	umull	r2, r3, r2, r3
 8001b58:	0c9b      	lsrs	r3, r3, #18
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b5e:	e002      	b.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b72:	d102      	bne.n	8001b7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f2      	bne.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b86:	d112      	bne.n	8001bae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e011      	b.n	8001bb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b9c:	e007      	b.n	8001bae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	431bde83 	.word	0x431bde83

08001bc8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd6:	6053      	str	r3, [r2, #4]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40007000 	.word	0x40007000

08001be8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf6:	6053      	str	r3, [r2, #4]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40007000 	.word	0x40007000

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d102      	bne.n	8001c1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	f000 bc16 	b.w	8002448 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c1c:	4ba0      	ldr	r3, [pc, #640]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c26:	4b9e      	ldr	r3, [pc, #632]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80e4 	beq.w	8001e06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_RCC_OscConfig+0x4c>
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	f040 808b 	bne.w	8001d62 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	f040 8087 	bne.w	8001d62 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c54:	4b92      	ldr	r3, [pc, #584]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_OscConfig+0x64>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e3ed      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1a      	ldr	r2, [r3, #32]
 8001c70:	4b8b      	ldr	r3, [pc, #556]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_RCC_OscConfig+0x7e>
 8001c7c:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c84:	e005      	b.n	8001c92 <HAL_RCC_OscConfig+0x8a>
 8001c86:	4b86      	ldr	r3, [pc, #536]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d223      	bcs.n	8001cde <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fdca 	bl	8002834 <RCC_SetFlashLatencyFromMSIRange>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e3ce      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001caa:	4b7d      	ldr	r3, [pc, #500]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a7c      	ldr	r2, [pc, #496]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001cb0:	f043 0308 	orr.w	r3, r3, #8
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b7a      	ldr	r3, [pc, #488]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4977      	ldr	r1, [pc, #476]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cc8:	4b75      	ldr	r3, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	4972      	ldr	r1, [pc, #456]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
 8001cdc:	e025      	b.n	8001d2a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cde:	4b70      	ldr	r3, [pc, #448]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6f      	ldr	r2, [pc, #444]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	496a      	ldr	r1, [pc, #424]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cfc:	4b68      	ldr	r3, [pc, #416]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	4965      	ldr	r1, [pc, #404]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d109      	bne.n	8001d2a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 fd8a 	bl	8002834 <RCC_SetFlashLatencyFromMSIRange>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e38e      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d2a:	f000 fcbf 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	4b5b      	ldr	r3, [pc, #364]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	495a      	ldr	r1, [pc, #360]	; (8001ea4 <HAL_RCC_OscConfig+0x29c>)
 8001d3c:	5ccb      	ldrb	r3, [r1, r3]
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	fa22 f303 	lsr.w	r3, r2, r3
 8001d46:	4a58      	ldr	r2, [pc, #352]	; (8001ea8 <HAL_RCC_OscConfig+0x2a0>)
 8001d48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d4a:	4b58      	ldr	r3, [pc, #352]	; (8001eac <HAL_RCC_OscConfig+0x2a4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fa04 	bl	800115c <HAL_InitTick>
 8001d54:	4603      	mov	r3, r0
 8001d56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d052      	beq.n	8001e04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	e372      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d032      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d6a:	4b4d      	ldr	r3, [pc, #308]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a4c      	ldr	r2, [pc, #304]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fa41 	bl	80011fc <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fa3d 	bl	80011fc <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e35b      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d90:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d9c:	4b40      	ldr	r3, [pc, #256]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a3f      	ldr	r2, [pc, #252]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001da2:	f043 0308 	orr.w	r3, r3, #8
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	493a      	ldr	r1, [pc, #232]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dba:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	4935      	ldr	r1, [pc, #212]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
 8001dce:	e01a      	b.n	8001e06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dd0:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a32      	ldr	r2, [pc, #200]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fa0e 	bl	80011fc <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de4:	f7ff fa0a 	bl	80011fc <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e328      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x1dc>
 8001e02:	e000      	b.n	8001e06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d073      	beq.n	8001efa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_OscConfig+0x21c>
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d10e      	bne.n	8001e3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d10b      	bne.n	8001e3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d063      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d15f      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e305      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e44:	d106      	bne.n	8001e54 <HAL_RCC_OscConfig+0x24c>
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e01d      	b.n	8001e90 <HAL_RCC_OscConfig+0x288>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x270>
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0x288>
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <HAL_RCC_OscConfig+0x298>)
 8001e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01b      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff f9b0 	bl	80011fc <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9e:	e010      	b.n	8001ec2 <HAL_RCC_OscConfig+0x2ba>
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	080047e8 	.word	0x080047e8
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff f9a4 	bl	80011fc <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e2c2      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec2:	4baf      	ldr	r3, [pc, #700]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x2a8>
 8001ece:	e014      	b.n	8001efa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7ff f994 	bl	80011fc <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff f990 	bl	80011fc <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e2ae      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eea:	4ba5      	ldr	r3, [pc, #660]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x2d0>
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d060      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_OscConfig+0x310>
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d119      	bne.n	8001f46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d116      	bne.n	8001f46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f18:	4b99      	ldr	r3, [pc, #612]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_OscConfig+0x328>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e28b      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f30:	4b93      	ldr	r3, [pc, #588]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	061b      	lsls	r3, r3, #24
 8001f3e:	4990      	ldr	r1, [pc, #576]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f44:	e040      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d023      	beq.n	8001f96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f4e:	4b8c      	ldr	r3, [pc, #560]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a8b      	ldr	r2, [pc, #556]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f94f 	bl	80011fc <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f62:	f7ff f94b 	bl	80011fc <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e269      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f74:	4b82      	ldr	r3, [pc, #520]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	4b7f      	ldr	r3, [pc, #508]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	061b      	lsls	r3, r3, #24
 8001f8e:	497c      	ldr	r1, [pc, #496]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
 8001f94:	e018      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f96:	4b7a      	ldr	r3, [pc, #488]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a79      	ldr	r2, [pc, #484]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7ff f92b 	bl	80011fc <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001faa:	f7ff f927 	bl	80011fc <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e245      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fbc:	4b70      	ldr	r3, [pc, #448]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f0      	bne.n	8001faa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d03c      	beq.n	800204e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01c      	beq.n	8002016 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fdc:	4b68      	ldr	r3, [pc, #416]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe2:	4a67      	ldr	r2, [pc, #412]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f7ff f906 	bl	80011fc <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7ff f902 	bl	80011fc <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e220      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002006:	4b5e      	ldr	r3, [pc, #376]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8002008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ef      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x3ec>
 8002014:	e01b      	b.n	800204e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002016:	4b5a      	ldr	r3, [pc, #360]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8002018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201c:	4a58      	ldr	r2, [pc, #352]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7ff f8e9 	bl	80011fc <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202e:	f7ff f8e5 	bl	80011fc <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e203      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002040:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8002042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1ef      	bne.n	800202e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 80a6 	beq.w	80021a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205c:	2300      	movs	r3, #0
 800205e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002060:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10d      	bne.n	8002088 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206c:	4b44      	ldr	r3, [pc, #272]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	4a43      	ldr	r2, [pc, #268]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8002072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002076:	6593      	str	r3, [r2, #88]	; 0x58
 8002078:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002084:	2301      	movs	r3, #1
 8002086:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002088:	4b3e      	ldr	r3, [pc, #248]	; (8002184 <HAL_RCC_OscConfig+0x57c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d118      	bne.n	80020c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002094:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_RCC_OscConfig+0x57c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a3a      	ldr	r2, [pc, #232]	; (8002184 <HAL_RCC_OscConfig+0x57c>)
 800209a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a0:	f7ff f8ac 	bl	80011fc <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a8:	f7ff f8a8 	bl	80011fc <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1c6      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ba:	4b32      	ldr	r3, [pc, #200]	; (8002184 <HAL_RCC_OscConfig+0x57c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d108      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4d8>
 80020ce:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	4a2a      	ldr	r2, [pc, #168]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020de:	e024      	b.n	800212a <HAL_RCC_OscConfig+0x522>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d110      	bne.n	800210a <HAL_RCC_OscConfig+0x502>
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	4a24      	ldr	r2, [pc, #144]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f8:	4b21      	ldr	r3, [pc, #132]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	4a20      	ldr	r2, [pc, #128]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002108:	e00f      	b.n	800212a <HAL_RCC_OscConfig+0x522>
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	4a17      	ldr	r2, [pc, #92]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8002122:	f023 0304 	bic.w	r3, r3, #4
 8002126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d016      	beq.n	8002160 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002132:	f7ff f863 	bl	80011fc <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7ff f85f 	bl	80011fc <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e17b      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_OscConfig+0x578>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0ed      	beq.n	800213a <HAL_RCC_OscConfig+0x532>
 800215e:	e01a      	b.n	8002196 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002160:	f7ff f84c 	bl	80011fc <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002166:	e00f      	b.n	8002188 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002168:	f7ff f848 	bl	80011fc <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	; 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d906      	bls.n	8002188 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e164      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002188:	4ba8      	ldr	r3, [pc, #672]	; (800242c <HAL_RCC_OscConfig+0x824>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1e8      	bne.n	8002168 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002196:	7ffb      	ldrb	r3, [r7, #31]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d105      	bne.n	80021a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219c:	4ba3      	ldr	r3, [pc, #652]	; (800242c <HAL_RCC_OscConfig+0x824>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a0:	4aa2      	ldr	r2, [pc, #648]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80021a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d03c      	beq.n	800222e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021bc:	4b9b      	ldr	r3, [pc, #620]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80021be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c2:	4a9a      	ldr	r2, [pc, #616]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7ff f816 	bl	80011fc <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021d4:	f7ff f812 	bl	80011fc <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e130      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021e6:	4b91      	ldr	r3, [pc, #580]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80021e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ef      	beq.n	80021d4 <HAL_RCC_OscConfig+0x5cc>
 80021f4:	e01b      	b.n	800222e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021f6:	4b8d      	ldr	r3, [pc, #564]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80021f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021fc:	4a8b      	ldr	r2, [pc, #556]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002206:	f7fe fff9 	bl	80011fc <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800220e:	f7fe fff5 	bl	80011fc <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e113      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002220:	4b82      	ldr	r3, [pc, #520]	; (800242c <HAL_RCC_OscConfig+0x824>)
 8002222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1ef      	bne.n	800220e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8107 	beq.w	8002446 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	2b02      	cmp	r3, #2
 800223e:	f040 80cb 	bne.w	80023d8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002242:	4b7a      	ldr	r3, [pc, #488]	; (800242c <HAL_RCC_OscConfig+0x824>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0203 	and.w	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	429a      	cmp	r2, r3
 8002254:	d12c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	3b01      	subs	r3, #1
 8002262:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d123      	bne.n	80022b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002272:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d11b      	bne.n	80022b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002282:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d113      	bne.n	80022b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	085b      	lsrs	r3, r3, #1
 8002294:	3b01      	subs	r3, #1
 8002296:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d109      	bne.n	80022b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	3b01      	subs	r3, #1
 80022aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d06d      	beq.n	800238c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d068      	beq.n	8002388 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022b6:	4b5d      	ldr	r3, [pc, #372]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022c2:	4b5a      	ldr	r3, [pc, #360]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0ba      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022d2:	4b56      	ldr	r3, [pc, #344]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a55      	ldr	r2, [pc, #340]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80022d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022de:	f7fe ff8d 	bl	80011fc <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e6:	f7fe ff89 	bl	80011fc <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0a7      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f8:	4b4c      	ldr	r3, [pc, #304]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f0      	bne.n	80022e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002304:	4b49      	ldr	r3, [pc, #292]	; (800242c <HAL_RCC_OscConfig+0x824>)
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	4b49      	ldr	r3, [pc, #292]	; (8002430 <HAL_RCC_OscConfig+0x828>)
 800230a:	4013      	ands	r3, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002314:	3a01      	subs	r2, #1
 8002316:	0112      	lsls	r2, r2, #4
 8002318:	4311      	orrs	r1, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800231e:	0212      	lsls	r2, r2, #8
 8002320:	4311      	orrs	r1, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002326:	0852      	lsrs	r2, r2, #1
 8002328:	3a01      	subs	r2, #1
 800232a:	0552      	lsls	r2, r2, #21
 800232c:	4311      	orrs	r1, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002332:	0852      	lsrs	r2, r2, #1
 8002334:	3a01      	subs	r2, #1
 8002336:	0652      	lsls	r2, r2, #25
 8002338:	4311      	orrs	r1, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800233e:	06d2      	lsls	r2, r2, #27
 8002340:	430a      	orrs	r2, r1
 8002342:	493a      	ldr	r1, [pc, #232]	; (800242c <HAL_RCC_OscConfig+0x824>)
 8002344:	4313      	orrs	r3, r2
 8002346:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002348:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_RCC_OscConfig+0x824>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a37      	ldr	r2, [pc, #220]	; (800242c <HAL_RCC_OscConfig+0x824>)
 800234e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002352:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002354:	4b35      	ldr	r3, [pc, #212]	; (800242c <HAL_RCC_OscConfig+0x824>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a34      	ldr	r2, [pc, #208]	; (800242c <HAL_RCC_OscConfig+0x824>)
 800235a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002360:	f7fe ff4c 	bl	80011fc <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe ff48 	bl	80011fc <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e066      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237a:	4b2c      	ldr	r3, [pc, #176]	; (800242c <HAL_RCC_OscConfig+0x824>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002386:	e05e      	b.n	8002446 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e05d      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238c:	4b27      	ldr	r3, [pc, #156]	; (800242c <HAL_RCC_OscConfig+0x824>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d156      	bne.n	8002446 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002398:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_RCC_OscConfig+0x824>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a23      	ldr	r2, [pc, #140]	; (800242c <HAL_RCC_OscConfig+0x824>)
 800239e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a20      	ldr	r2, [pc, #128]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80023aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023b0:	f7fe ff24 	bl	80011fc <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe ff20 	bl	80011fc <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e03e      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x7b0>
 80023d6:	e036      	b.n	8002446 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d031      	beq.n	8002442 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a12      	ldr	r2, [pc, #72]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80023e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023e8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d105      	bne.n	8002402 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4a0c      	ldr	r2, [pc, #48]	; (800242c <HAL_RCC_OscConfig+0x824>)
 80023fc:	f023 0303 	bic.w	r3, r3, #3
 8002400:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_OscConfig+0x824>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	4a09      	ldr	r2, [pc, #36]	; (800242c <HAL_RCC_OscConfig+0x824>)
 8002408:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800240c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002410:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fef3 	bl	80011fc <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002418:	e00c      	b.n	8002434 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe feef 	bl	80011fc <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d905      	bls.n	8002434 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e00d      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
 800242c:	40021000 	.word	0x40021000
 8002430:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_RCC_OscConfig+0x848>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ec      	bne.n	800241a <HAL_RCC_OscConfig+0x812>
 8002440:	e001      	b.n	8002446 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000

08002454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e10f      	b.n	800268c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800246c:	4b89      	ldr	r3, [pc, #548]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d910      	bls.n	800249c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b86      	ldr	r3, [pc, #536]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 020f 	bic.w	r2, r3, #15
 8002482:	4984      	ldr	r1, [pc, #528]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b82      	ldr	r3, [pc, #520]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0f7      	b.n	800268c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8089 	beq.w	80025bc <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d133      	bne.n	800251a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b2:	4b79      	ldr	r3, [pc, #484]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0e4      	b.n	800268c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80024c2:	f000 fa11 	bl	80028e8 <RCC_GetSysClockFreqFromPLLSource>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4a74      	ldr	r2, [pc, #464]	; (800269c <HAL_RCC_ClockConfig+0x248>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d955      	bls.n	800257a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024ce:	4b72      	ldr	r3, [pc, #456]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10a      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024da:	4b6f      	ldr	r3, [pc, #444]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024e2:	4a6d      	ldr	r2, [pc, #436]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80024e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e044      	b.n	800257a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d03e      	beq.n	800257a <HAL_RCC_ClockConfig+0x126>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d13a      	bne.n	800257a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002504:	4b64      	ldr	r3, [pc, #400]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800250c:	4a62      	ldr	r2, [pc, #392]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 800250e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002512:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e02f      	b.n	800257a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002522:	4b5d      	ldr	r3, [pc, #372]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d115      	bne.n	800255a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0ac      	b.n	800268c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800253a:	4b57      	ldr	r3, [pc, #348]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0a0      	b.n	800268c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800254a:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e098      	b.n	800268c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800255a:	f000 f8a7 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800255e:	4603      	mov	r3, r0
 8002560:	4a4e      	ldr	r2, [pc, #312]	; (800269c <HAL_RCC_ClockConfig+0x248>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d909      	bls.n	800257a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002566:	4b4c      	ldr	r3, [pc, #304]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800256e:	4a4a      	ldr	r2, [pc, #296]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002574:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f023 0203 	bic.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4944      	ldr	r1, [pc, #272]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002588:	4313      	orrs	r3, r2
 800258a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258c:	f7fe fe36 	bl	80011fc <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	e00a      	b.n	80025aa <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f7fe fe32 	bl	80011fc <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e070      	b.n	800268c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 020c 	and.w	r2, r3, #12
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d1eb      	bne.n	8002594 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d009      	beq.n	80025dc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c8:	4b33      	ldr	r3, [pc, #204]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4930      	ldr	r1, [pc, #192]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
 80025da:	e008      	b.n	80025ee <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b80      	cmp	r3, #128	; 0x80
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025e2:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	4a2c      	ldr	r2, [pc, #176]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 80025e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ec:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ee:	4b29      	ldr	r3, [pc, #164]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d210      	bcs.n	800261e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 020f 	bic.w	r2, r3, #15
 8002604:	4923      	ldr	r1, [pc, #140]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260c:	4b21      	ldr	r3, [pc, #132]	; (8002694 <HAL_RCC_ClockConfig+0x240>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d001      	beq.n	800261e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e036      	b.n	800268c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	4918      	ldr	r1, [pc, #96]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002638:	4313      	orrs	r3, r2
 800263a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d009      	beq.n	800265c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4910      	ldr	r1, [pc, #64]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002658:	4313      	orrs	r3, r2
 800265a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800265c:	f000 f826 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <HAL_RCC_ClockConfig+0x244>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	490c      	ldr	r1, [pc, #48]	; (80026a0 <HAL_RCC_ClockConfig+0x24c>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <HAL_RCC_ClockConfig+0x250>)
 800267a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <HAL_RCC_ClockConfig+0x254>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fd6b 	bl	800115c <HAL_InitTick>
 8002686:	4603      	mov	r3, r0
 8002688:	73fb      	strb	r3, [r7, #15]

  return status;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40022000 	.word	0x40022000
 8002698:	40021000 	.word	0x40021000
 800269c:	04c4b400 	.word	0x04c4b400
 80026a0:	080047e8 	.word	0x080047e8
 80026a4:	20000000 	.word	0x20000000
 80026a8:	20000004 	.word	0x20000004

080026ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ba:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c4:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x34>
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d121      	bne.n	800271e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d11e      	bne.n	800271e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026e0:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026ec:	4b31      	ldr	r3, [pc, #196]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	e005      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026fc:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002708:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002710:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10d      	bne.n	8002734 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800271c:	e00a      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d102      	bne.n	800272a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002724:	4b25      	ldr	r3, [pc, #148]	; (80027bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	e004      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d101      	bne.n	8002734 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002732:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d134      	bne.n	80027a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d003      	beq.n	8002752 <HAL_RCC_GetSysClockFreq+0xa6>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d003      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0xac>
 8002750:	e005      	b.n	800275e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002754:	617b      	str	r3, [r7, #20]
      break;
 8002756:	e005      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800275a:	617b      	str	r3, [r7, #20]
      break;
 800275c:	e002      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	617b      	str	r3, [r7, #20]
      break;
 8002762:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	3301      	adds	r3, #1
 8002770:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	fb02 f203 	mul.w	r2, r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	0e5b      	lsrs	r3, r3, #25
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	3301      	adds	r3, #1
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027a4:	69bb      	ldr	r3, [r7, #24]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3724      	adds	r7, #36	; 0x24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	08004800 	.word	0x08004800
 80027bc:	00f42400 	.word	0x00f42400
 80027c0:	007a1200 	.word	0x007a1200

080027c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000000 	.word	0x20000000

080027dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027e0:	f7ff fff0 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4904      	ldr	r1, [pc, #16]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	080047f8 	.word	0x080047f8

08002808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800280c:	f7ff ffda 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 8002810:	4602      	mov	r2, r0
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	0adb      	lsrs	r3, r3, #11
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	4904      	ldr	r1, [pc, #16]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800281e:	5ccb      	ldrb	r3, [r1, r3]
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	080047f8 	.word	0x080047f8

08002834 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800284c:	f7ff f8f8 	bl	8001a40 <HAL_PWREx_GetVoltageRange>
 8002850:	6178      	str	r0, [r7, #20]
 8002852:	e014      	b.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002858:	4a21      	ldr	r2, [pc, #132]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800285a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285e:	6593      	str	r3, [r2, #88]	; 0x58
 8002860:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800286c:	f7ff f8e8 	bl	8001a40 <HAL_PWREx_GetVoltageRange>
 8002870:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	4a1a      	ldr	r2, [pc, #104]	; (80028e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002884:	d10b      	bne.n	800289e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d913      	bls.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2ba0      	cmp	r3, #160	; 0xa0
 8002890:	d902      	bls.n	8002898 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002892:	2302      	movs	r3, #2
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	e00d      	b.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002898:	2301      	movs	r3, #1
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	e00a      	b.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b7f      	cmp	r3, #127	; 0x7f
 80028a2:	d902      	bls.n	80028aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80028a4:	2302      	movs	r3, #2
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	e004      	b.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b70      	cmp	r3, #112	; 0x70
 80028ae:	d101      	bne.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028b0:	2301      	movs	r3, #1
 80028b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 020f 	bic.w	r2, r3, #15
 80028bc:	4909      	ldr	r1, [pc, #36]	; (80028e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028c4:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d001      	beq.n	80028d6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40022000 	.word	0x40022000

080028e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80028f2:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d118      	bne.n	8002930 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028fe:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d107      	bne.n	800291a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800290a:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800290c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e005      	b.n	8002926 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800291a:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002926:	4a21      	ldr	r2, [pc, #132]	; (80029ac <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d003      	beq.n	8002948 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d003      	beq.n	800294e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002946:	e005      	b.n	8002954 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800294a:	613b      	str	r3, [r7, #16]
    break;
 800294c:	e005      	b.n	800295a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002950:	613b      	str	r3, [r7, #16]
    break;
 8002952:	e002      	b.n	800295a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	613b      	str	r3, [r7, #16]
    break;
 8002958:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	3301      	adds	r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	fb02 f203 	mul.w	r2, r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0e5b      	lsrs	r3, r3, #25
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	3301      	adds	r3, #1
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800299a:	683b      	ldr	r3, [r7, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40021000 	.word	0x40021000
 80029ac:	08004800 	.word	0x08004800
 80029b0:	00f42400 	.word	0x00f42400
 80029b4:	007a1200 	.word	0x007a1200

080029b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029c0:	2300      	movs	r3, #0
 80029c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029c4:	2300      	movs	r3, #0
 80029c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d040      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d8:	2b80      	cmp	r3, #128	; 0x80
 80029da:	d02a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029dc:	2b80      	cmp	r3, #128	; 0x80
 80029de:	d825      	bhi.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029e0:	2b60      	cmp	r3, #96	; 0x60
 80029e2:	d026      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029e4:	2b60      	cmp	r3, #96	; 0x60
 80029e6:	d821      	bhi.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029e8:	2b40      	cmp	r3, #64	; 0x40
 80029ea:	d006      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80029ec:	2b40      	cmp	r3, #64	; 0x40
 80029ee:	d81d      	bhi.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d009      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d010      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80029f8:	e018      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029fa:	4b89      	ldr	r3, [pc, #548]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4a88      	ldr	r2, [pc, #544]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a04:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a06:	e015      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fb02 	bl	8003018 <RCCEx_PLLSAI1_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a18:	e00c      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3320      	adds	r3, #32
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fbed 	bl	8003200 <RCCEx_PLLSAI2_Config>
 8002a26:	4603      	mov	r3, r0
 8002a28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a2a:	e003      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	74fb      	strb	r3, [r7, #19]
      break;
 8002a30:	e000      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10b      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a3a:	4b79      	ldr	r3, [pc, #484]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a40:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a48:	4975      	ldr	r1, [pc, #468]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a50:	e001      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a52:	7cfb      	ldrb	r3, [r7, #19]
 8002a54:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d047      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6a:	d030      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a70:	d82a      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a76:	d02a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a7c:	d824      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a82:	d008      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a88:	d81e      	bhi.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a92:	d010      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a94:	e018      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a96:	4b62      	ldr	r3, [pc, #392]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	4a61      	ldr	r2, [pc, #388]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aa2:	e015      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fab4 	bl	8003018 <RCCEx_PLLSAI1_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ab4:	e00c      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3320      	adds	r3, #32
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fb9f 	bl	8003200 <RCCEx_PLLSAI2_Config>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ac6:	e003      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	74fb      	strb	r3, [r7, #19]
      break;
 8002acc:	e000      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10b      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ad6:	4b52      	ldr	r3, [pc, #328]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	494e      	ldr	r1, [pc, #312]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002aec:	e001      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aee:	7cfb      	ldrb	r3, [r7, #19]
 8002af0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 809f 	beq.w	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b04:	4b46      	ldr	r3, [pc, #280]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002b14:	2300      	movs	r3, #0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00d      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	4a40      	ldr	r2, [pc, #256]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6593      	str	r3, [r2, #88]	; 0x58
 8002b26:	4b3e      	ldr	r3, [pc, #248]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b32:	2301      	movs	r3, #1
 8002b34:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b36:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a3a      	ldr	r2, [pc, #232]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b42:	f7fe fb5b 	bl	80011fc <HAL_GetTick>
 8002b46:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b48:	e009      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4a:	f7fe fb57 	bl	80011fc <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d902      	bls.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	74fb      	strb	r3, [r7, #19]
        break;
 8002b5c:	e005      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b5e:	4b31      	ldr	r3, [pc, #196]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0ef      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d15b      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01f      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d019      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b8e:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b98:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b9a:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba0:	4a1f      	ldr	r2, [pc, #124]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bba:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d016      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fb16 	bl	80011fc <HAL_GetTick>
 8002bd0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd2:	e00b      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7fe fb12 	bl	80011fc <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d902      	bls.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	74fb      	strb	r3, [r7, #19]
            break;
 8002bea:	e006      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0ec      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002bfa:	7cfb      	ldrb	r3, [r7, #19]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10c      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c00:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c10:	4903      	ldr	r1, [pc, #12]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c18:	e008      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	74bb      	strb	r3, [r7, #18]
 8002c1e:	e005      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c2c:	7c7b      	ldrb	r3, [r7, #17]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d105      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c32:	4ba0      	ldr	r3, [pc, #640]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c36:	4a9f      	ldr	r2, [pc, #636]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c4a:	4b9a      	ldr	r3, [pc, #616]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	f023 0203 	bic.w	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c58:	4996      	ldr	r1, [pc, #600]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c6c:	4b91      	ldr	r3, [pc, #580]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	f023 020c 	bic.w	r2, r3, #12
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	498e      	ldr	r1, [pc, #568]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c8e:	4b89      	ldr	r3, [pc, #548]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	4985      	ldr	r1, [pc, #532]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cb0:	4b80      	ldr	r3, [pc, #512]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cbe:	497d      	ldr	r1, [pc, #500]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cd2:	4b78      	ldr	r3, [pc, #480]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	4974      	ldr	r1, [pc, #464]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d02:	496c      	ldr	r1, [pc, #432]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d16:	4b67      	ldr	r3, [pc, #412]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d24:	4963      	ldr	r1, [pc, #396]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d38:	4b5e      	ldr	r3, [pc, #376]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d46:	495b      	ldr	r1, [pc, #364]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d5a:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	4952      	ldr	r1, [pc, #328]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d7c:	4b4d      	ldr	r3, [pc, #308]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	494a      	ldr	r1, [pc, #296]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d9e:	4b45      	ldr	r3, [pc, #276]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	4941      	ldr	r1, [pc, #260]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dc0:	4b3c      	ldr	r3, [pc, #240]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dc6:	f023 0203 	bic.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dce:	4939      	ldr	r1, [pc, #228]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d028      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002de2:	4b34      	ldr	r3, [pc, #208]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df0:	4930      	ldr	r1, [pc, #192]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e00:	d106      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4a2b      	ldr	r2, [pc, #172]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e0c:	60d3      	str	r3, [r2, #12]
 8002e0e:	e011      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2101      	movs	r1, #1
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f8f9 	bl	8003018 <RCCEx_PLLSAI1_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d04d      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e48:	d108      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e50:	4a18      	ldr	r2, [pc, #96]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e56:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e5a:	e012      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002e5c:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e62:	4a14      	ldr	r2, [pc, #80]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e68:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e7a:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e96:	60d3      	str	r3, [r2, #12]
 8002e98:	e020      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea2:	d109      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a02      	ldr	r2, [pc, #8]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	60d3      	str	r3, [r2, #12]
 8002eb0:	e014      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 f8a5 	bl	8003018 <RCCEx_PLLSAI1_Config>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002ed8:	7cfb      	ldrb	r3, [r7, #19]
 8002eda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d028      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ee8:	4b4a      	ldr	r3, [pc, #296]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef6:	4947      	ldr	r1, [pc, #284]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f06:	d106      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f08:	4b42      	ldr	r3, [pc, #264]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4a41      	ldr	r2, [pc, #260]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f12:	60d3      	str	r3, [r2, #12]
 8002f14:	e011      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f1e:	d10c      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	2101      	movs	r1, #1
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f876 	bl	8003018 <RCCEx_PLLSAI1_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
 8002f38:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01e      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f46:	4b33      	ldr	r3, [pc, #204]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f56:	492f      	ldr	r1, [pc, #188]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	2102      	movs	r1, #2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 f851 	bl	8003018 <RCCEx_PLLSAI1_Config>
 8002f76:	4603      	mov	r3, r0
 8002f78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f7a:	7cfb      	ldrb	r3, [r7, #19]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00b      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f90:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f96:	f023 0204 	bic.w	r2, r3, #4
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa0:	491c      	ldr	r1, [pc, #112]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00b      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fb4:	4b17      	ldr	r3, [pc, #92]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fba:	f023 0218 	bic.w	r2, r3, #24
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	4913      	ldr	r1, [pc, #76]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d017      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fe8:	490a      	ldr	r1, [pc, #40]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ffa:	d105      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4a04      	ldr	r2, [pc, #16]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003006:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003008:	7cbb      	ldrb	r3, [r7, #18]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000

08003018 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003026:	4b72      	ldr	r3, [pc, #456]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00e      	beq.n	8003050 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003032:	4b6f      	ldr	r3, [pc, #444]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0203 	and.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d103      	bne.n	800304a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
       ||
 8003046:	2b00      	cmp	r3, #0
 8003048:	d142      	bne.n	80030d0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
 800304e:	e03f      	b.n	80030d0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d018      	beq.n	800308a <RCCEx_PLLSAI1_Config+0x72>
 8003058:	2b03      	cmp	r3, #3
 800305a:	d825      	bhi.n	80030a8 <RCCEx_PLLSAI1_Config+0x90>
 800305c:	2b01      	cmp	r3, #1
 800305e:	d002      	beq.n	8003066 <RCCEx_PLLSAI1_Config+0x4e>
 8003060:	2b02      	cmp	r3, #2
 8003062:	d009      	beq.n	8003078 <RCCEx_PLLSAI1_Config+0x60>
 8003064:	e020      	b.n	80030a8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003066:	4b62      	ldr	r3, [pc, #392]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11d      	bne.n	80030ae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003076:	e01a      	b.n	80030ae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003078:	4b5d      	ldr	r3, [pc, #372]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d116      	bne.n	80030b2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003088:	e013      	b.n	80030b2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800308a:	4b59      	ldr	r3, [pc, #356]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003096:	4b56      	ldr	r3, [pc, #344]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030a6:	e006      	b.n	80030b6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
      break;
 80030ac:	e004      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80030b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d108      	bne.n	80030d0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80030be:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f023 0203 	bic.w	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4949      	ldr	r1, [pc, #292]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 8086 	bne.w	80031e4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030d8:	4b45      	ldr	r3, [pc, #276]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a44      	ldr	r2, [pc, #272]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80030de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e4:	f7fe f88a 	bl	80011fc <HAL_GetTick>
 80030e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030ea:	e009      	b.n	8003100 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ec:	f7fe f886 	bl	80011fc <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d902      	bls.n	8003100 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	73fb      	strb	r3, [r7, #15]
        break;
 80030fe:	e005      	b.n	800310c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003100:	4b3b      	ldr	r3, [pc, #236]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ef      	bne.n	80030ec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d168      	bne.n	80031e4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d113      	bne.n	8003140 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003118:	4b35      	ldr	r3, [pc, #212]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800311e:	4013      	ands	r3, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6892      	ldr	r2, [r2, #8]
 8003124:	0211      	lsls	r1, r2, #8
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68d2      	ldr	r2, [r2, #12]
 800312a:	06d2      	lsls	r2, r2, #27
 800312c:	4311      	orrs	r1, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6852      	ldr	r2, [r2, #4]
 8003132:	3a01      	subs	r2, #1
 8003134:	0112      	lsls	r2, r2, #4
 8003136:	430a      	orrs	r2, r1
 8003138:	492d      	ldr	r1, [pc, #180]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800313a:	4313      	orrs	r3, r2
 800313c:	610b      	str	r3, [r1, #16]
 800313e:	e02d      	b.n	800319c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d115      	bne.n	8003172 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800314c:	4013      	ands	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6892      	ldr	r2, [r2, #8]
 8003152:	0211      	lsls	r1, r2, #8
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6912      	ldr	r2, [r2, #16]
 8003158:	0852      	lsrs	r2, r2, #1
 800315a:	3a01      	subs	r2, #1
 800315c:	0552      	lsls	r2, r2, #21
 800315e:	4311      	orrs	r1, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6852      	ldr	r2, [r2, #4]
 8003164:	3a01      	subs	r2, #1
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	430a      	orrs	r2, r1
 800316a:	4921      	ldr	r1, [pc, #132]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800316c:	4313      	orrs	r3, r2
 800316e:	610b      	str	r3, [r1, #16]
 8003170:	e014      	b.n	800319c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003172:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	4b21      	ldr	r3, [pc, #132]	; (80031fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6892      	ldr	r2, [r2, #8]
 800317e:	0211      	lsls	r1, r2, #8
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6952      	ldr	r2, [r2, #20]
 8003184:	0852      	lsrs	r2, r2, #1
 8003186:	3a01      	subs	r2, #1
 8003188:	0652      	lsls	r2, r2, #25
 800318a:	4311      	orrs	r1, r2
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6852      	ldr	r2, [r2, #4]
 8003190:	3a01      	subs	r2, #1
 8003192:	0112      	lsls	r2, r2, #4
 8003194:	430a      	orrs	r2, r1
 8003196:	4916      	ldr	r1, [pc, #88]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003198:	4313      	orrs	r3, r2
 800319a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800319c:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a13      	ldr	r2, [pc, #76]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fe f828 	bl	80011fc <HAL_GetTick>
 80031ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031ae:	e009      	b.n	80031c4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031b0:	f7fe f824 	bl	80011fc <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d902      	bls.n	80031c4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	73fb      	strb	r3, [r7, #15]
          break;
 80031c2:	e005      	b.n	80031d0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ef      	beq.n	80031b0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	4904      	ldr	r1, [pc, #16]	; (80031f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	07ff800f 	.word	0x07ff800f
 80031f8:	ff9f800f 	.word	0xff9f800f
 80031fc:	f9ff800f 	.word	0xf9ff800f

08003200 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800320e:	4b72      	ldr	r3, [pc, #456]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00e      	beq.n	8003238 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800321a:	4b6f      	ldr	r3, [pc, #444]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0203 	and.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d103      	bne.n	8003232 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
       ||
 800322e:	2b00      	cmp	r3, #0
 8003230:	d142      	bne.n	80032b8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	e03f      	b.n	80032b8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d018      	beq.n	8003272 <RCCEx_PLLSAI2_Config+0x72>
 8003240:	2b03      	cmp	r3, #3
 8003242:	d825      	bhi.n	8003290 <RCCEx_PLLSAI2_Config+0x90>
 8003244:	2b01      	cmp	r3, #1
 8003246:	d002      	beq.n	800324e <RCCEx_PLLSAI2_Config+0x4e>
 8003248:	2b02      	cmp	r3, #2
 800324a:	d009      	beq.n	8003260 <RCCEx_PLLSAI2_Config+0x60>
 800324c:	e020      	b.n	8003290 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800324e:	4b62      	ldr	r3, [pc, #392]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d11d      	bne.n	8003296 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800325e:	e01a      	b.n	8003296 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003260:	4b5d      	ldr	r3, [pc, #372]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d116      	bne.n	800329a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003270:	e013      	b.n	800329a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003272:	4b59      	ldr	r3, [pc, #356]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800327e:	4b56      	ldr	r3, [pc, #344]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800328e:	e006      	b.n	800329e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      break;
 8003294:	e004      	b.n	80032a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800329e:	bf00      	nop
    }

    if(status == HAL_OK)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d108      	bne.n	80032b8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80032a6:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4949      	ldr	r1, [pc, #292]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 8086 	bne.w	80033cc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032c0:	4b45      	ldr	r3, [pc, #276]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a44      	ldr	r2, [pc, #272]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032cc:	f7fd ff96 	bl	80011fc <HAL_GetTick>
 80032d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032d2:	e009      	b.n	80032e8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032d4:	f7fd ff92 	bl	80011fc <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d902      	bls.n	80032e8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	73fb      	strb	r3, [r7, #15]
        break;
 80032e6:	e005      	b.n	80032f4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032e8:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ef      	bne.n	80032d4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d168      	bne.n	80033cc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d113      	bne.n	8003328 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003300:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	4b35      	ldr	r3, [pc, #212]	; (80033dc <RCCEx_PLLSAI2_Config+0x1dc>)
 8003306:	4013      	ands	r3, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6892      	ldr	r2, [r2, #8]
 800330c:	0211      	lsls	r1, r2, #8
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68d2      	ldr	r2, [r2, #12]
 8003312:	06d2      	lsls	r2, r2, #27
 8003314:	4311      	orrs	r1, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6852      	ldr	r2, [r2, #4]
 800331a:	3a01      	subs	r2, #1
 800331c:	0112      	lsls	r2, r2, #4
 800331e:	430a      	orrs	r2, r1
 8003320:	492d      	ldr	r1, [pc, #180]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003322:	4313      	orrs	r3, r2
 8003324:	614b      	str	r3, [r1, #20]
 8003326:	e02d      	b.n	8003384 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d115      	bne.n	800335a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800332e:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003334:	4013      	ands	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6892      	ldr	r2, [r2, #8]
 800333a:	0211      	lsls	r1, r2, #8
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6912      	ldr	r2, [r2, #16]
 8003340:	0852      	lsrs	r2, r2, #1
 8003342:	3a01      	subs	r2, #1
 8003344:	0552      	lsls	r2, r2, #21
 8003346:	4311      	orrs	r1, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6852      	ldr	r2, [r2, #4]
 800334c:	3a01      	subs	r2, #1
 800334e:	0112      	lsls	r2, r2, #4
 8003350:	430a      	orrs	r2, r1
 8003352:	4921      	ldr	r1, [pc, #132]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003354:	4313      	orrs	r3, r2
 8003356:	614b      	str	r3, [r1, #20]
 8003358:	e014      	b.n	8003384 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800335a:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003360:	4013      	ands	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6892      	ldr	r2, [r2, #8]
 8003366:	0211      	lsls	r1, r2, #8
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6952      	ldr	r2, [r2, #20]
 800336c:	0852      	lsrs	r2, r2, #1
 800336e:	3a01      	subs	r2, #1
 8003370:	0652      	lsls	r2, r2, #25
 8003372:	4311      	orrs	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6852      	ldr	r2, [r2, #4]
 8003378:	3a01      	subs	r2, #1
 800337a:	0112      	lsls	r2, r2, #4
 800337c:	430a      	orrs	r2, r1
 800337e:	4916      	ldr	r1, [pc, #88]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003380:	4313      	orrs	r3, r2
 8003382:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fd ff34 	bl	80011fc <HAL_GetTick>
 8003394:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003396:	e009      	b.n	80033ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003398:	f7fd ff30 	bl	80011fc <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d902      	bls.n	80033ac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	73fb      	strb	r3, [r7, #15]
          break;
 80033aa:	e005      	b.n	80033b8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ef      	beq.n	8003398 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	4904      	ldr	r1, [pc, #16]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	07ff800f 	.word	0x07ff800f
 80033e0:	ff9f800f 	.word	0xff9f800f
 80033e4:	f9ff800f 	.word	0xf9ff800f

080033e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e042      	b.n	8003480 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003400:	2b00      	cmp	r3, #0
 8003402:	d106      	bne.n	8003412 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7fd fc8d 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2224      	movs	r2, #36	; 0x24
 8003416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f8c4 	bl	80035b8 <UART_SetConfig>
 8003430:	4603      	mov	r3, r0
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e022      	b.n	8003480 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fb80 	bl	8003b48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fc07 	bl	8003c8c <UART_CheckIdleState>
 800347e:	4603      	mov	r3, r0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	; 0x28
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349e:	2b20      	cmp	r3, #32
 80034a0:	f040 8084 	bne.w	80035ac <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_UART_Transmit+0x28>
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e07c      	b.n	80035ae <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Transmit+0x3a>
 80034be:	2302      	movs	r3, #2
 80034c0:	e075      	b.n	80035ae <HAL_UART_Transmit+0x126>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2221      	movs	r2, #33	; 0x21
 80034d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034da:	f7fd fe8f 	bl	80011fc <HAL_GetTick>
 80034de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	88fa      	ldrh	r2, [r7, #6]
 80034ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f8:	d108      	bne.n	800350c <HAL_UART_Transmit+0x84>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d104      	bne.n	800350c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	e003      	b.n	8003514 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800351c:	e02d      	b.n	800357a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	2180      	movs	r1, #128	; 0x80
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fbfa 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e03a      	b.n	80035ae <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800354a:	b292      	uxth	r2, r2
 800354c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	3302      	adds	r3, #2
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	e008      	b.n	8003568 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	b292      	uxth	r2, r2
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3301      	adds	r3, #1
 8003566:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1cb      	bne.n	800351e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2200      	movs	r2, #0
 800358e:	2140      	movs	r1, #64	; 0x40
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fbc6 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e006      	b.n	80035ae <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e000      	b.n	80035ae <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
  }
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3720      	adds	r7, #32
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b8:	b5b0      	push	{r4, r5, r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4bb1      	ldr	r3, [pc, #708]	; (80038a8 <UART_SetConfig+0x2f0>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	69f9      	ldr	r1, [r7, #28]
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4aa6      	ldr	r2, [pc, #664]	; (80038ac <UART_SetConfig+0x2f4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d004      	beq.n	8003620 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	4313      	orrs	r3, r2
 800361e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800362a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	69f9      	ldr	r1, [r7, #28]
 8003634:	430b      	orrs	r3, r1
 8003636:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	f023 010f 	bic.w	r1, r3, #15
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a97      	ldr	r2, [pc, #604]	; (80038b0 <UART_SetConfig+0x2f8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d120      	bne.n	800369a <UART_SetConfig+0xe2>
 8003658:	4b96      	ldr	r3, [pc, #600]	; (80038b4 <UART_SetConfig+0x2fc>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b03      	cmp	r3, #3
 8003664:	d816      	bhi.n	8003694 <UART_SetConfig+0xdc>
 8003666:	a201      	add	r2, pc, #4	; (adr r2, 800366c <UART_SetConfig+0xb4>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	0800367d 	.word	0x0800367d
 8003670:	08003689 	.word	0x08003689
 8003674:	08003683 	.word	0x08003683
 8003678:	0800368f 	.word	0x0800368f
 800367c:	2301      	movs	r3, #1
 800367e:	76fb      	strb	r3, [r7, #27]
 8003680:	e0e7      	b.n	8003852 <UART_SetConfig+0x29a>
 8003682:	2302      	movs	r3, #2
 8003684:	76fb      	strb	r3, [r7, #27]
 8003686:	e0e4      	b.n	8003852 <UART_SetConfig+0x29a>
 8003688:	2304      	movs	r3, #4
 800368a:	76fb      	strb	r3, [r7, #27]
 800368c:	e0e1      	b.n	8003852 <UART_SetConfig+0x29a>
 800368e:	2308      	movs	r3, #8
 8003690:	76fb      	strb	r3, [r7, #27]
 8003692:	e0de      	b.n	8003852 <UART_SetConfig+0x29a>
 8003694:	2310      	movs	r3, #16
 8003696:	76fb      	strb	r3, [r7, #27]
 8003698:	e0db      	b.n	8003852 <UART_SetConfig+0x29a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a86      	ldr	r2, [pc, #536]	; (80038b8 <UART_SetConfig+0x300>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d132      	bne.n	800370a <UART_SetConfig+0x152>
 80036a4:	4b83      	ldr	r3, [pc, #524]	; (80038b4 <UART_SetConfig+0x2fc>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d828      	bhi.n	8003704 <UART_SetConfig+0x14c>
 80036b2:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <UART_SetConfig+0x100>)
 80036b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b8:	080036ed 	.word	0x080036ed
 80036bc:	08003705 	.word	0x08003705
 80036c0:	08003705 	.word	0x08003705
 80036c4:	08003705 	.word	0x08003705
 80036c8:	080036f9 	.word	0x080036f9
 80036cc:	08003705 	.word	0x08003705
 80036d0:	08003705 	.word	0x08003705
 80036d4:	08003705 	.word	0x08003705
 80036d8:	080036f3 	.word	0x080036f3
 80036dc:	08003705 	.word	0x08003705
 80036e0:	08003705 	.word	0x08003705
 80036e4:	08003705 	.word	0x08003705
 80036e8:	080036ff 	.word	0x080036ff
 80036ec:	2300      	movs	r3, #0
 80036ee:	76fb      	strb	r3, [r7, #27]
 80036f0:	e0af      	b.n	8003852 <UART_SetConfig+0x29a>
 80036f2:	2302      	movs	r3, #2
 80036f4:	76fb      	strb	r3, [r7, #27]
 80036f6:	e0ac      	b.n	8003852 <UART_SetConfig+0x29a>
 80036f8:	2304      	movs	r3, #4
 80036fa:	76fb      	strb	r3, [r7, #27]
 80036fc:	e0a9      	b.n	8003852 <UART_SetConfig+0x29a>
 80036fe:	2308      	movs	r3, #8
 8003700:	76fb      	strb	r3, [r7, #27]
 8003702:	e0a6      	b.n	8003852 <UART_SetConfig+0x29a>
 8003704:	2310      	movs	r3, #16
 8003706:	76fb      	strb	r3, [r7, #27]
 8003708:	e0a3      	b.n	8003852 <UART_SetConfig+0x29a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a6b      	ldr	r2, [pc, #428]	; (80038bc <UART_SetConfig+0x304>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d120      	bne.n	8003756 <UART_SetConfig+0x19e>
 8003714:	4b67      	ldr	r3, [pc, #412]	; (80038b4 <UART_SetConfig+0x2fc>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800371e:	2b30      	cmp	r3, #48	; 0x30
 8003720:	d013      	beq.n	800374a <UART_SetConfig+0x192>
 8003722:	2b30      	cmp	r3, #48	; 0x30
 8003724:	d814      	bhi.n	8003750 <UART_SetConfig+0x198>
 8003726:	2b20      	cmp	r3, #32
 8003728:	d009      	beq.n	800373e <UART_SetConfig+0x186>
 800372a:	2b20      	cmp	r3, #32
 800372c:	d810      	bhi.n	8003750 <UART_SetConfig+0x198>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <UART_SetConfig+0x180>
 8003732:	2b10      	cmp	r3, #16
 8003734:	d006      	beq.n	8003744 <UART_SetConfig+0x18c>
 8003736:	e00b      	b.n	8003750 <UART_SetConfig+0x198>
 8003738:	2300      	movs	r3, #0
 800373a:	76fb      	strb	r3, [r7, #27]
 800373c:	e089      	b.n	8003852 <UART_SetConfig+0x29a>
 800373e:	2302      	movs	r3, #2
 8003740:	76fb      	strb	r3, [r7, #27]
 8003742:	e086      	b.n	8003852 <UART_SetConfig+0x29a>
 8003744:	2304      	movs	r3, #4
 8003746:	76fb      	strb	r3, [r7, #27]
 8003748:	e083      	b.n	8003852 <UART_SetConfig+0x29a>
 800374a:	2308      	movs	r3, #8
 800374c:	76fb      	strb	r3, [r7, #27]
 800374e:	e080      	b.n	8003852 <UART_SetConfig+0x29a>
 8003750:	2310      	movs	r3, #16
 8003752:	76fb      	strb	r3, [r7, #27]
 8003754:	e07d      	b.n	8003852 <UART_SetConfig+0x29a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a59      	ldr	r2, [pc, #356]	; (80038c0 <UART_SetConfig+0x308>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d120      	bne.n	80037a2 <UART_SetConfig+0x1ea>
 8003760:	4b54      	ldr	r3, [pc, #336]	; (80038b4 <UART_SetConfig+0x2fc>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800376a:	2bc0      	cmp	r3, #192	; 0xc0
 800376c:	d013      	beq.n	8003796 <UART_SetConfig+0x1de>
 800376e:	2bc0      	cmp	r3, #192	; 0xc0
 8003770:	d814      	bhi.n	800379c <UART_SetConfig+0x1e4>
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d009      	beq.n	800378a <UART_SetConfig+0x1d2>
 8003776:	2b80      	cmp	r3, #128	; 0x80
 8003778:	d810      	bhi.n	800379c <UART_SetConfig+0x1e4>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <UART_SetConfig+0x1cc>
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d006      	beq.n	8003790 <UART_SetConfig+0x1d8>
 8003782:	e00b      	b.n	800379c <UART_SetConfig+0x1e4>
 8003784:	2300      	movs	r3, #0
 8003786:	76fb      	strb	r3, [r7, #27]
 8003788:	e063      	b.n	8003852 <UART_SetConfig+0x29a>
 800378a:	2302      	movs	r3, #2
 800378c:	76fb      	strb	r3, [r7, #27]
 800378e:	e060      	b.n	8003852 <UART_SetConfig+0x29a>
 8003790:	2304      	movs	r3, #4
 8003792:	76fb      	strb	r3, [r7, #27]
 8003794:	e05d      	b.n	8003852 <UART_SetConfig+0x29a>
 8003796:	2308      	movs	r3, #8
 8003798:	76fb      	strb	r3, [r7, #27]
 800379a:	e05a      	b.n	8003852 <UART_SetConfig+0x29a>
 800379c:	2310      	movs	r3, #16
 800379e:	76fb      	strb	r3, [r7, #27]
 80037a0:	e057      	b.n	8003852 <UART_SetConfig+0x29a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a47      	ldr	r2, [pc, #284]	; (80038c4 <UART_SetConfig+0x30c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d125      	bne.n	80037f8 <UART_SetConfig+0x240>
 80037ac:	4b41      	ldr	r3, [pc, #260]	; (80038b4 <UART_SetConfig+0x2fc>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ba:	d017      	beq.n	80037ec <UART_SetConfig+0x234>
 80037bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037c0:	d817      	bhi.n	80037f2 <UART_SetConfig+0x23a>
 80037c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c6:	d00b      	beq.n	80037e0 <UART_SetConfig+0x228>
 80037c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037cc:	d811      	bhi.n	80037f2 <UART_SetConfig+0x23a>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <UART_SetConfig+0x222>
 80037d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d6:	d006      	beq.n	80037e6 <UART_SetConfig+0x22e>
 80037d8:	e00b      	b.n	80037f2 <UART_SetConfig+0x23a>
 80037da:	2300      	movs	r3, #0
 80037dc:	76fb      	strb	r3, [r7, #27]
 80037de:	e038      	b.n	8003852 <UART_SetConfig+0x29a>
 80037e0:	2302      	movs	r3, #2
 80037e2:	76fb      	strb	r3, [r7, #27]
 80037e4:	e035      	b.n	8003852 <UART_SetConfig+0x29a>
 80037e6:	2304      	movs	r3, #4
 80037e8:	76fb      	strb	r3, [r7, #27]
 80037ea:	e032      	b.n	8003852 <UART_SetConfig+0x29a>
 80037ec:	2308      	movs	r3, #8
 80037ee:	76fb      	strb	r3, [r7, #27]
 80037f0:	e02f      	b.n	8003852 <UART_SetConfig+0x29a>
 80037f2:	2310      	movs	r3, #16
 80037f4:	76fb      	strb	r3, [r7, #27]
 80037f6:	e02c      	b.n	8003852 <UART_SetConfig+0x29a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2b      	ldr	r2, [pc, #172]	; (80038ac <UART_SetConfig+0x2f4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d125      	bne.n	800384e <UART_SetConfig+0x296>
 8003802:	4b2c      	ldr	r3, [pc, #176]	; (80038b4 <UART_SetConfig+0x2fc>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800380c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003810:	d017      	beq.n	8003842 <UART_SetConfig+0x28a>
 8003812:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003816:	d817      	bhi.n	8003848 <UART_SetConfig+0x290>
 8003818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800381c:	d00b      	beq.n	8003836 <UART_SetConfig+0x27e>
 800381e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003822:	d811      	bhi.n	8003848 <UART_SetConfig+0x290>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <UART_SetConfig+0x278>
 8003828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382c:	d006      	beq.n	800383c <UART_SetConfig+0x284>
 800382e:	e00b      	b.n	8003848 <UART_SetConfig+0x290>
 8003830:	2300      	movs	r3, #0
 8003832:	76fb      	strb	r3, [r7, #27]
 8003834:	e00d      	b.n	8003852 <UART_SetConfig+0x29a>
 8003836:	2302      	movs	r3, #2
 8003838:	76fb      	strb	r3, [r7, #27]
 800383a:	e00a      	b.n	8003852 <UART_SetConfig+0x29a>
 800383c:	2304      	movs	r3, #4
 800383e:	76fb      	strb	r3, [r7, #27]
 8003840:	e007      	b.n	8003852 <UART_SetConfig+0x29a>
 8003842:	2308      	movs	r3, #8
 8003844:	76fb      	strb	r3, [r7, #27]
 8003846:	e004      	b.n	8003852 <UART_SetConfig+0x29a>
 8003848:	2310      	movs	r3, #16
 800384a:	76fb      	strb	r3, [r7, #27]
 800384c:	e001      	b.n	8003852 <UART_SetConfig+0x29a>
 800384e:	2310      	movs	r3, #16
 8003850:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a15      	ldr	r2, [pc, #84]	; (80038ac <UART_SetConfig+0x2f4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	f040 809f 	bne.w	800399c <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800385e:	7efb      	ldrb	r3, [r7, #27]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d837      	bhi.n	80038d4 <UART_SetConfig+0x31c>
 8003864:	a201      	add	r2, pc, #4	; (adr r2, 800386c <UART_SetConfig+0x2b4>)
 8003866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386a:	bf00      	nop
 800386c:	08003891 	.word	0x08003891
 8003870:	080038d5 	.word	0x080038d5
 8003874:	08003899 	.word	0x08003899
 8003878:	080038d5 	.word	0x080038d5
 800387c:	0800389f 	.word	0x0800389f
 8003880:	080038d5 	.word	0x080038d5
 8003884:	080038d5 	.word	0x080038d5
 8003888:	080038d5 	.word	0x080038d5
 800388c:	080038cd 	.word	0x080038cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003890:	f7fe ffa4 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 8003894:	6178      	str	r0, [r7, #20]
        break;
 8003896:	e022      	b.n	80038de <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <UART_SetConfig+0x310>)
 800389a:	617b      	str	r3, [r7, #20]
        break;
 800389c:	e01f      	b.n	80038de <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389e:	f7fe ff05 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 80038a2:	6178      	str	r0, [r7, #20]
        break;
 80038a4:	e01b      	b.n	80038de <UART_SetConfig+0x326>
 80038a6:	bf00      	nop
 80038a8:	cfff69f3 	.word	0xcfff69f3
 80038ac:	40008000 	.word	0x40008000
 80038b0:	40013800 	.word	0x40013800
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40004400 	.word	0x40004400
 80038bc:	40004800 	.word	0x40004800
 80038c0:	40004c00 	.word	0x40004c00
 80038c4:	40005000 	.word	0x40005000
 80038c8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d0:	617b      	str	r3, [r7, #20]
        break;
 80038d2:	e004      	b.n	80038de <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	76bb      	strb	r3, [r7, #26]
        break;
 80038dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8119 	beq.w	8003b18 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	4a95      	ldr	r2, [pc, #596]	; (8003b40 <UART_SetConfig+0x588>)
 80038ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038f0:	461a      	mov	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80038f8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d305      	bcc.n	8003916 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	429a      	cmp	r2, r3
 8003914:	d902      	bls.n	800391c <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	76bb      	strb	r3, [r7, #26]
 800391a:	e0fd      	b.n	8003b18 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	4618      	mov	r0, r3
 8003920:	f04f 0100 	mov.w	r1, #0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	4a85      	ldr	r2, [pc, #532]	; (8003b40 <UART_SetConfig+0x588>)
 800392a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800392e:	b29a      	uxth	r2, r3
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	f7fc fc62 	bl	80001fc <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	020b      	lsls	r3, r1, #8
 800394a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800394e:	0202      	lsls	r2, r0, #8
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	6849      	ldr	r1, [r1, #4]
 8003954:	0849      	lsrs	r1, r1, #1
 8003956:	4608      	mov	r0, r1
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	1814      	adds	r4, r2, r0
 800395e:	eb43 0501 	adc.w	r5, r3, r1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	461a      	mov	r2, r3
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	4620      	mov	r0, r4
 800396e:	4629      	mov	r1, r5
 8003970:	f7fc fc44 	bl	80001fc <__aeabi_uldivmod>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4613      	mov	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003982:	d308      	bcc.n	8003996 <UART_SetConfig+0x3de>
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800398a:	d204      	bcs.n	8003996 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	60da      	str	r2, [r3, #12]
 8003994:	e0c0      	b.n	8003b18 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	76bb      	strb	r3, [r7, #26]
 800399a:	e0bd      	b.n	8003b18 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a4:	d164      	bne.n	8003a70 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 80039a6:	7efb      	ldrb	r3, [r7, #27]
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d828      	bhi.n	80039fe <UART_SetConfig+0x446>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <UART_SetConfig+0x3fc>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039d9 	.word	0x080039d9
 80039b8:	080039e1 	.word	0x080039e1
 80039bc:	080039e9 	.word	0x080039e9
 80039c0:	080039ff 	.word	0x080039ff
 80039c4:	080039ef 	.word	0x080039ef
 80039c8:	080039ff 	.word	0x080039ff
 80039cc:	080039ff 	.word	0x080039ff
 80039d0:	080039ff 	.word	0x080039ff
 80039d4:	080039f7 	.word	0x080039f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d8:	f7fe ff00 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 80039dc:	6178      	str	r0, [r7, #20]
        break;
 80039de:	e013      	b.n	8003a08 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e0:	f7fe ff12 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 80039e4:	6178      	str	r0, [r7, #20]
        break;
 80039e6:	e00f      	b.n	8003a08 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e8:	4b56      	ldr	r3, [pc, #344]	; (8003b44 <UART_SetConfig+0x58c>)
 80039ea:	617b      	str	r3, [r7, #20]
        break;
 80039ec:	e00c      	b.n	8003a08 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ee:	f7fe fe5d 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 80039f2:	6178      	str	r0, [r7, #20]
        break;
 80039f4:	e008      	b.n	8003a08 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fa:	617b      	str	r3, [r7, #20]
        break;
 80039fc:	e004      	b.n	8003a08 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	76bb      	strb	r3, [r7, #26]
        break;
 8003a06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8084 	beq.w	8003b18 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	4a4a      	ldr	r2, [pc, #296]	; (8003b40 <UART_SetConfig+0x588>)
 8003a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a22:	005a      	lsls	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	441a      	add	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	2b0f      	cmp	r3, #15
 8003a3a:	d916      	bls.n	8003a6a <UART_SetConfig+0x4b2>
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a42:	d212      	bcs.n	8003a6a <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f023 030f 	bic.w	r3, r3, #15
 8003a4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	89fb      	ldrh	r3, [r7, #14]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	89fa      	ldrh	r2, [r7, #14]
 8003a66:	60da      	str	r2, [r3, #12]
 8003a68:	e056      	b.n	8003b18 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	76bb      	strb	r3, [r7, #26]
 8003a6e:	e053      	b.n	8003b18 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a70:	7efb      	ldrb	r3, [r7, #27]
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d827      	bhi.n	8003ac6 <UART_SetConfig+0x50e>
 8003a76:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <UART_SetConfig+0x4c4>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003aa1 	.word	0x08003aa1
 8003a80:	08003aa9 	.word	0x08003aa9
 8003a84:	08003ab1 	.word	0x08003ab1
 8003a88:	08003ac7 	.word	0x08003ac7
 8003a8c:	08003ab7 	.word	0x08003ab7
 8003a90:	08003ac7 	.word	0x08003ac7
 8003a94:	08003ac7 	.word	0x08003ac7
 8003a98:	08003ac7 	.word	0x08003ac7
 8003a9c:	08003abf 	.word	0x08003abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa0:	f7fe fe9c 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 8003aa4:	6178      	str	r0, [r7, #20]
        break;
 8003aa6:	e013      	b.n	8003ad0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa8:	f7fe feae 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 8003aac:	6178      	str	r0, [r7, #20]
        break;
 8003aae:	e00f      	b.n	8003ad0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab0:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <UART_SetConfig+0x58c>)
 8003ab2:	617b      	str	r3, [r7, #20]
        break;
 8003ab4:	e00c      	b.n	8003ad0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab6:	f7fe fdf9 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 8003aba:	6178      	str	r0, [r7, #20]
        break;
 8003abc:	e008      	b.n	8003ad0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ac2:	617b      	str	r3, [r7, #20]
        break;
 8003ac4:	e004      	b.n	8003ad0 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	76bb      	strb	r3, [r7, #26]
        break;
 8003ace:	bf00      	nop
    }

    if (pclk != 0U)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d020      	beq.n	8003b18 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <UART_SetConfig+0x588>)
 8003adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	085b      	lsrs	r3, r3, #1
 8003aee:	441a      	add	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b0f      	cmp	r3, #15
 8003afe:	d909      	bls.n	8003b14 <UART_SetConfig+0x55c>
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b06:	d205      	bcs.n	8003b14 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60da      	str	r2, [r3, #12]
 8003b12:	e001      	b.n	8003b18 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003b34:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	08004830 	.word	0x08004830
 8003b44:	00f42400 	.word	0x00f42400

08003b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01a      	beq.n	8003c5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c46:	d10a      	bne.n	8003c5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]
  }
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c9c:	f7fd faae 	bl	80011fc <HAL_GetTick>
 8003ca0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d10e      	bne.n	8003cce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f82f 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e025      	b.n	8003d1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d10e      	bne.n	8003cfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f819 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e00f      	b.n	8003d1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b09c      	sub	sp, #112	; 0x70
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d32:	e0a9      	b.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	f000 80a5 	beq.w	8003e88 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3e:	f7fd fa5d 	bl	80011fc <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d302      	bcc.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d140      	bne.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d68:	667b      	str	r3, [r7, #100]	; 0x64
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e6      	bne.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3308      	adds	r3, #8
 8003da4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003da6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003da8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e5      	bne.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e069      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d051      	beq.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df2:	d149      	bne.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dfc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e6      	bne.n	8003dfe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3308      	adds	r3, #8
 8003e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e50:	623a      	str	r2, [r7, #32]
 8003e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	69f9      	ldr	r1, [r7, #28]
 8003e56:	6a3a      	ldr	r2, [r7, #32]
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e5      	bne.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e010      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	f43f af46 	beq.w	8003d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3770      	adds	r7, #112	; 0x70
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_UARTEx_DisableFifoMode+0x16>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e027      	b.n	8003f18 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2224      	movs	r2, #36	; 0x24
 8003ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0201 	bic.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ef6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e02d      	b.n	8003f98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2224      	movs	r2, #36	; 0x24
 8003f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f84f 	bl	800401c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e02d      	b.n	8004014 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2224      	movs	r2, #36	; 0x24
 8003fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f811 	bl	800401c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004028:	2b00      	cmp	r3, #0
 800402a:	d108      	bne.n	800403e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800403c:	e031      	b.n	80040a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800403e:	2308      	movs	r3, #8
 8004040:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004042:	2308      	movs	r3, #8
 8004044:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	0e5b      	lsrs	r3, r3, #25
 800404e:	b2db      	uxtb	r3, r3
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	0f5b      	lsrs	r3, r3, #29
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004066:	7bbb      	ldrb	r3, [r7, #14]
 8004068:	7b3a      	ldrb	r2, [r7, #12]
 800406a:	4911      	ldr	r1, [pc, #68]	; (80040b0 <UARTEx_SetNbDataToProcess+0x94>)
 800406c:	5c8a      	ldrb	r2, [r1, r2]
 800406e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004072:	7b3a      	ldrb	r2, [r7, #12]
 8004074:	490f      	ldr	r1, [pc, #60]	; (80040b4 <UARTEx_SetNbDataToProcess+0x98>)
 8004076:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004078:	fb93 f3f2 	sdiv	r3, r3, r2
 800407c:	b29a      	uxth	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	7b7a      	ldrb	r2, [r7, #13]
 8004088:	4909      	ldr	r1, [pc, #36]	; (80040b0 <UARTEx_SetNbDataToProcess+0x94>)
 800408a:	5c8a      	ldrb	r2, [r1, r2]
 800408c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004090:	7b7a      	ldrb	r2, [r7, #13]
 8004092:	4908      	ldr	r1, [pc, #32]	; (80040b4 <UARTEx_SetNbDataToProcess+0x98>)
 8004094:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004096:	fb93 f3f2 	sdiv	r3, r3, r2
 800409a:	b29a      	uxth	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	08004848 	.word	0x08004848
 80040b4:	08004850 	.word	0x08004850

080040b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040b8:	b084      	sub	sp, #16
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	f107 001c 	add.w	r0, r7, #28
 80040c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fa6c 	bl	80045b4 <USB_CoreReset>
 80040dc:	4603      	mov	r3, r0
 80040de:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80040e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	639a      	str	r2, [r3, #56]	; 0x38
 80040f2:	e005      	b.n	8004100 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004100:	7bfb      	ldrb	r3, [r7, #15]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800410c:	b004      	add	sp, #16
 800410e:	4770      	bx	lr

08004110 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f023 0201 	bic.w	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d115      	bne.n	8004180 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004160:	2001      	movs	r0, #1
 8004162:	f7fd f857 	bl	8001214 <HAL_Delay>
      ms++;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3301      	adds	r3, #1
 800416a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fa13 	bl	8004598 <USB_GetMode>
 8004172:	4603      	mov	r3, r0
 8004174:	2b01      	cmp	r3, #1
 8004176:	d01e      	beq.n	80041b6 <USB_SetCurrentMode+0x84>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b31      	cmp	r3, #49	; 0x31
 800417c:	d9f0      	bls.n	8004160 <USB_SetCurrentMode+0x2e>
 800417e:	e01a      	b.n	80041b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d115      	bne.n	80041b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004192:	2001      	movs	r0, #1
 8004194:	f7fd f83e 	bl	8001214 <HAL_Delay>
      ms++;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3301      	adds	r3, #1
 800419c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9fa 	bl	8004598 <USB_GetMode>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <USB_SetCurrentMode+0x84>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b31      	cmp	r3, #49	; 0x31
 80041ae:	d9f0      	bls.n	8004192 <USB_SetCurrentMode+0x60>
 80041b0:	e001      	b.n	80041b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e005      	b.n	80041c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b32      	cmp	r3, #50	; 0x32
 80041ba:	d101      	bne.n	80041c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041cc:	b084      	sub	sp, #16
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b086      	sub	sp, #24
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	e009      	b.n	8004200 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	3340      	adds	r3, #64	; 0x40
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	3301      	adds	r3, #1
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b0e      	cmp	r3, #14
 8004204:	d9f2      	bls.n	80041ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d11c      	bne.n	8004246 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800421a:	f043 0302 	orr.w	r3, r3, #2
 800421e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e005      	b.n	8004252 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004258:	461a      	mov	r2, r3
 800425a:	2300      	movs	r3, #0
 800425c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004264:	4619      	mov	r1, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426c:	461a      	mov	r2, r3
 800426e:	680b      	ldr	r3, [r1, #0]
 8004270:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004272:	2103      	movs	r1, #3
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f955 	bl	8004524 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800427a:	2110      	movs	r1, #16
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f8f1 	bl	8004464 <USB_FlushTxFifo>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f91b 	bl	80044c8 <USB_FlushRxFifo>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a2:	461a      	mov	r2, r3
 80042a4:	2300      	movs	r3, #0
 80042a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ae:	461a      	mov	r2, r3
 80042b0:	2300      	movs	r3, #0
 80042b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	461a      	mov	r2, r3
 80042bc:	2300      	movs	r3, #0
 80042be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	e043      	b.n	800434e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042dc:	d118      	bne.n	8004310 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f0:	461a      	mov	r2, r3
 80042f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	e013      	b.n	8004322 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004306:	461a      	mov	r2, r3
 8004308:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e008      	b.n	8004322 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431c:	461a      	mov	r2, r3
 800431e:	2300      	movs	r3, #0
 8004320:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432e:	461a      	mov	r2, r3
 8004330:	2300      	movs	r3, #0
 8004332:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004340:	461a      	mov	r2, r3
 8004342:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004346:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	3301      	adds	r3, #1
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	429a      	cmp	r2, r3
 8004354:	d3b7      	bcc.n	80042c6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004356:	2300      	movs	r3, #0
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	e043      	b.n	80043e4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800436e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004372:	d118      	bne.n	80043a6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004386:	461a      	mov	r2, r3
 8004388:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	e013      	b.n	80043b8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	461a      	mov	r2, r3
 800439e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	e008      	b.n	80043b8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	461a      	mov	r2, r3
 80043b4:	2300      	movs	r3, #0
 80043b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c4:	461a      	mov	r2, r3
 80043c6:	2300      	movs	r3, #0
 80043c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d6:	461a      	mov	r2, r3
 80043d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	3301      	adds	r3, #1
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d3b7      	bcc.n	800435c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800440c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	f043 0210 	orr.w	r2, r3, #16
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <USB_DevInit+0x294>)
 8004420:	4313      	orrs	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f043 0208 	orr.w	r2, r3, #8
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443a:	2b01      	cmp	r3, #1
 800443c:	d107      	bne.n	800444e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004446:	f043 0304 	orr.w	r3, r3, #4
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800444e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800445a:	b004      	add	sp, #16
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	803c3800 	.word	0x803c3800

08004464 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3301      	adds	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	4a12      	ldr	r2, [pc, #72]	; (80044c4 <USB_FlushTxFifo+0x60>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d901      	bls.n	8004482 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e01a      	b.n	80044b8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	daf3      	bge.n	8004472 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	019b      	lsls	r3, r3, #6
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3301      	adds	r3, #1
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	4a08      	ldr	r2, [pc, #32]	; (80044c4 <USB_FlushTxFifo+0x60>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e006      	b.n	80044b8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d0f1      	beq.n	800449a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	00030d40 	.word	0x00030d40

080044c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3301      	adds	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	4a11      	ldr	r2, [pc, #68]	; (8004520 <USB_FlushRxFifo+0x58>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d901      	bls.n	80044e4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e017      	b.n	8004514 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	daf3      	bge.n	80044d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2210      	movs	r2, #16
 80044f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3301      	adds	r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	4a08      	ldr	r2, [pc, #32]	; (8004520 <USB_FlushRxFifo+0x58>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e006      	b.n	8004514 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b10      	cmp	r3, #16
 8004510:	d0f1      	beq.n	80044f6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	00030d40 	.word	0x00030d40

08004524 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004570:	f023 0303 	bic.w	r3, r3, #3
 8004574:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004584:	f043 0302 	orr.w	r3, r3, #2
 8004588:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f003 0301 	and.w	r3, r3, #1
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	4a13      	ldr	r2, [pc, #76]	; (8004614 <USB_CoreReset+0x60>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e01a      	b.n	8004606 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	daf3      	bge.n	80045c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f043 0201 	orr.w	r2, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3301      	adds	r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	4a09      	ldr	r2, [pc, #36]	; (8004614 <USB_CoreReset+0x60>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e006      	b.n	8004606 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b01      	cmp	r3, #1
 8004602:	d0f1      	beq.n	80045e8 <USB_CoreReset+0x34>

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	00030d40 	.word	0x00030d40

08004618 <__errno>:
 8004618:	4b01      	ldr	r3, [pc, #4]	; (8004620 <__errno+0x8>)
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	2000000c 	.word	0x2000000c

08004624 <__libc_init_array>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	4d0d      	ldr	r5, [pc, #52]	; (800465c <__libc_init_array+0x38>)
 8004628:	4c0d      	ldr	r4, [pc, #52]	; (8004660 <__libc_init_array+0x3c>)
 800462a:	1b64      	subs	r4, r4, r5
 800462c:	10a4      	asrs	r4, r4, #2
 800462e:	2600      	movs	r6, #0
 8004630:	42a6      	cmp	r6, r4
 8004632:	d109      	bne.n	8004648 <__libc_init_array+0x24>
 8004634:	4d0b      	ldr	r5, [pc, #44]	; (8004664 <__libc_init_array+0x40>)
 8004636:	4c0c      	ldr	r4, [pc, #48]	; (8004668 <__libc_init_array+0x44>)
 8004638:	f000 f8ae 	bl	8004798 <_init>
 800463c:	1b64      	subs	r4, r4, r5
 800463e:	10a4      	asrs	r4, r4, #2
 8004640:	2600      	movs	r6, #0
 8004642:	42a6      	cmp	r6, r4
 8004644:	d105      	bne.n	8004652 <__libc_init_array+0x2e>
 8004646:	bd70      	pop	{r4, r5, r6, pc}
 8004648:	f855 3b04 	ldr.w	r3, [r5], #4
 800464c:	4798      	blx	r3
 800464e:	3601      	adds	r6, #1
 8004650:	e7ee      	b.n	8004630 <__libc_init_array+0xc>
 8004652:	f855 3b04 	ldr.w	r3, [r5], #4
 8004656:	4798      	blx	r3
 8004658:	3601      	adds	r6, #1
 800465a:	e7f2      	b.n	8004642 <__libc_init_array+0x1e>
 800465c:	08004964 	.word	0x08004964
 8004660:	08004964 	.word	0x08004964
 8004664:	08004964 	.word	0x08004964
 8004668:	08004968 	.word	0x08004968

0800466c <memset>:
 800466c:	4402      	add	r2, r0
 800466e:	4603      	mov	r3, r0
 8004670:	4293      	cmp	r3, r2
 8004672:	d100      	bne.n	8004676 <memset+0xa>
 8004674:	4770      	bx	lr
 8004676:	f803 1b01 	strb.w	r1, [r3], #1
 800467a:	e7f9      	b.n	8004670 <memset+0x4>

0800467c <_strtol_l.isra.0>:
 800467c:	2b01      	cmp	r3, #1
 800467e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004682:	d001      	beq.n	8004688 <_strtol_l.isra.0+0xc>
 8004684:	2b24      	cmp	r3, #36	; 0x24
 8004686:	d906      	bls.n	8004696 <_strtol_l.isra.0+0x1a>
 8004688:	f7ff ffc6 	bl	8004618 <__errno>
 800468c:	2316      	movs	r3, #22
 800468e:	6003      	str	r3, [r0, #0]
 8004690:	2000      	movs	r0, #0
 8004692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004696:	4f3a      	ldr	r7, [pc, #232]	; (8004780 <_strtol_l.isra.0+0x104>)
 8004698:	468e      	mov	lr, r1
 800469a:	4676      	mov	r6, lr
 800469c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80046a0:	5de5      	ldrb	r5, [r4, r7]
 80046a2:	f015 0508 	ands.w	r5, r5, #8
 80046a6:	d1f8      	bne.n	800469a <_strtol_l.isra.0+0x1e>
 80046a8:	2c2d      	cmp	r4, #45	; 0x2d
 80046aa:	d134      	bne.n	8004716 <_strtol_l.isra.0+0x9a>
 80046ac:	f89e 4000 	ldrb.w	r4, [lr]
 80046b0:	f04f 0801 	mov.w	r8, #1
 80046b4:	f106 0e02 	add.w	lr, r6, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05c      	beq.n	8004776 <_strtol_l.isra.0+0xfa>
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d10c      	bne.n	80046da <_strtol_l.isra.0+0x5e>
 80046c0:	2c30      	cmp	r4, #48	; 0x30
 80046c2:	d10a      	bne.n	80046da <_strtol_l.isra.0+0x5e>
 80046c4:	f89e 4000 	ldrb.w	r4, [lr]
 80046c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80046cc:	2c58      	cmp	r4, #88	; 0x58
 80046ce:	d14d      	bne.n	800476c <_strtol_l.isra.0+0xf0>
 80046d0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80046d4:	2310      	movs	r3, #16
 80046d6:	f10e 0e02 	add.w	lr, lr, #2
 80046da:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80046de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80046e2:	2600      	movs	r6, #0
 80046e4:	fbbc f9f3 	udiv	r9, ip, r3
 80046e8:	4635      	mov	r5, r6
 80046ea:	fb03 ca19 	mls	sl, r3, r9, ip
 80046ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80046f2:	2f09      	cmp	r7, #9
 80046f4:	d818      	bhi.n	8004728 <_strtol_l.isra.0+0xac>
 80046f6:	463c      	mov	r4, r7
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	dd24      	ble.n	8004746 <_strtol_l.isra.0+0xca>
 80046fc:	2e00      	cmp	r6, #0
 80046fe:	db1f      	blt.n	8004740 <_strtol_l.isra.0+0xc4>
 8004700:	45a9      	cmp	r9, r5
 8004702:	d31d      	bcc.n	8004740 <_strtol_l.isra.0+0xc4>
 8004704:	d101      	bne.n	800470a <_strtol_l.isra.0+0x8e>
 8004706:	45a2      	cmp	sl, r4
 8004708:	db1a      	blt.n	8004740 <_strtol_l.isra.0+0xc4>
 800470a:	fb05 4503 	mla	r5, r5, r3, r4
 800470e:	2601      	movs	r6, #1
 8004710:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004714:	e7eb      	b.n	80046ee <_strtol_l.isra.0+0x72>
 8004716:	2c2b      	cmp	r4, #43	; 0x2b
 8004718:	bf08      	it	eq
 800471a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800471e:	46a8      	mov	r8, r5
 8004720:	bf08      	it	eq
 8004722:	f106 0e02 	addeq.w	lr, r6, #2
 8004726:	e7c7      	b.n	80046b8 <_strtol_l.isra.0+0x3c>
 8004728:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800472c:	2f19      	cmp	r7, #25
 800472e:	d801      	bhi.n	8004734 <_strtol_l.isra.0+0xb8>
 8004730:	3c37      	subs	r4, #55	; 0x37
 8004732:	e7e1      	b.n	80046f8 <_strtol_l.isra.0+0x7c>
 8004734:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004738:	2f19      	cmp	r7, #25
 800473a:	d804      	bhi.n	8004746 <_strtol_l.isra.0+0xca>
 800473c:	3c57      	subs	r4, #87	; 0x57
 800473e:	e7db      	b.n	80046f8 <_strtol_l.isra.0+0x7c>
 8004740:	f04f 36ff 	mov.w	r6, #4294967295
 8004744:	e7e4      	b.n	8004710 <_strtol_l.isra.0+0x94>
 8004746:	2e00      	cmp	r6, #0
 8004748:	da05      	bge.n	8004756 <_strtol_l.isra.0+0xda>
 800474a:	2322      	movs	r3, #34	; 0x22
 800474c:	6003      	str	r3, [r0, #0]
 800474e:	4665      	mov	r5, ip
 8004750:	b942      	cbnz	r2, 8004764 <_strtol_l.isra.0+0xe8>
 8004752:	4628      	mov	r0, r5
 8004754:	e79d      	b.n	8004692 <_strtol_l.isra.0+0x16>
 8004756:	f1b8 0f00 	cmp.w	r8, #0
 800475a:	d000      	beq.n	800475e <_strtol_l.isra.0+0xe2>
 800475c:	426d      	negs	r5, r5
 800475e:	2a00      	cmp	r2, #0
 8004760:	d0f7      	beq.n	8004752 <_strtol_l.isra.0+0xd6>
 8004762:	b10e      	cbz	r6, 8004768 <_strtol_l.isra.0+0xec>
 8004764:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004768:	6011      	str	r1, [r2, #0]
 800476a:	e7f2      	b.n	8004752 <_strtol_l.isra.0+0xd6>
 800476c:	2430      	movs	r4, #48	; 0x30
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1b3      	bne.n	80046da <_strtol_l.isra.0+0x5e>
 8004772:	2308      	movs	r3, #8
 8004774:	e7b1      	b.n	80046da <_strtol_l.isra.0+0x5e>
 8004776:	2c30      	cmp	r4, #48	; 0x30
 8004778:	d0a4      	beq.n	80046c4 <_strtol_l.isra.0+0x48>
 800477a:	230a      	movs	r3, #10
 800477c:	e7ad      	b.n	80046da <_strtol_l.isra.0+0x5e>
 800477e:	bf00      	nop
 8004780:	08004859 	.word	0x08004859

08004784 <strtol>:
 8004784:	4613      	mov	r3, r2
 8004786:	460a      	mov	r2, r1
 8004788:	4601      	mov	r1, r0
 800478a:	4802      	ldr	r0, [pc, #8]	; (8004794 <strtol+0x10>)
 800478c:	6800      	ldr	r0, [r0, #0]
 800478e:	f7ff bf75 	b.w	800467c <_strtol_l.isra.0>
 8004792:	bf00      	nop
 8004794:	2000000c 	.word	0x2000000c

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
