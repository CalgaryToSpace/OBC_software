
NUCLEO_L4R5ZI_UARTTestingRx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004c94  08004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d14  08004d14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d1c  08004d1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  2000000c  08004d30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08004d30  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0f6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244b  00000000  00000000  0002f132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00031580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  000322f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cf6  00000000  00000000  00032f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7b1  00000000  00000000  0005cc4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffc49  00000000  00000000  0006b3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b048  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003794  00000000  00000000  0016b098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004c7c 	.word	0x08004c7c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004c7c 	.word	0x08004c7c

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295
 800021c:	f04f 30ff 	movne.w	r0, #4294967295
 8000220:	f000 b974 	b.w	800050c <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9d08      	ldr	r5, [sp, #32]
 8000242:	4604      	mov	r4, r0
 8000244:	468e      	mov	lr, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d14d      	bne.n	80002e6 <__udivmoddi4+0xaa>
 800024a:	428a      	cmp	r2, r1
 800024c:	4694      	mov	ip, r2
 800024e:	d969      	bls.n	8000324 <__udivmoddi4+0xe8>
 8000250:	fab2 f282 	clz	r2, r2
 8000254:	b152      	cbz	r2, 800026c <__udivmoddi4+0x30>
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	f1c2 0120 	rsb	r1, r2, #32
 800025e:	fa20 f101 	lsr.w	r1, r0, r1
 8000262:	fa0c fc02 	lsl.w	ip, ip, r2
 8000266:	ea41 0e03 	orr.w	lr, r1, r3
 800026a:	4094      	lsls	r4, r2
 800026c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000270:	0c21      	lsrs	r1, r4, #16
 8000272:	fbbe f6f8 	udiv	r6, lr, r8
 8000276:	fa1f f78c 	uxth.w	r7, ip
 800027a:	fb08 e316 	mls	r3, r8, r6, lr
 800027e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000282:	fb06 f107 	mul.w	r1, r6, r7
 8000286:	4299      	cmp	r1, r3
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x64>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 811f 	bcs.w	80004d4 <__udivmoddi4+0x298>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 811c 	bls.w	80004d4 <__udivmoddi4+0x298>
 800029c:	3e02      	subs	r6, #2
 800029e:	4463      	add	r3, ip
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 f707 	mul.w	r7, r0, r7
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	d90a      	bls.n	80002ce <__udivmoddi4+0x92>
 80002b8:	eb1c 0404 	adds.w	r4, ip, r4
 80002bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c0:	f080 810a 	bcs.w	80004d8 <__udivmoddi4+0x29c>
 80002c4:	42a7      	cmp	r7, r4
 80002c6:	f240 8107 	bls.w	80004d8 <__udivmoddi4+0x29c>
 80002ca:	4464      	add	r4, ip
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d2:	1be4      	subs	r4, r4, r7
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa4>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xc2>
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	f000 80ef 	beq.w	80004ce <__udivmoddi4+0x292>
 80002f0:	2600      	movs	r6, #0
 80002f2:	e9c5 0100 	strd	r0, r1, [r5]
 80002f6:	4630      	mov	r0, r6
 80002f8:	4631      	mov	r1, r6
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f683 	clz	r6, r3
 8000302:	2e00      	cmp	r6, #0
 8000304:	d14a      	bne.n	800039c <__udivmoddi4+0x160>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd4>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80f9 	bhi.w	8000502 <__udivmoddi4+0x2c6>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	469e      	mov	lr, r3
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa4>
 800031e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa4>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xec>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 8092 	bne.w	8000456 <__udivmoddi4+0x21a>
 8000332:	eba1 010c 	sub.w	r1, r1, ip
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2601      	movs	r6, #1
 8000340:	0c20      	lsrs	r0, r4, #16
 8000342:	fbb1 f3f7 	udiv	r3, r1, r7
 8000346:	fb07 1113 	mls	r1, r7, r3, r1
 800034a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034e:	fb0e f003 	mul.w	r0, lr, r3
 8000352:	4288      	cmp	r0, r1
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x12c>
 8000356:	eb1c 0101 	adds.w	r1, ip, r1
 800035a:	f103 38ff 	add.w	r8, r3, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x12a>
 8000360:	4288      	cmp	r0, r1
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2c0>
 8000366:	4643      	mov	r3, r8
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000370:	fb07 1110 	mls	r1, r7, r0, r1
 8000374:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x156>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 31ff 	add.w	r1, r0, #4294967295
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x154>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2ca>
 8000390:	4608      	mov	r0, r1
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039a:	e79c      	b.n	80002d6 <__udivmoddi4+0x9a>
 800039c:	f1c6 0720 	rsb	r7, r6, #32
 80003a0:	40b3      	lsls	r3, r6
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa20 f407 	lsr.w	r4, r0, r7
 80003ae:	fa01 f306 	lsl.w	r3, r1, r6
 80003b2:	431c      	orrs	r4, r3
 80003b4:	40f9      	lsrs	r1, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fa00 f306 	lsl.w	r3, r0, r6
 80003be:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c2:	0c20      	lsrs	r0, r4, #16
 80003c4:	fa1f fe8c 	uxth.w	lr, ip
 80003c8:	fb09 1118 	mls	r1, r9, r8, r1
 80003cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	4288      	cmp	r0, r1
 80003d6:	fa02 f206 	lsl.w	r2, r2, r6
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b8>
 80003dc:	eb1c 0101 	adds.w	r1, ip, r1
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2bc>
 80003e8:	4288      	cmp	r0, r1
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2bc>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4461      	add	r1, ip
 80003f4:	1a09      	subs	r1, r1, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000400:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000404:	fb00 fe0e 	mul.w	lr, r0, lr
 8000408:	458e      	cmp	lr, r1
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1e2>
 800040c:	eb1c 0101 	adds.w	r1, ip, r1
 8000410:	f100 34ff 	add.w	r4, r0, #4294967295
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2b4>
 8000416:	458e      	cmp	lr, r1
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2b4>
 800041a:	3802      	subs	r0, #2
 800041c:	4461      	add	r1, ip
 800041e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000422:	fba0 9402 	umull	r9, r4, r0, r2
 8000426:	eba1 010e 	sub.w	r1, r1, lr
 800042a:	42a1      	cmp	r1, r4
 800042c:	46c8      	mov	r8, r9
 800042e:	46a6      	mov	lr, r4
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x2a4>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x2a0>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x212>
 8000436:	ebb3 0208 	subs.w	r2, r3, r8
 800043a:	eb61 010e 	sbc.w	r1, r1, lr
 800043e:	fa01 f707 	lsl.w	r7, r1, r7
 8000442:	fa22 f306 	lsr.w	r3, r2, r6
 8000446:	40f1      	lsrs	r1, r6
 8000448:	431f      	orrs	r7, r3
 800044a:	e9c5 7100 	strd	r7, r1, [r5]
 800044e:	2600      	movs	r6, #0
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	f1c2 0320 	rsb	r3, r2, #32
 800045a:	40d8      	lsrs	r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa21 f303 	lsr.w	r3, r1, r3
 8000464:	4091      	lsls	r1, r2
 8000466:	4301      	orrs	r1, r0
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb3 f0f7 	udiv	r0, r3, r7
 8000474:	fb07 3610 	mls	r6, r7, r0, r3
 8000478:	0c0b      	lsrs	r3, r1, #16
 800047a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047e:	fb00 f60e 	mul.w	r6, r0, lr
 8000482:	429e      	cmp	r6, r3
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x260>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b8>
 8000494:	429e      	cmp	r6, r3
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b8>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1b9b      	subs	r3, r3, r6
 800049e:	b289      	uxth	r1, r1
 80004a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a4:	fb07 3316 	mls	r3, r7, r6, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb06 f30e 	mul.w	r3, r6, lr
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x28a>
 80004b4:	eb1c 0101 	adds.w	r1, ip, r1
 80004b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2b0>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2b0>
 80004c2:	3e02      	subs	r6, #2
 80004c4:	4461      	add	r1, ip
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0x104>
 80004ce:	462e      	mov	r6, r5
 80004d0:	4628      	mov	r0, r5
 80004d2:	e705      	b.n	80002e0 <__udivmoddi4+0xa4>
 80004d4:	4606      	mov	r6, r0
 80004d6:	e6e3      	b.n	80002a0 <__udivmoddi4+0x64>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6f8      	b.n	80002ce <__udivmoddi4+0x92>
 80004dc:	454b      	cmp	r3, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f8>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e8:	3801      	subs	r0, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f8>
 80004ec:	4646      	mov	r6, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x28a>
 80004f0:	4620      	mov	r0, r4
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1e2>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x260>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b8>
 80004fc:	3b02      	subs	r3, #2
 80004fe:	4461      	add	r1, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x12c>
 8000502:	4630      	mov	r0, r6
 8000504:	e709      	b.n	800031a <__udivmoddi4+0xde>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x156>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b598      	push	{r3, r4, r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fc09 	bl	8000d2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f832 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f970 	bl	8000800 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000520:	f000 f8ac 	bl	800067c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000524:	f000 f8f6 	bl	8000714 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000528:	f000 f940 	bl	80007ac <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */



	//Receive lpuart1 IT
	HAL_UART_Receive_IT(&hlpuart1, UART1_rxBuffer, 100);
 800052c:	2264      	movs	r2, #100	; 0x64
 800052e:	490f      	ldr	r1, [pc, #60]	; (800056c <main+0x5c>)
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <main+0x60>)
 8000532:	f002 fecb 	bl	80032cc <HAL_UART_Receive_IT>

	strcpy((char*)uart_buf, "Testing UART\r\n");
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <main+0x64>)
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <main+0x68>)
 800053a:	4614      	mov	r4, r2
 800053c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800053e:	c407      	stmia	r4!, {r0, r1, r2}
 8000540:	8023      	strh	r3, [r4, #0]
 8000542:	3402      	adds	r4, #2
 8000544:	0c1b      	lsrs	r3, r3, #16
 8000546:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)uart_buf, strlen((char*)uart_buf), 100);
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <main+0x64>)
 800054a:	f7ff fe57 	bl	80001fc <strlen>
 800054e:	4603      	mov	r3, r0
 8000550:	b29a      	uxth	r2, r3
 8000552:	2364      	movs	r3, #100	; 0x64
 8000554:	4907      	ldr	r1, [pc, #28]	; (8000574 <main+0x64>)
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <main+0x60>)
 8000558:	f002 fe20 	bl	800319c <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//flash blue led to indicate its running
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	4807      	ldr	r0, [pc, #28]	; (800057c <main+0x6c>)
 8000560:	f000 ff96 	bl	8001490 <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000564:	20fa      	movs	r0, #250	; 0xfa
 8000566:	f000 fc55 	bl	8000e14 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800056a:	e7f7      	b.n	800055c <main+0x4c>
 800056c:	20000548 	.word	0x20000548
 8000570:	20000028 	.word	0x20000028
 8000574:	200005ac 	.word	0x200005ac
 8000578:	08004c94 	.word	0x08004c94
 800057c:	48000400 	.word	0x48000400

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b0bc      	sub	sp, #240	; 0xf0
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800058a:	2244      	movs	r2, #68	; 0x44
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 fb6c 	bl	8004c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2294      	movs	r2, #148	; 0x94
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 fb5e 	bl	8004c6c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005b0:	2000      	movs	r0, #0
 80005b2:	f001 f8ef 	bl	8001794 <HAL_PWREx_ControlVoltageScaling>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80005bc:	f000 fa0a 	bl	80009d4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80005c0:	2322      	movs	r3, #34	; 0x22
 80005c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ce:	2301      	movs	r3, #1
 80005d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	2340      	movs	r3, #64	; 0x40
 80005d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005ec:	231e      	movs	r3, #30
 80005ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f987 	bl	800191c <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000614:	f000 f9de 	bl	80009d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2303      	movs	r3, #3
 8000620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800062e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000638:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800063c:	2105      	movs	r1, #5
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fd92 	bl	8002168 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800064a:	f000 f9c3 	bl	80009d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 800064e:	f242 0324 	movw	r3, #8228	; 0x2024
 8000652:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000654:	2300      	movs	r3, #0
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000658:	2300      	movs	r3, #0
 800065a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800065c:	2300      	movs	r3, #0
 800065e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f002 f832 	bl	80026cc <HAL_RCCEx_PeriphCLKConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800066e:	f000 f9b1 	bl	80009d4 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	37f0      	adds	r7, #240	; 0xf0
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 8000682:	4a23      	ldr	r2, [pc, #140]	; (8000710 <MX_LPUART1_UART_Init+0x94>)
 8000684:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 8000688:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800068c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006c4:	4811      	ldr	r0, [pc, #68]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006c6:	f002 fd19 	bl	80030fc <HAL_UART_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80006d0:	f000 f980 	bl	80009d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d4:	2100      	movs	r1, #0
 80006d6:	480d      	ldr	r0, [pc, #52]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006d8:	f003 ff33 	bl	8004542 <HAL_UARTEx_SetTxFifoThreshold>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006e2:	f000 f977 	bl	80009d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4808      	ldr	r0, [pc, #32]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006ea:	f003 ff68 	bl	80045be <HAL_UARTEx_SetRxFifoThreshold>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006f4:	f000 f96e 	bl	80009d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 80006fa:	f003 fee9 	bl	80044d0 <HAL_UARTEx_DisableFifoMode>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000704:	f000 f966 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000028 	.word	0x20000028
 8000710:	40008000 	.word	0x40008000

08000714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 800071a:	4a23      	ldr	r2, [pc, #140]	; (80007a8 <MX_USART3_UART_Init+0x94>)
 800071c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075c:	4811      	ldr	r0, [pc, #68]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 800075e:	f002 fccd 	bl	80030fc <HAL_UART_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000768:	f000 f934 	bl	80009d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076c:	2100      	movs	r1, #0
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000770:	f003 fee7 	bl	8004542 <HAL_UARTEx_SetTxFifoThreshold>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800077a:	f000 f92b 	bl	80009d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000782:	f003 ff1c 	bl	80045be <HAL_UARTEx_SetRxFifoThreshold>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800078c:	f000 f922 	bl	80009d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_USART3_UART_Init+0x90>)
 8000792:	f003 fe9d 	bl	80044d0 <HAL_UARTEx_DisableFifoMode>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800079c:	f000 f91a 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000b4 	.word	0x200000b4
 80007a8:	40004800 	.word	0x40004800

080007ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007ba:	2206      	movs	r2, #6
 80007bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007d8:	2201      	movs	r2, #1
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x50>)
 80007ea:	f000 fe6b 	bl	80014c4 <HAL_PCD_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80007f4:	f000 f8ee 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000140 	.word	0x20000140

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b58      	ldr	r3, [pc, #352]	; (8000978 <MX_GPIO_Init+0x178>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a57      	ldr	r2, [pc, #348]	; (8000978 <MX_GPIO_Init+0x178>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b55      	ldr	r3, [pc, #340]	; (8000978 <MX_GPIO_Init+0x178>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	4b52      	ldr	r3, [pc, #328]	; (8000978 <MX_GPIO_Init+0x178>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a51      	ldr	r2, [pc, #324]	; (8000978 <MX_GPIO_Init+0x178>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b4f      	ldr	r3, [pc, #316]	; (8000978 <MX_GPIO_Init+0x178>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b4c      	ldr	r3, [pc, #304]	; (8000978 <MX_GPIO_Init+0x178>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a4b      	ldr	r2, [pc, #300]	; (8000978 <MX_GPIO_Init+0x178>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b49      	ldr	r3, [pc, #292]	; (8000978 <MX_GPIO_Init+0x178>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	4b46      	ldr	r3, [pc, #280]	; (8000978 <MX_GPIO_Init+0x178>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a45      	ldr	r2, [pc, #276]	; (8000978 <MX_GPIO_Init+0x178>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b43      	ldr	r3, [pc, #268]	; (8000978 <MX_GPIO_Init+0x178>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000876:	4b40      	ldr	r3, [pc, #256]	; (8000978 <MX_GPIO_Init+0x178>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a3f      	ldr	r2, [pc, #252]	; (8000978 <MX_GPIO_Init+0x178>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <MX_GPIO_Init+0x178>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800088e:	f001 f835 	bl	80018fc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b39      	ldr	r3, [pc, #228]	; (8000978 <MX_GPIO_Init+0x178>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a38      	ldr	r2, [pc, #224]	; (8000978 <MX_GPIO_Init+0x178>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b36      	ldr	r3, [pc, #216]	; (8000978 <MX_GPIO_Init+0x178>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008b0:	4832      	ldr	r0, [pc, #200]	; (800097c <MX_GPIO_Init+0x17c>)
 80008b2:	f000 fdd5 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	4831      	ldr	r0, [pc, #196]	; (8000980 <MX_GPIO_Init+0x180>)
 80008bc:	f000 fdd0 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c6:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <MX_GPIO_Init+0x184>)
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	482c      	ldr	r0, [pc, #176]	; (8000988 <MX_GPIO_Init+0x188>)
 80008d6:	f000 fc31 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008da:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4822      	ldr	r0, [pc, #136]	; (800097c <MX_GPIO_Init+0x17c>)
 80008f4:	f000 fc22 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008f8:	2320      	movs	r3, #32
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	481c      	ldr	r0, [pc, #112]	; (8000980 <MX_GPIO_Init+0x180>)
 8000910:	f000 fc14 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000914:	2340      	movs	r3, #64	; 0x40
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4816      	ldr	r0, [pc, #88]	; (8000980 <MX_GPIO_Init+0x180>)
 8000928:	f000 fc08 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800093e:	2308      	movs	r3, #8
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	480f      	ldr	r0, [pc, #60]	; (8000988 <MX_GPIO_Init+0x188>)
 800094a:	f000 fbf7 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800094e:	2304      	movs	r3, #4
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800095e:	2308      	movs	r3, #8
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4808      	ldr	r0, [pc, #32]	; (800098c <MX_GPIO_Init+0x18c>)
 800096a:	f000 fbe7 	bl	800113c <HAL_GPIO_Init>

}
 800096e:	bf00      	nop
 8000970:	3730      	adds	r7, #48	; 0x30
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	48000400 	.word	0x48000400
 8000980:	48001800 	.word	0x48001800
 8000984:	10110000 	.word	0x10110000
 8000988:	48000800 	.word	0x48000800
 800098c:	48000c00 	.word	0x48000c00

08000990 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000998:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <HAL_UART_RxCpltCallback+0x3c>)
 800099e:	f000 fd77 	bl	8001490 <HAL_GPIO_TogglePin>

    HAL_UART_Transmit(hlpuart1, UART1_rxBuffer, strlen((char*)UART1_rxBuffer), HAL_MAX_DELAY);
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <HAL_UART_RxCpltCallback+0x40>)
 80009a4:	f7ff fc2a 	bl	80001fc <strlen>
 80009a8:	4603      	mov	r3, r0
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	4907      	ldr	r1, [pc, #28]	; (80009d0 <HAL_UART_RxCpltCallback+0x40>)
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f002 fbf2 	bl	800319c <HAL_UART_Transmit>

	HAL_UART_Receive_IT(hlpuart1, UART1_rxBuffer, 100);
 80009b8:	2264      	movs	r2, #100	; 0x64
 80009ba:	4905      	ldr	r1, [pc, #20]	; (80009d0 <HAL_UART_RxCpltCallback+0x40>)
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f002 fc85 	bl	80032cc <HAL_UART_Receive_IT>

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	48000400 	.word	0x48000400
 80009d0:	20000548 	.word	0x20000548

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_MspInit+0x44>)
 80009e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_MspInit+0x44>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6613      	str	r3, [r2, #96]	; 0x60
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_MspInit+0x44>)
 80009f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_MspInit+0x44>)
 8000a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x44>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6593      	str	r3, [r2, #88]	; 0x58
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x44>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a34      	ldr	r2, [pc, #208]	; (8000b18 <HAL_UART_MspInit+0xf0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d133      	bne.n	8000ab2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a4e:	4a33      	ldr	r2, [pc, #204]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a56:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a2d      	ldr	r2, [pc, #180]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8000a7a:	f000 ff3f 	bl	80018fc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000a7e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a90:	2308      	movs	r3, #8
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4821      	ldr	r0, [pc, #132]	; (8000b20 <HAL_UART_MspInit+0xf8>)
 8000a9c:	f000 fb4e 	bl	800113c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2046      	movs	r0, #70	; 0x46
 8000aa6:	f000 fab4 	bl	8001012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000aaa:	2046      	movs	r0, #70	; 0x46
 8000aac:	f000 facd 	bl	800104a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ab0:	e02d      	b.n	8000b0e <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART3)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <HAL_UART_MspInit+0xfc>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d128      	bne.n	8000b0e <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac0:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000ac2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_UART_MspInit+0xf4>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000afe:	2307      	movs	r3, #7
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <HAL_UART_MspInit+0x100>)
 8000b0a:	f000 fb17 	bl	800113c <HAL_GPIO_Init>
}
 8000b0e:	bf00      	nop
 8000b10:	3730      	adds	r7, #48	; 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40008000 	.word	0x40008000
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48001800 	.word	0x48001800
 8000b24:	40004800 	.word	0x40004800
 8000b28:	48000c00 	.word	0x48000c00

08000b2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b4c:	d154      	bne.n	8000bf8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <HAL_PCD_MspInit+0xd4>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a2b      	ldr	r2, [pc, #172]	; (8000c00 <HAL_PCD_MspInit+0xd4>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <HAL_PCD_MspInit+0xd4>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b66:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b78:	230a      	movs	r3, #10
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f000 fad9 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f000 facb 	bl	800113c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <HAL_PCD_MspInit+0xd4>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <HAL_PCD_MspInit+0xd4>)
 8000bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <HAL_PCD_MspInit+0xd4>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_PCD_MspInit+0xd4>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d114      	bne.n	8000bf4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_PCD_MspInit+0xd4>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <HAL_PCD_MspInit+0xd4>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_PCD_MspInit+0xd4>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000be2:	f000 fe7b 	bl	80018dc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_PCD_MspInit+0xd4>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <HAL_PCD_MspInit+0xd4>)
 8000bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bf2:	e001      	b.n	8000bf8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000bf4:	f000 fe72 	bl	80018dc <HAL_PWREx_EnableVddUSB>
}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	; 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f8c0 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <LPUART1_IRQHandler+0x10>)
 8000c5e:	f002 fc0d 	bl	800347c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000028 	.word	0x20000028

08000c6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <SystemInit+0x64>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <SystemInit+0x64>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <SystemInit+0x68>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a13      	ldr	r2, [pc, #76]	; (8000cd4 <SystemInit+0x68>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <SystemInit+0x68>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <SystemInit+0x68>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <SystemInit+0x68>)
 8000c98:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c9c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ca0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <SystemInit+0x68>)
 8000ca4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ca8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <SystemInit+0x68>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <SystemInit+0x68>)
 8000cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <SystemInit+0x68>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SystemInit+0x64>)
 8000cbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cdc:	f7ff ffc6 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ce0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ce2:	e003      	b.n	8000cec <LoopCopyDataInit>

08000ce4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ce6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ce8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cea:	3104      	adds	r1, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cf0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cf2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cf4:	d3f6      	bcc.n	8000ce4 <CopyDataInit>
	ldr	r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cf8:	e002      	b.n	8000d00 <LoopFillZerobss>

08000cfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cfa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cfc:	f842 3b04 	str.w	r3, [r2], #4

08000d00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <LoopForever+0x16>)
	cmp	r2, r3
 8000d02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d04:	d3f9      	bcc.n	8000cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d06:	f003 ff8d 	bl	8004c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0a:	f7ff fc01 	bl	8000510 <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d10:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000d14:	08004d24 	.word	0x08004d24
	ldr	r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d1c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000d20:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000d24:	20000614 	.word	0x20000614

08000d28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_IRQHandler>

08000d2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f961 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f80e 	bl	8000d5c <HAL_InitTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	e001      	b.n	8000d50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d4c:	f7ff fe48 	bl	80009e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d50:	79fb      	ldrb	r3, [r7, #7]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_InitTick+0x6c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d023      	beq.n	8000db8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_InitTick+0x70>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_InitTick+0x6c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f96d 	bl	8001066 <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10f      	bne.n	8000db2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d809      	bhi.n	8000dac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f000 f937 	bl	8001012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_InitTick+0x74>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e007      	b.n	8000dbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e004      	b.n	8000dbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	e001      	b.n	8000dbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000610 	.word	0x20000610

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000610 	.word	0x20000610

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff29 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff3e 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff8e 	bl	8000f50 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff31 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffa2 	bl	8000fb8 <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b084      	sub	sp, #16
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d005      	beq.n	80010a2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2204      	movs	r2, #4
 800109a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	e047      	b.n	8001132 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 020e 	bic.w	r2, r2, #14
 80010b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0201 	bic.w	r2, r2, #1
 80010c0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f003 021c 	and.w	r2, r3, #28
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	2101      	movs	r1, #1
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010ee:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00c      	beq.n	8001112 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001102:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001106:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001110:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	4798      	blx	r3
    }
  }
  return status;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114a:	e166      	b.n	800141a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 8158 	beq.w	8001414 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d00b      	beq.n	8001184 <HAL_GPIO_Init+0x48>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d007      	beq.n	8001184 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001178:	2b11      	cmp	r3, #17
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b12      	cmp	r3, #18
 8001182:	d130      	bne.n	80011e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ba:	2201      	movs	r2, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	f003 0201 	and.w	r2, r3, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0xea>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b12      	cmp	r3, #18
 8001224:	d123      	bne.n	800126e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	691a      	ldr	r2, [r3, #16]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	6939      	ldr	r1, [r7, #16]
 800126a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	2203      	movs	r2, #3
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0203 	and.w	r2, r3, #3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80b2 	beq.w	8001414 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b0:	4b61      	ldr	r3, [pc, #388]	; (8001438 <HAL_GPIO_Init+0x2fc>)
 80012b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b4:	4a60      	ldr	r2, [pc, #384]	; (8001438 <HAL_GPIO_Init+0x2fc>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6613      	str	r3, [r2, #96]	; 0x60
 80012bc:	4b5e      	ldr	r3, [pc, #376]	; (8001438 <HAL_GPIO_Init+0x2fc>)
 80012be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012c8:	4a5c      	ldr	r2, [pc, #368]	; (800143c <HAL_GPIO_Init+0x300>)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220f      	movs	r2, #15
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012f2:	d02b      	beq.n	800134c <HAL_GPIO_Init+0x210>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a52      	ldr	r2, [pc, #328]	; (8001440 <HAL_GPIO_Init+0x304>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d025      	beq.n	8001348 <HAL_GPIO_Init+0x20c>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a51      	ldr	r2, [pc, #324]	; (8001444 <HAL_GPIO_Init+0x308>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d01f      	beq.n	8001344 <HAL_GPIO_Init+0x208>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a50      	ldr	r2, [pc, #320]	; (8001448 <HAL_GPIO_Init+0x30c>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d019      	beq.n	8001340 <HAL_GPIO_Init+0x204>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a4f      	ldr	r2, [pc, #316]	; (800144c <HAL_GPIO_Init+0x310>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d013      	beq.n	800133c <HAL_GPIO_Init+0x200>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a4e      	ldr	r2, [pc, #312]	; (8001450 <HAL_GPIO_Init+0x314>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d00d      	beq.n	8001338 <HAL_GPIO_Init+0x1fc>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a4d      	ldr	r2, [pc, #308]	; (8001454 <HAL_GPIO_Init+0x318>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d007      	beq.n	8001334 <HAL_GPIO_Init+0x1f8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a4c      	ldr	r2, [pc, #304]	; (8001458 <HAL_GPIO_Init+0x31c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d101      	bne.n	8001330 <HAL_GPIO_Init+0x1f4>
 800132c:	2307      	movs	r3, #7
 800132e:	e00e      	b.n	800134e <HAL_GPIO_Init+0x212>
 8001330:	2308      	movs	r3, #8
 8001332:	e00c      	b.n	800134e <HAL_GPIO_Init+0x212>
 8001334:	2306      	movs	r3, #6
 8001336:	e00a      	b.n	800134e <HAL_GPIO_Init+0x212>
 8001338:	2305      	movs	r3, #5
 800133a:	e008      	b.n	800134e <HAL_GPIO_Init+0x212>
 800133c:	2304      	movs	r3, #4
 800133e:	e006      	b.n	800134e <HAL_GPIO_Init+0x212>
 8001340:	2303      	movs	r3, #3
 8001342:	e004      	b.n	800134e <HAL_GPIO_Init+0x212>
 8001344:	2302      	movs	r3, #2
 8001346:	e002      	b.n	800134e <HAL_GPIO_Init+0x212>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <HAL_GPIO_Init+0x212>
 800134c:	2300      	movs	r3, #0
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	f002 0203 	and.w	r2, r2, #3
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	4093      	lsls	r3, r2
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800135e:	4937      	ldr	r1, [pc, #220]	; (800143c <HAL_GPIO_Init+0x300>)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800136c:	4b3b      	ldr	r3, [pc, #236]	; (800145c <HAL_GPIO_Init+0x320>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001390:	4a32      	ldr	r2, [pc, #200]	; (800145c <HAL_GPIO_Init+0x320>)
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001396:	4b31      	ldr	r3, [pc, #196]	; (800145c <HAL_GPIO_Init+0x320>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <HAL_GPIO_Init+0x320>)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c0:	4b26      	ldr	r3, [pc, #152]	; (800145c <HAL_GPIO_Init+0x320>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013e4:	4a1d      	ldr	r2, [pc, #116]	; (800145c <HAL_GPIO_Init+0x320>)
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_GPIO_Init+0x320>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800140e:	4a13      	ldr	r2, [pc, #76]	; (800145c <HAL_GPIO_Init+0x320>)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3301      	adds	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	f47f ae91 	bne.w	800114c <HAL_GPIO_Init+0x10>
  }
}
 800142a:	bf00      	nop
 800142c:	bf00      	nop
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000
 8001440:	48000400 	.word	0x48000400
 8001444:	48000800 	.word	0x48000800
 8001448:	48000c00 	.word	0x48000c00
 800144c:	48001000 	.word	0x48001000
 8001450:	48001400 	.word	0x48001400
 8001454:	48001800 	.word	0x48001800
 8001458:	48001c00 	.word	0x48001c00
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800147c:	e002      	b.n	8001484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4013      	ands	r3, r2
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43d9      	mvns	r1, r3
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	400b      	ands	r3, r1
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	619a      	str	r2, [r3, #24]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c6:	b08f      	sub	sp, #60	; 0x3c
 80014c8:	af0a      	add	r7, sp, #40	; 0x28
 80014ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e116      	b.n	8001704 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d106      	bne.n	80014f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fb1b 	bl	8000b2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2203      	movs	r2, #3
 80014fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f003 f947 	bl	80047a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	687e      	ldr	r6, [r7, #4]
 8001522:	466d      	mov	r5, sp
 8001524:	f106 0410 	add.w	r4, r6, #16
 8001528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001530:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001534:	e885 0003 	stmia.w	r5, {r0, r1}
 8001538:	1d33      	adds	r3, r6, #4
 800153a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800153c:	6838      	ldr	r0, [r7, #0]
 800153e:	f003 f8e1 	bl	8004704 <USB_CoreInit>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0d7      	b.n	8001704 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f003 f935 	bl	80047ca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	e04a      	b.n	80015fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	333d      	adds	r3, #61	; 0x3d
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	333c      	adds	r3, #60	; 0x3c
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	b298      	uxth	r0, r3
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	1a9b      	subs	r3, r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	3342      	adds	r3, #66	; 0x42
 80015a2:	4602      	mov	r2, r0
 80015a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	1a9b      	subs	r3, r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	333f      	adds	r3, #63	; 0x3f
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	1a9b      	subs	r3, r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	3344      	adds	r3, #68	; 0x44
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	1a9b      	subs	r3, r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	3348      	adds	r3, #72	; 0x48
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	1a9b      	subs	r3, r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	3350      	adds	r3, #80	; 0x50
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	3301      	adds	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3af      	bcc.n	8001566 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e044      	b.n	8001696 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	1a9b      	subs	r3, r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	3301      	adds	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3b5      	bcc.n	800160c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	687e      	ldr	r6, [r7, #4]
 80016a8:	466d      	mov	r5, sp
 80016aa:	f106 0410 	add.w	r4, r6, #16
 80016ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80016be:	1d33      	adds	r3, r6, #4
 80016c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016c2:	6838      	ldr	r0, [r7, #0]
 80016c4:	f003 f8ac 	bl	8004820 <USB_DevInit>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2202      	movs	r2, #2
 80016d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e014      	b.n	8001704 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d102      	bne.n	80016f8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f80a 	bl	800170c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fa3c 	bl	8004b7a <USB_DevDisconnect>

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800170c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173e:	f043 0303 	orr.w	r3, r3, #3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_PWREx_GetVoltageRange+0x3c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001764:	d102      	bne.n	800176c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176a:	e00b      	b.n	8001784 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_PWREx_GetVoltageRange+0x3c>)
 800176e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800177a:	d102      	bne.n	8001782 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800177c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001780:	e000      	b.n	8001784 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001782:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40007000 	.word	0x40007000

08001794 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d141      	bne.n	8001826 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017a2:	4b4b      	ldr	r3, [pc, #300]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ae:	d131      	bne.n	8001814 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017b0:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017b6:	4a46      	ldr	r2, [pc, #280]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c0:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017c8:	4a41      	ldr	r2, [pc, #260]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80017d0:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2232      	movs	r2, #50	; 0x32
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	4a3f      	ldr	r2, [pc, #252]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	0c9b      	lsrs	r3, r3, #18
 80017e2:	3301      	adds	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017e6:	e002      	b.n	80017ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ee:	4b38      	ldr	r3, [pc, #224]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fa:	d102      	bne.n	8001802 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f2      	bne.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001802:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800180e:	d158      	bne.n	80018c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e057      	b.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001814:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800181a:	4a2d      	ldr	r2, [pc, #180]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001820:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001824:	e04d      	b.n	80018c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800182c:	d141      	bne.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800182e:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800183a:	d131      	bne.n	80018a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001842:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800184c:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001854:	4a1e      	ldr	r2, [pc, #120]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2232      	movs	r2, #50	; 0x32
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	0c9b      	lsrs	r3, r3, #18
 800186e:	3301      	adds	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001872:	e002      	b.n	800187a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3b01      	subs	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001886:	d102      	bne.n	800188e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f2      	bne.n	8001874 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800189a:	d112      	bne.n	80018c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e011      	b.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018b0:	e007      	b.n	80018c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40007000 	.word	0x40007000
 80018d4:	20000000 	.word	0x20000000
 80018d8:	431bde83 	.word	0x431bde83

080018dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80018e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ea:	6053      	str	r3, [r2, #4]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40007000 	.word	0x40007000

080018fc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190a:	6053      	str	r3, [r2, #4]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40007000 	.word	0x40007000

0800191c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	f000 bc16 	b.w	800215c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001930:	4b96      	ldr	r3, [pc, #600]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193a:	4b94      	ldr	r3, [pc, #592]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80e4 	beq.w	8001b1a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d007      	beq.n	8001968 <HAL_RCC_OscConfig+0x4c>
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	f040 808b 	bne.w	8001a76 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b01      	cmp	r3, #1
 8001964:	f040 8087 	bne.w	8001a76 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001968:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_OscConfig+0x64>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e3ed      	b.n	800215c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1a      	ldr	r2, [r3, #32]
 8001984:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <HAL_RCC_OscConfig+0x7e>
 8001990:	4b7e      	ldr	r3, [pc, #504]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001998:	e005      	b.n	80019a6 <HAL_RCC_OscConfig+0x8a>
 800199a:	4b7c      	ldr	r3, [pc, #496]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 800199c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d223      	bcs.n	80019f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 fdca 	bl	8002548 <RCC_SetFlashLatencyFromMSIRange>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e3ce      	b.n	800215c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019be:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a72      	ldr	r2, [pc, #456]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019c4:	f043 0308 	orr.w	r3, r3, #8
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	4b70      	ldr	r3, [pc, #448]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	496d      	ldr	r1, [pc, #436]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019dc:	4b6b      	ldr	r3, [pc, #428]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	4968      	ldr	r1, [pc, #416]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
 80019f0:	e025      	b.n	8001a3e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f2:	4b66      	ldr	r3, [pc, #408]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a65      	ldr	r2, [pc, #404]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 80019f8:	f043 0308 	orr.w	r3, r3, #8
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4960      	ldr	r1, [pc, #384]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a10:	4b5e      	ldr	r3, [pc, #376]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	495b      	ldr	r1, [pc, #364]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 fd8a 	bl	8002548 <RCC_SetFlashLatencyFromMSIRange>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e38e      	b.n	800215c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a3e:	f000 fcbf 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4b51      	ldr	r3, [pc, #324]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	4950      	ldr	r1, [pc, #320]	; (8001b90 <HAL_RCC_OscConfig+0x274>)
 8001a50:	5ccb      	ldrb	r3, [r1, r3]
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	4a4e      	ldr	r2, [pc, #312]	; (8001b94 <HAL_RCC_OscConfig+0x278>)
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a5e:	4b4e      	ldr	r3, [pc, #312]	; (8001b98 <HAL_RCC_OscConfig+0x27c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f97a 	bl	8000d5c <HAL_InitTick>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d052      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	e372      	b.n	800215c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d032      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a7e:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a42      	ldr	r2, [pc, #264]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f9b7 	bl	8000dfc <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a92:	f7ff f9b3 	bl	8000dfc <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e35b      	b.n	800215c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa4:	4b39      	ldr	r3, [pc, #228]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab0:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a35      	ldr	r2, [pc, #212]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001ab6:	f043 0308 	orr.w	r3, r3, #8
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4930      	ldr	r1, [pc, #192]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ace:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	492b      	ldr	r1, [pc, #172]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
 8001ae2:	e01a      	b.n	8001b1a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a28      	ldr	r2, [pc, #160]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f984 	bl	8000dfc <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001af8:	f7ff f980 	bl	8000dfc <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e328      	b.n	800215c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1dc>
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d073      	beq.n	8001c0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_OscConfig+0x21c>
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d10e      	bne.n	8001b50 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d10b      	bne.n	8001b50 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d063      	beq.n	8001c0c <HAL_RCC_OscConfig+0x2f0>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d15f      	bne.n	8001c0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e305      	b.n	800215c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b58:	d106      	bne.n	8001b68 <HAL_RCC_OscConfig+0x24c>
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e025      	b.n	8001bb4 <HAL_RCC_OscConfig+0x298>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b70:	d114      	bne.n	8001b9c <HAL_RCC_OscConfig+0x280>
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a02      	ldr	r2, [pc, #8]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e013      	b.n	8001bb4 <HAL_RCC_OscConfig+0x298>
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08004cb4 	.word	0x08004cb4
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	4ba0      	ldr	r3, [pc, #640]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a9f      	ldr	r2, [pc, #636]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b9d      	ldr	r3, [pc, #628]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a9c      	ldr	r2, [pc, #624]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f91e 	bl	8000dfc <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff f91a 	bl	8000dfc <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e2c2      	b.n	800215c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd6:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x2a8>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff f90a 	bl	8000dfc <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff f906 	bl	8000dfc <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e2ae      	b.n	800215c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bfe:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x2d0>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d060      	beq.n	8001cdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_OscConfig+0x310>
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d119      	bne.n	8001c5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d116      	bne.n	8001c5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c2c:	4b7c      	ldr	r3, [pc, #496]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_OscConfig+0x328>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e28b      	b.n	800215c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	4973      	ldr	r1, [pc, #460]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c58:	e040      	b.n	8001cdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d023      	beq.n	8001caa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c62:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6e      	ldr	r2, [pc, #440]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6e:	f7ff f8c5 	bl	8000dfc <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c76:	f7ff f8c1 	bl	8000dfc <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e269      	b.n	800215c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c88:	4b65      	ldr	r3, [pc, #404]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4b62      	ldr	r3, [pc, #392]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	495f      	ldr	r1, [pc, #380]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
 8001ca8:	e018      	b.n	8001cdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001caa:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a5c      	ldr	r2, [pc, #368]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb6:	f7ff f8a1 	bl	8000dfc <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbe:	f7ff f89d 	bl	8000dfc <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e245      	b.n	800215c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd0:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d03c      	beq.n	8001d62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf0:	4b4b      	ldr	r3, [pc, #300]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf6:	4a4a      	ldr	r2, [pc, #296]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7ff f87c 	bl	8000dfc <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d08:	f7ff f878 	bl	8000dfc <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e220      	b.n	800215c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1a:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ef      	beq.n	8001d08 <HAL_RCC_OscConfig+0x3ec>
 8001d28:	e01b      	b.n	8001d62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d30:	4a3b      	ldr	r2, [pc, #236]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f85f 	bl	8000dfc <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d42:	f7ff f85b 	bl	8000dfc <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e203      	b.n	800215c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d54:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1ef      	bne.n	8001d42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80a6 	beq.w	8001ebc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10d      	bne.n	8001d9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d80:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9c:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_RCC_OscConfig+0x508>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d118      	bne.n	8001dda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001da8:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_RCC_OscConfig+0x508>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_RCC_OscConfig+0x508>)
 8001dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db4:	f7ff f822 	bl	8000dfc <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbc:	f7ff f81e 	bl	8000dfc <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e1c6      	b.n	800215c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_RCC_OscConfig+0x508>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d108      	bne.n	8001df4 <HAL_RCC_OscConfig+0x4d8>
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df2:	e029      	b.n	8001e48 <HAL_RCC_OscConfig+0x52c>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d115      	bne.n	8001e28 <HAL_RCC_OscConfig+0x50c>
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e02:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	4a03      	ldr	r2, [pc, #12]	; (8001e20 <HAL_RCC_OscConfig+0x504>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e1c:	e014      	b.n	8001e48 <HAL_RCC_OscConfig+0x52c>
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40007000 	.word	0x40007000
 8001e28:	4b9d      	ldr	r3, [pc, #628]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2e:	4a9c      	ldr	r2, [pc, #624]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e38:	4b99      	ldr	r3, [pc, #612]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	4a98      	ldr	r2, [pc, #608]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001e40:	f023 0304 	bic.w	r3, r3, #4
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d016      	beq.n	8001e7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7fe ffd4 	bl	8000dfc <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7fe ffd0 	bl	8000dfc <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e176      	b.n	800215c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6e:	4b8c      	ldr	r3, [pc, #560]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ed      	beq.n	8001e58 <HAL_RCC_OscConfig+0x53c>
 8001e7c:	e015      	b.n	8001eaa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7fe ffbd 	bl	8000dfc <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7fe ffb9 	bl	8000dfc <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e15f      	b.n	800215c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e9c:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1ed      	bne.n	8001e86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb0:	4b7b      	ldr	r3, [pc, #492]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	4a7a      	ldr	r2, [pc, #488]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d03c      	beq.n	8001f42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01c      	beq.n	8001f0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ed0:	4b73      	ldr	r3, [pc, #460]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ed6:	4a72      	ldr	r2, [pc, #456]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7fe ff8c 	bl	8000dfc <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ee8:	f7fe ff88 	bl	8000dfc <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e130      	b.n	800215c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001efa:	4b69      	ldr	r3, [pc, #420]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0ef      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x5cc>
 8001f08:	e01b      	b.n	8001f42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f0a:	4b65      	ldr	r3, [pc, #404]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f10:	4a63      	ldr	r2, [pc, #396]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1a:	f7fe ff6f 	bl	8000dfc <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f22:	f7fe ff6b 	bl	8000dfc <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e113      	b.n	800215c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f34:	4b5a      	ldr	r3, [pc, #360]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1ef      	bne.n	8001f22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8107 	beq.w	800215a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	f040 80cf 	bne.w	80020f4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f56:	4b52      	ldr	r3, [pc, #328]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f003 0203 	and.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d12c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	3b01      	subs	r3, #1
 8001f76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d123      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d113      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d109      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	085b      	lsrs	r3, r3, #1
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d071      	beq.n	80020a8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2b0c      	cmp	r3, #12
 8001fc8:	d068      	beq.n	800209c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fd6:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0ba      	b.n	800215c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a2d      	ldr	r2, [pc, #180]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8001fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ff2:	f7fe ff03 	bl	8000dfc <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffa:	f7fe feff 	bl	8000dfc <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e0a7      	b.n	800215c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200c:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f0      	bne.n	8001ffa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <HAL_RCC_OscConfig+0x788>)
 800201e:	4013      	ands	r3, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002028:	3a01      	subs	r2, #1
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	4311      	orrs	r1, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002032:	0212      	lsls	r2, r2, #8
 8002034:	4311      	orrs	r1, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800203a:	0852      	lsrs	r2, r2, #1
 800203c:	3a01      	subs	r2, #1
 800203e:	0552      	lsls	r2, r2, #21
 8002040:	4311      	orrs	r1, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002046:	0852      	lsrs	r2, r2, #1
 8002048:	3a01      	subs	r2, #1
 800204a:	0652      	lsls	r2, r2, #25
 800204c:	4311      	orrs	r1, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002052:	06d2      	lsls	r2, r2, #27
 8002054:	430a      	orrs	r2, r1
 8002056:	4912      	ldr	r1, [pc, #72]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8002058:	4313      	orrs	r3, r2
 800205a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002066:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 800206e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002072:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002074:	f7fe fec2 	bl	8000dfc <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207c:	f7fe febe 	bl	8000dfc <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e066      	b.n	800215c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <HAL_RCC_OscConfig+0x784>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800209a:	e05e      	b.n	800215a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e05d      	b.n	800215c <HAL_RCC_OscConfig+0x840>
 80020a0:	40021000 	.word	0x40021000
 80020a4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a8:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d152      	bne.n	800215a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020b4:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a2a      	ldr	r2, [pc, #168]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 80020ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020c0:	4b28      	ldr	r3, [pc, #160]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a27      	ldr	r2, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 80020c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020cc:	f7fe fe96 	bl	8000dfc <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7fe fe92 	bl	8000dfc <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e03a      	b.n	800215c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x7b8>
 80020f2:	e032      	b.n	800215a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d02d      	beq.n	8002156 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fa:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a19      	ldr	r2, [pc, #100]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 8002100:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002104:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d105      	bne.n	800211e <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 8002118:	f023 0303 	bic.w	r3, r3, #3
 800211c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 8002124:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7fe fe65 	bl	8000dfc <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002136:	f7fe fe61 	bl	8000dfc <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e009      	b.n	800215c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCC_OscConfig+0x848>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x81a>
 8002154:	e001      	b.n	800215a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000

08002168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e10f      	b.n	80023a0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b89      	ldr	r3, [pc, #548]	; (80023a8 <HAL_RCC_ClockConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b86      	ldr	r3, [pc, #536]	; (80023a8 <HAL_RCC_ClockConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 020f 	bic.w	r2, r3, #15
 8002196:	4984      	ldr	r1, [pc, #528]	; (80023a8 <HAL_RCC_ClockConfig+0x240>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b82      	ldr	r3, [pc, #520]	; (80023a8 <HAL_RCC_ClockConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0f7      	b.n	80023a0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 8089 	beq.w	80022d0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d133      	bne.n	800222e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	4b79      	ldr	r3, [pc, #484]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0e4      	b.n	80023a0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80021d6:	f000 fa11 	bl	80025fc <RCC_GetSysClockFreqFromPLLSource>
 80021da:	4603      	mov	r3, r0
 80021dc:	4a74      	ldr	r2, [pc, #464]	; (80023b0 <HAL_RCC_ClockConfig+0x248>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d955      	bls.n	800228e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80021e2:	4b72      	ldr	r3, [pc, #456]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10a      	bne.n	8002204 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021ee:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021f6:	4a6d      	ldr	r2, [pc, #436]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 80021f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e044      	b.n	800228e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d03e      	beq.n	800228e <HAL_RCC_ClockConfig+0x126>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d13a      	bne.n	800228e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002218:	4b64      	ldr	r3, [pc, #400]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002220:	4a62      	ldr	r2, [pc, #392]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 8002222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002226:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	e02f      	b.n	800228e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d115      	bne.n	800226e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0ac      	b.n	80023a0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800224e:	4b57      	ldr	r3, [pc, #348]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0a0      	b.n	80023a0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225e:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e098      	b.n	80023a0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800226e:	f000 f8a7 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8002272:	4603      	mov	r3, r0
 8002274:	4a4e      	ldr	r2, [pc, #312]	; (80023b0 <HAL_RCC_ClockConfig+0x248>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d909      	bls.n	800228e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800227a:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002282:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 8002284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002288:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f023 0203 	bic.w	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4944      	ldr	r1, [pc, #272]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 800229c:	4313      	orrs	r3, r2
 800229e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a0:	f7fe fdac 	bl	8000dfc <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	e00a      	b.n	80022be <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a8:	f7fe fda8 	bl	8000dfc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e070      	b.n	80023a0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 020c 	and.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1eb      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d009      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022dc:	4b33      	ldr	r3, [pc, #204]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4930      	ldr	r1, [pc, #192]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]
 80022ee:	e008      	b.n	8002302 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b80      	cmp	r3, #128	; 0x80
 80022f4:	d105      	bne.n	8002302 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022f6:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	4a2c      	ldr	r2, [pc, #176]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 80022fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002300:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_RCC_ClockConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d210      	bcs.n	8002332 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <HAL_RCC_ClockConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 020f 	bic.w	r2, r3, #15
 8002318:	4923      	ldr	r1, [pc, #140]	; (80023a8 <HAL_RCC_ClockConfig+0x240>)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_RCC_ClockConfig+0x240>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d001      	beq.n	8002332 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e036      	b.n	80023a0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233e:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4918      	ldr	r1, [pc, #96]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 800234c:	4313      	orrs	r3, r2
 800234e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4910      	ldr	r1, [pc, #64]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002370:	f000 f826 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_RCC_ClockConfig+0x244>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	490c      	ldr	r1, [pc, #48]	; (80023b4 <HAL_RCC_ClockConfig+0x24c>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_RCC_ClockConfig+0x250>)
 800238e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_RCC_ClockConfig+0x254>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fce1 	bl	8000d5c <HAL_InitTick>
 800239a:	4603      	mov	r3, r0
 800239c:	73fb      	strb	r3, [r7, #15]

  return status;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40022000 	.word	0x40022000
 80023ac:	40021000 	.word	0x40021000
 80023b0:	04c4b400 	.word	0x04c4b400
 80023b4:	08004cb4 	.word	0x08004cb4
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000004 	.word	0x20000004

080023c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ce:	4b3e      	ldr	r3, [pc, #248]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d8:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x34>
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d121      	bne.n	8002432 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d11e      	bne.n	8002432 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023f4:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d107      	bne.n	8002410 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002400:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	e005      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800241c:	4a2b      	ldr	r2, [pc, #172]	; (80024cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10d      	bne.n	8002448 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d102      	bne.n	800243e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002438:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	e004      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b08      	cmp	r3, #8
 8002442:	d101      	bne.n	8002448 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002444:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002446:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	2b0c      	cmp	r3, #12
 800244c:	d134      	bne.n	80024b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d003      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0xa6>
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d003      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0xac>
 8002464:	e005      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002468:	617b      	str	r3, [r7, #20]
      break;
 800246a:	e005      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800246e:	617b      	str	r3, [r7, #20]
      break;
 8002470:	e002      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	617b      	str	r3, [r7, #20]
      break;
 8002476:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002478:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3301      	adds	r3, #1
 8002484:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	fb03 f202 	mul.w	r2, r3, r2
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	fbb2 f3f3 	udiv	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	0e5b      	lsrs	r3, r3, #25
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	3301      	adds	r3, #1
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024b8:	69bb      	ldr	r3, [r7, #24]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	08004ccc 	.word	0x08004ccc
 80024d0:	00f42400 	.word	0x00f42400
 80024d4:	007a1200 	.word	0x007a1200

080024d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_RCC_GetHCLKFreq+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000000 	.word	0x20000000

080024f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024f4:	f7ff fff0 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4904      	ldr	r1, [pc, #16]	; (8002518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	08004cc4 	.word	0x08004cc4

0800251c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002520:	f7ff ffda 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	0adb      	lsrs	r3, r3, #11
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4904      	ldr	r1, [pc, #16]	; (8002544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	08004cc4 	.word	0x08004cc4

08002548 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002554:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002560:	f7ff f8f8 	bl	8001754 <HAL_PWREx_GetVoltageRange>
 8002564:	6178      	str	r0, [r7, #20]
 8002566:	e014      	b.n	8002592 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002568:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800256e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002572:	6593      	str	r3, [r2, #88]	; 0x58
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002580:	f7ff f8e8 	bl	8001754 <HAL_PWREx_GetVoltageRange>
 8002584:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800258c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002598:	d10b      	bne.n	80025b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d913      	bls.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2ba0      	cmp	r3, #160	; 0xa0
 80025a4:	d902      	bls.n	80025ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025a6:	2302      	movs	r3, #2
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e00d      	b.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025ac:	2301      	movs	r3, #1
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	e00a      	b.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b7f      	cmp	r3, #127	; 0x7f
 80025b6:	d902      	bls.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80025b8:	2302      	movs	r3, #2
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e004      	b.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b70      	cmp	r3, #112	; 0x70
 80025c2:	d101      	bne.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025c4:	2301      	movs	r3, #1
 80025c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 020f 	bic.w	r2, r3, #15
 80025d0:	4909      	ldr	r1, [pc, #36]	; (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40022000 	.word	0x40022000

080025fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002606:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d118      	bne.n	8002644 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002612:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d107      	bne.n	800262e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800261e:	4b27      	ldr	r3, [pc, #156]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	e005      	b.n	800263a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800263a:	4a21      	ldr	r2, [pc, #132]	; (80026c0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d003      	beq.n	800265c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b03      	cmp	r3, #3
 8002658:	d003      	beq.n	8002662 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800265a:	e005      	b.n	8002668 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800265e:	613b      	str	r3, [r7, #16]
    break;
 8002660:	e005      	b.n	800266e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002662:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002664:	613b      	str	r3, [r7, #16]
    break;
 8002666:	e002      	b.n	800266e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	613b      	str	r3, [r7, #16]
    break;
 800266c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	3301      	adds	r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	fb03 f202 	mul.w	r2, r3, r2
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0e5b      	lsrs	r3, r3, #25
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	3301      	adds	r3, #1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80026ae:	683b      	ldr	r3, [r7, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40021000 	.word	0x40021000
 80026c0:	08004ccc 	.word	0x08004ccc
 80026c4:	00f42400 	.word	0x00f42400
 80026c8:	007a1200 	.word	0x007a1200

080026cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026d4:	2300      	movs	r3, #0
 80026d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026d8:	2300      	movs	r3, #0
 80026da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d040      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d02a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026f0:	2b80      	cmp	r3, #128	; 0x80
 80026f2:	d825      	bhi.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026f4:	2b60      	cmp	r3, #96	; 0x60
 80026f6:	d026      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026f8:	2b60      	cmp	r3, #96	; 0x60
 80026fa:	d821      	bhi.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026fc:	2b40      	cmp	r3, #64	; 0x40
 80026fe:	d006      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002700:	2b40      	cmp	r3, #64	; 0x40
 8002702:	d81d      	bhi.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002708:	2b20      	cmp	r3, #32
 800270a:	d010      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800270c:	e018      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800270e:	4b89      	ldr	r3, [pc, #548]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4a88      	ldr	r2, [pc, #544]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800271a:	e015      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3304      	adds	r3, #4
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fb02 	bl	8002d2c <RCCEx_PLLSAI1_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800272c:	e00c      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3320      	adds	r3, #32
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fbed 	bl	8002f14 <RCCEx_PLLSAI2_Config>
 800273a:	4603      	mov	r3, r0
 800273c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800273e:	e003      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	74fb      	strb	r3, [r7, #19]
      break;
 8002744:	e000      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10b      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800274e:	4b79      	ldr	r3, [pc, #484]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002750:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002754:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800275c:	4975      	ldr	r1, [pc, #468]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002764:	e001      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d047      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277e:	d030      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002784:	d82a      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800278a:	d02a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800278c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002790:	d824      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002796:	d008      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800279c:	d81e      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80027a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a6:	d010      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80027a8:	e018      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027aa:	4b62      	ldr	r3, [pc, #392]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	4a61      	ldr	r2, [pc, #388]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027b6:	e015      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3304      	adds	r3, #4
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fab4 	bl	8002d2c <RCCEx_PLLSAI1_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027c8:	e00c      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3320      	adds	r3, #32
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fb9f 	bl	8002f14 <RCCEx_PLLSAI2_Config>
 80027d6:	4603      	mov	r3, r0
 80027d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027da:	e003      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	74fb      	strb	r3, [r7, #19]
      break;
 80027e0:	e000      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80027e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10b      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027ea:	4b52      	ldr	r3, [pc, #328]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	494e      	ldr	r1, [pc, #312]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002800:	e001      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 809f 	beq.w	8002952 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002818:	4b46      	ldr	r3, [pc, #280]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002828:	2300      	movs	r3, #0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00d      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	4a40      	ldr	r2, [pc, #256]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
 800283a:	4b3e      	ldr	r3, [pc, #248]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002846:	2301      	movs	r3, #1
 8002848:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800284a:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a3a      	ldr	r2, [pc, #232]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002856:	f7fe fad1 	bl	8000dfc <HAL_GetTick>
 800285a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800285c:	e009      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285e:	f7fe facd 	bl	8000dfc <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d902      	bls.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	74fb      	strb	r3, [r7, #19]
        break;
 8002870:	e005      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002872:	4b31      	ldr	r3, [pc, #196]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0ef      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d15b      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002884:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01f      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d019      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028a2:	4b24      	ldr	r3, [pc, #144]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028ae:	4b21      	ldr	r3, [pc, #132]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b4:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028ce:	4a19      	ldr	r2, [pc, #100]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d016      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fa8c 	bl	8000dfc <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e6:	e00b      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7fe fa88 	bl	8000dfc <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d902      	bls.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	74fb      	strb	r3, [r7, #19]
            break;
 80028fe:	e006      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0ec      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10c      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	4903      	ldr	r1, [pc, #12]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800292c:	e008      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800292e:	7cfb      	ldrb	r3, [r7, #19]
 8002930:	74bb      	strb	r3, [r7, #18]
 8002932:	e005      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002940:	7c7b      	ldrb	r3, [r7, #17]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d105      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002946:	4ba0      	ldr	r3, [pc, #640]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294a:	4a9f      	ldr	r2, [pc, #636]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800294c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002950:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800295e:	4b9a      	ldr	r3, [pc, #616]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f023 0203 	bic.w	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	4996      	ldr	r1, [pc, #600]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002980:	4b91      	ldr	r3, [pc, #580]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 020c 	bic.w	r2, r3, #12
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	498e      	ldr	r1, [pc, #568]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029a2:	4b89      	ldr	r3, [pc, #548]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	4985      	ldr	r1, [pc, #532]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029c4:	4b80      	ldr	r3, [pc, #512]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d2:	497d      	ldr	r1, [pc, #500]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029e6:	4b78      	ldr	r3, [pc, #480]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f4:	4974      	ldr	r1, [pc, #464]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a08:	4b6f      	ldr	r3, [pc, #444]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	496c      	ldr	r1, [pc, #432]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a2a:	4b67      	ldr	r3, [pc, #412]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a38:	4963      	ldr	r1, [pc, #396]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a4c:	4b5e      	ldr	r3, [pc, #376]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a5a:	495b      	ldr	r1, [pc, #364]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a6e:	4b56      	ldr	r3, [pc, #344]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7c:	4952      	ldr	r1, [pc, #328]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a90:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	494a      	ldr	r1, [pc, #296]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ab2:	4b45      	ldr	r3, [pc, #276]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	4941      	ldr	r1, [pc, #260]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ad4:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae2:	4939      	ldr	r1, [pc, #228]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d028      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002af6:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b04:	4930      	ldr	r1, [pc, #192]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b14:	d106      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b16:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	4a2b      	ldr	r2, [pc, #172]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b20:	60d3      	str	r3, [r2, #12]
 8002b22:	e011      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2101      	movs	r1, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 f8f9 	bl	8002d2c <RCCEx_PLLSAI1_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d04d      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b5c:	d108      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b64:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002b6e:	e012      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002b70:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b76:	4a14      	ldr	r2, [pc, #80]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b7c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b8e:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b9e:	d106      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4a08      	ldr	r2, [pc, #32]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002baa:	60d3      	str	r3, [r2, #12]
 8002bac:	e020      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb6:	d109      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4a02      	ldr	r2, [pc, #8]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	60d3      	str	r3, [r2, #12]
 8002bc4:	e014      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2101      	movs	r1, #1
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f8a5 	bl	8002d2c <RCCEx_PLLSAI1_Config>
 8002be2:	4603      	mov	r3, r0
 8002be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d028      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bfc:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c0a:	4947      	ldr	r1, [pc, #284]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c1c:	4b42      	ldr	r3, [pc, #264]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a41      	ldr	r2, [pc, #260]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c26:	60d3      	str	r3, [r2, #12]
 8002c28:	e011      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c32:	d10c      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f876 	bl	8002d2c <RCCEx_PLLSAI1_Config>
 8002c40:	4603      	mov	r3, r0
 8002c42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002c4a:	7cfb      	ldrb	r3, [r7, #19]
 8002c4c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01e      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c5a:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6a:	492f      	ldr	r1, [pc, #188]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3304      	adds	r3, #4
 8002c82:	2102      	movs	r1, #2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 f851 	bl	8002d2c <RCCEx_PLLSAI1_Config>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c8e:	7cfb      	ldrb	r3, [r7, #19]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00b      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ca4:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002caa:	f023 0204 	bic.w	r2, r3, #4
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb4:	491c      	ldr	r1, [pc, #112]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00b      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002cc8:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cce:	f023 0218 	bic.w	r2, r3, #24
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd8:	4913      	ldr	r1, [pc, #76]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d017      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfc:	490a      	ldr	r1, [pc, #40]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d0e:	d105      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000

08002d2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d3a:	4b72      	ldr	r3, [pc, #456]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00e      	beq.n	8002d64 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d46:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0203 	and.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d103      	bne.n	8002d5e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
       ||
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d142      	bne.n	8002de4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
 8002d62:	e03f      	b.n	8002de4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d018      	beq.n	8002d9e <RCCEx_PLLSAI1_Config+0x72>
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d825      	bhi.n	8002dbc <RCCEx_PLLSAI1_Config+0x90>
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d002      	beq.n	8002d7a <RCCEx_PLLSAI1_Config+0x4e>
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d009      	beq.n	8002d8c <RCCEx_PLLSAI1_Config+0x60>
 8002d78:	e020      	b.n	8002dbc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d7a:	4b62      	ldr	r3, [pc, #392]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d11d      	bne.n	8002dc2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8a:	e01a      	b.n	8002dc2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d8c:	4b5d      	ldr	r3, [pc, #372]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d116      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9c:	e013      	b.n	8002dc6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d9e:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002daa:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dba:	e006      	b.n	8002dca <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc0:	e004      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e002      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e000      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002dca:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d108      	bne.n	8002de4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002dd2:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f023 0203 	bic.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4949      	ldr	r1, [pc, #292]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 8086 	bne.w	8002ef8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002dec:	4b45      	ldr	r3, [pc, #276]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a44      	ldr	r2, [pc, #272]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002df2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df8:	f7fe f800 	bl	8000dfc <HAL_GetTick>
 8002dfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dfe:	e009      	b.n	8002e14 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e00:	f7fd fffc 	bl	8000dfc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d902      	bls.n	8002e14 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	73fb      	strb	r3, [r7, #15]
        break;
 8002e12:	e005      	b.n	8002e20 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e14:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ef      	bne.n	8002e00 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d168      	bne.n	8002ef8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d113      	bne.n	8002e54 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e2c:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	4b35      	ldr	r3, [pc, #212]	; (8002f08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6892      	ldr	r2, [r2, #8]
 8002e38:	0211      	lsls	r1, r2, #8
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68d2      	ldr	r2, [r2, #12]
 8002e3e:	06d2      	lsls	r2, r2, #27
 8002e40:	4311      	orrs	r1, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6852      	ldr	r2, [r2, #4]
 8002e46:	3a01      	subs	r2, #1
 8002e48:	0112      	lsls	r2, r2, #4
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	492d      	ldr	r1, [pc, #180]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	610b      	str	r3, [r1, #16]
 8002e52:	e02d      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d115      	bne.n	8002e86 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6892      	ldr	r2, [r2, #8]
 8002e66:	0211      	lsls	r1, r2, #8
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6912      	ldr	r2, [r2, #16]
 8002e6c:	0852      	lsrs	r2, r2, #1
 8002e6e:	3a01      	subs	r2, #1
 8002e70:	0552      	lsls	r2, r2, #21
 8002e72:	4311      	orrs	r1, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6852      	ldr	r2, [r2, #4]
 8002e78:	3a01      	subs	r2, #1
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	4921      	ldr	r1, [pc, #132]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	610b      	str	r3, [r1, #16]
 8002e84:	e014      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e86:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6892      	ldr	r2, [r2, #8]
 8002e92:	0211      	lsls	r1, r2, #8
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6952      	ldr	r2, [r2, #20]
 8002e98:	0852      	lsrs	r2, r2, #1
 8002e9a:	3a01      	subs	r2, #1
 8002e9c:	0652      	lsls	r2, r2, #25
 8002e9e:	4311      	orrs	r1, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6852      	ldr	r2, [r2, #4]
 8002ea4:	3a01      	subs	r2, #1
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	4916      	ldr	r1, [pc, #88]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a13      	ldr	r2, [pc, #76]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002eb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebc:	f7fd ff9e 	bl	8000dfc <HAL_GetTick>
 8002ec0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ec2:	e009      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ec4:	f7fd ff9a 	bl	8000dfc <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d902      	bls.n	8002ed8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ed6:	e005      	b.n	8002ee4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ef      	beq.n	8002ec4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	4904      	ldr	r1, [pc, #16]	; (8002f04 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	07ff800f 	.word	0x07ff800f
 8002f0c:	ff9f800f 	.word	0xff9f800f
 8002f10:	f9ff800f 	.word	0xf9ff800f

08002f14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f22:	4b72      	ldr	r3, [pc, #456]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00e      	beq.n	8002f4c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f2e:	4b6f      	ldr	r3, [pc, #444]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0203 	and.w	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d103      	bne.n	8002f46 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
       ||
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d142      	bne.n	8002fcc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e03f      	b.n	8002fcc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d018      	beq.n	8002f86 <RCCEx_PLLSAI2_Config+0x72>
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d825      	bhi.n	8002fa4 <RCCEx_PLLSAI2_Config+0x90>
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d002      	beq.n	8002f62 <RCCEx_PLLSAI2_Config+0x4e>
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d009      	beq.n	8002f74 <RCCEx_PLLSAI2_Config+0x60>
 8002f60:	e020      	b.n	8002fa4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f62:	4b62      	ldr	r3, [pc, #392]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11d      	bne.n	8002faa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f72:	e01a      	b.n	8002faa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f74:	4b5d      	ldr	r3, [pc, #372]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d116      	bne.n	8002fae <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f84:	e013      	b.n	8002fae <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f86:	4b59      	ldr	r3, [pc, #356]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f92:	4b56      	ldr	r3, [pc, #344]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fa2:	e006      	b.n	8002fb2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa8:	e004      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002fb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d108      	bne.n	8002fcc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002fba:	4b4c      	ldr	r3, [pc, #304]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f023 0203 	bic.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4949      	ldr	r1, [pc, #292]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 8086 	bne.w	80030e0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fd4:	4b45      	ldr	r3, [pc, #276]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a44      	ldr	r2, [pc, #272]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe0:	f7fd ff0c 	bl	8000dfc <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fe6:	e009      	b.n	8002ffc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fe8:	f7fd ff08 	bl	8000dfc <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d902      	bls.n	8002ffc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	73fb      	strb	r3, [r7, #15]
        break;
 8002ffa:	e005      	b.n	8003008 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ffc:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ef      	bne.n	8002fe8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d168      	bne.n	80030e0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d113      	bne.n	800303c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003014:	4b35      	ldr	r3, [pc, #212]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	4b35      	ldr	r3, [pc, #212]	; (80030f0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800301a:	4013      	ands	r3, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6892      	ldr	r2, [r2, #8]
 8003020:	0211      	lsls	r1, r2, #8
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	06d2      	lsls	r2, r2, #27
 8003028:	4311      	orrs	r1, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6852      	ldr	r2, [r2, #4]
 800302e:	3a01      	subs	r2, #1
 8003030:	0112      	lsls	r2, r2, #4
 8003032:	430a      	orrs	r2, r1
 8003034:	492d      	ldr	r1, [pc, #180]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	614b      	str	r3, [r1, #20]
 800303a:	e02d      	b.n	8003098 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d115      	bne.n	800306e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003042:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003048:	4013      	ands	r3, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6892      	ldr	r2, [r2, #8]
 800304e:	0211      	lsls	r1, r2, #8
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6912      	ldr	r2, [r2, #16]
 8003054:	0852      	lsrs	r2, r2, #1
 8003056:	3a01      	subs	r2, #1
 8003058:	0552      	lsls	r2, r2, #21
 800305a:	4311      	orrs	r1, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6852      	ldr	r2, [r2, #4]
 8003060:	3a01      	subs	r2, #1
 8003062:	0112      	lsls	r2, r2, #4
 8003064:	430a      	orrs	r2, r1
 8003066:	4921      	ldr	r1, [pc, #132]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003068:	4313      	orrs	r3, r2
 800306a:	614b      	str	r3, [r1, #20]
 800306c:	e014      	b.n	8003098 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800306e:	4b1f      	ldr	r3, [pc, #124]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6892      	ldr	r2, [r2, #8]
 800307a:	0211      	lsls	r1, r2, #8
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6952      	ldr	r2, [r2, #20]
 8003080:	0852      	lsrs	r2, r2, #1
 8003082:	3a01      	subs	r2, #1
 8003084:	0652      	lsls	r2, r2, #25
 8003086:	4311      	orrs	r1, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6852      	ldr	r2, [r2, #4]
 800308c:	3a01      	subs	r2, #1
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	430a      	orrs	r2, r1
 8003092:	4916      	ldr	r1, [pc, #88]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 8003094:	4313      	orrs	r3, r2
 8003096:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003098:	4b14      	ldr	r3, [pc, #80]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a13      	ldr	r2, [pc, #76]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 800309e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fd feaa 	bl	8000dfc <HAL_GetTick>
 80030a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030aa:	e009      	b.n	80030c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030ac:	f7fd fea6 	bl	8000dfc <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d902      	bls.n	80030c0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	73fb      	strb	r3, [r7, #15]
          break;
 80030be:	e005      	b.n	80030cc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030c0:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ef      	beq.n	80030ac <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	4904      	ldr	r1, [pc, #16]	; (80030ec <RCCEx_PLLSAI2_Config+0x1d8>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	07ff800f 	.word	0x07ff800f
 80030f4:	ff9f800f 	.word	0xff9f800f
 80030f8:	f9ff800f 	.word	0xf9ff800f

080030fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e042      	b.n	8003194 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fd fc81 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2224      	movs	r2, #36	; 0x24
 800312a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fb2e 	bl	80037a0 <UART_SetConfig>
 8003144:	4603      	mov	r3, r0
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e022      	b.n	8003194 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fe24 	bl	8003da4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800316a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800317a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 feab 	bl	8003ee8 <UART_CheckIdleState>
 8003192:	4603      	mov	r3, r0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	f040 8084 	bne.w	80032c0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_UART_Transmit+0x28>
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e07c      	b.n	80032c2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_UART_Transmit+0x3a>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e075      	b.n	80032c2 <HAL_UART_Transmit+0x126>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2221      	movs	r2, #33	; 0x21
 80031ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80031ee:	f7fd fe05 	bl	8000dfc <HAL_GetTick>
 80031f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	88fa      	ldrh	r2, [r7, #6]
 8003200:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320c:	d108      	bne.n	8003220 <HAL_UART_Transmit+0x84>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	e003      	b.n	8003228 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003224:	2300      	movs	r3, #0
 8003226:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003230:	e02d      	b.n	800328e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2200      	movs	r2, #0
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fe9b 	bl	8003f78 <UART_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e03a      	b.n	80032c2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	881a      	ldrh	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800325e:	b292      	uxth	r2, r2
 8003260:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	3302      	adds	r3, #2
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e008      	b.n	800327c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	b292      	uxth	r2, r2
 8003274:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3301      	adds	r3, #1
 800327a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1cb      	bne.n	8003232 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2140      	movs	r1, #64	; 0x40
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fe67 	bl	8003f78 <UART_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e006      	b.n	80032c2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	f040 80bc 	bne.w	800345e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_UART_Receive_IT+0x26>
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0b4      	b.n	8003460 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_UART_Receive_IT+0x38>
 8003300:	2302      	movs	r3, #2
 8003302:	e0ad      	b.n	8003460 <HAL_UART_Receive_IT+0x194>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	88fa      	ldrh	r2, [r7, #6]
 8003316:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	88fa      	ldrh	r2, [r7, #6]
 800331e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003330:	d10e      	bne.n	8003350 <HAL_UART_Receive_IT+0x84>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <HAL_UART_Receive_IT+0x7a>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003340:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003344:	e02d      	b.n	80033a2 <HAL_UART_Receive_IT+0xd6>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	22ff      	movs	r2, #255	; 0xff
 800334a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800334e:	e028      	b.n	80033a2 <HAL_UART_Receive_IT+0xd6>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10d      	bne.n	8003374 <HAL_UART_Receive_IT+0xa8>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <HAL_UART_Receive_IT+0x9e>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	22ff      	movs	r2, #255	; 0xff
 8003364:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003368:	e01b      	b.n	80033a2 <HAL_UART_Receive_IT+0xd6>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	227f      	movs	r2, #127	; 0x7f
 800336e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003372:	e016      	b.n	80033a2 <HAL_UART_Receive_IT+0xd6>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800337c:	d10d      	bne.n	800339a <HAL_UART_Receive_IT+0xce>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d104      	bne.n	8003390 <HAL_UART_Receive_IT+0xc4>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	227f      	movs	r2, #127	; 0x7f
 800338a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800338e:	e008      	b.n	80033a2 <HAL_UART_Receive_IT+0xd6>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	223f      	movs	r2, #63	; 0x3f
 8003394:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003398:	e003      	b.n	80033a2 <HAL_UART_Receive_IT+0xd6>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2222      	movs	r2, #34	; 0x22
 80033ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	609a      	str	r2, [r3, #8]

#if defined(USART_CR1_FIFOEN)
    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ca:	d12a      	bne.n	8003422 <HAL_UART_Receive_IT+0x156>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80033d2:	88fa      	ldrh	r2, [r7, #6]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d324      	bcc.n	8003422 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e0:	d107      	bne.n	80033f2 <HAL_UART_Receive_IT+0x126>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a1f      	ldr	r2, [pc, #124]	; (800346c <HAL_UART_Receive_IT+0x1a0>)
 80033ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80033f0:	e002      	b.n	80033f8 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <HAL_UART_Receive_IT+0x1a4>)
 80033f6:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800340e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	e01b      	b.n	800345a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342a:	d107      	bne.n	800343c <HAL_UART_Receive_IT+0x170>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d103      	bne.n	800343c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <HAL_UART_Receive_IT+0x1a8>)
 8003438:	66da      	str	r2, [r3, #108]	; 0x6c
 800343a:	e002      	b.n	8003442 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <HAL_UART_Receive_IT+0x1ac>)
 8003440:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003458:	601a      	str	r2, [r3, #0]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	e000      	b.n	8003460 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800345e:	2302      	movs	r3, #2
  }
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	08004389 	.word	0x08004389
 8003470:	0800427d 	.word	0x0800427d
 8003474:	080041cd 	.word	0x080041cd
 8003478:	0800411f 	.word	0x0800411f

0800347c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	f640 030f 	movw	r3, #2063	; 0x80f
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d118      	bne.n	80034de <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d013      	beq.n	80034de <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8144 	beq.w	800375c <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
      }
      return;
 80034dc:	e13e      	b.n	800375c <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80e8 	beq.w	80036b6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4b9e      	ldr	r3, [pc, #632]	; (8003764 <HAL_UART_IRQHandler+0x2e8>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d105      	bne.n	80034fc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4b9d      	ldr	r3, [pc, #628]	; (8003768 <HAL_UART_IRQHandler+0x2ec>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80dd 	beq.w	80036b6 <HAL_UART_IRQHandler+0x23a>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d010      	beq.n	8003528 <HAL_UART_IRQHandler+0xac>
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2201      	movs	r2, #1
 8003516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d010      	beq.n	8003554 <HAL_UART_IRQHandler+0xd8>
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00b      	beq.n	8003554 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2202      	movs	r2, #2
 8003542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	f043 0204 	orr.w	r2, r3, #4
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d010      	beq.n	8003580 <HAL_UART_IRQHandler+0x104>
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2204      	movs	r2, #4
 800356e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f043 0202 	orr.w	r2, r3, #2
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d015      	beq.n	80035b6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4b73      	ldr	r3, [pc, #460]	; (8003764 <HAL_UART_IRQHandler+0x2e8>)
 8003598:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2208      	movs	r2, #8
 80035a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f043 0208 	orr.w	r2, r3, #8
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d011      	beq.n	80035e4 <HAL_UART_IRQHandler+0x168>
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00c      	beq.n	80035e4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f043 0220 	orr.w	r2, r3, #32
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 80b8 	beq.w	8003760 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d011      	beq.n	800361e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d104      	bne.n	800360e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003624:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b40      	cmp	r3, #64	; 0x40
 8003632:	d004      	beq.n	800363e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800363a:	2b00      	cmp	r3, #0
 800363c:	d031      	beq.n	80036a2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fd1a 	bl	8004078 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b40      	cmp	r3, #64	; 0x40
 8003650:	d123      	bne.n	800369a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003660:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003666:	2b00      	cmp	r3, #0
 8003668:	d013      	beq.n	8003692 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800366e:	4a3f      	ldr	r2, [pc, #252]	; (800376c <HAL_UART_IRQHandler+0x2f0>)
 8003670:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd fd01 	bl	800107e <HAL_DMA_Abort_IT>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d017      	beq.n	80036b2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800368c:	4610      	mov	r0, r2
 800368e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	e00f      	b.n	80036b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f87a 	bl	800378c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	e00b      	b.n	80036b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f876 	bl	800378c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	e007      	b.n	80036b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f872 	bl	800378c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80036b0:	e056      	b.n	8003760 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b2:	bf00      	nop
    return;
 80036b4:	e054      	b.n	8003760 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00d      	beq.n	80036dc <HAL_UART_IRQHandler+0x260>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fedd 	bl	8004494 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036da:	e04a      	b.n	8003772 <HAL_UART_IRQHandler+0x2f6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d012      	beq.n	800370c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d104      	bne.n	80036fa <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <HAL_UART_IRQHandler+0x290>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d036      	beq.n	8003770 <HAL_UART_IRQHandler+0x2f4>
    {
      huart->TxISR(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
    }
    return;
 800370a:	e031      	b.n	8003770 <HAL_UART_IRQHandler+0x2f4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_UART_IRQHandler+0x2ac>
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fce2 	bl	80040ea <UART_EndTransmit_IT>
    return;
 8003726:	e024      	b.n	8003772 <HAL_UART_IRQHandler+0x2f6>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_UART_IRQHandler+0x2c8>
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 febd 	bl	80044bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003742:	e016      	b.n	8003772 <HAL_UART_IRQHandler+0x2f6>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d011      	beq.n	8003772 <HAL_UART_IRQHandler+0x2f6>
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	da0e      	bge.n	8003772 <HAL_UART_IRQHandler+0x2f6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fea7 	bl	80044a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800375a:	e00a      	b.n	8003772 <HAL_UART_IRQHandler+0x2f6>
      return;
 800375c:	bf00      	nop
 800375e:	e008      	b.n	8003772 <HAL_UART_IRQHandler+0x2f6>
    return;
 8003760:	bf00      	nop
 8003762:	e006      	b.n	8003772 <HAL_UART_IRQHandler+0x2f6>
 8003764:	10000001 	.word	0x10000001
 8003768:	04000120 	.word	0x04000120
 800376c:	080040bf 	.word	0x080040bf
    return;
 8003770:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8003772:	3720      	adds	r7, #32
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a4:	b08c      	sub	sp, #48	; 0x30
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	431a      	orrs	r2, r3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	431a      	orrs	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ce:	4313      	orrs	r3, r2
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4baa      	ldr	r3, [pc, #680]	; (8003a84 <UART_SetConfig+0x2e4>)
 80037da:	4013      	ands	r3, r2
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037e2:	430b      	orrs	r3, r1
 80037e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4aa0      	ldr	r2, [pc, #640]	; (8003a88 <UART_SetConfig+0x2e8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003812:	4313      	orrs	r3, r2
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003820:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800382a:	430b      	orrs	r3, r1
 800382c:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	f023 010f 	bic.w	r1, r3, #15
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a90      	ldr	r2, [pc, #576]	; (8003a8c <UART_SetConfig+0x2ec>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d126      	bne.n	800389c <UART_SetConfig+0xfc>
 800384e:	4b90      	ldr	r3, [pc, #576]	; (8003a90 <UART_SetConfig+0x2f0>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	2b03      	cmp	r3, #3
 800385a:	d81b      	bhi.n	8003894 <UART_SetConfig+0xf4>
 800385c:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <UART_SetConfig+0xc4>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003875 	.word	0x08003875
 8003868:	08003885 	.word	0x08003885
 800386c:	0800387d 	.word	0x0800387d
 8003870:	0800388d 	.word	0x0800388d
 8003874:	2301      	movs	r3, #1
 8003876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800387a:	e116      	b.n	8003aaa <UART_SetConfig+0x30a>
 800387c:	2302      	movs	r3, #2
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003882:	e112      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003884:	2304      	movs	r3, #4
 8003886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800388a:	e10e      	b.n	8003aaa <UART_SetConfig+0x30a>
 800388c:	2308      	movs	r3, #8
 800388e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003892:	e10a      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003894:	2310      	movs	r3, #16
 8003896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800389a:	e106      	b.n	8003aaa <UART_SetConfig+0x30a>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a7c      	ldr	r2, [pc, #496]	; (8003a94 <UART_SetConfig+0x2f4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d138      	bne.n	8003918 <UART_SetConfig+0x178>
 80038a6:	4b7a      	ldr	r3, [pc, #488]	; (8003a90 <UART_SetConfig+0x2f0>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ac:	f003 030c 	and.w	r3, r3, #12
 80038b0:	2b0c      	cmp	r3, #12
 80038b2:	d82d      	bhi.n	8003910 <UART_SetConfig+0x170>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <UART_SetConfig+0x11c>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038f1 	.word	0x080038f1
 80038c0:	08003911 	.word	0x08003911
 80038c4:	08003911 	.word	0x08003911
 80038c8:	08003911 	.word	0x08003911
 80038cc:	08003901 	.word	0x08003901
 80038d0:	08003911 	.word	0x08003911
 80038d4:	08003911 	.word	0x08003911
 80038d8:	08003911 	.word	0x08003911
 80038dc:	080038f9 	.word	0x080038f9
 80038e0:	08003911 	.word	0x08003911
 80038e4:	08003911 	.word	0x08003911
 80038e8:	08003911 	.word	0x08003911
 80038ec:	08003909 	.word	0x08003909
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f6:	e0d8      	b.n	8003aaa <UART_SetConfig+0x30a>
 80038f8:	2302      	movs	r3, #2
 80038fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038fe:	e0d4      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003900:	2304      	movs	r3, #4
 8003902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003906:	e0d0      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003908:	2308      	movs	r3, #8
 800390a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800390e:	e0cc      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003910:	2310      	movs	r3, #16
 8003912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003916:	e0c8      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a5e      	ldr	r2, [pc, #376]	; (8003a98 <UART_SetConfig+0x2f8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d125      	bne.n	800396e <UART_SetConfig+0x1ce>
 8003922:	4b5b      	ldr	r3, [pc, #364]	; (8003a90 <UART_SetConfig+0x2f0>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800392c:	2b30      	cmp	r3, #48	; 0x30
 800392e:	d016      	beq.n	800395e <UART_SetConfig+0x1be>
 8003930:	2b30      	cmp	r3, #48	; 0x30
 8003932:	d818      	bhi.n	8003966 <UART_SetConfig+0x1c6>
 8003934:	2b20      	cmp	r3, #32
 8003936:	d00a      	beq.n	800394e <UART_SetConfig+0x1ae>
 8003938:	2b20      	cmp	r3, #32
 800393a:	d814      	bhi.n	8003966 <UART_SetConfig+0x1c6>
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <UART_SetConfig+0x1a6>
 8003940:	2b10      	cmp	r3, #16
 8003942:	d008      	beq.n	8003956 <UART_SetConfig+0x1b6>
 8003944:	e00f      	b.n	8003966 <UART_SetConfig+0x1c6>
 8003946:	2300      	movs	r3, #0
 8003948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800394c:	e0ad      	b.n	8003aaa <UART_SetConfig+0x30a>
 800394e:	2302      	movs	r3, #2
 8003950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003954:	e0a9      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003956:	2304      	movs	r3, #4
 8003958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395c:	e0a5      	b.n	8003aaa <UART_SetConfig+0x30a>
 800395e:	2308      	movs	r3, #8
 8003960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003964:	e0a1      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003966:	2310      	movs	r3, #16
 8003968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800396c:	e09d      	b.n	8003aaa <UART_SetConfig+0x30a>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a4a      	ldr	r2, [pc, #296]	; (8003a9c <UART_SetConfig+0x2fc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d125      	bne.n	80039c4 <UART_SetConfig+0x224>
 8003978:	4b45      	ldr	r3, [pc, #276]	; (8003a90 <UART_SetConfig+0x2f0>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003982:	2bc0      	cmp	r3, #192	; 0xc0
 8003984:	d016      	beq.n	80039b4 <UART_SetConfig+0x214>
 8003986:	2bc0      	cmp	r3, #192	; 0xc0
 8003988:	d818      	bhi.n	80039bc <UART_SetConfig+0x21c>
 800398a:	2b80      	cmp	r3, #128	; 0x80
 800398c:	d00a      	beq.n	80039a4 <UART_SetConfig+0x204>
 800398e:	2b80      	cmp	r3, #128	; 0x80
 8003990:	d814      	bhi.n	80039bc <UART_SetConfig+0x21c>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <UART_SetConfig+0x1fc>
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d008      	beq.n	80039ac <UART_SetConfig+0x20c>
 800399a:	e00f      	b.n	80039bc <UART_SetConfig+0x21c>
 800399c:	2300      	movs	r3, #0
 800399e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a2:	e082      	b.n	8003aaa <UART_SetConfig+0x30a>
 80039a4:	2302      	movs	r3, #2
 80039a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039aa:	e07e      	b.n	8003aaa <UART_SetConfig+0x30a>
 80039ac:	2304      	movs	r3, #4
 80039ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b2:	e07a      	b.n	8003aaa <UART_SetConfig+0x30a>
 80039b4:	2308      	movs	r3, #8
 80039b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ba:	e076      	b.n	8003aaa <UART_SetConfig+0x30a>
 80039bc:	2310      	movs	r3, #16
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c2:	e072      	b.n	8003aaa <UART_SetConfig+0x30a>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a35      	ldr	r2, [pc, #212]	; (8003aa0 <UART_SetConfig+0x300>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d12a      	bne.n	8003a24 <UART_SetConfig+0x284>
 80039ce:	4b30      	ldr	r3, [pc, #192]	; (8003a90 <UART_SetConfig+0x2f0>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039dc:	d01a      	beq.n	8003a14 <UART_SetConfig+0x274>
 80039de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039e2:	d81b      	bhi.n	8003a1c <UART_SetConfig+0x27c>
 80039e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e8:	d00c      	beq.n	8003a04 <UART_SetConfig+0x264>
 80039ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ee:	d815      	bhi.n	8003a1c <UART_SetConfig+0x27c>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <UART_SetConfig+0x25c>
 80039f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f8:	d008      	beq.n	8003a0c <UART_SetConfig+0x26c>
 80039fa:	e00f      	b.n	8003a1c <UART_SetConfig+0x27c>
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a02:	e052      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003a04:	2302      	movs	r3, #2
 8003a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a0a:	e04e      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a12:	e04a      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003a14:	2308      	movs	r3, #8
 8003a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a1a:	e046      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a22:	e042      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <UART_SetConfig+0x2e8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d13a      	bne.n	8003aa4 <UART_SetConfig+0x304>
 8003a2e:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <UART_SetConfig+0x2f0>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a3c:	d01a      	beq.n	8003a74 <UART_SetConfig+0x2d4>
 8003a3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a42:	d81b      	bhi.n	8003a7c <UART_SetConfig+0x2dc>
 8003a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a48:	d00c      	beq.n	8003a64 <UART_SetConfig+0x2c4>
 8003a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4e:	d815      	bhi.n	8003a7c <UART_SetConfig+0x2dc>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <UART_SetConfig+0x2bc>
 8003a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a58:	d008      	beq.n	8003a6c <UART_SetConfig+0x2cc>
 8003a5a:	e00f      	b.n	8003a7c <UART_SetConfig+0x2dc>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a62:	e022      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003a64:	2302      	movs	r3, #2
 8003a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a6a:	e01e      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a72:	e01a      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003a74:	2308      	movs	r3, #8
 8003a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7a:	e016      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a82:	e012      	b.n	8003aaa <UART_SetConfig+0x30a>
 8003a84:	cfff69f3 	.word	0xcfff69f3
 8003a88:	40008000 	.word	0x40008000
 8003a8c:	40013800 	.word	0x40013800
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40004400 	.word	0x40004400
 8003a98:	40004800 	.word	0x40004800
 8003a9c:	40004c00 	.word	0x40004c00
 8003aa0:	40005000 	.word	0x40005000
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4aae      	ldr	r2, [pc, #696]	; (8003d68 <UART_SetConfig+0x5c8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	f040 8097 	bne.w	8003be4 <UART_SetConfig+0x444>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ab6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d823      	bhi.n	8003b06 <UART_SetConfig+0x366>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <UART_SetConfig+0x324>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ae9 	.word	0x08003ae9
 8003ac8:	08003b07 	.word	0x08003b07
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003b07 	.word	0x08003b07
 8003ad4:	08003af7 	.word	0x08003af7
 8003ad8:	08003b07 	.word	0x08003b07
 8003adc:	08003b07 	.word	0x08003b07
 8003ae0:	08003b07 	.word	0x08003b07
 8003ae4:	08003aff 	.word	0x08003aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae8:	f7fe fd02 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 8003aec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003aee:	e010      	b.n	8003b12 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af0:	4b9e      	ldr	r3, [pc, #632]	; (8003d6c <UART_SetConfig+0x5cc>)
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003af4:	e00d      	b.n	8003b12 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af6:	f7fe fc63 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8003afa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003afc:	e009      	b.n	8003b12 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b04:	e005      	b.n	8003b12 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8130 	beq.w	8003d7a <UART_SetConfig+0x5da>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	4a94      	ldr	r2, [pc, #592]	; (8003d70 <UART_SetConfig+0x5d0>)
 8003b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b24:	461a      	mov	r2, r3
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	4413      	add	r3, r2
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d305      	bcc.n	8003b4a <UART_SetConfig+0x3aa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d903      	bls.n	8003b52 <UART_SetConfig+0x3b2>
      {
        ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b50:	e113      	b.n	8003d7a <UART_SetConfig+0x5da>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	2200      	movs	r2, #0
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	60fa      	str	r2, [r7, #12]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	4a84      	ldr	r2, [pc, #528]	; (8003d70 <UART_SetConfig+0x5d0>)
 8003b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2200      	movs	r2, #0
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b74:	f7fc fb4a 	bl	800020c <__aeabi_uldivmod>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	020b      	lsls	r3, r1, #8
 8003b8a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b8e:	0202      	lsls	r2, r0, #8
 8003b90:	6979      	ldr	r1, [r7, #20]
 8003b92:	6849      	ldr	r1, [r1, #4]
 8003b94:	0849      	lsrs	r1, r1, #1
 8003b96:	2000      	movs	r0, #0
 8003b98:	460c      	mov	r4, r1
 8003b9a:	4605      	mov	r5, r0
 8003b9c:	eb12 0804 	adds.w	r8, r2, r4
 8003ba0:	eb43 0905 	adc.w	r9, r3, r5
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	469a      	mov	sl, r3
 8003bac:	4693      	mov	fp, r2
 8003bae:	4652      	mov	r2, sl
 8003bb0:	465b      	mov	r3, fp
 8003bb2:	4640      	mov	r0, r8
 8003bb4:	4649      	mov	r1, r9
 8003bb6:	f7fc fb29 	bl	800020c <__aeabi_uldivmod>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc8:	d308      	bcc.n	8003bdc <UART_SetConfig+0x43c>
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd0:	d204      	bcs.n	8003bdc <UART_SetConfig+0x43c>
        {
          huart->Instance->BRR = usartdiv;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6a3a      	ldr	r2, [r7, #32]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	e0ce      	b.n	8003d7a <UART_SetConfig+0x5da>
        }
        else
        {
          ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003be2:	e0ca      	b.n	8003d7a <UART_SetConfig+0x5da>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bec:	d167      	bne.n	8003cbe <UART_SetConfig+0x51e>
  {
    switch (clocksource)
 8003bee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d827      	bhi.n	8003c46 <UART_SetConfig+0x4a6>
 8003bf6:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <UART_SetConfig+0x45c>)
 8003bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfc:	08003c21 	.word	0x08003c21
 8003c00:	08003c29 	.word	0x08003c29
 8003c04:	08003c31 	.word	0x08003c31
 8003c08:	08003c47 	.word	0x08003c47
 8003c0c:	08003c37 	.word	0x08003c37
 8003c10:	08003c47 	.word	0x08003c47
 8003c14:	08003c47 	.word	0x08003c47
 8003c18:	08003c47 	.word	0x08003c47
 8003c1c:	08003c3f 	.word	0x08003c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c20:	f7fe fc66 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 8003c24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c26:	e014      	b.n	8003c52 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c28:	f7fe fc78 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 8003c2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c2e:	e010      	b.n	8003c52 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c30:	4b4e      	ldr	r3, [pc, #312]	; (8003d6c <UART_SetConfig+0x5cc>)
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c34:	e00d      	b.n	8003c52 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c36:	f7fe fbc3 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8003c3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c3c:	e009      	b.n	8003c52 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c44:	e005      	b.n	8003c52 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8090 	beq.w	8003d7a <UART_SetConfig+0x5da>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	4a44      	ldr	r2, [pc, #272]	; (8003d70 <UART_SetConfig+0x5d0>)
 8003c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c64:	461a      	mov	r2, r3
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c6c:	005a      	lsls	r2, r3, #1
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	441a      	add	r2, r3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	2b0f      	cmp	r3, #15
 8003c86:	d916      	bls.n	8003cb6 <UART_SetConfig+0x516>
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8e:	d212      	bcs.n	8003cb6 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f023 030f 	bic.w	r3, r3, #15
 8003c98:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	8bfb      	ldrh	r3, [r7, #30]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	8bfa      	ldrh	r2, [r7, #30]
 8003cb2:	60da      	str	r2, [r3, #12]
 8003cb4:	e061      	b.n	8003d7a <UART_SetConfig+0x5da>
      }
      else
      {
        ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003cbc:	e05d      	b.n	8003d7a <UART_SetConfig+0x5da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d827      	bhi.n	8003d16 <UART_SetConfig+0x576>
 8003cc6:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <UART_SetConfig+0x52c>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003cf1 	.word	0x08003cf1
 8003cd0:	08003cf9 	.word	0x08003cf9
 8003cd4:	08003d01 	.word	0x08003d01
 8003cd8:	08003d17 	.word	0x08003d17
 8003cdc:	08003d07 	.word	0x08003d07
 8003ce0:	08003d17 	.word	0x08003d17
 8003ce4:	08003d17 	.word	0x08003d17
 8003ce8:	08003d17 	.word	0x08003d17
 8003cec:	08003d0f 	.word	0x08003d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf0:	f7fe fbfe 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 8003cf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cf6:	e014      	b.n	8003d22 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cf8:	f7fe fc10 	bl	800251c <HAL_RCC_GetPCLK2Freq>
 8003cfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cfe:	e010      	b.n	8003d22 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d00:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <UART_SetConfig+0x5cc>)
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d04:	e00d      	b.n	8003d22 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d06:	f7fe fb5b 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8003d0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d0c:	e009      	b.n	8003d22 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d14:	e005      	b.n	8003d22 <UART_SetConfig+0x582>
      default:
        pclk = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d20:	bf00      	nop
    }

    if (pclk != 0U)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d028      	beq.n	8003d7a <UART_SetConfig+0x5da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <UART_SetConfig+0x5d0>)
 8003d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d32:	461a      	mov	r2, r3
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	085b      	lsrs	r3, r3, #1
 8003d40:	441a      	add	r2, r3
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	2b0f      	cmp	r3, #15
 8003d52:	d90f      	bls.n	8003d74 <UART_SetConfig+0x5d4>
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5a:	d20b      	bcs.n	8003d74 <UART_SetConfig+0x5d4>
      {
        huart->Instance->BRR = usartdiv;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	60da      	str	r2, [r3, #12]
 8003d64:	e009      	b.n	8003d7a <UART_SetConfig+0x5da>
 8003d66:	bf00      	nop
 8003d68:	40008000 	.word	0x40008000
 8003d6c:	00f42400 	.word	0x00f42400
 8003d70:	08004cfc 	.word	0x08004cfc
      }
      else
      {
        ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2200      	movs	r2, #0
 8003d94:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003d96:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3730      	adds	r7, #48	; 0x30
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01a      	beq.n	8003eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea2:	d10a      	bne.n	8003eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]
  }
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ef8:	f7fc ff80 	bl	8000dfc <HAL_GetTick>
 8003efc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d10e      	bne.n	8003f2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f82c 	bl	8003f78 <UART_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e022      	b.n	8003f70 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d10e      	bne.n	8003f56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f816 	bl	8003f78 <UART_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e00c      	b.n	8003f70 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	4613      	mov	r3, r2
 8003f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f88:	e062      	b.n	8004050 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d05e      	beq.n	8004050 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f92:	f7fc ff33 	bl	8000dfc <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d302      	bcc.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d11d      	bne.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fb6:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e045      	b.n	8004070 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d02e      	beq.n	8004050 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004000:	d126      	bne.n	8004050 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800400a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800401a:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e00f      	b.n	8004070 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4013      	ands	r3, r2
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	429a      	cmp	r2, r3
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	429a      	cmp	r2, r3
 800406c:	d08d      	beq.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800408e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409e:	f023 0301 	bic.w	r3, r3, #1
 80040a2:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f7ff fb55 	bl	800378c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004100:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff fb31 	bl	8003778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800412c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004134:	2b22      	cmp	r3, #34	; 0x22
 8004136:	d13b      	bne.n	80041b0 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800413e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004140:	89bb      	ldrh	r3, [r7, #12]
 8004142:	b2d9      	uxtb	r1, r3
 8004144:	89fb      	ldrh	r3, [r7, #14]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	400a      	ands	r2, r1
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d124      	bne.n	80041c4 <UART_RxISR_8BIT+0xa6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004188:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7fc fbf1 	bl	8000990 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041ae:	e009      	b.n	80041c4 <UART_RxISR_8BIT+0xa6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	8b1b      	ldrh	r3, [r3, #24]
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0208 	orr.w	r2, r2, #8
 80041c0:	b292      	uxth	r2, r2
 80041c2:	831a      	strh	r2, [r3, #24]
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80041da:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e2:	2b22      	cmp	r3, #34	; 0x22
 80041e4:	d13b      	bne.n	800425e <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80041ec:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80041f4:	89ba      	ldrh	r2, [r7, #12]
 80041f6:	89fb      	ldrh	r3, [r7, #14]
 80041f8:	4013      	ands	r3, r2
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004204:	1c9a      	adds	r2, r3, #2
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004222:	b29b      	uxth	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d124      	bne.n	8004272 <UART_RxISR_16BIT+0xa6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004236:	601a      	str	r2, [r3, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc fb9a 	bl	8000990 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800425c:	e009      	b.n	8004272 <UART_RxISR_16BIT+0xa6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	8b1b      	ldrh	r3, [r3, #24]
 8004264:	b29a      	uxth	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0208 	orr.w	r2, r2, #8
 800426e:	b292      	uxth	r2, r2
 8004270:	831a      	strh	r2, [r3, #24]
}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800428a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004292:	2b22      	cmp	r3, #34	; 0x22
 8004294:	d168      	bne.n	8004368 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800429c:	81fb      	strh	r3, [r7, #14]
 800429e:	e03f      	b.n	8004320 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042a6:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042a8:	893b      	ldrh	r3, [r7, #8]
 80042aa:	b2d9      	uxtb	r1, r3
 80042ac:	89bb      	ldrh	r3, [r7, #12]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b4:	400a      	ands	r2, r1
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d11b      	bne.n	800431a <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7fc fb3b 	bl	8000990 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800431a:	89fb      	ldrh	r3, [r7, #14]
 800431c:	3b01      	subs	r3, #1
 800431e:	81fb      	strh	r3, [r7, #14]
 8004320:	89fb      	ldrh	r3, [r7, #14]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1bc      	bne.n	80042a0 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800432c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800432e:	897b      	ldrh	r3, [r7, #10]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d023      	beq.n	800437c <UART_RxISR_8BIT_FIFOEN+0x100>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800433a:	897a      	ldrh	r2, [r7, #10]
 800433c:	429a      	cmp	r2, r3
 800433e:	d21d      	bcs.n	800437c <UART_RxISR_8BIT_FIFOEN+0x100>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800434e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a0c      	ldr	r2, [pc, #48]	; (8004384 <UART_RxISR_8BIT_FIFOEN+0x108>)
 8004354:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0220 	orr.w	r2, r2, #32
 8004364:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004366:	e009      	b.n	800437c <UART_RxISR_8BIT_FIFOEN+0x100>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	8b1b      	ldrh	r3, [r3, #24]
 800436e:	b29a      	uxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0208 	orr.w	r2, r2, #8
 8004378:	b292      	uxth	r2, r2
 800437a:	831a      	strh	r2, [r3, #24]
}
 800437c:	bf00      	nop
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	0800411f 	.word	0x0800411f

08004388 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004396:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439e:	2b22      	cmp	r3, #34	; 0x22
 80043a0:	d168      	bne.n	8004474 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80043a8:	82fb      	strh	r3, [r7, #22]
 80043aa:	e03f      	b.n	800442c <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80043b2:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80043ba:	8a3a      	ldrh	r2, [r7, #16]
 80043bc:	8abb      	ldrh	r3, [r7, #20]
 80043be:	4013      	ands	r3, r2
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	1c9a      	adds	r2, r3, #2
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11b      	bne.n	8004426 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043fc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800440c:	f023 0301 	bic.w	r3, r3, #1
 8004410:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2220      	movs	r2, #32
 8004416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fc fab5 	bl	8000990 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004426:	8afb      	ldrh	r3, [r7, #22]
 8004428:	3b01      	subs	r3, #1
 800442a:	82fb      	strh	r3, [r7, #22]
 800442c:	8afb      	ldrh	r3, [r7, #22]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1bc      	bne.n	80043ac <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004438:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800443a:	8a7b      	ldrh	r3, [r7, #18]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d023      	beq.n	8004488 <UART_RxISR_16BIT_FIFOEN+0x100>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004446:	8a7a      	ldrh	r2, [r7, #18]
 8004448:	429a      	cmp	r2, r3
 800444a:	d21d      	bcs.n	8004488 <UART_RxISR_16BIT_FIFOEN+0x100>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800445a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a0c      	ldr	r2, [pc, #48]	; (8004490 <UART_RxISR_16BIT_FIFOEN+0x108>)
 8004460:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0220 	orr.w	r2, r2, #32
 8004470:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004472:	e009      	b.n	8004488 <UART_RxISR_16BIT_FIFOEN+0x100>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	8b1b      	ldrh	r3, [r3, #24]
 800447a:	b29a      	uxth	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0208 	orr.w	r2, r2, #8
 8004484:	b292      	uxth	r2, r2
 8004486:	831a      	strh	r2, [r3, #24]
}
 8004488:	bf00      	nop
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	080041cd 	.word	0x080041cd

08004494 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e027      	b.n	8004536 <HAL_UARTEx_DisableFifoMode+0x66>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2224      	movs	r2, #36	; 0x24
 80044f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0201 	bic.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004514:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004556:	2302      	movs	r3, #2
 8004558:	e02d      	b.n	80045b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2224      	movs	r2, #36	; 0x24
 8004566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0201 	bic.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f850 	bl	800463c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e02d      	b.n	8004632 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2224      	movs	r2, #36	; 0x24
 80045e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f812 	bl	800463c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004644:	4a2d      	ldr	r2, [pc, #180]	; (80046fc <UARTEx_SetNbDataToProcess+0xc0>)
 8004646:	f107 0314 	add.w	r3, r7, #20
 800464a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800464e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004652:	4a2b      	ldr	r2, [pc, #172]	; (8004700 <UARTEx_SetNbDataToProcess+0xc4>)
 8004654:	f107 030c 	add.w	r3, r7, #12
 8004658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800465c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004664:	2b00      	cmp	r3, #0
 8004666:	d108      	bne.n	800467a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004678:	e039      	b.n	80046ee <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800467a:	2308      	movs	r3, #8
 800467c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800467e:	2308      	movs	r3, #8
 8004680:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	0e5b      	lsrs	r3, r3, #25
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	0f5b      	lsrs	r3, r3, #29
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80046a2:	7fbb      	ldrb	r3, [r7, #30]
 80046a4:	7f3a      	ldrb	r2, [r7, #28]
 80046a6:	3220      	adds	r2, #32
 80046a8:	443a      	add	r2, r7
 80046aa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	7f3a      	ldrb	r2, [r7, #28]
 80046b4:	3220      	adds	r2, #32
 80046b6:	443a      	add	r2, r7
 80046b8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80046bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80046c8:	7ffb      	ldrb	r3, [r7, #31]
 80046ca:	7f7a      	ldrb	r2, [r7, #29]
 80046cc:	3220      	adds	r2, #32
 80046ce:	443a      	add	r2, r7
 80046d0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80046d4:	fb02 f303 	mul.w	r3, r2, r3
 80046d8:	7f7a      	ldrb	r2, [r7, #29]
 80046da:	3220      	adds	r2, #32
 80046dc:	443a      	add	r2, r7
 80046de:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80046e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80046ee:	bf00      	nop
 80046f0:	3724      	adds	r7, #36	; 0x24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	08004ca4 	.word	0x08004ca4
 8004700:	08004cac 	.word	0x08004cac

08004704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004704:	b084      	sub	sp, #16
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	f107 001c 	add.w	r0, r7, #28
 8004712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	2b01      	cmp	r3, #1
 800471a:	d122      	bne.n	8004762 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d105      	bne.n	8004756 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fa30 	bl	8004bbc <USB_CoreReset>
 800475c:	4603      	mov	r3, r0
 800475e:	73fb      	strb	r3, [r7, #15]
 8004760:	e01a      	b.n	8004798 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa24 	bl	8004bbc <USB_CoreReset>
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	639a      	str	r2, [r3, #56]	; 0x38
 800478a:	e005      	b.n	8004798 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a4:	b004      	add	sp, #16
 80047a6:	4770      	bx	lr

080047a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f023 0201 	bic.w	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d106      	bne.n	80047f6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	60da      	str	r2, [r3, #12]
 80047f4:	e00b      	b.n	800480e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d106      	bne.n	800480a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]
 8004808:	e001      	b.n	800480e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e003      	b.n	8004816 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800480e:	2032      	movs	r0, #50	; 0x32
 8004810:	f7fc fb00 	bl	8000e14 <HAL_Delay>

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004820:	b084      	sub	sp, #16
 8004822:	b580      	push	{r7, lr}
 8004824:	b086      	sub	sp, #24
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800482e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800483a:	2300      	movs	r3, #0
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	e009      	b.n	8004854 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	3340      	adds	r3, #64	; 0x40
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	2200      	movs	r2, #0
 800484c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	3301      	adds	r3, #1
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b0e      	cmp	r3, #14
 8004858:	d9f2      	bls.n	8004840 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800485a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d11c      	bne.n	800489a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800486e:	f043 0302 	orr.w	r3, r3, #2
 8004872:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	e005      	b.n	80048a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048ac:	461a      	mov	r2, r3
 80048ae:	2300      	movs	r3, #0
 80048b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b8:	4619      	mov	r1, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c0:	461a      	mov	r2, r3
 80048c2:	680b      	ldr	r3, [r1, #0]
 80048c4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048c6:	2103      	movs	r1, #3
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f93d 	bl	8004b48 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048ce:	2110      	movs	r1, #16
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f8f1 	bl	8004ab8 <USB_FlushTxFifo>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f90f 	bl	8004b04 <USB_FlushRxFifo>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f6:	461a      	mov	r2, r3
 80048f8:	2300      	movs	r3, #0
 80048fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	461a      	mov	r2, r3
 8004904:	2300      	movs	r3, #0
 8004906:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490e:	461a      	mov	r2, r3
 8004910:	2300      	movs	r3, #0
 8004912:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004914:	2300      	movs	r3, #0
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	e043      	b.n	80049a2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800492c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004930:	d118      	bne.n	8004964 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004944:	461a      	mov	r2, r3
 8004946:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	e013      	b.n	8004976 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495a:	461a      	mov	r2, r3
 800495c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	e008      	b.n	8004976 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004970:	461a      	mov	r2, r3
 8004972:	2300      	movs	r3, #0
 8004974:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004982:	461a      	mov	r2, r3
 8004984:	2300      	movs	r3, #0
 8004986:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	461a      	mov	r2, r3
 8004996:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800499a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	3301      	adds	r3, #1
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d3b7      	bcc.n	800491a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	e043      	b.n	8004a38 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049c6:	d118      	bne.n	80049fa <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049da:	461a      	mov	r2, r3
 80049dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e013      	b.n	8004a0c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f0:	461a      	mov	r2, r3
 80049f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	e008      	b.n	8004a0c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a06:	461a      	mov	r2, r3
 8004a08:	2300      	movs	r3, #0
 8004a0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	3301      	adds	r3, #1
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d3b7      	bcc.n	80049b0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f043 0210 	orr.w	r2, r3, #16
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <USB_DevInit+0x294>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f043 0208 	orr.w	r2, r3, #8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d107      	bne.n	8004aa2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a9a:	f043 0304 	orr.w	r3, r3, #4
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aae:	b004      	add	sp, #16
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	803c3800 	.word	0x803c3800

08004ab8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	019b      	lsls	r3, r3, #6
 8004aca:	f043 0220 	orr.w	r2, r3, #32
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <USB_FlushTxFifo+0x48>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d901      	bls.n	8004ae4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e006      	b.n	8004af2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d0f0      	beq.n	8004ad2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	00030d40 	.word	0x00030d40

08004b04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2210      	movs	r2, #16
 8004b14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a09      	ldr	r2, [pc, #36]	; (8004b44 <USB_FlushRxFifo+0x40>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d901      	bls.n	8004b28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e006      	b.n	8004b36 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b10      	cmp	r3, #16
 8004b32:	d0f0      	beq.n	8004b16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	00030d40 	.word	0x00030d40

08004b48 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b94:	f023 0303 	bic.w	r3, r3, #3
 8004b98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ba8:	f043 0302 	orr.w	r3, r3, #2
 8004bac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <USB_CoreReset+0x64>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d901      	bls.n	8004bda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e01b      	b.n	8004c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	daf2      	bge.n	8004bc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f043 0201 	orr.w	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <USB_CoreReset+0x64>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d901      	bls.n	8004c04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e006      	b.n	8004c12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d0f0      	beq.n	8004bf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	00030d40 	.word	0x00030d40

08004c24 <__libc_init_array>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	4d0d      	ldr	r5, [pc, #52]	; (8004c5c <__libc_init_array+0x38>)
 8004c28:	4c0d      	ldr	r4, [pc, #52]	; (8004c60 <__libc_init_array+0x3c>)
 8004c2a:	1b64      	subs	r4, r4, r5
 8004c2c:	10a4      	asrs	r4, r4, #2
 8004c2e:	2600      	movs	r6, #0
 8004c30:	42a6      	cmp	r6, r4
 8004c32:	d109      	bne.n	8004c48 <__libc_init_array+0x24>
 8004c34:	4d0b      	ldr	r5, [pc, #44]	; (8004c64 <__libc_init_array+0x40>)
 8004c36:	4c0c      	ldr	r4, [pc, #48]	; (8004c68 <__libc_init_array+0x44>)
 8004c38:	f000 f820 	bl	8004c7c <_init>
 8004c3c:	1b64      	subs	r4, r4, r5
 8004c3e:	10a4      	asrs	r4, r4, #2
 8004c40:	2600      	movs	r6, #0
 8004c42:	42a6      	cmp	r6, r4
 8004c44:	d105      	bne.n	8004c52 <__libc_init_array+0x2e>
 8004c46:	bd70      	pop	{r4, r5, r6, pc}
 8004c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c4c:	4798      	blx	r3
 8004c4e:	3601      	adds	r6, #1
 8004c50:	e7ee      	b.n	8004c30 <__libc_init_array+0xc>
 8004c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c56:	4798      	blx	r3
 8004c58:	3601      	adds	r6, #1
 8004c5a:	e7f2      	b.n	8004c42 <__libc_init_array+0x1e>
 8004c5c:	08004d1c 	.word	0x08004d1c
 8004c60:	08004d1c 	.word	0x08004d1c
 8004c64:	08004d1c 	.word	0x08004d1c
 8004c68:	08004d20 	.word	0x08004d20

08004c6c <memset>:
 8004c6c:	4402      	add	r2, r0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d100      	bne.n	8004c76 <memset+0xa>
 8004c74:	4770      	bx	lr
 8004c76:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7a:	e7f9      	b.n	8004c70 <memset+0x4>

08004c7c <_init>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr

08004c88 <_fini>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	bf00      	nop
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr
